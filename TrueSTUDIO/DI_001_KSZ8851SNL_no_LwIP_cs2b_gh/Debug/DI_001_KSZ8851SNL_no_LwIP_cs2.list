
DI_001_KSZ8851SNL_no_LwIP_cs2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013064  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d50  08013304  08013304  00023304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015054  08015054  00025054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801505c  0801505c  0002505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015060  08015060  00025060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  08015064  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c44  24000090  080150f4  00030090  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  24004cd4  080150f4  00034cd4  2**0
                  ALLOC
  9 .micrel       00001000  30000000  080150f4  00040000  2**0
                  ALLOC
 10 .dma_buffer   000005f8  30001000  080150f4  00031000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .lwip_sec     000403e8  300015f8  080156ec  000315f8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000315f8  2**0
                  CONTENTS, READONLY
 13 .debug_line   000262ff  00000000  00000000  00031626  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0009dc66  00000000  00000000  00057925  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00010e9d  00000000  00000000  000f558b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000034c8  00000000  00000000  00106428  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000048a8  00000000  00000000  001098f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0002e1ad  00000000  00000000  0010e198  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012f7b  00000000  00000000  0013c345  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007c  00000000  00000000  0014f2c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a60c  00000000  00000000  0014f33c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080132ec 	.word	0x080132ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	080132ec 	.word	0x080132ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b97a 	b.w	800069c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	468c      	mov	ip, r1
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	9e08      	ldr	r6, [sp, #32]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d151      	bne.n	8000474 <__udivmoddi4+0xb4>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d96d      	bls.n	80004b2 <__udivmoddi4+0xf2>
 80003d6:	fab2 fe82 	clz	lr, r2
 80003da:	f1be 0f00 	cmp.w	lr, #0
 80003de:	d00b      	beq.n	80003f8 <__udivmoddi4+0x38>
 80003e0:	f1ce 0c20 	rsb	ip, lr, #32
 80003e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80003f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80003f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80003fc:	0c25      	lsrs	r5, r4, #16
 80003fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000402:	fa1f f987 	uxth.w	r9, r7
 8000406:	fb0a cc18 	mls	ip, sl, r8, ip
 800040a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800040e:	fb08 f309 	mul.w	r3, r8, r9
 8000412:	42ab      	cmp	r3, r5
 8000414:	d90a      	bls.n	800042c <__udivmoddi4+0x6c>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f108 32ff 	add.w	r2, r8, #4294967295
 800041c:	f080 8123 	bcs.w	8000666 <__udivmoddi4+0x2a6>
 8000420:	42ab      	cmp	r3, r5
 8000422:	f240 8120 	bls.w	8000666 <__udivmoddi4+0x2a6>
 8000426:	f1a8 0802 	sub.w	r8, r8, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aed      	subs	r5, r5, r3
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb5 f0fa 	udiv	r0, r5, sl
 8000434:	fb0a 5510 	mls	r5, sl, r0, r5
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb00 f909 	mul.w	r9, r0, r9
 8000440:	45a1      	cmp	r9, r4
 8000442:	d909      	bls.n	8000458 <__udivmoddi4+0x98>
 8000444:	19e4      	adds	r4, r4, r7
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	f080 810a 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800044e:	45a1      	cmp	r9, r4
 8000450:	f240 8107 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000454:	3802      	subs	r0, #2
 8000456:	443c      	add	r4, r7
 8000458:	eba4 0409 	sub.w	r4, r4, r9
 800045c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000460:	2100      	movs	r1, #0
 8000462:	2e00      	cmp	r6, #0
 8000464:	d061      	beq.n	800052a <__udivmoddi4+0x16a>
 8000466:	fa24 f40e 	lsr.w	r4, r4, lr
 800046a:	2300      	movs	r3, #0
 800046c:	6034      	str	r4, [r6, #0]
 800046e:	6073      	str	r3, [r6, #4]
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	428b      	cmp	r3, r1
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0xc8>
 8000478:	2e00      	cmp	r6, #0
 800047a:	d054      	beq.n	8000526 <__udivmoddi4+0x166>
 800047c:	2100      	movs	r1, #0
 800047e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000482:	4608      	mov	r0, r1
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	fab3 f183 	clz	r1, r3
 800048c:	2900      	cmp	r1, #0
 800048e:	f040 808e 	bne.w	80005ae <__udivmoddi4+0x1ee>
 8000492:	42ab      	cmp	r3, r5
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xdc>
 8000496:	4282      	cmp	r2, r0
 8000498:	f200 80fa 	bhi.w	8000690 <__udivmoddi4+0x2d0>
 800049c:	1a84      	subs	r4, r0, r2
 800049e:	eb65 0503 	sbc.w	r5, r5, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	46ac      	mov	ip, r5
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d03f      	beq.n	800052a <__udivmoddi4+0x16a>
 80004aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	b912      	cbnz	r2, 80004ba <__udivmoddi4+0xfa>
 80004b4:	2701      	movs	r7, #1
 80004b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80004ba:	fab7 fe87 	clz	lr, r7
 80004be:	f1be 0f00 	cmp.w	lr, #0
 80004c2:	d134      	bne.n	800052e <__udivmoddi4+0x16e>
 80004c4:	1beb      	subs	r3, r5, r7
 80004c6:	0c3a      	lsrs	r2, r7, #16
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	2101      	movs	r1, #1
 80004ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80004d2:	0c25      	lsrs	r5, r4, #16
 80004d4:	fb02 3318 	mls	r3, r2, r8, r3
 80004d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004dc:	fb0c f308 	mul.w	r3, ip, r8
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x134>
 80004e4:	19ed      	adds	r5, r5, r7
 80004e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x132>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	f200 80d1 	bhi.w	8000694 <__udivmoddi4+0x2d4>
 80004f2:	4680      	mov	r8, r0
 80004f4:	1aed      	subs	r5, r5, r3
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80004fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000500:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000504:	fb0c fc00 	mul.w	ip, ip, r0
 8000508:	45a4      	cmp	ip, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x15c>
 800050c:	19e4      	adds	r4, r4, r7
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x15a>
 8000514:	45a4      	cmp	ip, r4
 8000516:	f200 80b8 	bhi.w	800068a <__udivmoddi4+0x2ca>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 040c 	sub.w	r4, r4, ip
 8000520:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000524:	e79d      	b.n	8000462 <__udivmoddi4+0xa2>
 8000526:	4631      	mov	r1, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	f1ce 0420 	rsb	r4, lr, #32
 8000532:	fa05 f30e 	lsl.w	r3, r5, lr
 8000536:	fa07 f70e 	lsl.w	r7, r7, lr
 800053a:	fa20 f804 	lsr.w	r8, r0, r4
 800053e:	0c3a      	lsrs	r2, r7, #16
 8000540:	fa25 f404 	lsr.w	r4, r5, r4
 8000544:	ea48 0803 	orr.w	r8, r8, r3
 8000548:	fbb4 f1f2 	udiv	r1, r4, r2
 800054c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000550:	fb02 4411 	mls	r4, r2, r1, r4
 8000554:	fa1f fc87 	uxth.w	ip, r7
 8000558:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800055c:	fb01 f30c 	mul.w	r3, r1, ip
 8000560:	42ab      	cmp	r3, r5
 8000562:	fa00 f40e 	lsl.w	r4, r0, lr
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x1bc>
 8000568:	19ed      	adds	r5, r5, r7
 800056a:	f101 30ff 	add.w	r0, r1, #4294967295
 800056e:	f080 808a 	bcs.w	8000686 <__udivmoddi4+0x2c6>
 8000572:	42ab      	cmp	r3, r5
 8000574:	f240 8087 	bls.w	8000686 <__udivmoddi4+0x2c6>
 8000578:	3902      	subs	r1, #2
 800057a:	443d      	add	r5, r7
 800057c:	1aeb      	subs	r3, r5, r3
 800057e:	fa1f f588 	uxth.w	r5, r8
 8000582:	fbb3 f0f2 	udiv	r0, r3, r2
 8000586:	fb02 3310 	mls	r3, r2, r0, r3
 800058a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800058e:	fb00 f30c 	mul.w	r3, r0, ip
 8000592:	42ab      	cmp	r3, r5
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x1e6>
 8000596:	19ed      	adds	r5, r5, r7
 8000598:	f100 38ff 	add.w	r8, r0, #4294967295
 800059c:	d26f      	bcs.n	800067e <__udivmoddi4+0x2be>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d96d      	bls.n	800067e <__udivmoddi4+0x2be>
 80005a2:	3802      	subs	r0, #2
 80005a4:	443d      	add	r5, r7
 80005a6:	1aeb      	subs	r3, r5, r3
 80005a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ac:	e78f      	b.n	80004ce <__udivmoddi4+0x10e>
 80005ae:	f1c1 0720 	rsb	r7, r1, #32
 80005b2:	fa22 f807 	lsr.w	r8, r2, r7
 80005b6:	408b      	lsls	r3, r1
 80005b8:	fa05 f401 	lsl.w	r4, r5, r1
 80005bc:	ea48 0303 	orr.w	r3, r8, r3
 80005c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80005c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80005c8:	40fd      	lsrs	r5, r7
 80005ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80005ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80005d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80005d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80005da:	fa1f f883 	uxth.w	r8, r3
 80005de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80005e2:	fb09 f408 	mul.w	r4, r9, r8
 80005e6:	42ac      	cmp	r4, r5
 80005e8:	fa02 f201 	lsl.w	r2, r2, r1
 80005ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0x244>
 80005f2:	18ed      	adds	r5, r5, r3
 80005f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f8:	d243      	bcs.n	8000682 <__udivmoddi4+0x2c2>
 80005fa:	42ac      	cmp	r4, r5
 80005fc:	d941      	bls.n	8000682 <__udivmoddi4+0x2c2>
 80005fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000602:	441d      	add	r5, r3
 8000604:	1b2d      	subs	r5, r5, r4
 8000606:	fa1f fe8e 	uxth.w	lr, lr
 800060a:	fbb5 f0fc 	udiv	r0, r5, ip
 800060e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000612:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000616:	fb00 f808 	mul.w	r8, r0, r8
 800061a:	45a0      	cmp	r8, r4
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x26e>
 800061e:	18e4      	adds	r4, r4, r3
 8000620:	f100 35ff 	add.w	r5, r0, #4294967295
 8000624:	d229      	bcs.n	800067a <__udivmoddi4+0x2ba>
 8000626:	45a0      	cmp	r8, r4
 8000628:	d927      	bls.n	800067a <__udivmoddi4+0x2ba>
 800062a:	3802      	subs	r0, #2
 800062c:	441c      	add	r4, r3
 800062e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000632:	eba4 0408 	sub.w	r4, r4, r8
 8000636:	fba0 8902 	umull	r8, r9, r0, r2
 800063a:	454c      	cmp	r4, r9
 800063c:	46c6      	mov	lr, r8
 800063e:	464d      	mov	r5, r9
 8000640:	d315      	bcc.n	800066e <__udivmoddi4+0x2ae>
 8000642:	d012      	beq.n	800066a <__udivmoddi4+0x2aa>
 8000644:	b156      	cbz	r6, 800065c <__udivmoddi4+0x29c>
 8000646:	ebba 030e 	subs.w	r3, sl, lr
 800064a:	eb64 0405 	sbc.w	r4, r4, r5
 800064e:	fa04 f707 	lsl.w	r7, r4, r7
 8000652:	40cb      	lsrs	r3, r1
 8000654:	431f      	orrs	r7, r3
 8000656:	40cc      	lsrs	r4, r1
 8000658:	6037      	str	r7, [r6, #0]
 800065a:	6074      	str	r4, [r6, #4]
 800065c:	2100      	movs	r1, #0
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	4618      	mov	r0, r3
 8000664:	e6f8      	b.n	8000458 <__udivmoddi4+0x98>
 8000666:	4690      	mov	r8, r2
 8000668:	e6e0      	b.n	800042c <__udivmoddi4+0x6c>
 800066a:	45c2      	cmp	sl, r8
 800066c:	d2ea      	bcs.n	8000644 <__udivmoddi4+0x284>
 800066e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000672:	eb69 0503 	sbc.w	r5, r9, r3
 8000676:	3801      	subs	r0, #1
 8000678:	e7e4      	b.n	8000644 <__udivmoddi4+0x284>
 800067a:	4628      	mov	r0, r5
 800067c:	e7d7      	b.n	800062e <__udivmoddi4+0x26e>
 800067e:	4640      	mov	r0, r8
 8000680:	e791      	b.n	80005a6 <__udivmoddi4+0x1e6>
 8000682:	4681      	mov	r9, r0
 8000684:	e7be      	b.n	8000604 <__udivmoddi4+0x244>
 8000686:	4601      	mov	r1, r0
 8000688:	e778      	b.n	800057c <__udivmoddi4+0x1bc>
 800068a:	3802      	subs	r0, #2
 800068c:	443c      	add	r4, r7
 800068e:	e745      	b.n	800051c <__udivmoddi4+0x15c>
 8000690:	4608      	mov	r0, r1
 8000692:	e708      	b.n	80004a6 <__udivmoddi4+0xe6>
 8000694:	f1a8 0802 	sub.w	r8, r8, #2
 8000698:	443d      	add	r5, r7
 800069a:	e72b      	b.n	80004f4 <__udivmoddi4+0x134>

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006a6:	e003      	b.n	80006b0 <LoopCopyDataInit>

080006a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006ae:	3104      	adds	r1, #4

080006b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006b8:	d3f6      	bcc.n	80006a8 <CopyDataInit>
  ldr  r2, =_sbss
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006bc:	e002      	b.n	80006c4 <LoopFillZerobss>

080006be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006c0:	f842 3b04 	str.w	r3, [r2], #4

080006c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006c8:	d3f9      	bcc.n	80006be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006ca:	f002 fbcd 	bl	8002e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ce:	f011 fecf 	bl	8012470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006d2:	f001 fb15 	bl	8001d00 <main>
  bx  lr    
 80006d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006d8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80006dc:	08015064 	.word	0x08015064
  ldr  r0, =_sdata
 80006e0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80006e4:	24000090 	.word	0x24000090
  ldr  r2, =_sbss
 80006e8:	24000090 	.word	0x24000090
  ldr  r3, = _ebss
 80006ec:	24004cd4 	.word	0x24004cd4

080006f0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC3_IRQHandler>

080006f2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80006f2:	b570      	push	{r4, r5, r6, lr}
 80006f4:	460e      	mov	r6, r1
 80006f6:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f8:	460c      	mov	r4, r1
 80006fa:	1ba3      	subs	r3, r4, r6
 80006fc:	429d      	cmp	r5, r3
 80006fe:	dc01      	bgt.n	8000704 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000700:	4628      	mov	r0, r5
 8000702:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000704:	f000 f94e 	bl	80009a4 <__io_getchar>
 8000708:	f804 0b01 	strb.w	r0, [r4], #1
 800070c:	e7f5      	b.n	80006fa <_read+0x8>

0800070e <_write>:

int _write(int file, char *ptr, int len)
{
 800070e:	b570      	push	{r4, r5, r6, lr}
 8000710:	460e      	mov	r6, r1
 8000712:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000714:	460c      	mov	r4, r1
 8000716:	1ba3      	subs	r3, r4, r6
 8000718:	429d      	cmp	r5, r3
 800071a:	dc01      	bgt.n	8000720 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800071c:	4628      	mov	r0, r5
 800071e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000720:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000724:	f000 f92e 	bl	8000984 <__io_putchar>
 8000728:	e7f5      	b.n	8000716 <_write+0x8>
	...

0800072c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <_sbrk+0x28>)
{
 800072e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000730:	6819      	ldr	r1, [r3, #0]
 8000732:	b909      	cbnz	r1, 8000738 <_sbrk+0xc>
		heap_end = &end;
 8000734:	4908      	ldr	r1, [pc, #32]	; (8000758 <_sbrk+0x2c>)
 8000736:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8000738:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800073a:	4669      	mov	r1, sp
 800073c:	4402      	add	r2, r0
 800073e:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000740:	bf83      	ittte	hi
 8000742:	220c      	movhi	r2, #12
 8000744:	4b05      	ldrhi	r3, [pc, #20]	; (800075c <_sbrk+0x30>)
		return (caddr_t) -1;
 8000746:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 800074a:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800074c:	bf88      	it	hi
 800074e:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	240000ac 	.word	0x240000ac
 8000758:	24004cd4 	.word	0x24004cd4
 800075c:	24004cd0 	.word	0x24004cd0

08000760 <_close>:

int _close(int file)
{
	return -1;
}
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr

08000766 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800076a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800076c:	604b      	str	r3, [r1, #4]
}
 800076e:	4770      	bx	lr

08000770 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000770:	2001      	movs	r0, #1
 8000772:	4770      	bx	lr

08000774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000774:	2000      	movs	r0, #0
 8000776:	4770      	bx	lr

08000778 <dmc_itoa>:
 * C version 0.4 char* style "itoa":
 */
char * dmc_itoa(int value, char* result, int base)
{
	// check that the base if valid
	if (base < 2 || base > 36)
 8000778:	1e93      	subs	r3, r2, #2
 800077a:	2b22      	cmp	r3, #34	; 0x22
{
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (base < 2 || base > 36)
 800077e:	d903      	bls.n	8000788 <dmc_itoa+0x10>
	{
		*result = '\0';
 8000780:	2300      	movs	r3, #0
 8000782:	700b      	strb	r3, [r1, #0]
		tmp_char = *ptr;
		*ptr-- = *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
}
 8000784:	4608      	mov	r0, r1
 8000786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000788:	460c      	mov	r4, r1
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
 800078a:	4f11      	ldr	r7, [pc, #68]	; (80007d0 <dmc_itoa+0x58>)
 800078c:	4623      	mov	r3, r4
		value /= base;
 800078e:	fb90 f5f2 	sdiv	r5, r0, r2
				+ (tmp_value - value * base)];
 8000792:	fb02 0615 	mls	r6, r2, r5, r0
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
 8000796:	443e      	add	r6, r7
 8000798:	f896 6023 	ldrb.w	r6, [r6, #35]	; 0x23
 800079c:	f803 6b01 	strb.w	r6, [r3], #1
	while (value);
 80007a0:	b995      	cbnz	r5, 80007c8 <dmc_itoa+0x50>
	if (tmp_value < 0)
 80007a2:	2800      	cmp	r0, #0
	*ptr-- = '\0';
 80007a4:	f04f 0000 	mov.w	r0, #0
		*ptr++ = '-';
 80007a8:	bfbe      	ittt	lt
 80007aa:	222d      	movlt	r2, #45	; 0x2d
 80007ac:	701a      	strblt	r2, [r3, #0]
 80007ae:	1ca3      	addlt	r3, r4, #2
	*ptr-- = '\0';
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	7018      	strb	r0, [r3, #0]
 80007b4:	460b      	mov	r3, r1
	while (ptr1 < ptr)
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d9e4      	bls.n	8000784 <dmc_itoa+0xc>
		tmp_char = *ptr;
 80007ba:	7810      	ldrb	r0, [r2, #0]
		*ptr-- = *ptr1;
 80007bc:	781c      	ldrb	r4, [r3, #0]
 80007be:	f802 4901 	strb.w	r4, [r2], #-1
		*ptr1++ = tmp_char;
 80007c2:	f803 0b01 	strb.w	r0, [r3], #1
 80007c6:	e7f6      	b.n	80007b6 <dmc_itoa+0x3e>
	while (value);
 80007c8:	461c      	mov	r4, r3
 80007ca:	4628      	mov	r0, r5
 80007cc:	e7de      	b.n	800078c <dmc_itoa+0x14>
 80007ce:	bf00      	nop
 80007d0:	08013310 	.word	0x08013310

080007d4 <ReadDipSwitches>:
#include "dmc_dipswitch.h"

uint8_t ReadDipSwitches(void)
{
 80007d4:	b510      	push	{r4, lr}
	uint8_t SwitchValues = 0;
	// Switches connect to GND, so 'ON' means we will read a low level
	if (HAL_GPIO_ReadPin(GPIOE, S1_1_Pin) == GPIO_PIN_RESET)
 80007d6:	2108      	movs	r1, #8
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <ReadDipSwitches+0x44>)
 80007da:	f005 fe57 	bl	800648c <HAL_GPIO_ReadPin>
 80007de:	2800      	cmp	r0, #0
	{
		SwitchValues |= DIPSWITCH_1_VALUE;
	}
	if (HAL_GPIO_ReadPin(GPIOE, S1_2_Pin) == GPIO_PIN_RESET)
 80007e0:	f04f 0110 	mov.w	r1, #16
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <ReadDipSwitches+0x44>)
		SwitchValues |= DIPSWITCH_1_VALUE;
 80007e6:	bf14      	ite	ne
 80007e8:	2400      	movne	r4, #0
 80007ea:	2408      	moveq	r4, #8
	if (HAL_GPIO_ReadPin(GPIOE, S1_2_Pin) == GPIO_PIN_RESET)
 80007ec:	f005 fe4e 	bl	800648c <HAL_GPIO_ReadPin>
 80007f0:	b908      	cbnz	r0, 80007f6 <ReadDipSwitches+0x22>
	{
		SwitchValues |= DIPSWITCH_2_VALUE;
 80007f2:	f044 0404 	orr.w	r4, r4, #4
	}
	if (HAL_GPIO_ReadPin(GPIOE, S1_3_Pin) == GPIO_PIN_RESET)
 80007f6:	2120      	movs	r1, #32
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <ReadDipSwitches+0x44>)
 80007fa:	f005 fe47 	bl	800648c <HAL_GPIO_ReadPin>
 80007fe:	b908      	cbnz	r0, 8000804 <ReadDipSwitches+0x30>
	{
		SwitchValues |= DIPSWITCH_3_VALUE;
 8000800:	f044 0402 	orr.w	r4, r4, #2
	}
	if (HAL_GPIO_ReadPin(GPIOE, S1_4_Pin) == GPIO_PIN_RESET)
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <ReadDipSwitches+0x44>)
 8000808:	f005 fe40 	bl	800648c <HAL_GPIO_ReadPin>
 800080c:	b908      	cbnz	r0, 8000812 <ReadDipSwitches+0x3e>
	{
		SwitchValues |= DIPSWITCH_4_VALUE;
 800080e:	f044 0401 	orr.w	r4, r4, #1
	}
	return SwitchValues;
}
 8000812:	4620      	mov	r0, r4
 8000814:	bd10      	pop	{r4, pc}
 8000816:	bf00      	nop
 8000818:	58021000 	.word	0x58021000

0800081c <DmcLedOn>:
	}
}

void DmcLedOn(uint8_t led)
{
	switch (led)
 800081c:	2806      	cmp	r0, #6
 800081e:	d821      	bhi.n	8000864 <DmcLedOn+0x48>
 8000820:	e8df f000 	tbb	[pc, r0]
 8000824:	120e0804 	.word	0x120e0804
 8000828:	1a16      	.short	0x1a16
 800082a:	1d          	.byte	0x1d
 800082b:	00          	.byte	0x00
	{
	case LED_RUN:
		HAL_GPIO_WritePin(GPIOC, LED_RUN_Pin, LED_RUN_ON);
 800082c:	2200      	movs	r2, #0
 800082e:	2101      	movs	r1, #1
    break;
  case LED_CAN1_OK:
    HAL_GPIO_WritePin(GPIOC, LED_CAN1_OK_Pin, LED_CAN1_OK_ON);
    break;
  case LED_CAN2_OK:
    HAL_GPIO_WritePin(GPIOC, LED_CAN2_OK_Pin, LED_CAN2_OK_ON);
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <DmcLedOn+0x4c>)
 8000832:	e003      	b.n	800083c <DmcLedOn+0x20>
    HAL_GPIO_WritePin(GPIOA, LED_RS1_OK_Pin, LED_RS1_OK_ON);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 7180 	mov.w	r1, #256	; 0x100
    HAL_GPIO_WritePin(GPIOA, LED_RS2_ERR_Pin, LED_RS2_ERR_ON);
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <DmcLedOn+0x50>)
    HAL_GPIO_WritePin(GPIOC, LED_CAN2_OK_Pin, LED_CAN2_OK_ON);
 800083c:	f005 be38 	b.w	80064b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LED_RS1_ERR_Pin, LED_RS1_ERR_ON);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000846:	e7f8      	b.n	800083a <DmcLedOn+0x1e>
    HAL_GPIO_WritePin(GPIOA, LED_RS2_OK_Pin, LED_RS2_OK_ON);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084e:	e7f4      	b.n	800083a <DmcLedOn+0x1e>
    HAL_GPIO_WritePin(GPIOA, LED_RS2_ERR_Pin, LED_RS2_ERR_ON);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000856:	e7f0      	b.n	800083a <DmcLedOn+0x1e>
    HAL_GPIO_WritePin(GPIOC, LED_CAN1_OK_Pin, LED_CAN1_OK_ON);
 8000858:	2200      	movs	r2, #0
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	e7e8      	b.n	8000830 <DmcLedOn+0x14>
    HAL_GPIO_WritePin(GPIOC, LED_CAN2_OK_Pin, LED_CAN2_OK_ON);
 800085e:	2200      	movs	r2, #0
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	e7e5      	b.n	8000830 <DmcLedOn+0x14>
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	58020800 	.word	0x58020800
 800086c:	58020000 	.word	0x58020000

08000870 <DmcLedOff>:
	}
}

void DmcLedOff(uint8_t led)
{
	switch (led)
 8000870:	2806      	cmp	r0, #6
 8000872:	d821      	bhi.n	80008b8 <DmcLedOff+0x48>
 8000874:	e8df f000 	tbb	[pc, r0]
 8000878:	120e0804 	.word	0x120e0804
 800087c:	1a16      	.short	0x1a16
 800087e:	1d          	.byte	0x1d
 800087f:	00          	.byte	0x00
	{
	case LED_RUN:
		HAL_GPIO_WritePin(GPIOC, LED_RUN_Pin, LED_RUN_OFF);
 8000880:	2201      	movs	r2, #1
 8000882:	4611      	mov	r1, r2
    break;
  case LED_CAN1_OK:
    HAL_GPIO_WritePin(GPIOC, LED_CAN1_OK_Pin, LED_CAN1_OK_OFF);
    break;
  case LED_CAN2_OK:
    HAL_GPIO_WritePin(GPIOC, LED_CAN2_OK_Pin, LED_CAN2_OK_OFF);
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <DmcLedOff+0x4c>)
 8000886:	e003      	b.n	8000890 <DmcLedOff+0x20>
		HAL_GPIO_WritePin(GPIOA, LED_RS1_OK_Pin, LED_RS1_OK_OFF);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 7180 	mov.w	r1, #256	; 0x100
    HAL_GPIO_WritePin(GPIOA, LED_RS2_ERR_Pin, LED_RS2_ERR_OFF);
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <DmcLedOff+0x50>)
    HAL_GPIO_WritePin(GPIOC, LED_CAN2_OK_Pin, LED_CAN2_OK_OFF);
 8000890:	f005 be0e 	b.w	80064b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LED_RS1_ERR_Pin, LED_RS1_ERR_OFF);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	e7f8      	b.n	800088e <DmcLedOff+0x1e>
    HAL_GPIO_WritePin(GPIOA, LED_RS2_OK_Pin, LED_RS2_OK_OFF);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a2:	e7f4      	b.n	800088e <DmcLedOff+0x1e>
    HAL_GPIO_WritePin(GPIOA, LED_RS2_ERR_Pin, LED_RS2_ERR_OFF);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008aa:	e7f0      	b.n	800088e <DmcLedOff+0x1e>
    HAL_GPIO_WritePin(GPIOC, LED_CAN1_OK_Pin, LED_CAN1_OK_OFF);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	e7e8      	b.n	8000884 <DmcLedOff+0x14>
    HAL_GPIO_WritePin(GPIOC, LED_CAN2_OK_Pin, LED_CAN2_OK_OFF);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	e7e5      	b.n	8000884 <DmcLedOff+0x14>
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	58020800 	.word	0x58020800
 80008c0:	58020000 	.word	0x58020000

080008c4 <DmcLedToggle>:
	}
}

void DmcLedToggle(uint8_t led)
{
	switch (led)
 80008c4:	2806      	cmp	r0, #6
 80008c6:	d81a      	bhi.n	80008fe <DmcLedToggle+0x3a>
 80008c8:	e8df f000 	tbb	[pc, r0]
 80008cc:	0f0c0704 	.word	0x0f0c0704
 80008d0:	1512      	.short	0x1512
 80008d2:	17          	.byte	0x17
 80008d3:	00          	.byte	0x00
	{
	case LED_RUN:
		HAL_GPIO_TogglePin(GPIOC, LED_RUN_Pin);
 80008d4:	2101      	movs	r1, #1
    break;
  case LED_CAN1_OK:
    HAL_GPIO_TogglePin(GPIOC, LED_CAN1_OK_Pin);
    break;
  case LED_CAN2_OK:
    HAL_GPIO_TogglePin(GPIOC, LED_CAN2_OK_Pin);
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <DmcLedToggle+0x3c>)
 80008d8:	e002      	b.n	80008e0 <DmcLedToggle+0x1c>
		HAL_GPIO_TogglePin(GPIOA, LED_RS1_OK_Pin);
 80008da:	f44f 7180 	mov.w	r1, #256	; 0x100
    HAL_GPIO_TogglePin(GPIOA, LED_RS2_ERR_Pin);
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <DmcLedToggle+0x40>)
    HAL_GPIO_TogglePin(GPIOC, LED_CAN2_OK_Pin);
 80008e0:	f005 be00 	b.w	80064e4 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOA, LED_RS1_ERR_Pin);
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	e7f9      	b.n	80008de <DmcLedToggle+0x1a>
    HAL_GPIO_TogglePin(GPIOA, LED_RS2_OK_Pin);
 80008ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ee:	e7f6      	b.n	80008de <DmcLedToggle+0x1a>
    HAL_GPIO_TogglePin(GPIOA, LED_RS2_ERR_Pin);
 80008f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f4:	e7f3      	b.n	80008de <DmcLedToggle+0x1a>
    HAL_GPIO_TogglePin(GPIOC, LED_CAN1_OK_Pin);
 80008f6:	2140      	movs	r1, #64	; 0x40
 80008f8:	e7ed      	b.n	80008d6 <DmcLedToggle+0x12>
    HAL_GPIO_TogglePin(GPIOC, LED_CAN2_OK_Pin);
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	e7eb      	b.n	80008d6 <DmcLedToggle+0x12>
 80008fe:	4770      	bx	lr
 8000900:	58020800 	.word	0x58020800
 8000904:	58020000 	.word	0x58020000

08000908 <DmcLedsOff>:
		break;
	}
}

void DmcLedsOff(void)
{
 8000908:	b508      	push	{r3, lr}
  DmcLedOff(LED_RUN);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ffb0 	bl	8000870 <DmcLedOff>
  DmcLedOff(LED_RS1_OK);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ffad 	bl	8000870 <DmcLedOff>
  DmcLedOff(LED_RS1_ERR);
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff ffaa 	bl	8000870 <DmcLedOff>
  DmcLedOff(LED_RS2_OK);
 800091c:	2003      	movs	r0, #3
 800091e:	f7ff ffa7 	bl	8000870 <DmcLedOff>
  DmcLedOff(LED_RS2_ERR);
 8000922:	2004      	movs	r0, #4
 8000924:	f7ff ffa4 	bl	8000870 <DmcLedOff>
  DmcLedOff(LED_CAN1_OK);
 8000928:	2005      	movs	r0, #5
 800092a:	f7ff ffa1 	bl	8000870 <DmcLedOff>
  DmcLedOff(LED_CAN2_OK);
 800092e:	2006      	movs	r0, #6
}
 8000930:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DmcLedOff(LED_CAN2_OK);
 8000934:	f7ff bf9c 	b.w	8000870 <DmcLedOff>

08000938 <DmcLedsOn>:

void DmcLedsOn(void)
{
 8000938:	b508      	push	{r3, lr}
  DmcLedOn(LED_RUN);
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff ff6e 	bl	800081c <DmcLedOn>
  DmcLedOn(LED_RS1_OK);
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff ff6b 	bl	800081c <DmcLedOn>
  DmcLedOn(LED_RS1_ERR);
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff ff68 	bl	800081c <DmcLedOn>
  DmcLedOn(LED_RS2_OK);
 800094c:	2003      	movs	r0, #3
 800094e:	f7ff ff65 	bl	800081c <DmcLedOn>
  DmcLedOn(LED_RS2_ERR);
 8000952:	2004      	movs	r0, #4
 8000954:	f7ff ff62 	bl	800081c <DmcLedOn>
  DmcLedOn(LED_CAN1_OK);
 8000958:	2005      	movs	r0, #5
 800095a:	f7ff ff5f 	bl	800081c <DmcLedOn>
  DmcLedOn(LED_CAN2_OK);
 800095e:	2006      	movs	r0, #6
}
 8000960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DmcLedOn(LED_CAN2_OK);
 8000964:	f7ff bf5a 	b.w	800081c <DmcLedOn>

08000968 <GetMCUFamily>:
  return "STM32F7";
#endif
#if defined (STM32H7)
  return "STM32H7";
#endif
}
 8000968:	4800      	ldr	r0, [pc, #0]	; (800096c <GetMCUFamily+0x4>)
 800096a:	4770      	bx	lr
 800096c:	08013358 	.word	0x08013358

08000970 <GetMCUType>:
	return "STM32F777xx";
#endif
#if defined (STM32F779xx)
	return "STM32F779xx";
#endif
}
 8000970:	4800      	ldr	r0, [pc, #0]	; (8000974 <GetMCUType+0x4>)
 8000972:	4770      	bx	lr
 8000974:	08013360 	.word	0x08013360

08000978 <dmc_put_sethuart>:
//UART_HandleTypeDef *huart = &huart2;
UART_HandleTypeDef *huart = NULL;

void dmc_put_sethuart(UART_HandleTypeDef *new_huart)
{
  huart = new_huart;
 8000978:	4b01      	ldr	r3, [pc, #4]	; (8000980 <dmc_put_sethuart+0x8>)
 800097a:	6018      	str	r0, [r3, #0]
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	240000b0 	.word	0x240000b0

08000984 <__io_putchar>:
}

int __io_putchar(int ch)
{
 8000984:	b513      	push	{r0, r1, r4, lr}
  uint8_t c[1];
  c[0] = ch & 0x00FF;
 8000986:	a902      	add	r1, sp, #8
{
 8000988:	4604      	mov	r4, r0
  HAL_UART_Transmit(huart, &*c, 1, 10);
 800098a:	230a      	movs	r3, #10
 800098c:	2201      	movs	r2, #1
  c[0] = ch & 0x00FF;
 800098e:	f801 0d04 	strb.w	r0, [r1, #-4]!
  HAL_UART_Transmit(huart, &*c, 1, 10);
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <__io_putchar+0x1c>)
 8000994:	6800      	ldr	r0, [r0, #0]
 8000996:	f00b fde6 	bl	800c566 <HAL_UART_Transmit>
//  HAL_UART_Transmit(&huart7, &*c, 1, 10);
  return ch;
}
 800099a:	4620      	mov	r0, r4
 800099c:	b002      	add	sp, #8
 800099e:	bd10      	pop	{r4, pc}
 80009a0:	240000b0 	.word	0x240000b0

080009a4 <__io_getchar>:

int __io_getchar(void)
{
 80009a4:	b513      	push	{r0, r1, r4, lr}
  HAL_StatusTypeDef Status = HAL_BUSY;
  uint8_t ch;
  // Remember RS485 TX_Enable
  while (Status != HAL_OK)
  {
    Status = HAL_UART_Receive(huart, &ch, 1, 10);
 80009a6:	4c07      	ldr	r4, [pc, #28]	; (80009c4 <__io_getchar+0x20>)
 80009a8:	230a      	movs	r3, #10
 80009aa:	2201      	movs	r2, #1
 80009ac:	f10d 0107 	add.w	r1, sp, #7
 80009b0:	6820      	ldr	r0, [r4, #0]
 80009b2:	f00b fe31 	bl	800c618 <HAL_UART_Receive>
  while (Status != HAL_OK)
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d1f6      	bne.n	80009a8 <__io_getchar+0x4>
  }
  return (ch);
}
 80009ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80009be:	b002      	add	sp, #8
 80009c0:	bd10      	pop	{r4, pc}
 80009c2:	bf00      	nop
 80009c4:	240000b0 	.word	0x240000b0

080009c8 <dmc_putc>:
	__io_putchar(v & 0xff);
}

void dmc_putc(char c)
{
	__io_putchar(c);
 80009c8:	f7ff bfdc 	b.w	8000984 <__io_putchar>

080009cc <dmc_puts>:
{
	__io_putchar('\n');
}

void dmc_puts(char* str)
{
 80009cc:	b510      	push	{r4, lr}
 80009ce:	1e44      	subs	r4, r0, #1
	while (*str)
 80009d0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80009d4:	b900      	cbnz	r0, 80009d8 <dmc_puts+0xc>
	{
		__io_putchar(*str++);
	}
}
 80009d6:	bd10      	pop	{r4, pc}
		__io_putchar(*str++);
 80009d8:	f7ff ffd4 	bl	8000984 <__io_putchar>
 80009dc:	e7f8      	b.n	80009d0 <dmc_puts+0x4>

080009de <dmc_putint>:
{
 80009de:	b500      	push	{lr}
 80009e0:	b089      	sub	sp, #36	; 0x24
	dmc_itoa(value, myStr, 10);
 80009e2:	220a      	movs	r2, #10
 80009e4:	4669      	mov	r1, sp
 80009e6:	f7ff fec7 	bl	8000778 <dmc_itoa>
	dmc_puts(myStr);
 80009ea:	4668      	mov	r0, sp
 80009ec:	f7ff ffee 	bl	80009cc <dmc_puts>
}
 80009f0:	b009      	add	sp, #36	; 0x24
 80009f2:	f85d fb04 	ldr.w	pc, [sp], #4

080009f6 <dmc_puthex2>:
{
 80009f6:	b500      	push	{lr}
 80009f8:	b089      	sub	sp, #36	; 0x24
	dmc_itoa(value, myStr, 16);
 80009fa:	2210      	movs	r2, #16
 80009fc:	4669      	mov	r1, sp
 80009fe:	f7ff febb 	bl	8000778 <dmc_itoa>
	if (strlen(myStr) < 2)
 8000a02:	4668      	mov	r0, sp
 8000a04:	f7ff fc6c 	bl	80002e0 <strlen>
 8000a08:	2801      	cmp	r0, #1
 8000a0a:	d802      	bhi.n	8000a12 <dmc_puthex2+0x1c>
		__io_putchar('0');
 8000a0c:	2030      	movs	r0, #48	; 0x30
 8000a0e:	f7ff ffb9 	bl	8000984 <__io_putchar>
	dmc_puts(myStr);
 8000a12:	4668      	mov	r0, sp
 8000a14:	f7ff ffda 	bl	80009cc <dmc_puts>
}
 8000a18:	b009      	add	sp, #36	; 0x24
 8000a1a:	f85d fb04 	ldr.w	pc, [sp], #4

08000a1e <dmc_puthex2cr>:
{
 8000a1e:	b508      	push	{r3, lr}
	dmc_puthex2(value);
 8000a20:	f7ff ffe9 	bl	80009f6 <dmc_puthex2>
	__io_putchar('\n');
 8000a24:	200a      	movs	r0, #10
}
 8000a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__io_putchar('\n');
 8000a2a:	f7ff bfab 	b.w	8000984 <__io_putchar>

08000a2e <dmc_puthex4>:
{
 8000a2e:	b510      	push	{r4, lr}
 8000a30:	b088      	sub	sp, #32
	dmc_itoa(value, myStr, 16);
 8000a32:	2210      	movs	r2, #16
 8000a34:	4669      	mov	r1, sp
 8000a36:	f7ff fe9f 	bl	8000778 <dmc_itoa>
	uint8_t len = strlen(myStr);
 8000a3a:	4668      	mov	r0, sp
 8000a3c:	f7ff fc50 	bl	80002e0 <strlen>
 8000a40:	b2c4      	uxtb	r4, r0
	for (; len < 4; len++)
 8000a42:	2c03      	cmp	r4, #3
 8000a44:	d904      	bls.n	8000a50 <dmc_puthex4+0x22>
	dmc_puts(myStr);
 8000a46:	4668      	mov	r0, sp
 8000a48:	f7ff ffc0 	bl	80009cc <dmc_puts>
}
 8000a4c:	b008      	add	sp, #32
 8000a4e:	bd10      	pop	{r4, pc}
	for (; len < 4; len++)
 8000a50:	3401      	adds	r4, #1
		__io_putchar('0');
 8000a52:	2030      	movs	r0, #48	; 0x30
 8000a54:	f7ff ff96 	bl	8000984 <__io_putchar>
	for (; len < 4; len++)
 8000a58:	b2e4      	uxtb	r4, r4
 8000a5a:	e7f2      	b.n	8000a42 <dmc_puthex4+0x14>

08000a5c <dmc_puthex4cr>:
{
 8000a5c:	b508      	push	{r3, lr}
	dmc_puthex4(value);
 8000a5e:	f7ff ffe6 	bl	8000a2e <dmc_puthex4>
	__io_putchar('\n');
 8000a62:	200a      	movs	r0, #10
}
 8000a64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__io_putchar('\n');
 8000a68:	f7ff bf8c 	b.w	8000984 <__io_putchar>

08000a6c <dmc_puts2>:
	}
	__io_putchar('\n');
}

void dmc_puts2(char* str1, char* str2)
{
 8000a6c:	b538      	push	{r3, r4, r5, lr}
 8000a6e:	460c      	mov	r4, r1
 8000a70:	1e45      	subs	r5, r0, #1
	while (*str1)
 8000a72:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000a76:	b920      	cbnz	r0, 8000a82 <dmc_puts2+0x16>
 8000a78:	3c01      	subs	r4, #1
	{
		__io_putchar(*str1++);
	}
	while (*str2)
 8000a7a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000a7e:	b918      	cbnz	r0, 8000a88 <dmc_puts2+0x1c>
	{
		__io_putchar(*str2++);
	}
}
 8000a80:	bd38      	pop	{r3, r4, r5, pc}
		__io_putchar(*str1++);
 8000a82:	f7ff ff7f 	bl	8000984 <__io_putchar>
 8000a86:	e7f4      	b.n	8000a72 <dmc_puts2+0x6>
		__io_putchar(*str2++);
 8000a88:	f7ff ff7c 	bl	8000984 <__io_putchar>
 8000a8c:	e7f5      	b.n	8000a7a <dmc_puts2+0xe>

08000a8e <dmc_puts3>:
	dmc_puts2(str1, str2);
	__io_putchar('\n');
}

void dmc_puts3(char* str1, char* str2, char* str3)
{
 8000a8e:	b510      	push	{r4, lr}
 8000a90:	4614      	mov	r4, r2
	dmc_puts2(str1, str2);
 8000a92:	f7ff ffeb 	bl	8000a6c <dmc_puts2>
	dmc_puts(str3);
 8000a96:	4620      	mov	r0, r4
}
 8000a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dmc_puts(str3);
 8000a9c:	f7ff bf96 	b.w	80009cc <dmc_puts>

08000aa0 <dmc_putstrintstr>:
{
 8000aa0:	b530      	push	{r4, r5, lr}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4615      	mov	r5, r2
 8000aa8:	4608      	mov	r0, r1
	dmc_itoa(value, myStr, 10);
 8000aaa:	220a      	movs	r2, #10
 8000aac:	4669      	mov	r1, sp
 8000aae:	f7ff fe63 	bl	8000778 <dmc_itoa>
	dmc_puts3(str1, myStr, str2);
 8000ab2:	462a      	mov	r2, r5
 8000ab4:	4669      	mov	r1, sp
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	f7ff ffe9 	bl	8000a8e <dmc_puts3>
}
 8000abc:	b009      	add	sp, #36	; 0x24
 8000abe:	bd30      	pop	{r4, r5, pc}

08000ac0 <DMC_I2cRtcRegisterWrite>:
// Functions used to communicate with those devices that do not have a secondary address,
// such as a sensors.
// Returns 0 on success (ack), non-0 on failure (nack)
uint8_t DMC_I2cRtcRegisterWrite(uint16_t address, uint8_t *data, uint16_t length)
{
	return HAL_I2C_Master_Transmit(&RtcHi2c2, address, data, length, I2C_TIMEOUT);
 8000ac0:	f242 7310 	movw	r3, #10000	; 0x2710
{
 8000ac4:	b507      	push	{r0, r1, r2, lr}
	return HAL_I2C_Master_Transmit(&RtcHi2c2, address, data, length, I2C_TIMEOUT);
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	460a      	mov	r2, r1
 8000acc:	4601      	mov	r1, r0
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <DMC_I2cRtcRegisterWrite+0x1c>)
 8000ad0:	f006 fc6c 	bl	80073ac <HAL_I2C_Master_Transmit>
}
 8000ad4:	b003      	add	sp, #12
 8000ad6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ada:	bf00      	nop
 8000adc:	240002f8 	.word	0x240002f8

08000ae0 <DMC_I2cRtcSramWrite>:

// Functions used to communicate with those devices that have a secondary address,
// such as memory chips (for example AT24Cxxx).
// Returns 0 on success (ack), non-0 on failure (nack)
uint8_t DMC_I2cRtcSramWrite(uint16_t address, uint8_t *data, uint16_t length)
{
 8000ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return HAL_I2C_Mem_Write(&RtcHi2c2, _address_RTC, address, 1, data, length, I2C_TIMEOUT);
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <DMC_I2cRtcSramWrite+0x20>)
 8000ae4:	781c      	ldrb	r4, [r3, #0]
 8000ae6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000aea:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 8000aee:	4602      	mov	r2, r0
 8000af0:	2301      	movs	r3, #1
 8000af2:	4621      	mov	r1, r4
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <DMC_I2cRtcSramWrite+0x24>)
 8000af6:	f006 fcf1 	bl	80074dc <HAL_I2C_Mem_Write>
}
 8000afa:	b004      	add	sp, #16
 8000afc:	bd10      	pop	{r4, pc}
 8000afe:	bf00      	nop
 8000b00:	24000261 	.word	0x24000261
 8000b04:	240002f8 	.word	0x240002f8

08000b08 <DMC_I2cRtcSramRead>:

uint8_t DMC_I2cRtcSramRead(uint16_t address, uint8_t *data, uint16_t length)
{
 8000b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return HAL_I2C_Mem_Read(&RtcHi2c2, _address_RTC, address, 1, data, length, I2C_TIMEOUT);
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <DMC_I2cRtcSramRead+0x20>)
 8000b0c:	781c      	ldrb	r4, [r3, #0]
 8000b0e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b12:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 8000b16:	4602      	mov	r2, r0
 8000b18:	2301      	movs	r3, #1
 8000b1a:	4621      	mov	r1, r4
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <DMC_I2cRtcSramRead+0x24>)
 8000b1e:	f006 fd9f 	bl	8007660 <HAL_I2C_Mem_Read>
}
 8000b22:	b004      	add	sp, #16
 8000b24:	bd10      	pop	{r4, pc}
 8000b26:	bf00      	nop
 8000b28:	24000261 	.word	0x24000261
 8000b2c:	240002f8 	.word	0x240002f8

08000b30 <DMC_I2cRtcWriteSramBytes>:
}

// 64 Bytes SRAM, Battery Backed
// Write multiple bytes of data to SRAM
uint8_t DMC_I2cRtcWriteSramBytes(uint8_t location, uint8_t *data, uint8_t length)
{
 8000b30:	4402      	add	r2, r0
 8000b32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000b36:	4604      	mov	r4, r0
 8000b38:	460f      	mov	r7, r1
 8000b3a:	b2d6      	uxtb	r6, r2
	uint8_t bytesWritten = 0;
 8000b3c:	2500      	movs	r5, #0
		if (location < SRAM_SIZE)
		{
			buf[0] = data[i];
			uint8_t w = DMC_I2cRtcSramWrite(location + SRAM_START_ADDR, buf, 1); // Returns 0 on success (ack), non-0 on failure (nack)
			bytesWritten++;
			if (_error == FALSE)
 8000b3e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8000b80 <DMC_I2cRtcWriteSramBytes+0x50>
	for (uint8_t i = 0; i < length; i++)
 8000b42:	42b4      	cmp	r4, r6
 8000b44:	d103      	bne.n	8000b4e <DMC_I2cRtcWriteSramBytes+0x1e>
			}
		}
		location++;
	}
	return bytesWritten;
}
 8000b46:	4628      	mov	r0, r5
 8000b48:	b002      	add	sp, #8
 8000b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (location < SRAM_SIZE)
 8000b4e:	2c3f      	cmp	r4, #63	; 0x3f
 8000b50:	d812      	bhi.n	8000b78 <DMC_I2cRtcWriteSramBytes+0x48>
			buf[0] = data[i];
 8000b52:	783b      	ldrb	r3, [r7, #0]
			uint8_t w = DMC_I2cRtcSramWrite(location + SRAM_START_ADDR, buf, 1); // Returns 0 on success (ack), non-0 on failure (nack)
 8000b54:	2201      	movs	r2, #1
 8000b56:	a901      	add	r1, sp, #4
 8000b58:	f104 0020 	add.w	r0, r4, #32
			buf[0] = data[i];
 8000b5c:	f88d 3004 	strb.w	r3, [sp, #4]
			bytesWritten++;
 8000b60:	3501      	adds	r5, #1
			uint8_t w = DMC_I2cRtcSramWrite(location + SRAM_START_ADDR, buf, 1); // Returns 0 on success (ack), non-0 on failure (nack)
 8000b62:	f7ff ffbd 	bl	8000ae0 <DMC_I2cRtcSramWrite>
			if (_error == FALSE)
 8000b66:	f898 3000 	ldrb.w	r3, [r8]
			bytesWritten++;
 8000b6a:	b2ed      	uxtb	r5, r5
			if (_error == FALSE)
 8000b6c:	b923      	cbnz	r3, 8000b78 <DMC_I2cRtcWriteSramBytes+0x48>
				_error = (w != 0);
 8000b6e:	3000      	adds	r0, #0
 8000b70:	bf18      	it	ne
 8000b72:	2001      	movne	r0, #1
 8000b74:	f888 0000 	strb.w	r0, [r8]
		location++;
 8000b78:	3401      	adds	r4, #1
 8000b7a:	3701      	adds	r7, #1
 8000b7c:	b2e4      	uxtb	r4, r4
 8000b7e:	e7e0      	b.n	8000b42 <DMC_I2cRtcWriteSramBytes+0x12>
 8000b80:	240003e4 	.word	0x240003e4

08000b84 <DMC_I2cRtcWriteSramByte>:
	if (location < SRAM_SIZE)
 8000b84:	283f      	cmp	r0, #63	; 0x3f
{
 8000b86:	b507      	push	{r0, r1, r2, lr}
 8000b88:	f88d 1007 	strb.w	r1, [sp, #7]
	if (location < SRAM_SIZE)
 8000b8c:	d804      	bhi.n	8000b98 <DMC_I2cRtcWriteSramByte+0x14>
		DMC_I2cRtcWriteSramBytes(location, &data, 1);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f10d 0107 	add.w	r1, sp, #7
 8000b94:	f7ff ffcc 	bl	8000b30 <DMC_I2cRtcWriteSramBytes>
}
 8000b98:	b003      	add	sp, #12
 8000b9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000ba0 <DMC_I2cRtcReadSramBytes>:
}

// 64 Bytes SRAM, Battery Backed
// Read multiple bytes of data from SRAM
uint8_t DMC_I2cRtcReadSramBytes(uint8_t location, uint8_t *data, uint8_t length)
{
 8000ba0:	4402      	add	r2, r0
 8000ba2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	460f      	mov	r7, r1
 8000baa:	b2d6      	uxtb	r6, r2
	uint8_t bytesRead = 0;
 8000bac:	2500      	movs	r5, #0
		if (location < SRAM_SIZE)
		{
			uint8_t r = DMC_I2cRtcSramRead(location + SRAM_START_ADDR, buf, 1);
			bytesRead++;
			data[i] = buf[0];
			if (_error == FALSE)
 8000bae:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8000bf0 <DMC_I2cRtcReadSramBytes+0x50>
	for (uint8_t i = 0; i < length; i++)
 8000bb2:	42b4      	cmp	r4, r6
 8000bb4:	d103      	bne.n	8000bbe <DMC_I2cRtcReadSramBytes+0x1e>
			}
		}
		location++;
	}
	return bytesRead;
}
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	b002      	add	sp, #8
 8000bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (location < SRAM_SIZE)
 8000bbe:	2c3f      	cmp	r4, #63	; 0x3f
 8000bc0:	d812      	bhi.n	8000be8 <DMC_I2cRtcReadSramBytes+0x48>
			uint8_t r = DMC_I2cRtcSramRead(location + SRAM_START_ADDR, buf, 1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	a901      	add	r1, sp, #4
 8000bc6:	f104 0020 	add.w	r0, r4, #32
			bytesRead++;
 8000bca:	3501      	adds	r5, #1
			uint8_t r = DMC_I2cRtcSramRead(location + SRAM_START_ADDR, buf, 1);
 8000bcc:	f7ff ff9c 	bl	8000b08 <DMC_I2cRtcSramRead>
			data[i] = buf[0];
 8000bd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			bytesRead++;
 8000bd4:	b2ed      	uxtb	r5, r5
			data[i] = buf[0];
 8000bd6:	703b      	strb	r3, [r7, #0]
			if (_error == FALSE)
 8000bd8:	f898 3000 	ldrb.w	r3, [r8]
 8000bdc:	b923      	cbnz	r3, 8000be8 <DMC_I2cRtcReadSramBytes+0x48>
				_error = (r != 0);
 8000bde:	3000      	adds	r0, #0
 8000be0:	bf18      	it	ne
 8000be2:	2001      	movne	r0, #1
 8000be4:	f888 0000 	strb.w	r0, [r8]
		location++;
 8000be8:	3401      	adds	r4, #1
 8000bea:	3701      	adds	r7, #1
 8000bec:	b2e4      	uxtb	r4, r4
 8000bee:	e7e0      	b.n	8000bb2 <DMC_I2cRtcReadSramBytes+0x12>
 8000bf0:	240003e4 	.word	0x240003e4

08000bf4 <DMC_I2cRtcSquareWave>:

/*----------------------------------------------------------------------*
 * Enable or disable the square wave output.                            *
 *----------------------------------------------------------------------*/
void DMC_I2cRtcSquareWave(uint8_t freq)
{
 8000bf4:	b513      	push	{r0, r1, r4, lr}
 8000bf6:	4604      	mov	r4, r0
	uint8_t ctrlReg;

	DMC_I2cRtcReadSramBytes(CTRL_REG, &ctrlReg, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f10d 0107 	add.w	r1, sp, #7
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f7ff ffce 	bl	8000ba0 <DMC_I2cRtcReadSramBytes>
 8000c04:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (freq > 3)
 8000c08:	2c03      	cmp	r4, #3
	}
	else
	{
		ctrlReg = (ctrlReg & 0xF8) | _BV(SQWE) | freq;
	}
	DMC_I2cRtcWriteSramByte(CTRL_REG, ctrlReg);
 8000c0a:	f04f 0007 	mov.w	r0, #7
		ctrlReg = (ctrlReg & 0xF8) | _BV(SQWE) | freq;
 8000c0e:	bf97      	itett	ls
 8000c10:	f023 0347 	bicls.w	r3, r3, #71	; 0x47
		ctrlReg &= ~_BV(SQWE);
 8000c14:	f023 0340 	bichi.w	r3, r3, #64	; 0x40
		ctrlReg = (ctrlReg & 0xF8) | _BV(SQWE) | freq;
 8000c18:	f043 0340 	orrls.w	r3, r3, #64	; 0x40
 8000c1c:	4323      	orrls	r3, r4
 8000c1e:	f88d 3007 	strb.w	r3, [sp, #7]
	DMC_I2cRtcWriteSramByte(CTRL_REG, ctrlReg);
 8000c22:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000c26:	f7ff ffad 	bl	8000b84 <DMC_I2cRtcWriteSramByte>
}
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd10      	pop	{r4, pc}

08000c2e <DMC_I2cRtcDecToBcd>:
}

// Convert normal decimal numbers to binary coded decimal:
int DMC_I2cRtcDecToBcd(int val)
{
	return ((val / 10 * 16) + (val % 10));
 8000c2e:	230a      	movs	r3, #10
 8000c30:	fb90 f2f3 	sdiv	r2, r0, r3
 8000c34:	fb03 0012 	mls	r0, r3, r2, r0
}
 8000c38:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <DMC_I2cRtcGetDayOfWeek>:

	// https://en.wikipedia.org/wiki/Determination_of_the_day_of_the_week
//	y += 2000;
	static uint8_t t[] =
	{ 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
	y -= m < 3;
 8000c40:	2902      	cmp	r1, #2
 8000c42:	bf98      	it	ls
 8000c44:	3a01      	subls	r2, #1
{
 8000c46:	b510      	push	{r4, lr}
	y -= m < 3;
 8000c48:	b2d2      	uxtb	r2, r2
	return ((y + y / 4 - y / 100 + y / 400 + t[m - 1] + d) % 7) + 1; // 01 - 07, 01 = Sunday
 8000c4a:	2464      	movs	r4, #100	; 0x64
 8000c4c:	eb02 0392 	add.w	r3, r2, r2, lsr #2
 8000c50:	fbb2 f2f4 	udiv	r2, r2, r4
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <DMC_I2cRtcGetDayOfWeek+0x34>)
 8000c58:	4411      	add	r1, r2
 8000c5a:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4418      	add	r0, r3
 8000c62:	2307      	movs	r3, #7
 8000c64:	fb90 f3f3 	sdiv	r3, r0, r3
 8000c68:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000c6c:	1ac0      	subs	r0, r0, r3
 8000c6e:	3001      	adds	r0, #1
}
 8000c70:	b2c0      	uxtb	r0, r0
 8000c72:	bd10      	pop	{r4, pc}
 8000c74:	080133d4 	.word	0x080133d4

08000c78 <DMC_I2cRtcGetNoOfDaysInMonth>:
    static const int days[2][13] = {
        {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
        {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
    };

    if (year > 2000)
 8000c78:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
	{
		year -= 2000;
 8000c7c:	bf84      	itt	hi
 8000c7e:	f5a0 60fa 	subhi.w	r0, r0, #2000	; 0x7d0
 8000c82:	b280      	uxthhi	r0, r0
    return (year % 4 == 0);
 8000c84:	f010 0f03 	tst.w	r0, #3
	}

    uint8_t leap = DMC_I2cRtcYearIsLeap(year);

    return days[leap][month];
 8000c88:	bf0c      	ite	eq
 8000c8a:	230d      	moveq	r3, #13
 8000c8c:	2300      	movne	r3, #0
 8000c8e:	4419      	add	r1, r3
}
 8000c90:	4b01      	ldr	r3, [pc, #4]	; (8000c98 <DMC_I2cRtcGetNoOfDaysInMonth+0x20>)
 8000c92:	f813 0021 	ldrb.w	r0, [r3, r1, lsl #2]
 8000c96:	4770      	bx	lr
 8000c98:	0801336c 	.word	0x0801336c

08000c9c <DMC_I2cRtcSetDateTime>:
{
 8000c9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	DateTime->DayOfWeek = DMC_I2cRtcGetDayOfWeek(DateTime->DayOfMonth, DateTime->Month, DateTime->Year);     // 1-7
 8000ca0:	7a06      	ldrb	r6, [r0, #8]
{
 8000ca2:	4604      	mov	r4, r0
	DateTime->DayOfWeek = DMC_I2cRtcGetDayOfWeek(DateTime->DayOfMonth, DateTime->Month, DateTime->Year);     // 1-7
 8000ca4:	7a45      	ldrb	r5, [r0, #9]
 8000ca6:	7907      	ldrb	r7, [r0, #4]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	462a      	mov	r2, r5
 8000cac:	4638      	mov	r0, r7
 8000cae:	f7ff ffc7 	bl	8000c40 <DMC_I2cRtcGetDayOfWeek>
	uint8_t noOfDaysInMonth = DMC_I2cRtcGetNoOfDaysInMonth((uint16_t) DateTime->Year, DateTime->Month);
 8000cb2:	4631      	mov	r1, r6
	DateTime->DayOfWeek = DMC_I2cRtcGetDayOfWeek(DateTime->DayOfMonth, DateTime->Month, DateTime->Year);     // 1-7
 8000cb4:	4680      	mov	r8, r0
 8000cb6:	70e0      	strb	r0, [r4, #3]
	uint8_t noOfDaysInMonth = DMC_I2cRtcGetNoOfDaysInMonth((uint16_t) DateTime->Year, DateTime->Month);
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f7ff ffdd 	bl	8000c78 <DMC_I2cRtcGetNoOfDaysInMonth>
	if (DateTime->DayOfMonth > noOfDaysInMonth)
 8000cbe:	4287      	cmp	r7, r0
	buf[0] = RTC_LOCATION;
 8000cc0:	f04f 0700 	mov.w	r7, #0
		DateTime->DayOfMonth = noOfDaysInMonth;
 8000cc4:	bf88      	it	hi
 8000cc6:	7120      	strbhi	r0, [r4, #4]
	buf[1] = DMC_I2cRtcDecToBcd(DateTime->Second) & 0x7f; // set seconds and disable clock (01111111, Bit 7, ST = 0)
 8000cc8:	7820      	ldrb	r0, [r4, #0]
	buf[0] = RTC_LOCATION;
 8000cca:	f88d 7000 	strb.w	r7, [sp]
	buf[1] = DMC_I2cRtcDecToBcd(DateTime->Second) & 0x7f; // set seconds and disable clock (01111111, Bit 7, ST = 0)
 8000cce:	f7ff ffae 	bl	8000c2e <DMC_I2cRtcDecToBcd>
 8000cd2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000cd6:	f88d 0001 	strb.w	r0, [sp, #1]
	buf[2] = DMC_I2cRtcDecToBcd(DateTime->Minute) & 0x7f;               // set minutes (01111111)
 8000cda:	7860      	ldrb	r0, [r4, #1]
 8000cdc:	f7ff ffa7 	bl	8000c2e <DMC_I2cRtcDecToBcd>
 8000ce0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000ce4:	f88d 0002 	strb.w	r0, [sp, #2]
	buf[3] = DMC_I2cRtcDecToBcd(DateTime->Hour) & 0x3f; // set hours and to 24hr format (00111111, Bit 6 = 0)
 8000ce8:	78a0      	ldrb	r0, [r4, #2]
 8000cea:	f7ff ffa0 	bl	8000c2e <DMC_I2cRtcDecToBcd>
 8000cee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8000cf2:	f88d 0003 	strb.w	r0, [sp, #3]
	buf[4] = _BV(VBATEN) | (DMC_I2cRtcDecToBcd(DateTime->DayOfWeek) & 0x07); // set the day and enable battery backup (00000111)|(00001000, Bit 3 = 1)
 8000cf6:	4640      	mov	r0, r8
 8000cf8:	f7ff ff99 	bl	8000c2e <DMC_I2cRtcDecToBcd>
 8000cfc:	f000 0007 	and.w	r0, r0, #7
 8000d00:	f040 0008 	orr.w	r0, r0, #8
 8000d04:	f88d 0004 	strb.w	r0, [sp, #4]
	buf[5] = DMC_I2cRtcDecToBcd(DateTime->DayOfMonth) & 0x3f;    // set the date in month (00111111)
 8000d08:	7920      	ldrb	r0, [r4, #4]
 8000d0a:	f7ff ff90 	bl	8000c2e <DMC_I2cRtcDecToBcd>
 8000d0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8000d12:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[6] = DMC_I2cRtcDecToBcd(DateTime->Month) & 0x1f;                // set the month (00011111)
 8000d16:	4630      	mov	r0, r6
 8000d18:	f7ff ff89 	bl	8000c2e <DMC_I2cRtcDecToBcd>
 8000d1c:	f000 001f 	and.w	r0, r0, #31
 8000d20:	f88d 0006 	strb.w	r0, [sp, #6]
	buf[7] = DMC_I2cRtcDecToBcd(DateTime->Year);                        // set the year (11111111)
 8000d24:	4628      	mov	r0, r5
	uint8_t w1 = DMC_I2cRtcRegisterWrite(_address_RTC, buf, 8);
 8000d26:	4d12      	ldr	r5, [pc, #72]	; (8000d70 <DMC_I2cRtcSetDateTime+0xd4>)
	buf[7] = DMC_I2cRtcDecToBcd(DateTime->Year);                        // set the year (11111111)
 8000d28:	f7ff ff81 	bl	8000c2e <DMC_I2cRtcDecToBcd>
	uint8_t w1 = DMC_I2cRtcRegisterWrite(_address_RTC, buf, 8);
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	4669      	mov	r1, sp
	buf[7] = DMC_I2cRtcDecToBcd(DateTime->Year);                        // set the year (11111111)
 8000d30:	f88d 0007 	strb.w	r0, [sp, #7]
	uint8_t w1 = DMC_I2cRtcRegisterWrite(_address_RTC, buf, 8);
 8000d34:	7828      	ldrb	r0, [r5, #0]
 8000d36:	f7ff fec3 	bl	8000ac0 <DMC_I2cRtcRegisterWrite>
 8000d3a:	4606      	mov	r6, r0
	buf[1] = _BV(ST) | DMC_I2cRtcDecToBcd(DateTime->Second); // set seconds and enable clock (10000000)
 8000d3c:	7820      	ldrb	r0, [r4, #0]
	buf[0] = RTC_LOCATION;
 8000d3e:	f88d 7000 	strb.w	r7, [sp]
	buf[1] = _BV(ST) | DMC_I2cRtcDecToBcd(DateTime->Second); // set seconds and enable clock (10000000)
 8000d42:	f7ff ff74 	bl	8000c2e <DMC_I2cRtcDecToBcd>
 8000d46:	f060 007f 	orn	r0, r0, #127	; 0x7f
	uint8_t w2 = DMC_I2cRtcRegisterWrite(_address_RTC, buf, 2);
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4669      	mov	r1, sp
	buf[1] = _BV(ST) | DMC_I2cRtcDecToBcd(DateTime->Second); // set seconds and enable clock (10000000)
 8000d4e:	f88d 0001 	strb.w	r0, [sp, #1]
	uint8_t w2 = DMC_I2cRtcRegisterWrite(_address_RTC, buf, 2);
 8000d52:	7828      	ldrb	r0, [r5, #0]
 8000d54:	f7ff feb4 	bl	8000ac0 <DMC_I2cRtcRegisterWrite>
	_error = ((w1 != 0) || (w2 != 0));
 8000d58:	b93e      	cbnz	r6, 8000d6a <DMC_I2cRtcSetDateTime+0xce>
 8000d5a:	1bc0      	subs	r0, r0, r7
 8000d5c:	bf18      	it	ne
 8000d5e:	2001      	movne	r0, #1
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <DMC_I2cRtcSetDateTime+0xd8>)
 8000d62:	7018      	strb	r0, [r3, #0]
}
 8000d64:	b002      	add	sp, #8
 8000d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	e7f8      	b.n	8000d60 <DMC_I2cRtcSetDateTime+0xc4>
 8000d6e:	bf00      	nop
 8000d70:	24000261 	.word	0x24000261
 8000d74:	240003e4 	.word	0x240003e4

08000d78 <DMC_I2cRtcEepromWriteResetTickCounter>:
	DMC_I2cRtcEepromWriteRequested = TRUE;
}

void DMC_I2cRtcEepromWriteResetTickCounter(void)
{
	DMC_I2cRtcEepromWriteTickCounter = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4a02      	ldr	r2, [pc, #8]	; (8000d84 <DMC_I2cRtcEepromWriteResetTickCounter+0xc>)
 8000d7c:	6013      	str	r3, [r2, #0]
	DMC_I2cRtcEepromWriteAllowed = FALSE;
 8000d7e:	4a02      	ldr	r2, [pc, #8]	; (8000d88 <DMC_I2cRtcEepromWriteResetTickCounter+0x10>)
 8000d80:	7013      	strb	r3, [r2, #0]
 8000d82:	4770      	bx	lr
 8000d84:	240000b8 	.word	0x240000b8
 8000d88:	240000b4 	.word	0x240000b4

08000d8c <DMC_I2cRtcInit>:
{
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	b508      	push	{r3, lr}
 8000d90:	f10d 0e08 	add.w	lr, sp, #8
 8000d94:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	RtcHi2c2 = hi2c;
 8000d98:	4671      	mov	r1, lr
 8000d9a:	224c      	movs	r2, #76	; 0x4c
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <DMC_I2cRtcInit+0x38>)
 8000d9e:	f011 fb9a 	bl	80124d6 <memcpy>
	_address_RTC = MCP79412_RTC_ADDR << 1;
 8000da2:	22de      	movs	r2, #222	; 0xde
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <DMC_I2cRtcInit+0x3c>)
	DMC_I2cRtcSquareWave(SQWAVE_1_HZ);
 8000da6:	2000      	movs	r0, #0
	_address_RTC = MCP79412_RTC_ADDR << 1;
 8000da8:	701a      	strb	r2, [r3, #0]
	_address_EEPROM = MCP79412_EEPROM_ADDR << 1;
 8000daa:	22ae      	movs	r2, #174	; 0xae
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <DMC_I2cRtcInit+0x40>)
 8000dae:	701a      	strb	r2, [r3, #0]
	DMC_I2cRtcSquareWave(SQWAVE_1_HZ);
 8000db0:	f7ff ff20 	bl	8000bf4 <DMC_I2cRtcSquareWave>
	DMC_I2cRtcEepromWriteRequested = FALSE;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <DMC_I2cRtcInit+0x44>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000dbe:	b004      	add	sp, #16
	DMC_I2cRtcEepromWriteResetTickCounter();
 8000dc0:	f7ff bfda 	b.w	8000d78 <DMC_I2cRtcEepromWriteResetTickCounter>
 8000dc4:	240002f8 	.word	0x240002f8
 8000dc8:	24000261 	.word	0x24000261
 8000dcc:	24000263 	.word	0x24000263
 8000dd0:	240000b5 	.word	0x240000b5

08000dd4 <mb_set_exception>:
#include "dmc_tcp.h"

uint16_t mb_set_exception(uint8_t *buf, uint8_t exc)
{
  buf[MB_HDR_OFFSET + MB_HDR_FC] |= 0x80;
 8000dd4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  buf[MB_HDR_OFFSET + MB_HDR_EXCEPTION_CODE] = exc;
  uint16_t len = 3;

  buf[MB_HDR_OFFSET + MB_HDR_LENGTH] = len << 8;
  buf[MB_HDR_OFFSET + MB_HDR_LENGTH + 1] = len & 0xff;
 8000dd8:	2203      	movs	r2, #3
  buf[MB_HDR_OFFSET + MB_HDR_EXCEPTION_CODE] = exc;
 8000dda:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  buf[MB_HDR_OFFSET + MB_HDR_FC] |= 0x80;
 8000dde:	f063 037f 	orn	r3, r3, #127	; 0x7f
  buf[MB_HDR_OFFSET + MB_HDR_LENGTH + 1] = len & 0xff;
 8000de2:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
  buf[MB_HDR_OFFSET + MB_HDR_FC] |= 0x80;
 8000de6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  buf[MB_HDR_OFFSET + MB_HDR_LENGTH] = len << 8;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  len += 46;
  buf[IP_HDR_OFFSET + IP_HDR_TOTAL_LENGTH] = len << 8;
 8000df0:	7403      	strb	r3, [r0, #16]
  buf[IP_HDR_OFFSET + IP_HDR_TOTAL_LENGTH + 1] = len & 0xff;
 8000df2:	2331      	movs	r3, #49	; 0x31
 8000df4:	7443      	strb	r3, [r0, #17]
  // return total length
  return len + IP_HDR_OFFSET;
}
 8000df6:	203f      	movs	r0, #63	; 0x3f
 8000df8:	4770      	bx	lr

08000dfa <swap_buf_all>:
{
  uint8_t tmp[6];

  // Swap MAC
  memcpy(tmp, &buf[ETH_HDR_DEST_MAC], ETH_HDR_SIZE_MAC);
  memcpy(&buf[ETH_HDR_DEST_MAC], &buf[ETH_HDR_SOURCE_MAC], ETH_HDR_SIZE_MAC);
 8000dfa:	4603      	mov	r3, r0
  memcpy(tmp, &buf[ETH_HDR_DEST_MAC], ETH_HDR_SIZE_MAC);
 8000dfc:	7942      	ldrb	r2, [r0, #5]
 8000dfe:	7901      	ldrb	r1, [r0, #4]
{
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  memcpy(&buf[ETH_HDR_DEST_MAC], &buf[ETH_HDR_SOURCE_MAC], ETH_HDR_SIZE_MAC);
 8000e02:	f853 ef06 	ldr.w	lr, [r3, #6]!
  memcpy(tmp, &buf[ETH_HDR_DEST_MAC], ETH_HDR_SIZE_MAC);
 8000e06:	7807      	ldrb	r7, [r0, #0]
 8000e08:	7846      	ldrb	r6, [r0, #1]
 8000e0a:	7885      	ldrb	r5, [r0, #2]
 8000e0c:	78c4      	ldrb	r4, [r0, #3]
  memcpy(&buf[ETH_HDR_DEST_MAC], &buf[ETH_HDR_SOURCE_MAC], ETH_HDR_SIZE_MAC);
 8000e0e:	f8c0 e000 	str.w	lr, [r0]
 8000e12:	889b      	ldrh	r3, [r3, #4]
  memcpy(&buf[ETH_HDR_SOURCE_MAC], tmp, ETH_HDR_SIZE_MAC);
 8000e14:	72c2      	strb	r2, [r0, #11]
  memcpy(&buf[ETH_HDR_DEST_MAC], &buf[ETH_HDR_SOURCE_MAC], ETH_HDR_SIZE_MAC);
 8000e16:	8083      	strh	r3, [r0, #4]

  // Swap IP
  memcpy(tmp, &buf[IP_HDR_OFFSET + IP_HDR_DEST_IP], IP_HDR_SIZE_IP);
 8000e18:	f8d0 301e 	ldr.w	r3, [r0, #30]
  memcpy(&buf[IP_HDR_OFFSET + IP_HDR_DEST_IP], &buf[IP_HDR_OFFSET + IP_HDR_SOURCE_IP], IP_HDR_SIZE_IP);
 8000e1c:	f8d0 201a 	ldr.w	r2, [r0, #26]
  memcpy(&buf[IP_HDR_OFFSET + IP_HDR_SOURCE_IP], tmp, IP_HDR_SIZE_IP);
 8000e20:	f8c0 301a 	str.w	r3, [r0, #26]

  // Swap Port
  memcpy(tmp, &buf[TCP_HDR_OFFSET + TCP_HDR_DEST_PORT], TCP_HDR_SIZE_PORT);
 8000e24:	8c83      	ldrh	r3, [r0, #36]	; 0x24
  memcpy(&buf[IP_HDR_OFFSET + IP_HDR_DEST_IP], &buf[IP_HDR_OFFSET + IP_HDR_SOURCE_IP], IP_HDR_SIZE_IP);
 8000e26:	f8c0 201e 	str.w	r2, [r0, #30]
  memcpy(&buf[TCP_HDR_OFFSET + TCP_HDR_DEST_PORT], &buf[TCP_HDR_OFFSET + TCP_HDR_SOURCE_PORT], TCP_HDR_SIZE_PORT);
 8000e2a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
  memcpy(&buf[TCP_HDR_OFFSET + TCP_HDR_SOURCE_PORT], tmp, TCP_HDR_SIZE_PORT);
 8000e2c:	8443      	strh	r3, [r0, #34]	; 0x22

  // Swap SEQ ACK Number
  memcpy(tmp, &buf[TCP_HDR_OFFSET + TCP_HDR_SEQ_NUMBER], TCP_HDR_SIZE_SEQ);
 8000e2e:	f8d0 3026 	ldr.w	r3, [r0, #38]	; 0x26
  memcpy(&buf[TCP_HDR_OFFSET + TCP_HDR_DEST_PORT], &buf[TCP_HDR_OFFSET + TCP_HDR_SOURCE_PORT], TCP_HDR_SIZE_PORT);
 8000e32:	8482      	strh	r2, [r0, #36]	; 0x24
  memcpy(&buf[TCP_HDR_OFFSET + TCP_HDR_SEQ_NUMBER], &buf[TCP_HDR_OFFSET + TCP_HDR_ACK_NUMBER], TCP_HDR_SIZE_SEQ);
 8000e34:	f8d0 202a 	ldr.w	r2, [r0, #42]	; 0x2a
  memcpy(&buf[TCP_HDR_OFFSET + TCP_HDR_ACK_NUMBER], tmp, TCP_HDR_SIZE_SEQ);
 8000e38:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
  // Alter TCP_HDR_ACK_NUMBER
  buf[TCP_HDR_OFFSET + TCP_HDR_ACK_NUMBER + 3] += 15;
 8000e3c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  memcpy(&buf[ETH_HDR_SOURCE_MAC], tmp, ETH_HDR_SIZE_MAC);
 8000e40:	7187      	strb	r7, [r0, #6]
  buf[TCP_HDR_OFFSET + TCP_HDR_ACK_NUMBER + 3] += 15;
 8000e42:	330f      	adds	r3, #15
  memcpy(&buf[ETH_HDR_SOURCE_MAC], tmp, ETH_HDR_SIZE_MAC);
 8000e44:	71c6      	strb	r6, [r0, #7]
 8000e46:	7205      	strb	r5, [r0, #8]
  buf[TCP_HDR_OFFSET + TCP_HDR_ACK_NUMBER + 3] += 15;
 8000e48:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  // Alter Window Size
  buf[TCP_HDR_OFFSET + TCP_HDR_WINDOW_SIZE + 1] += 15;
 8000e4c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  memcpy(&buf[ETH_HDR_SOURCE_MAC], tmp, ETH_HDR_SIZE_MAC);
 8000e50:	7244      	strb	r4, [r0, #9]
  buf[TCP_HDR_OFFSET + TCP_HDR_WINDOW_SIZE + 1] += 15;
 8000e52:	330f      	adds	r3, #15
  memcpy(&buf[ETH_HDR_SOURCE_MAC], tmp, ETH_HDR_SIZE_MAC);
 8000e54:	7281      	strb	r1, [r0, #10]
  memcpy(&buf[TCP_HDR_OFFSET + TCP_HDR_SEQ_NUMBER], &buf[TCP_HDR_OFFSET + TCP_HDR_ACK_NUMBER], TCP_HDR_SIZE_SEQ);
 8000e56:	f8c0 2026 	str.w	r2, [r0, #38]	; 0x26
  buf[TCP_HDR_OFFSET + TCP_HDR_WINDOW_SIZE + 1] += 15;
 8000e5a:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 8000e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e60 <BSP_SD_Init>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8000e60:	2301      	movs	r3, #1
{
 8000e62:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8000e64:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8000e68:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d10e      	bne.n	8000e8e <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 8000e70:	4808      	ldr	r0, [pc, #32]	; (8000e94 <BSP_SD_Init+0x34>)
 8000e72:	f009 fd03 	bl	800a87c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8000e76:	b938      	cbnz	r0, 8000e88 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <BSP_SD_Init+0x34>)
 8000e7e:	f009 fc53 	bl	800a728 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8000e82:	3000      	adds	r0, #0
 8000e84:	bf18      	it	ne
 8000e86:	2001      	movne	r0, #1
}
 8000e88:	b003      	add	sp, #12
 8000e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 8000e8e:	2002      	movs	r0, #2
 8000e90:	e7fa      	b.n	8000e88 <BSP_SD_Init+0x28>
 8000e92:	bf00      	nop
 8000e94:	24000e8c 	.word	0x24000e8c

08000e98 <BSP_SD_ReadBlocks>:
{
 8000e98:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	4601      	mov	r1, r0
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <BSP_SD_ReadBlocks+0x1c>)
 8000ea4:	f009 f80c 	bl	8009ec0 <HAL_SD_ReadBlocks>
}
 8000ea8:	3000      	adds	r0, #0
 8000eaa:	bf18      	it	ne
 8000eac:	2001      	movne	r0, #1
 8000eae:	b003      	add	sp, #12
 8000eb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eb4:	24000e8c 	.word	0x24000e8c

08000eb8 <BSP_SD_WriteBlocks>:
{
 8000eb8:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	460a      	mov	r2, r1
 8000ec0:	4601      	mov	r1, r0
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <BSP_SD_WriteBlocks+0x1c>)
 8000ec4:	f009 f8ca 	bl	800a05c <HAL_SD_WriteBlocks>
}
 8000ec8:	3000      	adds	r0, #0
 8000eca:	bf18      	it	ne
 8000ecc:	2001      	movne	r0, #1
 8000ece:	b003      	add	sp, #12
 8000ed0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ed4:	24000e8c 	.word	0x24000e8c

08000ed8 <BSP_SD_GetCardState>:
{
 8000ed8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <BSP_SD_GetCardState+0x10>)
 8000edc:	f009 fcba 	bl	800a854 <HAL_SD_GetCardState>
}
 8000ee0:	3804      	subs	r0, #4
 8000ee2:	bf18      	it	ne
 8000ee4:	2001      	movne	r0, #1
 8000ee6:	bd08      	pop	{r3, pc}
 8000ee8:	24000e8c 	.word	0x24000e8c

08000eec <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8000eec:	4601      	mov	r1, r0
 8000eee:	4801      	ldr	r0, [pc, #4]	; (8000ef4 <BSP_SD_GetCardInfo+0x8>)
 8000ef0:	f009 bc08 	b.w	800a704 <HAL_SD_GetCardInfo>
 8000ef4:	24000e8c 	.word	0x24000e8c

08000ef8 <BSP_SD_WriteCpltCallback>:
 8000ef8:	4770      	bx	lr

08000efa <HAL_SD_TxCpltCallback>:
{
 8000efa:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8000efc:	f7ff fffc 	bl	8000ef8 <BSP_SD_WriteCpltCallback>
 8000f00:	bd08      	pop	{r3, pc}

08000f02 <BSP_SD_ReadCpltCallback>:
{
 8000f02:	4770      	bx	lr

08000f04 <HAL_SD_RxCpltCallback>:
{
 8000f04:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8000f06:	f7ff fffc 	bl	8000f02 <BSP_SD_ReadCpltCallback>
 8000f0a:	bd08      	pop	{r3, pc}

08000f0c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void) 
{
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	b086      	sub	sp, #24
  /* Local variables */
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig = {0};
 8000f10:	2210      	movs	r2, #16
 8000f12:	2100      	movs	r1, #0
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000f14:	2400      	movs	r4, #0
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig = {0};
 8000f16:	a802      	add	r0, sp, #8
 8000f18:	f011 fae8 	bl	80124ec <memset>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1c:	4b52      	ldr	r3, [pc, #328]	; (8001068 <MX_DMA_Init+0x15c>)
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000f1e:	4853      	ldr	r0, [pc, #332]	; (800106c <MX_DMA_Init+0x160>)
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000f20:	f04f 0e80 	mov.w	lr, #128	; 0x80
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f24:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f28:	f042 0201 	orr.w	r2, r2, #1
 8000f2c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f30:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f34:	f002 0201 	and.w	r2, r2, #1
 8000f38:	9200      	str	r2, [sp, #0]
 8000f3a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f3c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f40:	f042 0202 	orr.w	r2, r2, #2
 8000f44:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f4c:	6144      	str	r4, [r0, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f4e:	f003 0302 	and.w	r3, r3, #2
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f52:	6184      	str	r4, [r0, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000f54:	61c4      	str	r4, [r0, #28]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	9b01      	ldr	r3, [sp, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000f5a:	4b45      	ldr	r3, [pc, #276]	; (8001070 <MX_DMA_Init+0x164>)
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000f5c:	6204      	str	r4, [r0, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f5e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f60:	6304      	str	r4, [r0, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000f62:	e880 4018 	stmia.w	r0, {r3, r4, lr}
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6a:	60c3      	str	r3, [r0, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f70:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f72:	2304      	movs	r3, #4
 8000f74:	6243      	str	r3, [r0, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f76:	2303      	movs	r3, #3
 8000f78:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000f7a:	f003 f895 	bl	80040a8 <HAL_DMA_Init>
 8000f7e:	b108      	cbz	r0, 8000f84 <MX_DMA_Init+0x78>
  {
    Error_Handler();
 8000f80:	f001 f8da 	bl	8002138 <Error_Handler>
  }

  /* Configure the DMAMUX synchronization parameters for the selected DMA stream */
  pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8000f84:	2306      	movs	r3, #6
  pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
  pSyncConfig.SyncEnable = DISABLE;
  pSyncConfig.EventEnable = DISABLE;
  pSyncConfig.RequestNumber = 1;
  if (HAL_DMAEx_ConfigMuxSync(&hdma_memtomem_dma2_stream0, &pSyncConfig) != HAL_OK)
 8000f86:	a902      	add	r1, sp, #8
 8000f88:	4838      	ldr	r0, [pc, #224]	; (800106c <MX_DMA_Init+0x160>)
  pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8000f8a:	9302      	str	r3, [sp, #8]
  pSyncConfig.RequestNumber = 1;
 8000f8c:	2301      	movs	r3, #1
  pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8000f8e:	9403      	str	r4, [sp, #12]
  pSyncConfig.SyncEnable = DISABLE;
 8000f90:	f88d 4010 	strb.w	r4, [sp, #16]
  pSyncConfig.EventEnable = DISABLE;
 8000f94:	f88d 4011 	strb.w	r4, [sp, #17]
  pSyncConfig.RequestNumber = 1;
 8000f98:	9305      	str	r3, [sp, #20]
  if (HAL_DMAEx_ConfigMuxSync(&hdma_memtomem_dma2_stream0, &pSyncConfig) != HAL_OK)
 8000f9a:	f003 fbad 	bl	80046f8 <HAL_DMAEx_ConfigMuxSync>
 8000f9e:	b108      	cbz	r0, 8000fa4 <MX_DMA_Init+0x98>
  {
    Error_Handler();
 8000fa0:	f001 f8ca 	bl	8002138 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	200b      	movs	r0, #11
 8000fa8:	4611      	mov	r1, r2
 8000faa:	f002 fd1b 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fae:	200b      	movs	r0, #11
 8000fb0:	f002 fd60 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	200c      	movs	r0, #12
 8000fb8:	4611      	mov	r1, r2
 8000fba:	f002 fd13 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fbe:	200c      	movs	r0, #12
 8000fc0:	f002 fd58 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	200d      	movs	r0, #13
 8000fc8:	4611      	mov	r1, r2
 8000fca:	f002 fd0b 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000fce:	200d      	movs	r0, #13
 8000fd0:	f002 fd50 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	200e      	movs	r0, #14
 8000fd8:	4611      	mov	r1, r2
 8000fda:	f002 fd03 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fde:	200e      	movs	r0, #14
 8000fe0:	f002 fd48 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	4611      	mov	r1, r2
 8000fea:	f002 fcfb 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fee:	200f      	movs	r0, #15
 8000ff0:	f002 fd40 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2010      	movs	r0, #16
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	f002 fcf3 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ffe:	2010      	movs	r0, #16
 8001000:	f002 fd38 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2011      	movs	r0, #17
 8001008:	4611      	mov	r1, r2
 800100a:	f002 fceb 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800100e:	2011      	movs	r0, #17
 8001010:	f002 fd30 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	202f      	movs	r0, #47	; 0x2f
 8001018:	4611      	mov	r1, r2
 800101a:	f002 fce3 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800101e:	202f      	movs	r0, #47	; 0x2f
 8001020:	f002 fd28 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2038      	movs	r0, #56	; 0x38
 8001028:	4611      	mov	r1, r2
 800102a:	f002 fcdb 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800102e:	2038      	movs	r0, #56	; 0x38
 8001030:	f002 fd20 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2039      	movs	r0, #57	; 0x39
 8001038:	4611      	mov	r1, r2
 800103a:	f002 fcd3 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800103e:	2039      	movs	r0, #57	; 0x39
 8001040:	f002 fd18 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	203a      	movs	r0, #58	; 0x3a
 8001048:	4611      	mov	r1, r2
 800104a:	f002 fccb 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800104e:	203a      	movs	r0, #58	; 0x3a
 8001050:	f002 fd10 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	203b      	movs	r0, #59	; 0x3b
 8001058:	4611      	mov	r1, r2
 800105a:	f002 fcc3 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800105e:	203b      	movs	r0, #59	; 0x3b
 8001060:	f002 fd08 	bl	8003a74 <HAL_NVIC_EnableIRQ>

}
 8001064:	b006      	add	sp, #24
 8001066:	bd10      	pop	{r4, pc}
 8001068:	58024400 	.word	0x58024400
 800106c:	24000520 	.word	0x24000520
 8001070:	40020410 	.word	0x40020410

08001074 <SCB_CleanInvalidateDCache>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <SCB_CleanInvalidateDCache+0x50>)
 8001076:	2300      	movs	r3, #0
{
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800107a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800107e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001082:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001086:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800108a:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800108e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001092:	07a5      	lsls	r5, r4, #30
 8001094:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001096:	ea03 0e06 	and.w	lr, r3, r6
 800109a:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800109c:	4621      	mov	r1, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800109e:	ea4e 0700 	orr.w	r7, lr, r0
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80010a2:	3901      	subs	r1, #1
 80010a4:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80010a8:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 80010ac:	1c4f      	adds	r7, r1, #1
 80010ae:	d1f6      	bne.n	800109e <SCB_CleanInvalidateDCache+0x2a>
 80010b0:	3b20      	subs	r3, #32
    } while(sets-- != 0U);
 80010b2:	f113 0f20 	cmn.w	r3, #32
 80010b6:	d1ee      	bne.n	8001096 <SCB_CleanInvalidateDCache+0x22>
 80010b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010bc:	f3bf 8f6f 	isb	sy
 80010c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <pbuf_free_custom>:
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
//	dmc_puts("pbuf_free_custom\n");
  if(p!=NULL)
 80010c8:	b130      	cbz	r0, 80010d8 <pbuf_free_custom+0x10>
  {
    p->flags = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	7343      	strb	r3, [r0, #13]
    p->next = NULL;
 80010ce:	6003      	str	r3, [r0, #0]
    p->len = p->tot_len = 0;
 80010d0:	8103      	strh	r3, [r0, #8]
 80010d2:	8143      	strh	r3, [r0, #10]
    p->ref = 0;
 80010d4:	81c3      	strh	r3, [r0, #14]
    p->payload = NULL;
 80010d6:	6043      	str	r3, [r0, #4]
 80010d8:	4770      	bx	lr

080010da <ETH_PHY_IO_DeInit>:
  */
int32_t ETH_PHY_IO_DeInit (void)
{
//	dmc_puts("ETH_PHY_IO_DeInit\n");
  return 0;
}
 80010da:	2000      	movs	r0, #0
 80010dc:	4770      	bx	lr
	...

080010e0 <low_level_output>:
{
 80010e0:	b570      	push	{r4, r5, r6, lr}
   uint32_t i=0, framelen = 0;
 80010e2:	2200      	movs	r2, #0
{
 80010e4:	b08c      	sub	sp, #48	; 0x30
 80010e6:	460c      	mov	r4, r1
 80010e8:	466b      	mov	r3, sp
   uint32_t i=0, framelen = 0;
 80010ea:	4611      	mov	r1, r2
 80010ec:	466e      	mov	r6, sp
  for(q = p; q != NULL; q = q->next)
 80010ee:	b964      	cbnz	r4, 800110a <low_level_output+0x2a>
  TxConfig.Length = framelen;
 80010f0:	4d0f      	ldr	r5, [pc, #60]	; (8001130 <low_level_output+0x50>)
 80010f2:	606a      	str	r2, [r5, #4]
  TxConfig.TxBuffer = Txbuffer;
 80010f4:	60ae      	str	r6, [r5, #8]
  SCB_CleanInvalidateDCache();
 80010f6:	f7ff ffbd 	bl	8001074 <SCB_CleanInvalidateDCache>
  HAL_ETH_Transmit(&heth, &TxConfig, 0);
 80010fa:	4622      	mov	r2, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <low_level_output+0x54>)
 8001100:	f003 fea5 	bl	8004e4e <HAL_ETH_Transmit>
  return errval;
 8001104:	4620      	mov	r0, r4
}
 8001106:	b00c      	add	sp, #48	; 0x30
 8001108:	bd70      	pop	{r4, r5, r6, pc}
    if(i >= ETH_TX_DESC_CNT)	
 800110a:	2904      	cmp	r1, #4
 800110c:	d00d      	beq.n	800112a <low_level_output+0x4a>
    Txbuffer[i].buffer = q->payload;
 800110e:	6860      	ldr	r0, [r4, #4]
 8001110:	6018      	str	r0, [r3, #0]
    Txbuffer[i].len = q->len;
 8001112:	8960      	ldrh	r0, [r4, #10]
 8001114:	6058      	str	r0, [r3, #4]
    framelen += q->len;
 8001116:	4402      	add	r2, r0
    if(i>0)
 8001118:	b109      	cbz	r1, 800111e <low_level_output+0x3e>
      Txbuffer[i-1].next = &Txbuffer[i];
 800111a:	f843 3c04 	str.w	r3, [r3, #-4]
    if(q->next == NULL)
 800111e:	6824      	ldr	r4, [r4, #0]
 8001120:	b904      	cbnz	r4, 8001124 <low_level_output+0x44>
      Txbuffer[i].next = NULL;
 8001122:	609c      	str	r4, [r3, #8]
    i++;
 8001124:	3101      	adds	r1, #1
 8001126:	330c      	adds	r3, #12
 8001128:	e7e1      	b.n	80010ee <low_level_output+0xe>
      return ERR_IF;
 800112a:	f06f 000b 	mvn.w	r0, #11
 800112e:	e7ea      	b.n	8001106 <low_level_output+0x26>
 8001130:	24000620 	.word	0x24000620
 8001134:	240005b8 	.word	0x240005b8

08001138 <ETH_PHY_IO_GetTick>:
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
//	dmc_puts("ETH_PHY_IO_GetTick\n");
  return HAL_GetTick();
 8001138:	f002 bc08 	b.w	800394c <HAL_GetTick>

0800113c <ETH_PHY_IO_Init>:
{  
 800113c:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 800113e:	4802      	ldr	r0, [pc, #8]	; (8001148 <ETH_PHY_IO_Init+0xc>)
 8001140:	f004 f84e 	bl	80051e0 <HAL_ETH_SetMDIOClockRange>
}
 8001144:	2000      	movs	r0, #0
 8001146:	bd08      	pop	{r3, pc}
 8001148:	240005b8 	.word	0x240005b8

0800114c <ETH_PHY_IO_ReadReg>:
{
 800114c:	b508      	push	{r3, lr}
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800114e:	4613      	mov	r3, r2
 8001150:	460a      	mov	r2, r1
 8001152:	4601      	mov	r1, r0
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <ETH_PHY_IO_ReadReg+0x18>)
 8001156:	f003 ffe5 	bl	8005124 <HAL_ETH_ReadPHYRegister>
 800115a:	3000      	adds	r0, #0
 800115c:	bf18      	it	ne
 800115e:	2001      	movne	r0, #1
}
 8001160:	4240      	negs	r0, r0
 8001162:	bd08      	pop	{r3, pc}
 8001164:	240005b8 	.word	0x240005b8

08001168 <ETH_PHY_IO_WriteReg>:
{
 8001168:	b508      	push	{r3, lr}
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800116a:	4613      	mov	r3, r2
 800116c:	460a      	mov	r2, r1
 800116e:	4601      	mov	r1, r0
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <ETH_PHY_IO_WriteReg+0x18>)
 8001172:	f004 f805 	bl	8005180 <HAL_ETH_WritePHYRegister>
 8001176:	3000      	adds	r0, #0
 8001178:	bf18      	it	ne
 800117a:	2001      	movne	r0, #1
}
 800117c:	4240      	negs	r0, r0
 800117e:	bd08      	pop	{r3, pc}
 8001180:	240005b8 	.word	0x240005b8

08001184 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8001184:	6802      	ldr	r2, [r0, #0]
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_ETH_MspInit+0xc4>)
 8001188:	429a      	cmp	r2, r3
{
 800118a:	b570      	push	{r4, r5, r6, lr}
 800118c:	b088      	sub	sp, #32
  if(ethHandle->Instance==ETH)
 800118e:	d159      	bne.n	8001244 <HAL_ETH_MspInit+0xc0>
		dmc_puts("HAL_ETH_MspInit\n");
 8001190:	482e      	ldr	r0, [pc, #184]	; (800124c <HAL_ETH_MspInit+0xc8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2400      	movs	r4, #0
		dmc_puts("HAL_ETH_MspInit\n");
 8001194:	f7ff fc1a 	bl	80009cc <dmc_puts>
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_ETH_MspInit+0xcc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800119c:	260b      	movs	r6, #11
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800119e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	a903      	add	r1, sp, #12
 80011a4:	482b      	ldr	r0, [pc, #172]	; (8001254 <HAL_ETH_MspInit+0xd0>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80011a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011aa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80011ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80011b2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80011b6:	9200      	str	r2, [sp, #0]
 80011b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80011ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80011be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011c2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80011c6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80011ca:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80011ce:	9201      	str	r2, [sp, #4]
 80011d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011d2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80011d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011da:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80011de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	9504      	str	r5, [sp, #16]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; /* Must be GPIO_SPEED_FREQ_HIGH */
 80011ea:	9506      	str	r5, [sp, #24]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011f0:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f2:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011f4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f004 fff5 	bl	80061e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011fa:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	a903      	add	r1, sp, #12
 80011fe:	4816      	ldr	r0, [pc, #88]	; (8001258 <HAL_ETH_MspInit+0xd4>)
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001200:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; /* Must be GPIO_SPEED_FREQ_HIGH */
 8001206:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001208:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f004 ffeb 	bl	80061e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin|RMII_TXD1_Pin;
 800120e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	a903      	add	r1, sp, #12
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <HAL_ETH_MspInit+0xd8>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin|RMII_TXD1_Pin;
 8001216:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; /* Must be GPIO_SPEED_FREQ_HIGH */
 800121c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800121e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f004 ffe0 	bl	80061e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8001224:	4622      	mov	r2, r4
 8001226:	4621      	mov	r1, r4
 8001228:	203d      	movs	r0, #61	; 0x3d
 800122a:	f002 fbdb 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800122e:	203d      	movs	r0, #61	; 0x3d
 8001230:	f002 fc20 	bl	8003a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8001234:	203e      	movs	r0, #62	; 0x3e
 8001236:	4622      	mov	r2, r4
 8001238:	4621      	mov	r1, r4
 800123a:	f002 fbd3 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800123e:	203e      	movs	r0, #62	; 0x3e
 8001240:	f002 fc18 	bl	8003a74 <HAL_NVIC_EnableIRQ>
}
 8001244:	b008      	add	sp, #32
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	40028000 	.word	0x40028000
 800124c:	080133e0 	.word	0x080133e0
 8001250:	58024400 	.word	0x58024400
 8001254:	58020000 	.word	0x58020000
 8001258:	58020800 	.word	0x58020800
 800125c:	58020400 	.word	0x58020400

08001260 <ethernetif_init>:
{
 8001260:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001264:	4604      	mov	r4, r0
	dmc_puts("ethernetif_init\n");
 8001266:	484a      	ldr	r0, [pc, #296]	; (8001390 <ethernetif_init+0x130>)
 8001268:	f7ff fbb0 	bl	80009cc <dmc_puts>
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800126c:	b934      	cbnz	r4, 800127c <ethernetif_init+0x1c>
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <ethernetif_init+0x134>)
 8001270:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001274:	4948      	ldr	r1, [pc, #288]	; (8001398 <ethernetif_init+0x138>)
 8001276:	4849      	ldr	r0, [pc, #292]	; (800139c <ethernetif_init+0x13c>)
 8001278:	f011 f9ec 	bl	8012654 <iprintf>
  netif->name[0] = IFNAME0;
 800127c:	2373      	movs	r3, #115	; 0x73
	dmc_puts("low_level_init\n");
 800127e:	4848      	ldr	r0, [pc, #288]	; (80013a0 <ethernetif_init+0x140>)
  heth.Instance = ETH;
 8001280:	4e48      	ldr	r6, [pc, #288]	; (80013a4 <ethernetif_init+0x144>)
  MACAddr[0] = 0x00;
 8001282:	2500      	movs	r5, #0
  netif->name[0] = IFNAME0;
 8001284:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8001288:	2374      	movs	r3, #116	; 0x74
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800128a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80013c8 <ethernetif_init+0x168>
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800128e:	46b1      	mov	r9, r6
  netif->name[1] = IFNAME1;
 8001290:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  netif->output = etharp_output;
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <ethernetif_init+0x148>)
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8001296:	f8df a134 	ldr.w	sl, [pc, #308]	; 80013cc <ethernetif_init+0x16c>
  netif->output = etharp_output;
 800129a:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 800129c:	4b43      	ldr	r3, [pc, #268]	; (80013ac <ethernetif_init+0x14c>)
 800129e:	61a3      	str	r3, [r4, #24]
	dmc_puts("low_level_init\n");
 80012a0:	f7ff fb94 	bl	80009cc <dmc_puts>
  heth.Instance = ETH;
 80012a4:	4b42      	ldr	r3, [pc, #264]	; (80013b0 <ethernetif_init+0x150>)
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80012a6:	4630      	mov	r0, r6
  MACAddr[0] = 0x00;
 80012a8:	f88d 5000 	strb.w	r5, [sp]
  heth.Instance = ETH;
 80012ac:	6033      	str	r3, [r6, #0]
  MACAddr[1] = 0x80;
 80012ae:	2380      	movs	r3, #128	; 0x80
  MACAddr[3] = 0x00;
 80012b0:	f88d 5003 	strb.w	r5, [sp, #3]
  MACAddr[1] = 0x80;
 80012b4:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 80012b8:	23e1      	movs	r3, #225	; 0xe1
  MACAddr[4] = 0x00;
 80012ba:	f88d 5004 	strb.w	r5, [sp, #4]
  MACAddr[2] = 0xE1;
 80012be:	f88d 3002 	strb.w	r3, [sp, #2]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80012c2:	2301      	movs	r3, #1
  MACAddr[5] = 0x00;
 80012c4:	f88d 5005 	strb.w	r5, [sp, #5]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80012c8:	7233      	strb	r3, [r6, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80012ca:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <ethernetif_init+0x154>)
  heth.Init.MACAddr = &MACAddr[0];
 80012cc:	f8c6 d004 	str.w	sp, [r6, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 80012d0:	60f3      	str	r3, [r6, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80012d2:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <ethernetif_init+0x158>)
 80012d4:	6133      	str	r3, [r6, #16]
  heth.Init.RxBuffLen = 1524;
 80012d6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80012da:	6173      	str	r3, [r6, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80012dc:	f003 ffbc 	bl	8005258 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80012e0:	2234      	movs	r2, #52	; 0x34
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80012e2:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80012e4:	4629      	mov	r1, r5
 80012e6:	4640      	mov	r0, r8
 80012e8:	f011 f900 	bl	80124ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80012ec:	2321      	movs	r3, #33	; 0x21
 80012ee:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80012f6:	f8c8 3014 	str.w	r3, [r8, #20]
    rx_pbuf[idx].custom_free_function = pbuf_free_custom;
 80012fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80013d0 <ethernetif_init+0x170>
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80012fe:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 8001302:	2300      	movs	r3, #0
 8001304:	4629      	mov	r1, r5
 8001306:	4648      	mov	r0, r9
 8001308:	fb02 a205 	mla	r2, r2, r5, sl
 800130c:	f003 fd50 	bl	8004db0 <HAL_ETH_DescAssignMemory>
    rx_pbuf[idx].custom_free_function = pbuf_free_custom;
 8001310:	2314      	movs	r3, #20
 8001312:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <ethernetif_init+0x15c>)
 8001314:	fb03 8305 	mla	r3, r3, r5, r8
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8001318:	3501      	adds	r5, #1
 800131a:	2d04      	cmp	r5, #4
    rx_pbuf[idx].custom_free_function = pbuf_free_custom;
 800131c:	611a      	str	r2, [r3, #16]
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800131e:	d1ee      	bne.n	80012fe <ethernetif_init+0x9e>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8001320:	2306      	movs	r3, #6
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8001322:	4927      	ldr	r1, [pc, #156]	; (80013c0 <ethernetif_init+0x160>)
 8001324:	4827      	ldr	r0, [pc, #156]	; (80013c4 <ethernetif_init+0x164>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8001326:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800132a:	6873      	ldr	r3, [r6, #4]
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8001332:	785a      	ldrb	r2, [r3, #1]
 8001334:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8001338:	789a      	ldrb	r2, [r3, #2]
 800133a:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800133e:	78da      	ldrb	r2, [r3, #3]
 8001340:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8001344:	791a      	ldrb	r2, [r3, #4]
 8001346:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800134a:	795b      	ldrb	r3, [r3, #5]
 800134c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 8001350:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001354:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8001356:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800135a:	f043 030a 	orr.w	r3, r3, #10
 800135e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8001362:	f001 fd09 	bl	8002d78 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8001366:	4817      	ldr	r0, [pc, #92]	; (80013c4 <ethernetif_init+0x164>)
 8001368:	f001 fd1a 	bl	8002da0 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 800136c:	b967      	cbnz	r7, 8001388 <ethernetif_init+0x128>
    netif_set_up(netif);
 800136e:	4620      	mov	r0, r4
 8001370:	f00d fe68 	bl	800f044 <netif_set_up>
    netif_set_link_up(netif);
 8001374:	4620      	mov	r0, r4
 8001376:	f00d fe81 	bl	800f07c <netif_set_link_up>
    HAL_ETH_Start(&heth);
 800137a:	480a      	ldr	r0, [pc, #40]	; (80013a4 <ethernetif_init+0x144>)
 800137c:	f003 fd34 	bl	8004de8 <HAL_ETH_Start>
}
 8001380:	2000      	movs	r0, #0
 8001382:	b002      	add	sp, #8
 8001384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Error_Handler();
 8001388:	f000 fed6 	bl	8002138 <Error_Handler>
 800138c:	e7f8      	b.n	8001380 <ethernetif_init+0x120>
 800138e:	bf00      	nop
 8001390:	080133f1 	.word	0x080133f1
 8001394:	08013402 	.word	0x08013402
 8001398:	0801341c 	.word	0x0801341c
 800139c:	0801342a 	.word	0x0801342a
 80013a0:	08013452 	.word	0x08013452
 80013a4:	240005b8 	.word	0x240005b8
 80013a8:	0800dbfd 	.word	0x0800dbfd
 80013ac:	080010e1 	.word	0x080010e1
 80013b0:	40028000 	.word	0x40028000
 80013b4:	30040060 	.word	0x30040060
 80013b8:	30040000 	.word	0x30040000
 80013bc:	080010c9 	.word	0x080010c9
 80013c0:	24000000 	.word	0x24000000
 80013c4:	24000598 	.word	0x24000598
 80013c8:	24000620 	.word	0x24000620
 80013cc:	30040200 	.word	0x30040200
 80013d0:	24000654 	.word	0x24000654

080013d4 <sys_now>:
  return HAL_GetTick();
 80013d4:	f002 baba 	b.w	800394c <HAL_GetTick>

080013d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80013d8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80013da:	4903      	ldr	r1, [pc, #12]	; (80013e8 <MX_FATFS_Init+0x10>)
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_FATFS_Init+0x14>)
 80013de:	f00c f905 	bl	800d5ec <FATFS_LinkDriver>
 80013e2:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <MX_FATFS_Init+0x18>)
 80013e4:	7018      	strb	r0, [r3, #0]
 80013e6:	bd08      	pop	{r3, pc}
 80013e8:	240006a5 	.word	0x240006a5
 80013ec:	080135ac 	.word	0x080135ac
 80013f0:	240006a4 	.word	0x240006a4

080013f4 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80013f4:	b508      	push	{r3, lr}

  hfdcan1.Instance = FDCAN1;
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <MX_FDCAN1_Init+0x58>)
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = DISABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 1;
 80013f8:	2201      	movs	r2, #1
  hfdcan1.Instance = FDCAN1;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_FDCAN1_Init+0x5c>)
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80013fc:	2102      	movs	r1, #2
  hfdcan1.Init.NominalPrescaler = 1;
 80013fe:	6142      	str	r2, [r0, #20]
  hfdcan1.Instance = FDCAN1;
 8001400:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001402:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001404:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 1;
 8001406:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001408:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800140a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800140c:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800140e:	2204      	movs	r2, #4
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001410:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001412:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001414:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001416:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001418:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800141a:	61c1      	str	r1, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800141c:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.MessageRAMOffset = 0;
 800141e:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001420:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001422:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001424:	6403      	str	r3, [r0, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001426:	6442      	str	r2, [r0, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001428:	6483      	str	r3, [r0, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800142a:	64c2      	str	r2, [r0, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800142c:	6503      	str	r3, [r0, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800142e:	6542      	str	r2, [r0, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001430:	6583      	str	r3, [r0, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001432:	65c3      	str	r3, [r0, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001434:	6603      	str	r3, [r0, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001436:	6643      	str	r3, [r0, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001438:	6682      	str	r2, [r0, #104]	; 0x68
//  hfdcan1.msgRam.TxBufferSA = 0;
//  hfdcan1.msgRam.TxFIFOQSA = 0;
//  hfdcan1.msgRam.TTMemorySA = 0;
//  hfdcan1.msgRam.EndAddress = 0;
//  hfdcan1.ErrorCode = 0;
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800143a:	f004 f84d 	bl	80054d8 <HAL_FDCAN_Init>
 800143e:	b118      	cbz	r0, 8001448 <MX_FDCAN1_Init+0x54>
  {
    Error_Handler();
  }

}
 8001440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001444:	f000 be78 	b.w	8002138 <Error_Handler>
 8001448:	bd08      	pop	{r3, pc}
 800144a:	bf00      	nop
 800144c:	24000b0c 	.word	0x24000b0c
 8001450:	4000a000 	.word	0x4000a000

08001454 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001454:	b508      	push	{r3, lr}

  hfdcan2.Instance = FDCAN2;
 8001456:	4815      	ldr	r0, [pc, #84]	; (80014ac <MX_FDCAN2_Init+0x58>)
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = DISABLE;
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 1;
 8001458:	2201      	movs	r2, #1
  hfdcan2.Instance = FDCAN2;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_FDCAN2_Init+0x5c>)
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800145c:	2102      	movs	r1, #2
  hfdcan2.Init.NominalPrescaler = 1;
 800145e:	6142      	str	r2, [r0, #20]
  hfdcan2.Instance = FDCAN2;
 8001460:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001462:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001464:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 1;
 8001466:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001468:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800146a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800146c:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800146e:	2204      	movs	r2, #4
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001470:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001472:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001474:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001476:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001478:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800147a:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800147c:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.MessageRAMOffset = 0;
 800147e:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001480:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001482:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001484:	6403      	str	r3, [r0, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001486:	6442      	str	r2, [r0, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8001488:	6483      	str	r3, [r0, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800148a:	64c2      	str	r2, [r0, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800148c:	6503      	str	r3, [r0, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800148e:	6542      	str	r2, [r0, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001490:	6583      	str	r3, [r0, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8001492:	65c3      	str	r3, [r0, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8001494:	6603      	str	r3, [r0, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001496:	6643      	str	r3, [r0, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001498:	6682      	str	r2, [r0, #104]	; 0x68
//  hfdcan2.msgRam.TxBufferSA = 0;
//  hfdcan2.msgRam.TxFIFOQSA = 0;
//  hfdcan2.msgRam.TTMemorySA = 0;
//  hfdcan2.msgRam.EndAddress = 0;
//  hfdcan2.ErrorCode = 0;
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800149a:	f004 f81d 	bl	80054d8 <HAL_FDCAN_Init>
 800149e:	b118      	cbz	r0, 80014a8 <MX_FDCAN2_Init+0x54>
  {
    Error_Handler();
  }

}
 80014a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80014a4:	f000 be48 	b.w	8002138 <Error_Handler>
 80014a8:	bd08      	pop	{r3, pc}
 80014aa:	bf00      	nop
 80014ac:	24000ba8 	.word	0x24000ba8
 80014b0:	4000a400 	.word	0x4000a400

080014b4 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80014b4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	2214      	movs	r2, #20
{
 80014b8:	b08a      	sub	sp, #40	; 0x28
 80014ba:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	2100      	movs	r1, #0
 80014be:	eb0d 0002 	add.w	r0, sp, r2
 80014c2:	f011 f813 	bl	80124ec <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	4a41      	ldr	r2, [pc, #260]	; (80015d0 <HAL_FDCAN_MspInit+0x11c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d143      	bne.n	8001556 <HAL_FDCAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80014ce:	4a41      	ldr	r2, [pc, #260]	; (80015d4 <HAL_FDCAN_MspInit+0x120>)
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80014d4:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80014d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80014d8:	d10c      	bne.n	80014f4 <HAL_FDCAN_MspInit+0x40>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_FDCAN_MspInit+0x124>)
 80014dc:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80014e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014e4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 80014e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	9b01      	ldr	r3, [sp, #4]
    }
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f4:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <HAL_FDCAN_MspInit+0x124>)
    GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f6:	a905      	add	r1, sp, #20
 80014f8:	4838      	ldr	r0, [pc, #224]	; (80015dc <HAL_FDCAN_MspInit+0x128>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8001512:	2303      	movs	r3, #3
 8001514:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800151a:	2309      	movs	r3, #9
 800151c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	f004 fe61 	bl	80061e4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2013      	movs	r0, #19
 8001526:	4611      	mov	r1, r2
 8001528:	f002 fa5c 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800152c:	2013      	movs	r0, #19
 800152e:	f002 faa1 	bl	8003a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2015      	movs	r0, #21
 8001536:	4611      	mov	r1, r2
 8001538:	f002 fa54 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800153c:	2015      	movs	r0, #21

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 800153e:	f002 fa99 	bl	8003a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	203f      	movs	r0, #63	; 0x3f
 8001546:	4611      	mov	r1, r2
 8001548:	f002 fa4c 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 800154c:	203f      	movs	r0, #63	; 0x3f
 800154e:	f002 fa91 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001552:	b00a      	add	sp, #40	; 0x28
 8001554:	bd10      	pop	{r4, pc}
  else if(fdcanHandle->Instance==FDCAN2)
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <HAL_FDCAN_MspInit+0x12c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d1fa      	bne.n	8001552 <HAL_FDCAN_MspInit+0x9e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_FDCAN_MspInit+0x120>)
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001562:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001564:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001566:	d10c      	bne.n	8001582 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_FDCAN_MspInit+0x124>)
 800156a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800156e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001572:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8001576:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800157a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157e:	9303      	str	r3, [sp, #12]
 8001580:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_FDCAN_MspInit+0x124>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	a905      	add	r1, sp, #20
 8001586:	4817      	ldr	r0, [pc, #92]	; (80015e4 <HAL_FDCAN_MspInit+0x130>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800158c:	f042 0202 	orr.w	r2, r2, #2
 8001590:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	9304      	str	r3, [sp, #16]
 800159e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 80015a0:	2360      	movs	r3, #96	; 0x60
 80015a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80015a8:	2309      	movs	r3, #9
 80015aa:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f004 fe1a 	bl	80061e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2014      	movs	r0, #20
 80015b4:	4611      	mov	r1, r2
 80015b6:	f002 fa15 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80015ba:	2014      	movs	r0, #20
 80015bc:	f002 fa5a 	bl	8003a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2016      	movs	r0, #22
 80015c4:	4611      	mov	r1, r2
 80015c6:	f002 fa0d 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80015ca:	2016      	movs	r0, #22
 80015cc:	e7b7      	b.n	800153e <HAL_FDCAN_MspInit+0x8a>
 80015ce:	bf00      	nop
 80015d0:	4000a000 	.word	0x4000a000
 80015d4:	240000bc 	.word	0x240000bc
 80015d8:	58024400 	.word	0x58024400
 80015dc:	58020c00 	.word	0x58020c00
 80015e0:	4000a400 	.word	0x4000a400
 80015e4:	58020400 	.word	0x58020400

080015e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ec:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	2214      	movs	r2, #20
 80015f0:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80015f2:	4f92      	ldr	r7, [pc, #584]	; (800183c <MX_GPIO_Init+0x254>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	a809      	add	r0, sp, #36	; 0x24
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 80015f6:	4d92      	ldr	r5, [pc, #584]	; (8001840 <MX_GPIO_Init+0x258>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f010 ff78 	bl	80124ec <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fc:	4b91      	ldr	r3, [pc, #580]	; (8001844 <MX_GPIO_Init+0x25c>)
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80015fe:	4638      	mov	r0, r7
 8001600:	2110      	movs	r1, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001602:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAN2_EN_Pin|CAN1_EN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = S1_1_Pin|S1_2_Pin|S1_3_Pin|S1_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001606:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(USART2_TXE_GPIO_Port, USART2_TXE_Pin, GPIO_PIN_RESET);
 8001608:	f8df 8240 	ldr.w	r8, [pc, #576]	; 800184c <MX_GPIO_Init+0x264>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	f042 0210 	orr.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOC, LED_RUN_Pin|LED_CAN1_OK_Pin|LED_CAN2_OK_Pin, GPIO_PIN_RESET);
 8001612:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8001850 <MX_GPIO_Init+0x268>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INTRN1_Pin|PME1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161a:	f8df b238 	ldr.w	fp, [pc, #568]	; 8001854 <MX_GPIO_Init+0x26c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001622:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001626:	f002 0210 	and.w	r2, r2, #16
 800162a:	9203      	str	r2, [sp, #12]
 800162c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001632:	f042 0204 	orr.w	r2, r2, #4
 8001636:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800163a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800163e:	f002 0204 	and.w	r2, r2, #4
 8001642:	9204      	str	r2, [sp, #16]
 8001644:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001646:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800164a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800164e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001652:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001656:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800165a:	9205      	str	r2, [sp, #20]
 800165c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800166a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800166e:	f002 0201 	and.w	r2, r2, #1
 8001672:	9206      	str	r2, [sp, #24]
 8001674:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800167a:	f042 0202 	orr.w	r2, r2, #2
 800167e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001682:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001686:	f002 0202 	and.w	r2, r2, #2
 800168a:	9207      	str	r2, [sp, #28]
 800168c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001692:	f042 0208 	orr.w	r2, r2, #8
 8001696:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800169a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	9308      	str	r3, [sp, #32]
 80016a6:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80016a8:	f004 ff02 	bl	80064b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 80016ac:	4628      	mov	r0, r5
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b4:	f004 fefc 	bl	80064b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(UART7_TXE_GPIO_Port, UART7_TXE_Pin, GPIO_PIN_RESET);
 80016b8:	4628      	mov	r0, r5
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c0:	f004 fef6 	bl	80064b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USART2_TXE_GPIO_Port, USART2_TXE_Pin, GPIO_PIN_RESET);
 80016c4:	4640      	mov	r0, r8
 80016c6:	2200      	movs	r2, #0
 80016c8:	2110      	movs	r1, #16
 80016ca:	f004 fef1 	bl	80064b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_RUN_Pin|LED_CAN1_OK_Pin|LED_CAN2_OK_Pin, GPIO_PIN_RESET);
 80016ce:	4648      	mov	r0, r9
 80016d0:	2200      	movs	r2, #0
 80016d2:	21c1      	movs	r1, #193	; 0xc1
 80016d4:	f004 feec 	bl	80064b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_RS1_OK_Pin|LED_RS1_ERR_Pin|LED_RS2_OK_Pin|LED_RS2_ERR_Pin, GPIO_PIN_RESET);
 80016d8:	4638      	mov	r0, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80016e0:	f004 fee6 	bl	80064b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, CAN2_EN_Pin|CAN1_EN_Pin, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	4628      	mov	r0, r5
 80016e8:	2103      	movs	r1, #3
 80016ea:	f004 fee1 	bl	80064b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = S1_1_Pin|S1_2_Pin|S1_3_Pin|S1_4_Pin;
 80016ee:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f0:	a909      	add	r1, sp, #36	; 0x24
 80016f2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = S1_1_Pin|S1_2_Pin|S1_3_Pin|S1_4_Pin;
 80016f4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f8:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fa:	f004 fd73 	bl	80061e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 80016fe:	f24e 030c 	movw	r3, #57356	; 0xe00c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	a909      	add	r1, sp, #36	; 0x24
 8001704:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001706:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800170a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170e:	f004 fd69 	bl	80061e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RUN_Pin|LED_CAN1_OK_Pin|LED_CAN2_OK_Pin;
 8001712:	23c1      	movs	r3, #193	; 0xc1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001714:	a909      	add	r1, sp, #36	; 0x24
 8001716:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = INTRN1_Pin|PME1_Pin;
 8001718:	f04f 0909 	mov.w	r9, #9
  GPIO_InitStruct.Pin = LED_RUN_Pin|LED_CAN1_OK_Pin|LED_CAN2_OK_Pin;
 800171c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f004 fd5e 	bl	80061e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	a909      	add	r1, sp, #36	; 0x24
 800172a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = INTRN1_Pin|PME1_Pin;
 800172c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001730:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f004 fd55 	bl	80061e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9;
 800173a:	f240 2303 	movw	r3, #515	; 0x203
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	a909      	add	r1, sp, #36	; 0x24
 8001740:	4841      	ldr	r0, [pc, #260]	; (8001848 <MX_GPIO_Init+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9;
 8001742:	9309      	str	r3, [sp, #36]	; 0x24
 8001744:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001746:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f004 fd4a 	bl	80061e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UART7_TXE_Pin|CAN2_EN_Pin|CAN1_EN_Pin;
 8001750:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001752:	a909      	add	r1, sp, #36	; 0x24
 8001754:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = UART7_TXE_Pin|CAN2_EN_Pin|CAN1_EN_Pin;
 8001758:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800175e:	f004 fd41 	bl	80061e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001762:	f44f 4304 	mov.w	r3, #33792	; 0x8400
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001766:	a909      	add	r1, sp, #36	; 0x24
 8001768:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800176e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART2_TXE_Pin;
 8001770:	f04f 0a10 	mov.w	sl, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001776:	f004 fd35 	bl	80061e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PME2_Pin|INTRN2_Pin;
 800177a:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177e:	a909      	add	r1, sp, #36	; 0x24
 8001780:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001782:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = PME2_Pin|INTRN2_Pin;
 8001786:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178a:	f004 fd2b 	bl	80061e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin;
 800178e:	f24c 4308 	movw	r3, #50184	; 0xc408
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001792:	a909      	add	r1, sp, #36	; 0x24
 8001794:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin;
 8001798:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179c:	f004 fd22 	bl	80061e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RS1_OK_Pin|LED_RS1_ERR_Pin|LED_RS2_OK_Pin|LED_RS2_ERR_Pin;
 80017a0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	a909      	add	r1, sp, #36	; 0x24
 80017a6:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LED_RS1_OK_Pin|LED_RS1_ERR_Pin|LED_RS2_OK_Pin|LED_RS2_ERR_Pin;
 80017aa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f004 fd18 	bl	80061e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VBUS_IN_Pin;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(VBUS_IN_GPIO_Port, &GPIO_InitStruct);
 80017b8:	a909      	add	r1, sp, #36	; 0x24
 80017ba:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = VBUS_IN_Pin;
 80017be:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_IN_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f004 fd0f 	bl	80061e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USART2_TXE_GPIO_Port, &GPIO_InitStruct);
 80017c6:	a909      	add	r1, sp, #36	; 0x24
 80017c8:	4640      	mov	r0, r8

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ca:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = USART2_TXE_Pin;
 80017ce:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USART2_TXE_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f004 fd04 	bl	80061e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80017dc:	a909      	add	r1, sp, #36	; 0x24
 80017de:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80017e0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f004 fcfa 	bl	80061e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80017f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80017f4:	a909      	add	r1, sp, #36	; 0x24
 80017f6:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80017fa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fe:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001802:	f004 fcef 	bl	80061e4 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001806:	4622      	mov	r2, r4
 8001808:	4621      	mov	r1, r4
 800180a:	2006      	movs	r0, #6
 800180c:	f002 f8ea 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001810:	2006      	movs	r0, #6
 8001812:	f002 f92f 	bl	8003a74 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001816:	4622      	mov	r2, r4
 8001818:	4621      	mov	r1, r4
 800181a:	4648      	mov	r0, r9
 800181c:	f002 f8e2 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001820:	4648      	mov	r0, r9
 8001822:	f002 f927 	bl	8003a74 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001826:	4622      	mov	r2, r4
 8001828:	4621      	mov	r1, r4
 800182a:	2017      	movs	r0, #23
 800182c:	f002 f8da 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001830:	2017      	movs	r0, #23
 8001832:	f002 f91f 	bl	8003a74 <HAL_NVIC_EnableIRQ>

}
 8001836:	b00f      	add	sp, #60	; 0x3c
 8001838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800183c:	58020000 	.word	0x58020000
 8001840:	58021000 	.word	0x58021000
 8001844:	58024400 	.word	0x58024400
 8001848:	58020400 	.word	0x58020400
 800184c:	58020c00 	.word	0x58020c00
 8001850:	58020800 	.word	0x58020800
 8001854:	11110000 	.word	0x11110000

08001858 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001858:	b508      	push	{r3, lr}

  hi2c4.Instance = I2C4;
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <MX_I2C4_Init+0x4c>)
  hi2c4.Init.Timing = 0x10C0ECFF;
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800185c:	2201      	movs	r2, #1
  hi2c4.Init.Timing = 0x10C0ECFF;
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_I2C4_Init+0x50>)
 8001860:	4912      	ldr	r1, [pc, #72]	; (80018ac <MX_I2C4_Init+0x54>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001862:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8001864:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c4.Init.OwnAddress1 = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	6083      	str	r3, [r0, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800186e:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001870:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001872:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001874:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001876:	f005 fcef 	bl	8007258 <HAL_I2C_Init>
 800187a:	b108      	cbz	r0, 8001880 <MX_I2C4_Init+0x28>
  {
    Error_Handler();
 800187c:	f000 fc5c 	bl	8002138 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001880:	2100      	movs	r1, #0
 8001882:	4808      	ldr	r0, [pc, #32]	; (80018a4 <MX_I2C4_Init+0x4c>)
 8001884:	f006 fa2c 	bl	8007ce0 <HAL_I2CEx_ConfigAnalogFilter>
 8001888:	b108      	cbz	r0, 800188e <MX_I2C4_Init+0x36>
  {
    Error_Handler();
 800188a:	f000 fc55 	bl	8002138 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800188e:	2100      	movs	r1, #0
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_I2C4_Init+0x4c>)
 8001892:	f006 fa6d 	bl	8007d70 <HAL_I2CEx_ConfigDigitalFilter>
 8001896:	b118      	cbz	r0, 80018a0 <MX_I2C4_Init+0x48>
  {
    Error_Handler();
  }

}
 8001898:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800189c:	f000 bc4c 	b.w	8002138 <Error_Handler>
 80018a0:	bd08      	pop	{r3, pc}
 80018a2:	bf00      	nop
 80018a4:	24000cf4 	.word	0x24000cf4
 80018a8:	10c0ecff 	.word	0x10c0ecff
 80018ac:	58001c00 	.word	0x58001c00

080018b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018b0:	b510      	push	{r4, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	2214      	movs	r2, #20
 80018b8:	2100      	movs	r1, #0
 80018ba:	a803      	add	r0, sp, #12
 80018bc:	f010 fe16 	bl	80124ec <memset>
  if(i2cHandle->Instance==I2C4)
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_I2C_MspInit+0x84>)
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d133      	bne.n	8001930 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4c1b      	ldr	r4, [pc, #108]	; (8001938 <HAL_I2C_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	a903      	add	r1, sp, #12
 80018cc:	481b      	ldr	r0, [pc, #108]	; (800193c <HAL_I2C_MspInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80018da:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80018e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ec:	2312      	movs	r3, #18
 80018ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80018f0:	2306      	movs	r3, #6
 80018f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f004 fc76 	bl	80061e4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80018f8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	205f      	movs	r0, #95	; 0x5f
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001904:	4611      	mov	r1, r2
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001906:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800190a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001916:	f002 f865 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800191a:	205f      	movs	r0, #95	; 0x5f
 800191c:	f002 f8aa 	bl	8003a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2060      	movs	r0, #96	; 0x60
 8001924:	4611      	mov	r1, r2
 8001926:	f002 f85d 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800192a:	2060      	movs	r0, #96	; 0x60
 800192c:	f002 f8a2 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001930:	b008      	add	sp, #32
 8001932:	bd10      	pop	{r4, pc}
 8001934:	58001c00 	.word	0x58001c00
 8001938:	58024400 	.word	0x58024400
 800193c:	58020400 	.word	0x58020400

08001940 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  // https://github.com/yonch/lwip-example/blob/master/mch_main.c
  IP_ADDRESS[0] = 192;
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 25;
  IP_ADDRESS[3] = 238;
 8001942:	23ee      	movs	r3, #238	; 0xee
  IP_ADDRESS[0] = 192;
 8001944:	4f2c      	ldr	r7, [pc, #176]	; (80019f8 <MX_LWIP_Init+0xb8>)
  NETMASK_ADDRESS[0] = 255;
 8001946:	4e2d      	ldr	r6, [pc, #180]	; (80019fc <MX_LWIP_Init+0xbc>)
  IP_ADDRESS[0] = 192;
 8001948:	20c0      	movs	r0, #192	; 0xc0
  IP_ADDRESS[3] = 238;
 800194a:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 800194c:	23ff      	movs	r3, #255	; 0xff
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 192;
 800194e:	4d2c      	ldr	r5, [pc, #176]	; (8001a00 <MX_LWIP_Init+0xc0>)
  IP_ADDRESS[1] = 168;
 8001950:	21a8      	movs	r1, #168	; 0xa8
  IP_ADDRESS[2] = 25;
 8001952:	2219      	movs	r2, #25
  NETMASK_ADDRESS[0] = 255;
 8001954:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 8001956:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[3] = 0;
 8001958:	2400      	movs	r4, #0
  NETMASK_ADDRESS[2] = 255;
 800195a:	70b3      	strb	r3, [r6, #2]
  GATEWAY_ADDRESS[1] = 168;
  GATEWAY_ADDRESS[2] = 25;
  GATEWAY_ADDRESS[3] = 253;
 800195c:	23fd      	movs	r3, #253	; 0xfd
{
 800195e:	b085      	sub	sp, #20
  GATEWAY_ADDRESS[0] = 192;
 8001960:	7028      	strb	r0, [r5, #0]
  GATEWAY_ADDRESS[1] = 168;
 8001962:	7069      	strb	r1, [r5, #1]
  GATEWAY_ADDRESS[2] = 25;
 8001964:	70aa      	strb	r2, [r5, #2]
  GATEWAY_ADDRESS[3] = 253;
 8001966:	70eb      	strb	r3, [r5, #3]
  IP_ADDRESS[0] = 192;
 8001968:	7038      	strb	r0, [r7, #0]
  IP_ADDRESS[1] = 168;
 800196a:	7079      	strb	r1, [r7, #1]
  IP_ADDRESS[2] = 25;
 800196c:	70ba      	strb	r2, [r7, #2]
  NETMASK_ADDRESS[3] = 0;
 800196e:	70f4      	strb	r4, [r6, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8001970:	f00c fb48 	bl	800e004 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	783a      	ldrb	r2, [r7, #0]
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	4922      	ldr	r1, [pc, #136]	; (8001a04 <MX_LWIP_Init+0xc4>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800197c:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800197e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001982:	78fa      	ldrb	r2, [r7, #3]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8001984:	0400      	lsls	r0, r0, #16
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8001986:	4313      	orrs	r3, r2
 8001988:	78ba      	ldrb	r2, [r7, #2]
 800198a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800198e:	7832      	ldrb	r2, [r6, #0]
 8001990:	ba1b      	rev	r3, r3
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8001992:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8001994:	7873      	ldrb	r3, [r6, #1]
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800199c:	78f2      	ldrb	r2, [r6, #3]
 800199e:	4313      	orrs	r3, r2
 80019a0:	78b2      	ldrb	r2, [r6, #2]
 80019a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <MX_LWIP_Init+0xc8>)
 80019a8:	ba1b      	rev	r3, r3
 80019aa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80019ac:	782b      	ldrb	r3, [r5, #0]
 80019ae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019b2:	78eb      	ldrb	r3, [r5, #3]
 80019b4:	4318      	orrs	r0, r3
 80019b6:	78ab      	ldrb	r3, [r5, #2]
//  ipaddr.addr = 0;
//  netmask.addr = 0;
//  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80019b8:	4d14      	ldr	r5, [pc, #80]	; (8001a0c <MX_LWIP_Init+0xcc>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80019ba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_LWIP_Init+0xd0>)
 80019c0:	ba00      	rev	r0, r0
 80019c2:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80019c4:	4813      	ldr	r0, [pc, #76]	; (8001a14 <MX_LWIP_Init+0xd4>)
 80019c6:	9400      	str	r4, [sp, #0]
 80019c8:	9002      	str	r0, [sp, #8]
 80019ca:	4813      	ldr	r0, [pc, #76]	; (8001a18 <MX_LWIP_Init+0xd8>)
 80019cc:	9001      	str	r0, [sp, #4]
 80019ce:	4628      	mov	r0, r5
 80019d0:	f00d faf4 	bl	800efbc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80019d4:	4628      	mov	r0, r5
 80019d6:	f00d fb2f 	bl	800f038 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80019da:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80019de:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 80019e0:	075b      	lsls	r3, r3, #29
 80019e2:	d504      	bpl.n	80019ee <MX_LWIP_Init+0xae>
//  dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80019e4:	b005      	add	sp, #20
 80019e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 80019ea:	f00d bb2b 	b.w	800f044 <netif_set_up>
}
 80019ee:	b005      	add	sp, #20
 80019f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 80019f4:	f00d bb35 	b.w	800f062 <netif_set_down>
 80019f8:	24000d90 	.word	0x24000d90
 80019fc:	24000d8c 	.word	0x24000d8c
 8001a00:	24000d50 	.word	0x24000d50
 8001a04:	24000d88 	.word	0x24000d88
 8001a08:	24000d94 	.word	0x24000d94
 8001a0c:	24000d54 	.word	0x24000d54
 8001a10:	24000d98 	.word	0x24000d98
 8001a14:	0800dd25 	.word	0x0800dd25
 8001a18:	08001261 	.word	0x08001261

08001a1c <CheckMACIP>:
  time->Minutes = min;
  time->Seconds = sec;
}

uint8_t CheckMACIP(uint8_t *pRXData)
{
 8001a1c:	b510      	push	{r4, lr}
 8001a1e:	4604      	mov	r4, r0
  // Check IP is for Modbus master or slave device
  uint8_t valid = 0;
  if ((pRXData[0] == 0x00) && (pRXData[1] == 0x30) && (pRXData[2] == 0xdb) && (pRXData[3] == 0x02) && (pRXData[4] == 0xaf) && (pRXData[5] == 0x62))
 8001a20:	7800      	ldrb	r0, [r0, #0]
 8001a22:	2800      	cmp	r0, #0
 8001a24:	f040 80a1 	bne.w	8001b6a <CheckMACIP+0x14e>
 8001a28:	7863      	ldrb	r3, [r4, #1]
 8001a2a:	2b30      	cmp	r3, #48	; 0x30
 8001a2c:	d10f      	bne.n	8001a4e <CheckMACIP+0x32>
 8001a2e:	78a3      	ldrb	r3, [r4, #2]
 8001a30:	2bdb      	cmp	r3, #219	; 0xdb
 8001a32:	d10c      	bne.n	8001a4e <CheckMACIP+0x32>
 8001a34:	78e3      	ldrb	r3, [r4, #3]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d109      	bne.n	8001a4e <CheckMACIP+0x32>
 8001a3a:	7923      	ldrb	r3, [r4, #4]
 8001a3c:	2baf      	cmp	r3, #175	; 0xaf
 8001a3e:	d106      	bne.n	8001a4e <CheckMACIP+0x32>
 8001a40:	7963      	ldrb	r3, [r4, #5]
 8001a42:	2b62      	cmp	r3, #98	; 0x62
 8001a44:	d103      	bne.n	8001a4e <CheckMACIP+0x32>
  {
    dmc_puts("A");
 8001a46:	484a      	ldr	r0, [pc, #296]	; (8001b70 <CheckMACIP+0x154>)
 8001a48:	f7fe ffc0 	bl	80009cc <dmc_puts>
    valid = 1;
 8001a4c:	2001      	movs	r0, #1
  }
  if ((pRXData[0] == 0x00) && (pRXData[1] == 0x30) && (pRXData[2] == 0xdb) && (pRXData[3] == 0x02) && (pRXData[4] == 0xaf) && (pRXData[5] == 0x62))
 8001a4e:	7823      	ldrb	r3, [r4, #0]
 8001a50:	b993      	cbnz	r3, 8001a78 <CheckMACIP+0x5c>
 8001a52:	7863      	ldrb	r3, [r4, #1]
 8001a54:	2b30      	cmp	r3, #48	; 0x30
 8001a56:	d10f      	bne.n	8001a78 <CheckMACIP+0x5c>
 8001a58:	78a3      	ldrb	r3, [r4, #2]
 8001a5a:	2bdb      	cmp	r3, #219	; 0xdb
 8001a5c:	d10c      	bne.n	8001a78 <CheckMACIP+0x5c>
 8001a5e:	78e3      	ldrb	r3, [r4, #3]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d109      	bne.n	8001a78 <CheckMACIP+0x5c>
 8001a64:	7923      	ldrb	r3, [r4, #4]
 8001a66:	2baf      	cmp	r3, #175	; 0xaf
 8001a68:	d106      	bne.n	8001a78 <CheckMACIP+0x5c>
 8001a6a:	7963      	ldrb	r3, [r4, #5]
 8001a6c:	2b62      	cmp	r3, #98	; 0x62
 8001a6e:	d103      	bne.n	8001a78 <CheckMACIP+0x5c>
  {
    dmc_puts("B");
 8001a70:	4840      	ldr	r0, [pc, #256]	; (8001b74 <CheckMACIP+0x158>)
 8001a72:	f7fe ffab 	bl	80009cc <dmc_puts>
    valid = 1;
 8001a76:	2001      	movs	r0, #1
  }
  if ((pRXData[6] == 0x00) && (pRXData[7] == 0x30) && (pRXData[8] == 0xdb) && (pRXData[9] == 0x02) && (pRXData[10] == 0xb0) && (pRXData[11] == 0x15))
 8001a78:	79a3      	ldrb	r3, [r4, #6]
 8001a7a:	b993      	cbnz	r3, 8001aa2 <CheckMACIP+0x86>
 8001a7c:	79e3      	ldrb	r3, [r4, #7]
 8001a7e:	2b30      	cmp	r3, #48	; 0x30
 8001a80:	d10f      	bne.n	8001aa2 <CheckMACIP+0x86>
 8001a82:	7a23      	ldrb	r3, [r4, #8]
 8001a84:	2bdb      	cmp	r3, #219	; 0xdb
 8001a86:	d10c      	bne.n	8001aa2 <CheckMACIP+0x86>
 8001a88:	7a63      	ldrb	r3, [r4, #9]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d109      	bne.n	8001aa2 <CheckMACIP+0x86>
 8001a8e:	7aa3      	ldrb	r3, [r4, #10]
 8001a90:	2bb0      	cmp	r3, #176	; 0xb0
 8001a92:	d106      	bne.n	8001aa2 <CheckMACIP+0x86>
 8001a94:	7ae3      	ldrb	r3, [r4, #11]
 8001a96:	2b15      	cmp	r3, #21
 8001a98:	d103      	bne.n	8001aa2 <CheckMACIP+0x86>
  {
    dmc_puts("C");
 8001a9a:	4837      	ldr	r0, [pc, #220]	; (8001b78 <CheckMACIP+0x15c>)
 8001a9c:	f7fe ff96 	bl	80009cc <dmc_puts>
    valid = 1;
 8001aa0:	2001      	movs	r0, #1
  }
  if ((pRXData[6] == 0x00) && (pRXData[7] == 0x30) && (pRXData[8] == 0xdb) && (pRXData[9] == 0x02) && (pRXData[10] == 0xb0) && (pRXData[11] == 0x15))
 8001aa2:	79a3      	ldrb	r3, [r4, #6]
 8001aa4:	b993      	cbnz	r3, 8001acc <CheckMACIP+0xb0>
 8001aa6:	79e3      	ldrb	r3, [r4, #7]
 8001aa8:	2b30      	cmp	r3, #48	; 0x30
 8001aaa:	d10f      	bne.n	8001acc <CheckMACIP+0xb0>
 8001aac:	7a23      	ldrb	r3, [r4, #8]
 8001aae:	2bdb      	cmp	r3, #219	; 0xdb
 8001ab0:	d10c      	bne.n	8001acc <CheckMACIP+0xb0>
 8001ab2:	7a63      	ldrb	r3, [r4, #9]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d109      	bne.n	8001acc <CheckMACIP+0xb0>
 8001ab8:	7aa3      	ldrb	r3, [r4, #10]
 8001aba:	2bb0      	cmp	r3, #176	; 0xb0
 8001abc:	d106      	bne.n	8001acc <CheckMACIP+0xb0>
 8001abe:	7ae3      	ldrb	r3, [r4, #11]
 8001ac0:	2b15      	cmp	r3, #21
 8001ac2:	d103      	bne.n	8001acc <CheckMACIP+0xb0>
  {
    dmc_puts("D");
 8001ac4:	482d      	ldr	r0, [pc, #180]	; (8001b7c <CheckMACIP+0x160>)
 8001ac6:	f7fe ff81 	bl	80009cc <dmc_puts>
    valid = 1;
 8001aca:	2001      	movs	r0, #1
  }
  // ARP
  if ((pRXData[12] == 0x08) && (pRXData[13] == 0x06))
 8001acc:	7b23      	ldrb	r3, [r4, #12]
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d106      	bne.n	8001ae0 <CheckMACIP+0xc4>
 8001ad2:	7b63      	ldrb	r3, [r4, #13]
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	d103      	bne.n	8001ae0 <CheckMACIP+0xc4>
  {
    dmc_puts("a");
 8001ad8:	4829      	ldr	r0, [pc, #164]	; (8001b80 <CheckMACIP+0x164>)
 8001ada:	f7fe ff77 	bl	80009cc <dmc_puts>
    valid = 1;
 8001ade:	2001      	movs	r0, #1
  }
  if ((pRXData[26] == 0xc0) && (pRXData[27] == 0xa8) && (pRXData[28] == 0x19) && (pRXData[29] == 0xed))
 8001ae0:	7ea3      	ldrb	r3, [r4, #26]
 8001ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8001ae4:	d10c      	bne.n	8001b00 <CheckMACIP+0xe4>
 8001ae6:	7ee3      	ldrb	r3, [r4, #27]
 8001ae8:	2ba8      	cmp	r3, #168	; 0xa8
 8001aea:	d109      	bne.n	8001b00 <CheckMACIP+0xe4>
 8001aec:	7f23      	ldrb	r3, [r4, #28]
 8001aee:	2b19      	cmp	r3, #25
 8001af0:	d106      	bne.n	8001b00 <CheckMACIP+0xe4>
 8001af2:	7f63      	ldrb	r3, [r4, #29]
 8001af4:	2bed      	cmp	r3, #237	; 0xed
 8001af6:	d103      	bne.n	8001b00 <CheckMACIP+0xe4>
  {
    dmc_puts("A");
 8001af8:	481d      	ldr	r0, [pc, #116]	; (8001b70 <CheckMACIP+0x154>)
 8001afa:	f7fe ff67 	bl	80009cc <dmc_puts>
    valid = 1;
 8001afe:	2001      	movs	r0, #1
  }
  if ((pRXData[26] == 0xc0) && (pRXData[27] == 0xa8) && (pRXData[28] == 0x19) && (pRXData[29] == 0xef))
 8001b00:	7ea3      	ldrb	r3, [r4, #26]
 8001b02:	2bc0      	cmp	r3, #192	; 0xc0
 8001b04:	d10c      	bne.n	8001b20 <CheckMACIP+0x104>
 8001b06:	7ee3      	ldrb	r3, [r4, #27]
 8001b08:	2ba8      	cmp	r3, #168	; 0xa8
 8001b0a:	d109      	bne.n	8001b20 <CheckMACIP+0x104>
 8001b0c:	7f23      	ldrb	r3, [r4, #28]
 8001b0e:	2b19      	cmp	r3, #25
 8001b10:	d106      	bne.n	8001b20 <CheckMACIP+0x104>
 8001b12:	7f63      	ldrb	r3, [r4, #29]
 8001b14:	2bef      	cmp	r3, #239	; 0xef
 8001b16:	d103      	bne.n	8001b20 <CheckMACIP+0x104>
  {
    dmc_puts("B");
 8001b18:	4816      	ldr	r0, [pc, #88]	; (8001b74 <CheckMACIP+0x158>)
 8001b1a:	f7fe ff57 	bl	80009cc <dmc_puts>
    valid = 1;
 8001b1e:	2001      	movs	r0, #1
  }
  if ((pRXData[30] == 0xc0) && (pRXData[31] == 0xa8) && (pRXData[32] == 0x19) && (pRXData[33] == 0xed))
 8001b20:	7fa3      	ldrb	r3, [r4, #30]
 8001b22:	2bc0      	cmp	r3, #192	; 0xc0
 8001b24:	d10e      	bne.n	8001b44 <CheckMACIP+0x128>
 8001b26:	7fe3      	ldrb	r3, [r4, #31]
 8001b28:	2ba8      	cmp	r3, #168	; 0xa8
 8001b2a:	d10b      	bne.n	8001b44 <CheckMACIP+0x128>
 8001b2c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001b30:	2b19      	cmp	r3, #25
 8001b32:	d107      	bne.n	8001b44 <CheckMACIP+0x128>
 8001b34:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001b38:	2bed      	cmp	r3, #237	; 0xed
 8001b3a:	d103      	bne.n	8001b44 <CheckMACIP+0x128>
  {
    dmc_puts("C");
 8001b3c:	480e      	ldr	r0, [pc, #56]	; (8001b78 <CheckMACIP+0x15c>)
 8001b3e:	f7fe ff45 	bl	80009cc <dmc_puts>
    valid = 1;
 8001b42:	2001      	movs	r0, #1
  }
  if ((pRXData[30] == 0xc0) && (pRXData[31] == 0xa8) && (pRXData[32] == 0x19) && (pRXData[33] == 0xef))
 8001b44:	7fa3      	ldrb	r3, [r4, #30]
 8001b46:	2bc0      	cmp	r3, #192	; 0xc0
 8001b48:	d10e      	bne.n	8001b68 <CheckMACIP+0x14c>
 8001b4a:	7fe3      	ldrb	r3, [r4, #31]
 8001b4c:	2ba8      	cmp	r3, #168	; 0xa8
 8001b4e:	d10b      	bne.n	8001b68 <CheckMACIP+0x14c>
 8001b50:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001b54:	2b19      	cmp	r3, #25
 8001b56:	d107      	bne.n	8001b68 <CheckMACIP+0x14c>
 8001b58:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001b5c:	2bef      	cmp	r3, #239	; 0xef
 8001b5e:	d103      	bne.n	8001b68 <CheckMACIP+0x14c>
  {
    dmc_puts("D");
 8001b60:	4806      	ldr	r0, [pc, #24]	; (8001b7c <CheckMACIP+0x160>)
 8001b62:	f7fe ff33 	bl	80009cc <dmc_puts>
    valid = 1;
 8001b66:	2001      	movs	r0, #1
  }

  return valid;
}
 8001b68:	bd10      	pop	{r4, pc}
  uint8_t valid = 0;
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	e76f      	b.n	8001a4e <CheckMACIP+0x32>
 8001b6e:	bf00      	nop
 8001b70:	08013462 	.word	0x08013462
 8001b74:	08013464 	.word	0x08013464
 8001b78:	08013466 	.word	0x08013466
 8001b7c:	08014164 	.word	0x08014164
 8001b80:	08013468 	.word	0x08013468

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b88:	224c      	movs	r2, #76	; 0x4c
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	a80a      	add	r0, sp, #40	; 0x28
 8001b8e:	f010 fcad 	bl	80124ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b92:	2220      	movs	r2, #32
 8001b94:	2100      	movs	r1, #0
 8001b96:	a802      	add	r0, sp, #8
 8001b98:	f010 fca8 	bl	80124ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b9c:	22bc      	movs	r2, #188	; 0xbc
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	a81d      	add	r0, sp, #116	; 0x74
 8001ba2:	f010 fca3 	bl	80124ec <memset>

  /**Supply configuration update enable 
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8001ba6:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <SystemClock_Config+0xf8>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	f022 0204 	bic.w	r2, r2, #4
 8001bae:	60da      	str	r2, [r3, #12]
  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	9201      	str	r2, [sp, #4]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001bba:	619a      	str	r2, [r3, #24]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001bc2:	9201      	str	r2, [sp, #4]
 8001bc4:	9a01      	ldr	r2, [sp, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	0492      	lsls	r2, r2, #18
 8001bca:	d5fc      	bpl.n	8001bc6 <SystemClock_Config+0x42>
  {
    
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001bcc:	2329      	movs	r3, #41	; 0x29
  RCC_OscInitStruct.PLL.PLLN = 128;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001bce:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd0:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001bd2:	2608      	movs	r6, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001bd4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bda:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bdc:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bde:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001be0:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be2:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001be4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001be6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001be8:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001bea:	9517      	str	r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bec:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001bee:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001bf0:	9618      	str	r6, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001bf2:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bf4:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001bf6:	961a      	str	r6, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001bf8:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bfa:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	f006 fb2e 	bl	800825c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8001c00:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c06:	4629      	mov	r1, r5
 8001c08:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8001c0c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c10:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c12:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c14:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c16:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c18:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c1a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c1c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c1e:	9605      	str	r6, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c20:	f006 fea0 	bl	8008964 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USART2
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <SystemClock_Config+0xfc>)
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c26:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001c28:	942f      	str	r4, [sp, #188]	; 0xbc
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USART2
 8001c2a:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001c30:	9430      	str	r4, [sp, #192]	; 0xc0
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c32:	9338      	str	r3, [sp, #224]	; 0xe0
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001c34:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c38:	9434      	str	r4, [sp, #208]	; 0xd0
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001c3a:	933e      	str	r3, [sp, #248]	; 0xf8
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001c40:	9435      	str	r4, [sp, #212]	; 0xd4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c42:	9349      	str	r3, [sp, #292]	; 0x124
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c44:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001c46:	943c      	str	r4, [sp, #240]	; 0xf0
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001c48:	9442      	str	r4, [sp, #264]	; 0x108
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4a:	f007 f95d 	bl	8008f08 <HAL_RCCEx_PeriphCLKConfig>
//  DMAMUX1_Channel0->CCR = 38;
//  DMAMUX1_Channel1->CCR = 37;
//  DMAMUX1_Channel2->CCR = 83;
//  DMAMUX1_Channel3->CCR = 84;

  SPI1->CR1 |= SPI_CR1_CSTART;
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <SystemClock_Config+0x100>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c56:	601a      	str	r2, [r3, #0]
  SPI1->CR1 |= SPI_CR1_SPE;
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
  SPI4->CR1 |= SPI_CR1_CSTART;
 8001c60:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c68:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  SPI4->CR1 |= SPI_CR1_SPE;
 8001c6c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8001c78:	b04c      	add	sp, #304	; 0x130
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	58024800 	.word	0x58024800
 8001c80:	0247b012 	.word	0x0247b012
 8001c84:	40013000 	.word	0x40013000

08001c88 <HAL_IncTicks>:

/* USER CODE BEGIN 4 */
void HAL_IncTicks(void)
{
  msTick += (uint32_t) 1;
 8001c88:	4a02      	ldr	r2, [pc, #8]	; (8001c94 <HAL_IncTicks+0xc>)
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	240000c0 	.word	0x240000c0

08001c98 <HAL_StartTicks>:
}

void HAL_StartTicks(void)
{
  msTickPrevious = msTick;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <HAL_StartTicks+0xc>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_StartTicks+0x10>)
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	240000c0 	.word	0x240000c0
 8001ca8:	240000c4 	.word	0x240000c4

08001cac <HAL_GetTicks>:
}

uint8_t HAL_GetTicks(uint32_t ms)
{
  if ((msTick - msTickPrevious) >= ms)
 8001cac:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <HAL_GetTicks+0x18>)
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_GetTicks+0x1c>)
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	1acb      	subs	r3, r1, r3
 8001cb6:	4283      	cmp	r3, r0
  {
    msTickPrevious = msTick;
    return TRUE;
 8001cb8:	bf26      	itte	cs
 8001cba:	2001      	movcs	r0, #1
    msTickPrevious = msTick;
 8001cbc:	6011      	strcs	r1, [r2, #0]
  }
  return FALSE;
 8001cbe:	2000      	movcc	r0, #0
}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	240000c4 	.word	0x240000c4
 8001cc8:	240000c0 	.word	0x240000c0

08001ccc <HAL_StartTicks2>:

void HAL_StartTicks2(void)
{
  msTickPrevious2 = msTick;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_StartTicks2+0xc>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_StartTicks2+0x10>)
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	240000c0 	.word	0x240000c0
 8001cdc:	240000c8 	.word	0x240000c8

08001ce0 <HAL_GetTicks2>:
}

uint8_t HAL_GetTicks2(uint32_t ms)
{
  if ((msTick - msTickPrevious2) >= ms)
 8001ce0:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_GetTicks2+0x18>)
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_GetTicks2+0x1c>)
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	6813      	ldr	r3, [r2, #0]
 8001ce8:	1acb      	subs	r3, r1, r3
 8001cea:	4283      	cmp	r3, r0
  {
    msTickPrevious2 = msTick;
    return TRUE;
 8001cec:	bf26      	itte	cs
 8001cee:	2001      	movcs	r0, #1
    msTickPrevious2 = msTick;
 8001cf0:	6011      	strcs	r1, [r2, #0]
  }
  return FALSE;
 8001cf2:	2000      	movcc	r0, #0
}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	240000c8 	.word	0x240000c8
 8001cfc:	240000c0 	.word	0x240000c0

08001d00 <main>:
{
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b095      	sub	sp, #84	; 0x54

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8001d04:	2210      	movs	r2, #16
 8001d06:	2100      	movs	r1, #0
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Initialize and configure the Region and the memory to be protected */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d08:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8001d0a:	a810      	add	r0, sp, #64	; 0x40
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d0c:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8001d0e:	f010 fbed 	bl	80124ec <memset>
  MPU_InitStruct.BaseAddress = 0x30040000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001d12:	2603      	movs	r6, #3
  HAL_MPU_Disable();
 8001d14:	f001 fed8 	bl	8003ac8 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001d18:	4bc5      	ldr	r3, [pc, #788]	; (8002030 <main+0x330>)
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d1a:	a810      	add	r0, sp, #64	; 0x40
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d1c:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001d20:	9311      	str	r3, [sp, #68]	; 0x44
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001d22:	2307      	movs	r3, #7
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d24:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001d28:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001d2c:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d30:	f88d 404a 	strb.w	r4, [sp, #74]	; 0x4a
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001d34:	f88d 604b 	strb.w	r6, [sp, #75]	; 0x4b
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d38:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001d3c:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d40:	f88d 404e 	strb.w	r4, [sp, #78]	; 0x4e
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001d44:	f88d 504f 	strb.w	r5, [sp, #79]	; 0x4f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d48:	f001 fee0 	bl	8003b0c <HAL_MPU_ConfigRegion>

  /* Initialize and configure the Region and the memory to be protected */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30044000;
 8001d4c:	4bb9      	ldr	r3, [pc, #740]	; (8002034 <main+0x334>)
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d4e:	a810      	add	r0, sp, #64	; 0x40
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d50:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
  MPU_InitStruct.BaseAddress = 0x30044000;
 8001d54:	9311      	str	r3, [sp, #68]	; 0x44
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001d56:	230d      	movs	r3, #13
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001d58:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001d5c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001d60:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d64:	f88d 404a 	strb.w	r4, [sp, #74]	; 0x4a
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d68:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d6c:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001d70:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001d74:	f88d 504e 	strb.w	r5, [sp, #78]	; 0x4e
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d78:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d7c:	f001 fec6 	bl	8003b0c <HAL_MPU_ConfigRegion>

  /* Initialize and configure the Region and the memory to be protected */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001d80:	2302      	movs	r3, #2
//  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d82:	a810      	add	r0, sp, #64	; 0x40
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d84:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001d88:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
  MPU_InitStruct.BaseAddress = 0x30001000;
 8001d8c:	4baa      	ldr	r3, [pc, #680]	; (8002038 <main+0x338>)
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001d8e:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  MPU_InitStruct.BaseAddress = 0x30001000;
 8001d92:	9311      	str	r3, [sp, #68]	; 0x44
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8001d94:	230c      	movs	r3, #12
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d96:	f88d 404a 	strb.w	r4, [sp, #74]	; 0x4a
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8001d9a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001d9e:	f88d 604b 	strb.w	r6, [sp, #75]	; 0x4b
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001da2:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001da6:	f88d 504d 	strb.w	r5, [sp, #77]	; 0x4d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001daa:	f88d 504e 	strb.w	r5, [sp, #78]	; 0x4e
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001dae:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001db2:	f001 feab 	bl	8003b0c <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001db6:	2004      	movs	r0, #4
 8001db8:	f001 fe96 	bl	8003ae8 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8001dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dc0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001dc4:	4b9d      	ldr	r3, [pc, #628]	; (800203c <main+0x33c>)
 8001dc6:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001dca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dce:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dd8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001de2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001de6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001dea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001dee:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001df2:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001df6:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8001dfa:	07a5      	lsls	r5, r4, #30
 8001dfc:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001dfe:	ea02 0e06 	and.w	lr, r2, r6
 8001e02:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e04:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e06:	ea4e 0700 	orr.w	r7, lr, r0
      } while (ways-- != 0U);
 8001e0a:	3901      	subs	r1, #1
 8001e0c:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e10:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8001e14:	1c4f      	adds	r7, r1, #1
 8001e16:	d1f6      	bne.n	8001e06 <main+0x106>
 8001e18:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8001e1a:	f112 0f20 	cmn.w	r2, #32
 8001e1e:	d1ee      	bne.n	8001dfe <main+0xfe>
 8001e20:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e30:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001e34:	f001 fd6e 	bl	8003914 <HAL_Init>
  DMC_I2cRtcInit(hi2c4);
 8001e38:	4e81      	ldr	r6, [pc, #516]	; (8002040 <main+0x340>)
  SystemClock_Config();
 8001e3a:	f7ff fea3 	bl	8001b84 <SystemClock_Config>
    HAL_IWDG_Refresh(&hiwdg1);
 8001e3e:	4f81      	ldr	r7, [pc, #516]	; (8002044 <main+0x344>)
  MX_GPIO_Init();
 8001e40:	f7ff fbd2 	bl	80015e8 <MX_GPIO_Init>
  DMC_I2cRtcInit(hi2c4);
 8001e44:	f106 0510 	add.w	r5, r6, #16
  DmcLedsOn();
 8001e48:	f7fe fd76 	bl	8000938 <DmcLedsOn>
  MX_UART7_Init();
 8001e4c:	f000 fe02 	bl	8002a54 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8001e50:	f000 fe22 	bl	8002a98 <MX_USART2_UART_Init>
  HAL_GPIO_WritePin(UART7_TXE_GPIO_Port, UART7_TXE_Pin, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5a:	487b      	ldr	r0, [pc, #492]	; (8002048 <main+0x348>)
 8001e5c:	f004 fb28 	bl	80064b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USART2_TXE_GPIO_Port, USART2_TXE_Pin, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2110      	movs	r1, #16
 8001e64:	4879      	ldr	r0, [pc, #484]	; (800204c <main+0x34c>)
 8001e66:	f004 fb23 	bl	80064b0 <HAL_GPIO_WritePin>
  dmc_put_sethuart(&huart2);
 8001e6a:	4879      	ldr	r0, [pc, #484]	; (8002050 <main+0x350>)
 8001e6c:	f7fe fd84 	bl	8000978 <dmc_put_sethuart>
  dmc_puts("\n");
 8001e70:	4878      	ldr	r0, [pc, #480]	; (8002054 <main+0x354>)
 8001e72:	f7fe fdab 	bl	80009cc <dmc_puts>
  dmc_puts("--------------------------------------------------------------------------------\n");
 8001e76:	4878      	ldr	r0, [pc, #480]	; (8002058 <main+0x358>)
 8001e78:	f7fe fda8 	bl	80009cc <dmc_puts>
  dmc_puts("MX_DMA_Init\n");
 8001e7c:	4877      	ldr	r0, [pc, #476]	; (800205c <main+0x35c>)
 8001e7e:	f7fe fda5 	bl	80009cc <dmc_puts>
  MX_DMA_Init();
 8001e82:	f7ff f843 	bl	8000f0c <MX_DMA_Init>
  dmc_puts("MX_QUADSPI_Init\n");
 8001e86:	4876      	ldr	r0, [pc, #472]	; (8002060 <main+0x360>)
 8001e88:	f7fe fda0 	bl	80009cc <dmc_puts>
  MX_QUADSPI_Init();
 8001e8c:	f000 f956 	bl	800213c <MX_QUADSPI_Init>
  dmc_puts("MX_SPI1_Init\n");
 8001e90:	4874      	ldr	r0, [pc, #464]	; (8002064 <main+0x364>)
 8001e92:	f7fe fd9b 	bl	80009cc <dmc_puts>
  MX_SPI1_Init();
 8001e96:	f000 facf 	bl	8002438 <MX_SPI1_Init>
  dmc_puts("MX_SPI4_Init\n");
 8001e9a:	4873      	ldr	r0, [pc, #460]	; (8002068 <main+0x368>)
 8001e9c:	f7fe fd96 	bl	80009cc <dmc_puts>
  MX_SPI4_Init();
 8001ea0:	f000 fafa 	bl	8002498 <MX_SPI4_Init>
  dmc_puts("MX_FDCAN1_Init\n");
 8001ea4:	4871      	ldr	r0, [pc, #452]	; (800206c <main+0x36c>)
 8001ea6:	f7fe fd91 	bl	80009cc <dmc_puts>
  MX_FDCAN1_Init();
 8001eaa:	f7ff faa3 	bl	80013f4 <MX_FDCAN1_Init>
  dmc_puts("MX_FDCAN2_Init\n");
 8001eae:	4870      	ldr	r0, [pc, #448]	; (8002070 <main+0x370>)
 8001eb0:	f7fe fd8c 	bl	80009cc <dmc_puts>
  MX_FDCAN2_Init();
 8001eb4:	f7ff face 	bl	8001454 <MX_FDCAN2_Init>
  dmc_puts("MX_I2C4_Init\n");
 8001eb8:	486e      	ldr	r0, [pc, #440]	; (8002074 <main+0x374>)
 8001eba:	f7fe fd87 	bl	80009cc <dmc_puts>
  MX_I2C4_Init();
 8001ebe:	f7ff fccb 	bl	8001858 <MX_I2C4_Init>
  dmc_puts("MX_RTC_Init\n");
 8001ec2:	486d      	ldr	r0, [pc, #436]	; (8002078 <main+0x378>)
 8001ec4:	f7fe fd82 	bl	80009cc <dmc_puts>
  MX_RTC_Init();
 8001ec8:	f000 f9c8 	bl	800225c <MX_RTC_Init>
  dmc_puts("MX_FATFS_Init\n");
 8001ecc:	486b      	ldr	r0, [pc, #428]	; (800207c <main+0x37c>)
 8001ece:	f7fe fd7d 	bl	80009cc <dmc_puts>
  MX_FATFS_Init();
 8001ed2:	f7ff fa81 	bl	80013d8 <MX_FATFS_Init>
  dmc_puts("MX_LWIP_Init\n");
 8001ed6:	486a      	ldr	r0, [pc, #424]	; (8002080 <main+0x380>)
 8001ed8:	f7fe fd78 	bl	80009cc <dmc_puts>
  MX_LWIP_Init();  // Problem
 8001edc:	f7ff fd30 	bl	8001940 <MX_LWIP_Init>
  dmc_puts("Done\n");
 8001ee0:	4868      	ldr	r0, [pc, #416]	; (8002084 <main+0x384>)
 8001ee2:	f7fe fd73 	bl	80009cc <dmc_puts>
  HAL_Delay(1000);
 8001ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eea:	f001 fd35 	bl	8003958 <HAL_Delay>
  dmc_puts("HAL_StartTicks\n");
 8001eee:	4866      	ldr	r0, [pc, #408]	; (8002088 <main+0x388>)
 8001ef0:	f7fe fd6c 	bl	80009cc <dmc_puts>
  HAL_StartTicks();
 8001ef4:	f7ff fed0 	bl	8001c98 <HAL_StartTicks>
  uint8_t s1 = ReadDipSwitches();
 8001ef8:	f7fe fc6c 	bl	80007d4 <ReadDipSwitches>
 8001efc:	4604      	mov	r4, r0
  dmc_puts("dipswitch: ");
 8001efe:	4863      	ldr	r0, [pc, #396]	; (800208c <main+0x38c>)
 8001f00:	f7fe fd64 	bl	80009cc <dmc_puts>
  dmc_puthex2cr(s1);
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7fe fd8a 	bl	8000a1e <dmc_puthex2cr>
  HAL_GPIO_TogglePin(GPIOC, LED_RUN_Pin|LED_CAN1_OK_Pin|LED_CAN2_OK_Pin);
 8001f0a:	21c1      	movs	r1, #193	; 0xc1
 8001f0c:	4860      	ldr	r0, [pc, #384]	; (8002090 <main+0x390>)
  DMC_I2cRtcInit(hi2c4);
 8001f0e:	466c      	mov	r4, sp
  HAL_GPIO_TogglePin(GPIOC, LED_RUN_Pin|LED_CAN1_OK_Pin|LED_CAN2_OK_Pin);
 8001f10:	f004 fae8 	bl	80064e4 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOA, LED_RS1_OK_Pin|LED_RS1_ERR_Pin|LED_RS2_OK_Pin|LED_RS2_ERR_Pin);
 8001f14:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001f18:	485e      	ldr	r0, [pc, #376]	; (8002094 <main+0x394>)
 8001f1a:	f004 fae3 	bl	80064e4 <HAL_GPIO_TogglePin>
  dmc_puts("--------------------------------------------------------------------------------\n");
 8001f1e:	484e      	ldr	r0, [pc, #312]	; (8002058 <main+0x358>)
 8001f20:	f7fe fd54 	bl	80009cc <dmc_puts>
  dmc_puts("MCU family     : ");
 8001f24:	485c      	ldr	r0, [pc, #368]	; (8002098 <main+0x398>)
 8001f26:	f7fe fd51 	bl	80009cc <dmc_puts>
  dmc_puts(GetMCUFamily());
 8001f2a:	f7fe fd1d 	bl	8000968 <GetMCUFamily>
 8001f2e:	f7fe fd4d 	bl	80009cc <dmc_puts>
  dmc_puts("\n");
 8001f32:	4848      	ldr	r0, [pc, #288]	; (8002054 <main+0x354>)
 8001f34:	f7fe fd4a 	bl	80009cc <dmc_puts>
  dmc_puts("MCU type       : ");
 8001f38:	4858      	ldr	r0, [pc, #352]	; (800209c <main+0x39c>)
 8001f3a:	f7fe fd47 	bl	80009cc <dmc_puts>
  dmc_puts(GetMCUType());
 8001f3e:	f7fe fd17 	bl	8000970 <GetMCUType>
 8001f42:	f7fe fd43 	bl	80009cc <dmc_puts>
  dmc_puts("\n");
 8001f46:	4843      	ldr	r0, [pc, #268]	; (8002054 <main+0x354>)
 8001f48:	f7fe fd40 	bl	80009cc <dmc_puts>
  uint32_t SystemCoreClockMHz = SystemCoreClock / 1000000;
 8001f4c:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <main+0x3a0>)
  dmc_putstrintstr("SystemCoreClock: ", SystemCoreClockMHz, " MHz\n");     // 400000000 Hz
 8001f4e:	4a55      	ldr	r2, [pc, #340]	; (80020a4 <main+0x3a4>)
  uint32_t SystemCoreClockMHz = SystemCoreClock / 1000000;
 8001f50:	6819      	ldr	r1, [r3, #0]
  dmc_putstrintstr("SystemCoreClock: ", SystemCoreClockMHz, " MHz\n");     // 400000000 Hz
 8001f52:	4b55      	ldr	r3, [pc, #340]	; (80020a8 <main+0x3a8>)
 8001f54:	4855      	ldr	r0, [pc, #340]	; (80020ac <main+0x3ac>)
 8001f56:	fbb1 f1f3 	udiv	r1, r1, r3
 8001f5a:	f7fe fda1 	bl	8000aa0 <dmc_putstrintstr>
  DMC_I2cRtcInit(hi2c4);
 8001f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f72:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f76:	f7fe ff09 	bl	8000d8c <DMC_I2cRtcInit>
  DateTime.Second = 50;
 8001f7a:	2332      	movs	r3, #50	; 0x32
  DateTime.Hour   = 07;
 8001f7c:	2207      	movs	r2, #7
    DMC_I2cRtcSetDateTime(&DateTime);
 8001f7e:	a810      	add	r0, sp, #64	; 0x40
  DateTime.Second = 50;
 8001f80:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  DateTime.Minute = 18;
 8001f84:	2312      	movs	r3, #18
      pRXLength = ksz8851_Receive(&KSZ8851_interface_1, pRXData, MAX_FRAMELEN);
 8001f86:	4c4a      	ldr	r4, [pc, #296]	; (80020b0 <main+0x3b0>)
  DateTime.Minute = 18;
 8001f88:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
  DateTime.DayOfMonth = 18;
 8001f8c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  DateTime.Month = 3;
 8001f90:	2303      	movs	r3, #3
            ksz8851_Send(&KSZ8851_interface_0, pRXData, pRXLength);
 8001f92:	4d48      	ldr	r5, [pc, #288]	; (80020b4 <main+0x3b4>)
  DateTime.Month = 3;
 8001f94:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  DateTime.Year = 19;
 8001f98:	2313      	movs	r3, #19
  DateTime.Hour   = 07;
 8001f9a:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
  DateTime.Year = 19;
 8001f9e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  DateTime.DayOfWeek = 0; // Not required when setting date, it gets calculated anyway
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    DMC_I2cRtcSetDateTime(&DateTime);
 8001fa8:	f7fe fe78 	bl	8000c9c <DMC_I2cRtcSetDateTime>
  DmcLedsOff();
 8001fac:	f7fe fcac 	bl	8000908 <DmcLedsOff>
  HAL_Delay(1000);
 8001fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fb4:	f001 fcd0 	bl	8003958 <HAL_Delay>
  ksz8851_init_0();
 8001fb8:	f001 fc4c 	bl	8003854 <ksz8851_init_0>
  ksz8851_init_1();
 8001fbc:	f001 fc68 	bl	8003890 <ksz8851_init_1>
  HAL_StartTicks();
 8001fc0:	f7ff fe6a 	bl	8001c98 <HAL_StartTicks>
  HAL_StartTicks2();
 8001fc4:	f7ff fe82 	bl	8001ccc <HAL_StartTicks2>
    HAL_IWDG_Refresh(&hiwdg1);
 8001fc8:	4638      	mov	r0, r7
 8001fca:	f005 ff17 	bl	8007dfc <HAL_IWDG_Refresh>
    if (HAL_GetTicks2(500))
 8001fce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd2:	f7ff fe85 	bl	8001ce0 <HAL_GetTicks2>
 8001fd6:	b110      	cbz	r0, 8001fde <main+0x2de>
      DmcLedToggle(LED_RUN);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7fe fc73 	bl	80008c4 <DmcLedToggle>
    if (HAL_GetTicks(NTP_Interval))
 8001fde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fe2:	f7ff fe63 	bl	8001cac <HAL_GetTicks>
 8001fe6:	b110      	cbz	r0, 8001fee <main+0x2ee>
      DmcLedToggle(LED_RS1_OK);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7fe fc6b 	bl	80008c4 <DmcLedToggle>
      pRXLength = ksz8851_Receive(&KSZ8851_interface_1, pRXData, MAX_FRAMELEN);
 8001fee:	f240 52ee 	movw	r2, #1518	; 0x5ee
 8001ff2:	492f      	ldr	r1, [pc, #188]	; (80020b0 <main+0x3b0>)
 8001ff4:	4830      	ldr	r0, [pc, #192]	; (80020b8 <main+0x3b8>)
 8001ff6:	f001 fbbb 	bl	8003770 <ksz8851_Receive>
      if (pRXLength > MB_HDR_OFFSET)
 8001ffa:	2836      	cmp	r0, #54	; 0x36
      pRXLength = ksz8851_Receive(&KSZ8851_interface_1, pRXData, MAX_FRAMELEN);
 8001ffc:	4606      	mov	r6, r0
      if (pRXLength > MB_HDR_OFFSET)
 8001ffe:	d970      	bls.n	80020e2 <main+0x3e2>
        ksz8851snl_reset_rx(&KSZ8851_interface_1);
 8002000:	482d      	ldr	r0, [pc, #180]	; (80020b8 <main+0x3b8>)
 8002002:	f001 fb51 	bl	80036a8 <ksz8851snl_reset_rx>
        if (pRXData[IP_HDR_OFFSET + IP_HDR_PROTOCOL] == IPPROTO_TCP)
 8002006:	7de3      	ldrb	r3, [r4, #23]
 8002008:	2b06      	cmp	r3, #6
 800200a:	f040 8086 	bne.w	800211a <main+0x41a>
          if (((pRXData[0x22] == 0x01) && (pRXData[0x23] == 0xf6)) || ((pRXData[0x24] == 0x01) && (pRXData[0x25] == 0xf6)))
 800200e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002012:	2b01      	cmp	r3, #1
 8002014:	d103      	bne.n	800201e <main+0x31e>
 8002016:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800201a:	2bf6      	cmp	r3, #246	; 0xf6
 800201c:	d04e      	beq.n	80020bc <main+0x3bc>
 800201e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002022:	2b01      	cmp	r3, #1
 8002024:	d179      	bne.n	800211a <main+0x41a>
 8002026:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800202a:	2bf6      	cmp	r3, #246	; 0xf6
 800202c:	d175      	bne.n	800211a <main+0x41a>
 800202e:	e045      	b.n	80020bc <main+0x3bc>
 8002030:	30040000 	.word	0x30040000
 8002034:	30044000 	.word	0x30044000
 8002038:	30001000 	.word	0x30001000
 800203c:	e000ed00 	.word	0xe000ed00
 8002040:	24000cf4 	.word	0x24000cf4
 8002044:	24000d40 	.word	0x24000d40
 8002048:	58021000 	.word	0x58021000
 800204c:	58020c00 	.word	0x58020c00
 8002050:	24001458 	.word	0x24001458
 8002054:	080134ba 	.word	0x080134ba
 8002058:	0801346a 	.word	0x0801346a
 800205c:	080134bc 	.word	0x080134bc
 8002060:	080134c9 	.word	0x080134c9
 8002064:	080134da 	.word	0x080134da
 8002068:	080134e8 	.word	0x080134e8
 800206c:	080134f6 	.word	0x080134f6
 8002070:	08013506 	.word	0x08013506
 8002074:	08013516 	.word	0x08013516
 8002078:	08013524 	.word	0x08013524
 800207c:	08013531 	.word	0x08013531
 8002080:	08013540 	.word	0x08013540
 8002084:	0801354e 	.word	0x0801354e
 8002088:	08013554 	.word	0x08013554
 800208c:	08013564 	.word	0x08013564
 8002090:	58020800 	.word	0x58020800
 8002094:	58020000 	.word	0x58020000
 8002098:	08013570 	.word	0x08013570
 800209c:	08013582 	.word	0x08013582
 80020a0:	24000018 	.word	0x24000018
 80020a4:	08013594 	.word	0x08013594
 80020a8:	000f4240 	.word	0x000f4240
 80020ac:	0801359a 	.word	0x0801359a
 80020b0:	30001000 	.word	0x30001000
 80020b4:	24000d9c 	.word	0x24000d9c
 80020b8:	24000dc8 	.word	0x24000dc8
            uint8_t s1 = ReadDipSwitches();
 80020bc:	f7fe fb8a 	bl	80007d4 <ReadDipSwitches>
            if ((s1 > 0) && (pRXData[MB_HDR_OFFSET + MB_HDR_FC] == 0x10))
 80020c0:	b358      	cbz	r0, 800211a <main+0x41a>
 80020c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d127      	bne.n	800211a <main+0x41a>
              swap_buf_all(pRXData);
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7fe fe95 	bl	8000dfa <swap_buf_all>
              pRXLength = mb_set_exception(pRXData, MB_EXCEPTION_ILLEGAL_FUNCTION);
 80020d0:	2101      	movs	r1, #1
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7fe fe7e 	bl	8000dd4 <mb_set_exception>
              ksz8851_Send(&KSZ8851_interface_0, pRXData, pRXLength);
 80020d8:	4602      	mov	r2, r0
 80020da:	4621      	mov	r1, r4
 80020dc:	4628      	mov	r0, r5
 80020de:	f001 fb03 	bl	80036e8 <ksz8851_Send>
      pRXLength = ksz8851_Receive(&KSZ8851_interface_0, pRXData, MAX_FRAMELEN);
 80020e2:	f240 52ee 	movw	r2, #1518	; 0x5ee
 80020e6:	4621      	mov	r1, r4
 80020e8:	4628      	mov	r0, r5
 80020ea:	f001 fb41 	bl	8003770 <ksz8851_Receive>
      if (pRXLength > MB_HDR_OFFSET)
 80020ee:	2836      	cmp	r0, #54	; 0x36
      pRXLength = ksz8851_Receive(&KSZ8851_interface_0, pRXData, MAX_FRAMELEN);
 80020f0:	4606      	mov	r6, r0
      if (pRXLength > MB_HDR_OFFSET)
 80020f2:	d90c      	bls.n	800210e <main+0x40e>
        ksz8851snl_reset_rx(&KSZ8851_interface_0);
 80020f4:	4628      	mov	r0, r5
 80020f6:	f001 fad7 	bl	80036a8 <ksz8851snl_reset_rx>
        if (pRXData[IP_HDR_OFFSET + IP_HDR_PROTOCOL] == IPPROTO_TCP)
 80020fa:	7de3      	ldrb	r3, [r4, #23]
 80020fc:	2b06      	cmp	r3, #6
 80020fe:	d102      	bne.n	8002106 <main+0x406>
          dmc_putc('.');
 8002100:	202e      	movs	r0, #46	; 0x2e
 8002102:	f7fe fc61 	bl	80009c8 <dmc_putc>
        if (CheckMACIP(pRXData))
 8002106:	4620      	mov	r0, r4
 8002108:	f7ff fc88 	bl	8001a1c <CheckMACIP>
 800210c:	b960      	cbnz	r0, 8002128 <main+0x428>
      memset(pRXData, 0, RxLength);
 800210e:	4632      	mov	r2, r6
 8002110:	2100      	movs	r1, #0
 8002112:	4620      	mov	r0, r4
 8002114:	f010 f9ea 	bl	80124ec <memset>
    HAL_IWDG_Refresh(&hiwdg1);
 8002118:	e756      	b.n	8001fc8 <main+0x2c8>
          if (CheckMACIP(pRXData))
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fc7e 	bl	8001a1c <CheckMACIP>
 8002120:	2800      	cmp	r0, #0
 8002122:	d0de      	beq.n	80020e2 <main+0x3e2>
            ksz8851_Send(&KSZ8851_interface_0, pRXData, pRXLength);
 8002124:	4632      	mov	r2, r6
 8002126:	e7d8      	b.n	80020da <main+0x3da>
          ksz8851_Send(&KSZ8851_interface_1, pRXData, pRXLength);
 8002128:	4632      	mov	r2, r6
 800212a:	4621      	mov	r1, r4
 800212c:	4801      	ldr	r0, [pc, #4]	; (8002134 <main+0x434>)
 800212e:	f001 fadb 	bl	80036e8 <ksz8851_Send>
 8002132:	e7ec      	b.n	800210e <main+0x40e>
 8002134:	24000dc8 	.word	0x24000dc8

08002138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002138:	4770      	bx	lr

0800213a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800213a:	4770      	bx	lr

0800213c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800213c:	b508      	push	{r3, lr}

  hqspi.Instance = QUADSPI;
 800213e:	480b      	ldr	r0, [pc, #44]	; (800216c <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 199;   /* QSPI freq = 400 MHz/(199+1) = 108 Mhz */
  hqspi.Init.FifoThreshold = 16;
 8002140:	23c7      	movs	r3, #199	; 0xc7
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <MX_QUADSPI_Init+0x34>)
 8002144:	f04f 0c10 	mov.w	ip, #16
 8002148:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800214c:	2300      	movs	r3, #0
  hqspi.Init.FlashSize = 1;
 800214e:	2201      	movs	r2, #1
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002150:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8002152:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002154:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002156:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002158:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800215a:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800215c:	f005 feb2 	bl	8007ec4 <HAL_QSPI_Init>
 8002160:	b118      	cbz	r0, 800216a <MX_QUADSPI_Init+0x2e>
  {
    Error_Handler();
  }

}
 8002162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002166:	f7ff bfe7 	b.w	8002138 <Error_Handler>
 800216a:	bd08      	pop	{r3, pc}
 800216c:	24000e0c 	.word	0x24000e0c
 8002170:	52005000 	.word	0x52005000

08002174 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002174:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002176:	2214      	movs	r2, #20
{
 8002178:	b08a      	sub	sp, #40	; 0x28
 800217a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	2100      	movs	r1, #0
 800217e:	eb0d 0002 	add.w	r0, sp, r2
 8002182:	f010 f9b3 	bl	80124ec <memset>
  if(qspiHandle->Instance==QUADSPI)
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_QSPI_MspInit+0xd4>)
 800218a:	429a      	cmp	r2, r3
 800218c:	d15a      	bne.n	8002244 <HAL_QSPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_QSPI_MspInit+0xd8>)
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002192:	2609      	movs	r6, #9
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 8002194:	a905      	add	r1, sp, #20
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002196:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2500      	movs	r5, #0
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 800219c:	482c      	ldr	r0, [pc, #176]	; (8002250 <HAL_QSPI_MspInit+0xdc>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800219e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80021a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80021aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021ae:	9201      	str	r2, [sp, #4]
 80021b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021b6:	f042 0210 	orr.w	r2, r2, #16
 80021ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80021be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021c2:	f002 0210 	and.w	r2, r2, #16
 80021c6:	9202      	str	r2, [sp, #8]
 80021c8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021ce:	f042 0202 	orr.w	r2, r2, #2
 80021d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80021d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021da:	f002 0202 	and.w	r2, r2, #2
 80021de:	9203      	str	r2, [sp, #12]
 80021e0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80021e6:	f042 0208 	orr.w	r2, r2, #8
 80021ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f4:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021fa:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fc:	9304      	str	r3, [sp, #16]
 80021fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 8002200:	2304      	movs	r3, #4
 8002202:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 8002204:	f003 ffee 	bl	80061e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_NCS_Pin;
 8002208:	f240 4304 	movw	r3, #1028	; 0x404
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	a905      	add	r1, sp, #20
 800220e:	4811      	ldr	r0, [pc, #68]	; (8002254 <HAL_QSPI_MspInit+0xe0>)
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_NCS_Pin;
 8002210:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002216:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002218:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f003 ffe3 	bl	80061e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_IO0_Pin|QSPI_IO1_Pin|QSPI_IO3_Pin;
 800221e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002222:	a905      	add	r1, sp, #20
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <HAL_QSPI_MspInit+0xe4>)
    GPIO_InitStruct.Pin = QSPI_IO0_Pin|QSPI_IO1_Pin|QSPI_IO3_Pin;
 8002226:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800222e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002230:	f003 ffd8 	bl	80061e4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8002234:	205c      	movs	r0, #92	; 0x5c
 8002236:	462a      	mov	r2, r5
 8002238:	4629      	mov	r1, r5
 800223a:	f001 fbd3 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800223e:	205c      	movs	r0, #92	; 0x5c
 8002240:	f001 fc18 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002244:	b00a      	add	sp, #40	; 0x28
 8002246:	bd70      	pop	{r4, r5, r6, pc}
 8002248:	52005000 	.word	0x52005000
 800224c:	58024400 	.word	0x58024400
 8002250:	58021000 	.word	0x58021000
 8002254:	58020400 	.word	0x58020400
 8002258:	58020c00 	.word	0x58020c00

0800225c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800225c:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800225e:	480a      	ldr	r0, [pc, #40]	; (8002288 <MX_RTC_Init+0x2c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8002260:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <MX_RTC_Init+0x30>)
  hrtc.Init.AsynchPrediv = 127;
 8002264:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8002266:	22ff      	movs	r2, #255	; 0xff
  hrtc.Instance = RTC;
 8002268:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800226a:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 800226c:	60c2      	str	r2, [r0, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800226e:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002270:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002272:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002274:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002276:	6143      	str	r3, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002278:	f007 fd2c 	bl	8009cd4 <HAL_RTC_Init>
 800227c:	b118      	cbz	r0, 8002286 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
  }

}
 800227e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002282:	f7ff bf59 	b.w	8002138 <Error_Handler>
 8002286:	bd08      	pop	{r3, pc}
 8002288:	24000e68 	.word	0x24000e68
 800228c:	58004000 	.word	0x58004000

08002290 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8002290:	6802      	ldr	r2, [r0, #0]
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_RTC_MspInit+0x14>)
 8002294:	429a      	cmp	r2, r3
 8002296:	d104      	bne.n	80022a2 <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002298:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <HAL_RTC_MspInit+0x18>)
 800229a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800229c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	4770      	bx	lr
 80022a4:	58004000 	.word	0x58004000
 80022a8:	58024400 	.word	0x58024400

080022ac <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 80022ac:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 80022ae:	2301      	movs	r3, #1
 80022b0:	4c05      	ldr	r4, [pc, #20]	; (80022c8 <SD_CheckStatus.isra.0+0x1c>)
 80022b2:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80022b4:	f7fe fe10 	bl	8000ed8 <BSP_SD_GetCardState>
 80022b8:	4623      	mov	r3, r4
 80022ba:	b918      	cbnz	r0, 80022c4 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 80022bc:	7822      	ldrb	r2, [r4, #0]
 80022be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022c2:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 80022c4:	7818      	ldrb	r0, [r3, #0]
}
 80022c6:	bd10      	pop	{r4, pc}
 80022c8:	24000014 	.word	0x24000014

080022cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80022cc:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80022ce:	2301      	movs	r3, #1
 80022d0:	4c04      	ldr	r4, [pc, #16]	; (80022e4 <SD_initialize+0x18>)
 80022d2:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80022d4:	f7fe fdc4 	bl	8000e60 <BSP_SD_Init>
 80022d8:	b910      	cbnz	r0, 80022e0 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 80022da:	f7ff ffe7 	bl	80022ac <SD_CheckStatus.isra.0>
 80022de:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80022e0:	7820      	ldrb	r0, [r4, #0]
}
 80022e2:	bd10      	pop	{r4, pc}
 80022e4:	24000014 	.word	0x24000014

080022e8 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 80022e8:	f7ff bfe0 	b.w	80022ac <SD_CheckStatus.isra.0>

080022ec <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80022ec:	b508      	push	{r3, lr}
 80022ee:	4608      	mov	r0, r1
 80022f0:	4611      	mov	r1, r2
 80022f2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295
 80022f8:	f7fe fdce 	bl	8000e98 <BSP_SD_ReadBlocks>
 80022fc:	b920      	cbnz	r0, 8002308 <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80022fe:	f7fe fdeb 	bl	8000ed8 <BSP_SD_GetCardState>
 8002302:	2800      	cmp	r0, #0
 8002304:	d1fb      	bne.n	80022fe <SD_read+0x12>
 8002306:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8002308:	2001      	movs	r0, #1
}
 800230a:	bd08      	pop	{r3, pc}

0800230c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <SD_ioctl+0x4c>)
{
 800230e:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002310:	781b      	ldrb	r3, [r3, #0]
{
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002316:	07db      	lsls	r3, r3, #31
 8002318:	d41b      	bmi.n	8002352 <SD_ioctl+0x46>

  switch (cmd)
 800231a:	2903      	cmp	r1, #3
 800231c:	d803      	bhi.n	8002326 <SD_ioctl+0x1a>
 800231e:	e8df f001 	tbb	[pc, r1]
 8002322:	0510      	.short	0x0510
 8002324:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8002326:	2004      	movs	r0, #4
  }

  return res;
}
 8002328:	b00a      	add	sp, #40	; 0x28
 800232a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800232c:	a801      	add	r0, sp, #4
 800232e:	f7fe fddd 	bl	8000eec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8002332:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	e004      	b.n	8002342 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8002338:	a801      	add	r0, sp, #4
 800233a:	f7fe fdd7 	bl	8000eec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800233e:	9b08      	ldr	r3, [sp, #32]
 8002340:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8002342:	2000      	movs	r0, #0
 8002344:	e7f0      	b.n	8002328 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8002346:	a801      	add	r0, sp, #4
 8002348:	f7fe fdd0 	bl	8000eec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800234c:	9b08      	ldr	r3, [sp, #32]
 800234e:	0a5b      	lsrs	r3, r3, #9
 8002350:	e7f0      	b.n	8002334 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002352:	2003      	movs	r0, #3
 8002354:	e7e8      	b.n	8002328 <SD_ioctl+0x1c>
 8002356:	bf00      	nop
 8002358:	24000014 	.word	0x24000014

0800235c <SD_write>:
{
 800235c:	b508      	push	{r3, lr}
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
 8002368:	f7fe fda6 	bl	8000eb8 <BSP_SD_WriteBlocks>
 800236c:	b920      	cbnz	r0, 8002378 <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 800236e:	f7fe fdb3 	bl	8000ed8 <BSP_SD_GetCardState>
 8002372:	2800      	cmp	r0, #0
 8002374:	d1fb      	bne.n	800236e <SD_write+0x12>
 8002376:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8002378:	2001      	movs	r0, #1
}
 800237a:	bd08      	pop	{r3, pc}

0800237c <HAL_SD_MspInit>:
//    Error_Handler();
  }
}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	2214      	movs	r2, #20
 8002384:	2100      	movs	r1, #0
 8002386:	a803      	add	r0, sp, #12
 8002388:	f010 f8b0 	bl	80124ec <memset>
  if(sdHandle->Instance==SDMMC1)
 800238c:	6822      	ldr	r2, [r4, #0]
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_SD_MspInit+0xac>)
 8002390:	429a      	cmp	r2, r3
 8002392:	d146      	bne.n	8002422 <HAL_SD_MspInit+0xa6>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_SD_MspInit+0xb0>)
    */
    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin|SD_CK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002396:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239a:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800239c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a0:	eb0d 0105 	add.w	r1, sp, r5
 80023a4:	4822      	ldr	r0, [pc, #136]	; (8002430 <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80023a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023aa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80023ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80023b2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80023b6:	9200      	str	r2, [sp, #0]
 80023b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80023be:	f042 0204 	orr.w	r2, r2, #4
 80023c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80023c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80023ca:	f002 0204 	and.w	r2, r2, #4
 80023ce:	9201      	str	r2, [sp, #4]
 80023d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80023d6:	f042 0208 	orr.w	r2, r2, #8
 80023da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e4:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80023ea:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin|SD_CK_Pin;
 80023f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80023f4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f6:	f003 fef5 	bl	80061e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80023fa:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002400:	eb0d 0105 	add.w	r1, sp, r5
 8002404:	480b      	ldr	r0, [pc, #44]	; (8002434 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8002406:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800240c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800240e:	f003 fee9 	bl	80061e4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002412:	2031      	movs	r0, #49	; 0x31
 8002414:	4622      	mov	r2, r4
 8002416:	4621      	mov	r1, r4
 8002418:	f001 fae4 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800241c:	2031      	movs	r0, #49	; 0x31
 800241e:	f001 fb29 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002422:	b008      	add	sp, #32
 8002424:	bd70      	pop	{r4, r5, r6, pc}
 8002426:	bf00      	nop
 8002428:	52007000 	.word	0x52007000
 800242c:	58024400 	.word	0x58024400
 8002430:	58020800 	.word	0x58020800
 8002434:	58020c00 	.word	0x58020c00

08002438 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002438:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800243a:	4815      	ldr	r0, [pc, #84]	; (8002490 <MX_SPI1_Init+0x58>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800243c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002440:	4914      	ldr	r1, [pc, #80]	; (8002494 <MX_SPI1_Init+0x5c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002442:	2207      	movs	r2, #7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002444:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;    // SPI_PHASE_2EDGE
  hspi1.Init.NSS = SPI_NSS_SOFT;     // SPI_NSS_HARD_OUTPUT
 8002448:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800244c:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800244e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;     // SPI_NSS_HARD_OUTPUT
 8002450:	6181      	str	r1, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002452:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8002456:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800245c:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;    // SPI_PHASE_2EDGE
 8002460:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002462:	61c1      	str	r1, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002464:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002466:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002468:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800246a:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800246c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800246e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002470:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002472:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002474:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002476:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002478:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800247a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800247c:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800247e:	f008 fceb 	bl	800ae58 <HAL_SPI_Init>
 8002482:	b118      	cbz	r0, 800248c <MX_SPI1_Init+0x54>
  {
    Error_Handler();
  }
}
 8002484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002488:	f7ff be56 	b.w	8002138 <Error_Handler>
 800248c:	bd08      	pop	{r3, pc}
 800248e:	bf00      	nop
 8002490:	24001080 	.word	0x24001080
 8002494:	40013000 	.word	0x40013000

08002498 <MX_SPI4_Init>:

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002498:	b508      	push	{r3, lr}
  hspi4.Instance = SPI4;
 800249a:	4815      	ldr	r0, [pc, #84]	; (80024f0 <MX_SPI4_Init+0x58>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800249c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024a0:	4914      	ldr	r1, [pc, #80]	; (80024f4 <MX_SPI4_Init+0x5c>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a2:	2207      	movs	r2, #7
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80024a4:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;    // SPI_PHASE_2EDGE
  hspi4.Init.NSS = SPI_NSS_SOFT;     // SPI_NSS_HARD_OUTPUT
 80024a8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80024ac:	2300      	movs	r3, #0
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80024ae:	60c2      	str	r2, [r0, #12]
  hspi4.Init.NSS = SPI_NSS_SOFT;     // SPI_NSS_HARD_OUTPUT
 80024b0:	6181      	str	r1, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024b2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 7;
 80024b6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80024bc:	6083      	str	r3, [r0, #8]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024be:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;    // SPI_PHASE_2EDGE
 80024c0:	6143      	str	r3, [r0, #20]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024c2:	61c1      	str	r1, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c4:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024ca:	6342      	str	r2, [r0, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024cc:	6383      	str	r3, [r0, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024ce:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024d0:	6403      	str	r3, [r0, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024d2:	6443      	str	r3, [r0, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024d4:	6483      	str	r3, [r0, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024d6:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024d8:	6503      	str	r3, [r0, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024da:	6543      	str	r3, [r0, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024dc:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80024de:	f008 fcbb 	bl	800ae58 <HAL_SPI_Init>
 80024e2:	b118      	cbz	r0, 80024ec <MX_SPI4_Init+0x54>
  {
    Error_Handler();
  }
}
 80024e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80024e8:	f7ff be26 	b.w	8002138 <Error_Handler>
 80024ec:	bd08      	pop	{r3, pc}
 80024ee:	bf00      	nop
 80024f0:	24000ff8 	.word	0x24000ff8
 80024f4:	40013400 	.word	0x40013400

080024f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	b091      	sub	sp, #68	; 0x44
 80024fc:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fe:	2214      	movs	r2, #20
 8002500:	2100      	movs	r1, #0
 8002502:	a80b      	add	r0, sp, #44	; 0x2c
 8002504:	f00f fff2 	bl	80124ec <memset>
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8002508:	2210      	movs	r2, #16
 800250a:	2100      	movs	r1, #0
 800250c:	a807      	add	r0, sp, #28
 800250e:	f00f ffed 	bl	80124ec <memset>
  if(spiHandle->Instance==SPI1)
 8002512:	6833      	ldr	r3, [r6, #0]
 8002514:	4a92      	ldr	r2, [pc, #584]	; (8002760 <HAL_SPI_MspInit+0x268>)
 8002516:	4293      	cmp	r3, r2
 8002518:	f040 809a 	bne.w	8002650 <HAL_SPI_MspInit+0x158>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800251c:	4b91      	ldr	r3, [pc, #580]	; (8002764 <HAL_SPI_MspInit+0x26c>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002522:	2405      	movs	r4, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002524:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	a90b      	add	r1, sp, #44	; 0x2c
 800252a:	488f      	ldr	r0, [pc, #572]	; (8002768 <HAL_SPI_MspInit+0x270>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800252c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002530:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002534:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002538:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800253c:	9200      	str	r2, [sp, #0]
 800253e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002540:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800254c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002550:	f002 0201 	and.w	r2, r2, #1
 8002554:	9201      	str	r2, [sp, #4]
 8002556:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002564:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002568:	f002 0201 	and.w	r2, r2, #1
 800256c:	9202      	str	r2, [sp, #8]
 800256e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002570:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002574:	f042 0208 	orr.w	r2, r2, #8
 8002578:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002582:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002586:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002588:	970e      	str	r7, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800258a:	9303      	str	r3, [sp, #12]
 800258c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800258e:	2360      	movs	r3, #96	; 0x60
 8002590:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f003 fe27 	bl	80061e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002596:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259c:	4873      	ldr	r0, [pc, #460]	; (800276c <HAL_SPI_MspInit+0x274>)
 800259e:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025a0:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025a2:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	950d      	str	r5, [sp, #52]	; 0x34

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80025a6:	4c72      	ldr	r4, [pc, #456]	; (8002770 <HAL_SPI_MspInit+0x278>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025aa:	f003 fe1b 	bl	80061e4 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ae:	4871      	ldr	r0, [pc, #452]	; (8002774 <HAL_SPI_MspInit+0x27c>)
 80025b0:	2326      	movs	r3, #38	; 0x26
 80025b2:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b6:	60e5      	str	r5, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b8:	6165      	str	r5, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ba:	61a5      	str	r5, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80025bc:	61e5      	str	r5, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025be:	6225      	str	r5, [r4, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025c0:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80025c2:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025c4:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025c6:	e884 4009 	stmia.w	r4, {r0, r3, lr}
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025ce:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025d0:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025d2:	2304      	movs	r3, #4
 80025d4:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025d6:	f001 fd67 	bl	80040a8 <HAL_DMA_Init>
 80025da:	b108      	cbz	r0, 80025e0 <HAL_SPI_MspInit+0xe8>
    {
      Error_Handler();
 80025dc:	f7ff fdac 	bl	8002138 <Error_Handler>
//    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream1;
 80025e0:	4d65      	ldr	r5, [pc, #404]	; (8002778 <HAL_SPI_MspInit+0x280>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e2:	2700      	movs	r7, #0
 80025e4:	2325      	movs	r3, #37	; 0x25
 80025e6:	4965      	ldr	r1, [pc, #404]	; (800277c <HAL_SPI_MspInit+0x284>)
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80025e8:	67b4      	str	r4, [r6, #120]	; 0x78
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80025ea:	4628      	mov	r0, r5
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80025ec:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ee:	60ef      	str	r7, [r5, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f0:	616f      	str	r7, [r5, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025f2:	61af      	str	r7, [r5, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80025f4:	61ef      	str	r7, [r5, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025f6:	622f      	str	r7, [r5, #32]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80025f8:	62e7      	str	r7, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025fa:	6327      	str	r7, [r4, #48]	; 0x30
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025fc:	e885 008a 	stmia.w	r5, {r1, r3, r7}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002604:	612b      	str	r3, [r5, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002606:	2304      	movs	r3, #4
 8002608:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800260a:	2303      	movs	r3, #3
 800260c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800260e:	f001 fd4b 	bl	80040a8 <HAL_DMA_Init>
 8002612:	b108      	cbz	r0, 8002618 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 8002614:	f7ff fd90 	bl	8002138 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002618:	2306      	movs	r3, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
    pSyncConfig.SyncEnable = DISABLE;
    pSyncConfig.EventEnable = DISABLE;
    pSyncConfig.RequestNumber = 1;
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi1_rx, &pSyncConfig) != HAL_OK)
 800261a:	a907      	add	r1, sp, #28
 800261c:	4856      	ldr	r0, [pc, #344]	; (8002778 <HAL_SPI_MspInit+0x280>)
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800261e:	9307      	str	r3, [sp, #28]
    pSyncConfig.RequestNumber = 1;
 8002620:	2301      	movs	r3, #1
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002622:	9708      	str	r7, [sp, #32]
    pSyncConfig.SyncEnable = DISABLE;
 8002624:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    pSyncConfig.EventEnable = DISABLE;
 8002628:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    pSyncConfig.RequestNumber = 1;
 800262c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi1_rx, &pSyncConfig) != HAL_OK)
 800262e:	f002 f863 	bl	80046f8 <HAL_DMAEx_ConfigMuxSync>
 8002632:	b108      	cbz	r0, 8002638 <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 8002634:	f7ff fd80 	bl	8002138 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800263c:	67f5      	str	r5, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800263e:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002640:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002642:	f001 f9cf 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002646:	2023      	movs	r0, #35	; 0x23

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002648:	f001 fa14 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800264c:	b011      	add	sp, #68	; 0x44
 800264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(spiHandle->Instance==SPI4)
 8002650:	4a4b      	ldr	r2, [pc, #300]	; (8002780 <HAL_SPI_MspInit+0x288>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d1fa      	bne.n	800264c <HAL_SPI_MspInit+0x154>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002656:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_SPI_MspInit+0x26c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800265a:	a90b      	add	r1, sp, #44	; 0x2c
 800265c:	4849      	ldr	r0, [pc, #292]	; (8002784 <HAL_SPI_MspInit+0x28c>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 800265e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002662:	2500      	movs	r5, #0
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8002664:	4c48      	ldr	r4, [pc, #288]	; (8002788 <HAL_SPI_MspInit+0x290>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800266e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002672:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002676:	9204      	str	r2, [sp, #16]
 8002678:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800267a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8002686:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800268a:	f002 0201 	and.w	r2, r2, #1
 800268e:	9205      	str	r2, [sp, #20]
 8002690:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002692:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002696:	f042 0210 	orr.w	r2, r2, #16
 800269a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	970e      	str	r7, [sp, #56]	; 0x38
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	9306      	str	r3, [sp, #24]
 80026aa:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80026ac:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80026b0:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80026b6:	2305      	movs	r3, #5
 80026b8:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ba:	f003 fd93 	bl	80061e4 <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80026be:	4a33      	ldr	r2, [pc, #204]	; (800278c <HAL_SPI_MspInit+0x294>)
 80026c0:	2353      	movs	r3, #83	; 0x53
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80026c2:	4620      	mov	r0, r4
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c4:	60a5      	str	r5, [r4, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c6:	60e5      	str	r5, [r4, #12]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c8:	6165      	str	r5, [r4, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ca:	61a5      	str	r5, [r4, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80026cc:	61e5      	str	r5, [r4, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ce:	6225      	str	r5, [r4, #32]
    hdma_spi4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026d0:	62a7      	str	r7, [r4, #40]	; 0x28
 80026d2:	462f      	mov	r7, r5
    hdma_spi4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80026d4:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_spi4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026d6:	6325      	str	r5, [r4, #48]	; 0x30
 80026d8:	4625      	mov	r5, r4
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80026da:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e2:	6123      	str	r3, [r4, #16]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026e4:	2304      	movs	r3, #4
 80026e6:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80026e8:	f001 fcde 	bl	80040a8 <HAL_DMA_Init>
 80026ec:	b108      	cbz	r0, 80026f2 <HAL_SPI_MspInit+0x1fa>
      Error_Handler();
 80026ee:	f7ff fd23 	bl	8002138 <Error_Handler>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80026f2:	2306      	movs	r3, #6
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi4_rx, &pSyncConfig) != HAL_OK)
 80026f4:	a907      	add	r1, sp, #28
 80026f6:	4824      	ldr	r0, [pc, #144]	; (8002788 <HAL_SPI_MspInit+0x290>)
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80026f8:	9307      	str	r3, [sp, #28]
    pSyncConfig.RequestNumber = 1;
 80026fa:	2301      	movs	r3, #1
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80026fc:	9708      	str	r7, [sp, #32]
    pSyncConfig.SyncEnable = DISABLE;
 80026fe:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    pSyncConfig.EventEnable = DISABLE;
 8002702:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    pSyncConfig.RequestNumber = 1;
 8002706:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi4_rx, &pSyncConfig) != HAL_OK)
 8002708:	f001 fff6 	bl	80046f8 <HAL_DMAEx_ConfigMuxSync>
 800270c:	b108      	cbz	r0, 8002712 <HAL_SPI_MspInit+0x21a>
      Error_Handler();
 800270e:	f7ff fd13 	bl	8002138 <Error_Handler>
    hdma_spi4_tx.Instance = DMA1_Stream3;
 8002712:	4c1f      	ldr	r4, [pc, #124]	; (8002790 <HAL_SPI_MspInit+0x298>)
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002714:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <HAL_SPI_MspInit+0x29c>)
 800271a:	2754      	movs	r7, #84	; 0x54
 800271c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002720:	6122      	str	r2, [r4, #16]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002722:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8002724:	67f5      	str	r5, [r6, #124]	; 0x7c
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002726:	4620      	mov	r0, r4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8002728:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800272a:	6262      	str	r2, [r4, #36]	; 0x24
    hdma_spi4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800272c:	2203      	movs	r2, #3
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800272e:	e884 4088 	stmia.w	r4, {r3, r7, lr}
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002732:	2300      	movs	r3, #0
    hdma_spi4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002734:	62aa      	str	r2, [r5, #40]	; 0x28
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002736:	60e3      	str	r3, [r4, #12]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002738:	6163      	str	r3, [r4, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800273a:	61a3      	str	r3, [r4, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800273c:	61e3      	str	r3, [r4, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800273e:	6223      	str	r3, [r4, #32]
    hdma_spi4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002740:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002742:	632b      	str	r3, [r5, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002744:	f001 fcb0 	bl	80040a8 <HAL_DMA_Init>
 8002748:	b108      	cbz	r0, 800274e <HAL_SPI_MspInit+0x256>
      Error_Handler();
 800274a:	f7ff fcf5 	bl	8002138 <Error_Handler>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2054      	movs	r0, #84	; 0x54
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8002752:	67b4      	str	r4, [r6, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002754:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8002756:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002758:	f001 f944 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800275c:	2054      	movs	r0, #84	; 0x54
 800275e:	e773      	b.n	8002648 <HAL_SPI_MspInit+0x150>
 8002760:	40013000 	.word	0x40013000
 8002764:	58024400 	.word	0x58024400
 8002768:	58020000 	.word	0x58020000
 800276c:	58020c00 	.word	0x58020c00
 8002770:	24001180 	.word	0x24001180
 8002774:	40020010 	.word	0x40020010
 8002778:	24001108 	.word	0x24001108
 800277c:	40020028 	.word	0x40020028
 8002780:	40013400 	.word	0x40013400
 8002784:	58021000 	.word	0x58021000
 8002788:	24000f08 	.word	0x24000f08
 800278c:	40020040 	.word	0x40020040
 8002790:	24000f80 	.word	0x24000f80
 8002794:	40020058 	.word	0x40020058

08002798 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002798:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_MspInit+0x74>)
{
 800279a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 80027a0:	2001      	movs	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	f042 0202 	orr.w	r2, r2, #2
 80027a6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 80027b0:	4611      	mov	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 80027ba:	f001 f913 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 80027be:	2001      	movs	r0, #1
 80027c0:	f001 f958 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2004      	movs	r0, #4
 80027c8:	4611      	mov	r1, r2
 80027ca:	f001 f90b 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80027ce:	2004      	movs	r0, #4
 80027d0:	f001 f950 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2005      	movs	r0, #5
 80027d8:	4611      	mov	r1, r2
 80027da:	f001 f903 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80027de:	2005      	movs	r0, #5
 80027e0:	f001 f948 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2051      	movs	r0, #81	; 0x51
 80027e8:	4611      	mov	r1, r2
 80027ea:	f001 f8fb 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80027ee:	2051      	movs	r0, #81	; 0x51
 80027f0:	f001 f940 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	207d      	movs	r0, #125	; 0x7d
 80027f8:	4611      	mov	r1, r2
 80027fa:	f001 f8f3 	bl	80039e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80027fe:	207d      	movs	r0, #125	; 0x7d
 8002800:	f001 f938 	bl	8003a74 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002804:	b003      	add	sp, #12
 8002806:	f85d fb04 	ldr.w	pc, [sp], #4
 800280a:	bf00      	nop
 800280c:	58024400 	.word	0x58024400

08002810 <NMI_Handler>:
 8002810:	4770      	bx	lr

08002812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002812:	e7fe      	b.n	8002812 <HardFault_Handler>

08002814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002814:	e7fe      	b.n	8002814 <MemManage_Handler>

08002816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002816:	e7fe      	b.n	8002816 <BusFault_Handler>

08002818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002818:	e7fe      	b.n	8002818 <UsageFault_Handler>

0800281a <SVC_Handler>:
 800281a:	4770      	bx	lr

0800281c <DebugMon_Handler>:
 800281c:	4770      	bx	lr

0800281e <PendSV_Handler>:
 800281e:	4770      	bx	lr

08002820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002820:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002822:	f001 f887 	bl	8003934 <HAL_IncTick>
  HAL_IncTicks(); // main.c
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTicks(); // main.c
 800282a:	f7ff ba2d 	b.w	8001c88 <HAL_IncTicks>

0800282e <PVD_AVD_IRQHandler>:
void PVD_AVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 800282e:	f005 bb01 	b.w	8007e34 <HAL_PWREx_PVD_AVD_IRQHandler>

08002832 <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002832:	f003 bb91 	b.w	8005f58 <HAL_FLASH_IRQHandler>

08002836 <RCC_IRQHandler>:
 8002836:	4770      	bx	lr

08002838 <EXTI0_IRQHandler>:
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  // INTRN1 PA0 Ethernet 1
//  dmc_puts("INTRN1\n");

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002838:	2001      	movs	r0, #1
 800283a:	f003 be65 	b.w	8006508 <HAL_GPIO_EXTI_IRQHandler>

0800283e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800283e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  // INTRN2 PD9 Ethernet 2
//  dmc_puts("INTRN2\n");

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002840:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002844:	f003 fe60 	bl	8006508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002848:	f44f 7000 	mov.w	r0, #512	; 0x200
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800284c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002850:	f003 be5a 	b.w	8006508 <HAL_GPIO_EXTI_IRQHandler>

08002854 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002854:	2008      	movs	r0, #8
 8002856:	f003 be57 	b.w	8006508 <HAL_GPIO_EXTI_IRQHandler>
	...

0800285c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800285c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  // SPI1_TX  DMA1 Stream 0 Memory To Peripheral  Byte/Byte   D2

//  dmc_puts("SPI1TX\n");
  set_dma_tx_ended(&KSZ8851_interface_0);
 800285e:	4804      	ldr	r0, [pc, #16]	; (8002870 <DMA1_Stream0_IRQHandler+0x14>)
 8002860:	f000 ffed 	bl	800383e <set_dma_tx_ended>

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002864:	4803      	ldr	r0, [pc, #12]	; (8002874 <DMA1_Stream0_IRQHandler+0x18>)
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800286a:	f001 be11 	b.w	8004490 <HAL_DMA_IRQHandler>
 800286e:	bf00      	nop
 8002870:	24000d9c 	.word	0x24000d9c
 8002874:	24001180 	.word	0x24001180

08002878 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  // SPI1_RX  DMA1 Stream 1 Peripheral To Memory  Byte/Byte   D2

//  dmc_puts("SPI1RX\n");
  set_dma_rx_ended(&KSZ8851_interface_0);
 800287a:	4804      	ldr	r0, [pc, #16]	; (800288c <DMA1_Stream1_IRQHandler+0x14>)
 800287c:	f000 ffe3 	bl	8003846 <set_dma_rx_ended>

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002880:	4803      	ldr	r0, [pc, #12]	; (8002890 <DMA1_Stream1_IRQHandler+0x18>)
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002886:	f001 be03 	b.w	8004490 <HAL_DMA_IRQHandler>
 800288a:	bf00      	nop
 800288c:	24000d9c 	.word	0x24000d9c
 8002890:	24001108 	.word	0x24001108

08002894 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
  // SPI4_RX  DMA1 Stream 2 Peripheral To Memory  Byte/Byte   D2

//  dmc_puts("SPI4RX\n");
  set_dma_rx_ended(&KSZ8851_interface_1);
 8002896:	4804      	ldr	r0, [pc, #16]	; (80028a8 <DMA1_Stream2_IRQHandler+0x14>)
 8002898:	f000 ffd5 	bl	8003846 <set_dma_rx_ended>

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800289c:	4803      	ldr	r0, [pc, #12]	; (80028ac <DMA1_Stream2_IRQHandler+0x18>)
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800289e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80028a2:	f001 bdf5 	b.w	8004490 <HAL_DMA_IRQHandler>
 80028a6:	bf00      	nop
 80028a8:	24000dc8 	.word	0x24000dc8
 80028ac:	24000f08 	.word	0x24000f08

080028b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80028b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
  // SPI4_TX  DMA1 Stream 3 Memory To Peripheral  Byte/Byte   D2

//  dmc_puts("SPI4TX\n");
  set_dma_tx_ended(&KSZ8851_interface_1);
 80028b2:	4804      	ldr	r0, [pc, #16]	; (80028c4 <DMA1_Stream3_IRQHandler+0x14>)
 80028b4:	f000 ffc3 	bl	800383e <set_dma_tx_ended>

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80028b8:	4803      	ldr	r0, [pc, #12]	; (80028c8 <DMA1_Stream3_IRQHandler+0x18>)
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80028ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80028be:	f001 bde7 	b.w	8004490 <HAL_DMA_IRQHandler>
 80028c2:	bf00      	nop
 80028c4:	24000dc8 	.word	0x24000dc8
 80028c8:	24000f80 	.word	0x24000f80

080028cc <DMA1_Stream4_IRQHandler>:
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
//  dmc_puts("DMA1_Stream4_IRQHandler\n");

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80028cc:	4801      	ldr	r0, [pc, #4]	; (80028d4 <DMA1_Stream4_IRQHandler+0x8>)
 80028ce:	f001 bddf 	b.w	8004490 <HAL_DMA_IRQHandler>
 80028d2:	bf00      	nop
 80028d4:	24001368 	.word	0x24001368

080028d8 <DMA1_Stream5_IRQHandler>:
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
//  dmc_puts("DMA1_Stream5_IRQHandler\n");

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80028d8:	4801      	ldr	r0, [pc, #4]	; (80028e0 <DMA1_Stream5_IRQHandler+0x8>)
 80028da:	f001 bdd9 	b.w	8004490 <HAL_DMA_IRQHandler>
 80028de:	bf00      	nop
 80028e0:	240012f0 	.word	0x240012f0

080028e4 <DMA1_Stream6_IRQHandler>:
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
//  dmc_puts("DMA1_Stream6_IRQHandler\n");

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028e4:	4801      	ldr	r0, [pc, #4]	; (80028ec <DMA1_Stream6_IRQHandler+0x8>)
 80028e6:	f001 bdd3 	b.w	8004490 <HAL_DMA_IRQHandler>
 80028ea:	bf00      	nop
 80028ec:	240011f8 	.word	0x240011f8

080028f0 <FDCAN1_IT1_IRQHandler>:
void FDCAN1_IT1_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80028f0:	4801      	ldr	r0, [pc, #4]	; (80028f8 <FDCAN1_IT1_IRQHandler+0x8>)
 80028f2:	f003 b8cb 	b.w	8005a8c <HAL_FDCAN_IRQHandler>
 80028f6:	bf00      	nop
 80028f8:	24000b0c 	.word	0x24000b0c

080028fc <FDCAN1_IT0_IRQHandler>:
 80028fc:	f7ff bff8 	b.w	80028f0 <FDCAN1_IT1_IRQHandler>

08002900 <FDCAN2_IT1_IRQHandler>:
void FDCAN2_IT1_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002900:	4801      	ldr	r0, [pc, #4]	; (8002908 <FDCAN2_IT1_IRQHandler+0x8>)
 8002902:	f003 b8c3 	b.w	8005a8c <HAL_FDCAN_IRQHandler>
 8002906:	bf00      	nop
 8002908:	24000ba8 	.word	0x24000ba8

0800290c <FDCAN2_IT0_IRQHandler>:
 800290c:	f7ff bff8 	b.w	8002900 <FDCAN2_IT1_IRQHandler>

08002910 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */
//  dmc_puthex8cr(SPI1->SR);
  if (SPI1->SR & SPI_SR_EOT) // SPI_SR_EOT or SPI_SR_TXC, both work
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <SPI1_IRQHandler+0x1c>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	071b      	lsls	r3, r3, #28
 8002918:	d502      	bpl.n	8002920 <SPI1_IRQHandler+0x10>
  {
    set_spi_irq(&KSZ8851_interface_0);
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <SPI1_IRQHandler+0x20>)
 800291c:	f000 ff96 	bl	800384c <set_spi_irq>
  }
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002920:	4804      	ldr	r0, [pc, #16]	; (8002934 <SPI1_IRQHandler+0x24>)
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SPI_IRQHandler(&hspi1);
 8002926:	f008 bf9f 	b.w	800b868 <HAL_SPI_IRQHandler>
 800292a:	bf00      	nop
 800292c:	40013000 	.word	0x40013000
 8002930:	24000d9c 	.word	0x24000d9c
 8002934:	24001080 	.word	0x24001080

08002938 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI4_IRQn 0 */
  if (SPI4->SR & SPI_SR_EOT) // SPI_SR_EOT or SPI_SR_TXC, both work
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <SPI4_IRQHandler+0x1c>)
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	071b      	lsls	r3, r3, #28
 8002940:	d502      	bpl.n	8002948 <SPI4_IRQHandler+0x10>
  {
    set_spi_irq(&KSZ8851_interface_1);
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <SPI4_IRQHandler+0x20>)
 8002944:	f000 ff82 	bl	800384c <set_spi_irq>
  }

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002948:	4804      	ldr	r0, [pc, #16]	; (800295c <SPI4_IRQHandler+0x24>)
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800294a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SPI_IRQHandler(&hspi4);
 800294e:	f008 bf8b 	b.w	800b868 <HAL_SPI_IRQHandler>
 8002952:	bf00      	nop
 8002954:	40013400 	.word	0x40013400
 8002958:	24000dc8 	.word	0x24000dc8
 800295c:	24000ff8 	.word	0x24000ff8

08002960 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002960:	4801      	ldr	r0, [pc, #4]	; (8002968 <USART2_IRQHandler+0x8>)
 8002962:	f009 b8cf 	b.w	800bb04 <HAL_UART_IRQHandler>
 8002966:	bf00      	nop
 8002968:	24001458 	.word	0x24001458

0800296c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800296c:	4801      	ldr	r0, [pc, #4]	; (8002974 <DMA1_Stream7_IRQHandler+0x8>)
 800296e:	f001 bd8f 	b.w	8004490 <HAL_DMA_IRQHandler>
 8002972:	bf00      	nop
 8002974:	240013e0 	.word	0x240013e0

08002978 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002978:	4801      	ldr	r0, [pc, #4]	; (8002980 <SDMMC1_IRQHandler+0x8>)
 800297a:	f008 b90d 	b.w	800ab98 <HAL_SD_IRQHandler>
 800297e:	bf00      	nop
 8002980:	24000e8c 	.word	0x24000e8c

08002984 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8002984:	4801      	ldr	r0, [pc, #4]	; (800298c <DMA2_Stream0_IRQHandler+0x8>)
 8002986:	f001 bd83 	b.w	8004490 <HAL_DMA_IRQHandler>
 800298a:	bf00      	nop
 800298c:	24000520 	.word	0x24000520

08002990 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cryp_in);
 8002990:	4801      	ldr	r0, [pc, #4]	; (8002998 <DMA2_Stream1_IRQHandler+0x8>)
 8002992:	f001 bd7d 	b.w	8004490 <HAL_DMA_IRQHandler>
 8002996:	bf00      	nop
 8002998:	24000460 	.word	0x24000460

0800299c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cryp_out);
 800299c:	4801      	ldr	r0, [pc, #4]	; (80029a4 <DMA2_Stream2_IRQHandler+0x8>)
 800299e:	f001 bd77 	b.w	8004490 <HAL_DMA_IRQHandler>
 80029a2:	bf00      	nop
 80029a4:	240003e8 	.word	0x240003e8

080029a8 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hash_in);
 80029a8:	4801      	ldr	r0, [pc, #4]	; (80029b0 <DMA2_Stream3_IRQHandler+0x8>)
 80029aa:	f001 bd71 	b.w	8004490 <HAL_DMA_IRQHandler>
 80029ae:	bf00      	nop
 80029b0:	24000c7c 	.word	0x24000c7c

080029b4 <ETH_WKUP_IRQHandler>:
void ETH_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80029b4:	4801      	ldr	r0, [pc, #4]	; (80029bc <ETH_WKUP_IRQHandler+0x8>)
 80029b6:	f002 bb17 	b.w	8004fe8 <HAL_ETH_IRQHandler>
 80029ba:	bf00      	nop
 80029bc:	240005b8 	.word	0x240005b8

080029c0 <ETH_IRQHandler>:
 80029c0:	f7ff bff8 	b.w	80029b4 <ETH_WKUP_IRQHandler>

080029c4 <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 80029c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80029c6:	4804      	ldr	r0, [pc, #16]	; (80029d8 <FDCAN_CAL_IRQHandler+0x14>)
 80029c8:	f003 f860 	bl	8005a8c <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80029cc:	4803      	ldr	r0, [pc, #12]	; (80029dc <FDCAN_CAL_IRQHandler+0x18>)
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 80029ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80029d2:	f003 b85b 	b.w	8005a8c <HAL_FDCAN_IRQHandler>
 80029d6:	bf00      	nop
 80029d8:	24000b0c 	.word	0x24000b0c
 80029dc:	24000ba8 	.word	0x24000ba8

080029e0 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80029e0:	4801      	ldr	r0, [pc, #4]	; (80029e8 <OTG_HS_IRQHandler+0x8>)
 80029e2:	f003 bf31 	b.w	8006848 <HAL_HCD_IRQHandler>
 80029e6:	bf00      	nop
 80029e8:	240014d8 	.word	0x240014d8

080029ec <OTG_HS_EP1_IN_IRQHandler>:
 80029ec:	f7ff bff8 	b.w	80029e0 <OTG_HS_IRQHandler>

080029f0 <OTG_HS_EP1_OUT_IRQHandler>:
 80029f0:	f7ff bff6 	b.w	80029e0 <OTG_HS_IRQHandler>

080029f4 <CRYP_IRQHandler>:
void CRYP_IRQHandler(void)
{
  /* USER CODE BEGIN CRYP_IRQn 0 */

  /* USER CODE END CRYP_IRQn 0 */
  HAL_CRYP_IRQHandler(&hcryp);
 80029f4:	4801      	ldr	r0, [pc, #4]	; (80029fc <CRYP_IRQHandler+0x8>)
 80029f6:	f001 b90d 	b.w	8003c14 <HAL_CRYP_IRQHandler>
 80029fa:	bf00      	nop
 80029fc:	240004d8 	.word	0x240004d8

08002a00 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8002a00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_HASH_IRQHandler(&hhash);
 8002a02:	4804      	ldr	r0, [pc, #16]	; (8002a14 <HASH_RNG_IRQHandler+0x14>)
 8002a04:	f003 fe40 	bl	8006688 <HAL_HASH_IRQHandler>
  HAL_RNG_IRQHandler(&hrng);
 8002a08:	4803      	ldr	r0, [pc, #12]	; (8002a18 <HASH_RNG_IRQHandler+0x18>)
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8002a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_RNG_IRQHandler(&hrng);
 8002a0e:	f007 b921 	b.w	8009c54 <HAL_RNG_IRQHandler>
 8002a12:	bf00      	nop
 8002a14:	24000c44 	.word	0x24000c44
 8002a18:	24000e58 	.word	0x24000e58

08002a1c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002a1c:	4770      	bx	lr
	...

08002a20 <UART7_IRQHandler>:
void UART7_IRQHandler(void)
{
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002a20:	4801      	ldr	r0, [pc, #4]	; (8002a28 <UART7_IRQHandler+0x8>)
 8002a22:	f009 b86f 	b.w	800bb04 <HAL_UART_IRQHandler>
 8002a26:	bf00      	nop
 8002a28:	24001270 	.word	0x24001270

08002a2c <QUADSPI_IRQHandler>:
void QUADSPI_IRQHandler(void)
{
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002a2c:	4801      	ldr	r0, [pc, #4]	; (8002a34 <QUADSPI_IRQHandler+0x8>)
 8002a2e:	f005 bb35 	b.w	800809c <HAL_QSPI_IRQHandler>
 8002a32:	bf00      	nop
 8002a34:	24000e0c 	.word	0x24000e0c

08002a38 <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8002a38:	4801      	ldr	r0, [pc, #4]	; (8002a40 <I2C4_EV_IRQHandler+0x8>)
 8002a3a:	f004 bed9 	b.w	80077f0 <HAL_I2C_EV_IRQHandler>
 8002a3e:	bf00      	nop
 8002a40:	24000cf4 	.word	0x24000cf4

08002a44 <I2C4_ER_IRQHandler>:
void I2C4_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8002a44:	4801      	ldr	r0, [pc, #4]	; (8002a4c <I2C4_ER_IRQHandler+0x8>)
 8002a46:	f005 b901 	b.w	8007c4c <HAL_I2C_ER_IRQHandler>
 8002a4a:	bf00      	nop
 8002a4c:	24000cf4 	.word	0x24000cf4

08002a50 <HSEM1_IRQHandler>:
void HSEM1_IRQHandler(void)
{
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002a50:	f004 ba38 	b.w	8006ec4 <HAL_HSEM_IRQHandler>

08002a54 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002a54:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 8002a56:	480e      	ldr	r0, [pc, #56]	; (8002a90 <MX_UART7_Init+0x3c>)
  huart7.Init.BaudRate = 115200;
 8002a58:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <MX_UART7_Init+0x40>)
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002a5e:	220c      	movs	r2, #12
  huart7.Init.BaudRate = 115200;
 8002a60:	e880 4008 	stmia.w	r0, {r3, lr}
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002a64:	2300      	movs	r3, #0
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002a66:	6142      	str	r2, [r0, #20]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002a68:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002a6a:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002a6c:	6103      	str	r3, [r0, #16]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6e:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a70:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a72:	6203      	str	r3, [r0, #32]
  huart7.Init.Prescaler = UART_PRESCALER_DIV1;
 8002a74:	6243      	str	r3, [r0, #36]	; 0x24
  huart7.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8002a76:	6283      	str	r3, [r0, #40]	; 0x28
  huart7.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8002a78:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart7.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8002a7a:	6303      	str	r3, [r0, #48]	; 0x30
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a7c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002a7e:	f009 fe6d 	bl	800c75c <HAL_UART_Init>
 8002a82:	b118      	cbz	r0, 8002a8c <MX_UART7_Init+0x38>
  {
    Error_Handler();
  }

}
 8002a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002a88:	f7ff bb56 	b.w	8002138 <Error_Handler>
 8002a8c:	bd08      	pop	{r3, pc}
 8002a8e:	bf00      	nop
 8002a90:	24001270 	.word	0x24001270
 8002a94:	40007800 	.word	0x40007800

08002a98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a98:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8002a9a:	480e      	ldr	r0, [pc, #56]	; (8002ad4 <MX_USART2_UART_Init+0x3c>)
  huart2.Init.BaudRate = 115200;
 8002a9c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <MX_USART2_UART_Init+0x40>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aa2:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8002aa4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa8:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aaa:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aac:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aae:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ab0:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ab6:	6203      	str	r3, [r0, #32]
  huart2.Init.Prescaler = UART_PRESCALER_DIV1;
 8002ab8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8002aba:	6283      	str	r3, [r0, #40]	; 0x28
  huart2.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8002abc:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart2.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8002abe:	6303      	str	r3, [r0, #48]	; 0x30
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ac0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ac2:	f009 fe4b 	bl	800c75c <HAL_UART_Init>
 8002ac6:	b118      	cbz	r0, 8002ad0 <MX_USART2_UART_Init+0x38>
  {
    Error_Handler();
  }

}
 8002ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002acc:	f7ff bb34 	b.w	8002138 <Error_Handler>
 8002ad0:	bd08      	pop	{r3, pc}
 8002ad2:	bf00      	nop
 8002ad4:	24001458 	.word	0x24001458
 8002ad8:	40004400 	.word	0x40004400

08002adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae2:	2214      	movs	r2, #20
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	a809      	add	r0, sp, #36	; 0x24
 8002ae8:	f00f fd00 	bl	80124ec <memset>
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8002aec:	2210      	movs	r2, #16
 8002aee:	2100      	movs	r1, #0
 8002af0:	a805      	add	r0, sp, #20
 8002af2:	f00f fcfb 	bl	80124ec <memset>
  if(uartHandle->Instance==UART7)
 8002af6:	682b      	ldr	r3, [r5, #0]
 8002af8:	4a7d      	ldr	r2, [pc, #500]	; (8002cf0 <HAL_UART_MspInit+0x214>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d17c      	bne.n	8002bf8 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002afe:	4b7d      	ldr	r3, [pc, #500]	; (8002cf4 <HAL_UART_MspInit+0x218>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b00:	a909      	add	r1, sp, #36	; 0x24
 8002b02:	487d      	ldr	r0, [pc, #500]	; (8002cf8 <HAL_UART_MspInit+0x21c>)

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream4;
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b04:	2600      	movs	r6, #0
    __HAL_RCC_UART7_CLK_ENABLE();
 8002b06:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_uart7_rx.Instance = DMA1_Stream4;
 8002b0a:	4c7c      	ldr	r4, [pc, #496]	; (8002cfc <HAL_UART_MspInit+0x220>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8002b0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b10:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002b14:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002b18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b1c:	9201      	str	r2, [sp, #4]
 8002b1e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002b24:	f042 0210 	orr.w	r2, r2, #16
 8002b28:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b3c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002b42:	2307      	movs	r3, #7
 8002b44:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b46:	f003 fb4d 	bl	80061e4 <HAL_GPIO_Init>
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b4a:	486d      	ldr	r0, [pc, #436]	; (8002d00 <HAL_UART_MspInit+0x224>)
 8002b4c:	234f      	movs	r3, #79	; 0x4f
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4e:	60e6      	str	r6, [r4, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b50:	6166      	str	r6, [r4, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b52:	61a6      	str	r6, [r4, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8002b54:	61e6      	str	r6, [r4, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b56:	6226      	str	r6, [r4, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b58:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b5a:	e884 0049 	stmia.w	r4, {r0, r3, r6}
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002b62:	4620      	mov	r0, r4
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b64:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002b66:	f001 fa9f 	bl	80040a8 <HAL_DMA_Init>
 8002b6a:	b108      	cbz	r0, 8002b70 <HAL_UART_MspInit+0x94>
    {
      Error_Handler();
 8002b6c:	f7ff fae4 	bl	8002138 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002b70:	2306      	movs	r3, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
    pSyncConfig.SyncEnable = DISABLE;
    pSyncConfig.EventEnable = DISABLE;
    pSyncConfig.RequestNumber = 1;
    if (HAL_DMAEx_ConfigMuxSync(&hdma_uart7_rx, &pSyncConfig) != HAL_OK)
 8002b72:	a905      	add	r1, sp, #20
 8002b74:	4861      	ldr	r0, [pc, #388]	; (8002cfc <HAL_UART_MspInit+0x220>)
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002b76:	9305      	str	r3, [sp, #20]
    pSyncConfig.RequestNumber = 1;
 8002b78:	2301      	movs	r3, #1
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002b7a:	9606      	str	r6, [sp, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8002b7c:	f88d 601c 	strb.w	r6, [sp, #28]
    pSyncConfig.EventEnable = DISABLE;
 8002b80:	f88d 601d 	strb.w	r6, [sp, #29]
    pSyncConfig.RequestNumber = 1;
 8002b84:	9308      	str	r3, [sp, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_uart7_rx, &pSyncConfig) != HAL_OK)
 8002b86:	f001 fdb7 	bl	80046f8 <HAL_DMAEx_ConfigMuxSync>
 8002b8a:	b108      	cbz	r0, 8002b90 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8002b8c:	f7ff fad4 	bl	8002138 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream5;
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b90:	2340      	movs	r3, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8002b92:	676c      	str	r4, [r5, #116]	; 0x74
 8002b94:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b96:	2250      	movs	r2, #80	; 0x50
    hdma_uart7_tx.Instance = DMA1_Stream5;
 8002b98:	4c5a      	ldr	r4, [pc, #360]	; (8002d04 <HAL_UART_MspInit+0x228>)
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9a:	2600      	movs	r6, #0
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b9c:	495a      	ldr	r1, [pc, #360]	; (8002d08 <HAL_UART_MspInit+0x22c>)
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002b9e:	4620      	mov	r0, r4
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba0:	60e6      	str	r6, [r4, #12]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba2:	6166      	str	r6, [r4, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ba4:	61a6      	str	r6, [r4, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8002ba6:	61e6      	str	r6, [r4, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba8:	6226      	str	r6, [r4, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002baa:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb4:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002bb6:	f001 fa77 	bl	80040a8 <HAL_DMA_Init>
 8002bba:	b108      	cbz	r0, 8002bc0 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002bbc:	f7ff fabc 	bl	8002138 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002bc0:	2306      	movs	r3, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
    pSyncConfig.SyncEnable = DISABLE;
    pSyncConfig.EventEnable = DISABLE;
    pSyncConfig.RequestNumber = 1;
    if (HAL_DMAEx_ConfigMuxSync(&hdma_uart7_tx, &pSyncConfig) != HAL_OK)
 8002bc2:	a905      	add	r1, sp, #20
 8002bc4:	484f      	ldr	r0, [pc, #316]	; (8002d04 <HAL_UART_MspInit+0x228>)
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002bc6:	9305      	str	r3, [sp, #20]
    pSyncConfig.RequestNumber = 1;
 8002bc8:	2301      	movs	r3, #1
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002bca:	9606      	str	r6, [sp, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8002bcc:	f88d 601c 	strb.w	r6, [sp, #28]
    pSyncConfig.EventEnable = DISABLE;
 8002bd0:	f88d 601d 	strb.w	r6, [sp, #29]
    pSyncConfig.RequestNumber = 1;
 8002bd4:	9308      	str	r3, [sp, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_uart7_tx, &pSyncConfig) != HAL_OK)
 8002bd6:	f001 fd8f 	bl	80046f8 <HAL_DMAEx_ConfigMuxSync>
 8002bda:	b108      	cbz	r0, 8002be0 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002bdc:	f7ff faac 	bl	8002138 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2052      	movs	r0, #82	; 0x52
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8002be4:	672c      	str	r4, [r5, #112]	; 0x70
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002be6:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8002be8:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002bea:	f000 fefb 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002bee:	2052      	movs	r0, #82	; 0x52

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf0:	f000 ff40 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bf4:	b00e      	add	sp, #56	; 0x38
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 8002bf8:	4a44      	ldr	r2, [pc, #272]	; (8002d0c <HAL_UART_MspInit+0x230>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d1fa      	bne.n	8002bf4 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_UART_MspInit+0x218>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c00:	a909      	add	r1, sp, #36	; 0x24
 8002c02:	4843      	ldr	r0, [pc, #268]	; (8002d10 <HAL_UART_MspInit+0x234>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c04:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c06:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8002c0a:	4c42      	ldr	r4, [pc, #264]	; (8002d14 <HAL_UART_MspInit+0x238>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c10:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002c14:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002c18:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c1c:	9203      	str	r2, [sp, #12]
 8002c1e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c24:	f042 0208 	orr.w	r2, r2, #8
 8002c28:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	9304      	str	r3, [sp, #16]
 8002c36:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c38:	2360      	movs	r3, #96	; 0x60
 8002c3a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c40:	2307      	movs	r3, #7
 8002c42:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c44:	f003 face 	bl	80061e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c48:	4833      	ldr	r0, [pc, #204]	; (8002d18 <HAL_UART_MspInit+0x23c>)
 8002c4a:	232b      	movs	r3, #43	; 0x2b
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c4c:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c4e:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c50:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002c52:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c54:	6226      	str	r6, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c56:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c58:	e884 0049 	stmia.w	r4, {r0, r3, r6}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c60:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c62:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c64:	f001 fa20 	bl	80040a8 <HAL_DMA_Init>
 8002c68:	b108      	cbz	r0, 8002c6e <HAL_UART_MspInit+0x192>
      Error_Handler();
 8002c6a:	f7ff fa65 	bl	8002138 <Error_Handler>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002c6e:	2306      	movs	r3, #6
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart2_rx, &pSyncConfig) != HAL_OK)
 8002c70:	a905      	add	r1, sp, #20
 8002c72:	4828      	ldr	r0, [pc, #160]	; (8002d14 <HAL_UART_MspInit+0x238>)
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002c74:	9305      	str	r3, [sp, #20]
    pSyncConfig.RequestNumber = 1;
 8002c76:	2301      	movs	r3, #1
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002c78:	9606      	str	r6, [sp, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8002c7a:	f88d 601c 	strb.w	r6, [sp, #28]
    pSyncConfig.EventEnable = DISABLE;
 8002c7e:	f88d 601d 	strb.w	r6, [sp, #29]
    pSyncConfig.RequestNumber = 1;
 8002c82:	9308      	str	r3, [sp, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart2_rx, &pSyncConfig) != HAL_OK)
 8002c84:	f001 fd38 	bl	80046f8 <HAL_DMAEx_ConfigMuxSync>
 8002c88:	b108      	cbz	r0, 8002c8e <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8002c8a:	f7ff fa55 	bl	8002138 <Error_Handler>
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8e:	2600      	movs	r6, #0
 8002c90:	2340      	movs	r3, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002c92:	676c      	str	r4, [r5, #116]	; 0x74
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c94:	222c      	movs	r2, #44	; 0x2c
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002c96:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c98:	4920      	ldr	r1, [pc, #128]	; (8002d1c <HAL_UART_MspInit+0x240>)
    hdma_usart2_tx.Instance = DMA1_Stream7;
 8002c9a:	4c21      	ldr	r4, [pc, #132]	; (8002d20 <HAL_UART_MspInit+0x244>)
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9c:	e884 004e 	stmia.w	r4, {r1, r2, r3, r6}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ca4:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca6:	6166      	str	r6, [r4, #20]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca8:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002caa:	61a6      	str	r6, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002cac:	61e6      	str	r6, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cae:	6226      	str	r6, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb0:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002cb2:	f001 f9f9 	bl	80040a8 <HAL_DMA_Init>
 8002cb6:	b108      	cbz	r0, 8002cbc <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8002cb8:	f7ff fa3e 	bl	8002138 <Error_Handler>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002cbc:	2306      	movs	r3, #6
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart2_tx, &pSyncConfig) != HAL_OK)
 8002cbe:	a905      	add	r1, sp, #20
 8002cc0:	4817      	ldr	r0, [pc, #92]	; (8002d20 <HAL_UART_MspInit+0x244>)
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002cc2:	9305      	str	r3, [sp, #20]
    pSyncConfig.RequestNumber = 1;
 8002cc4:	2301      	movs	r3, #1
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002cc6:	9606      	str	r6, [sp, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8002cc8:	f88d 601c 	strb.w	r6, [sp, #28]
    pSyncConfig.EventEnable = DISABLE;
 8002ccc:	f88d 601d 	strb.w	r6, [sp, #29]
    pSyncConfig.RequestNumber = 1;
 8002cd0:	9308      	str	r3, [sp, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart2_tx, &pSyncConfig) != HAL_OK)
 8002cd2:	f001 fd11 	bl	80046f8 <HAL_DMAEx_ConfigMuxSync>
 8002cd6:	b108      	cbz	r0, 8002cdc <HAL_UART_MspInit+0x200>
      Error_Handler();
 8002cd8:	f7ff fa2e 	bl	8002138 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002ce0:	672c      	str	r4, [r5, #112]	; 0x70
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ce2:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002ce4:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ce6:	f000 fe7d 	bl	80039e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cea:	2026      	movs	r0, #38	; 0x26
 8002cec:	e780      	b.n	8002bf0 <HAL_UART_MspInit+0x114>
 8002cee:	bf00      	nop
 8002cf0:	40007800 	.word	0x40007800
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	58021000 	.word	0x58021000
 8002cfc:	24001368 	.word	0x24001368
 8002d00:	40020070 	.word	0x40020070
 8002d04:	240012f0 	.word	0x240012f0
 8002d08:	40020088 	.word	0x40020088
 8002d0c:	40004400 	.word	0x40004400
 8002d10:	58020c00 	.word	0x58020c00
 8002d14:	240011f8 	.word	0x240011f8
 8002d18:	400200a0 	.word	0x400200a0
 8002d1c:	400200b8 	.word	0x400200b8
 8002d20:	240013e0 	.word	0x240013e0

08002d24 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8002d24:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8002d28:	f00f bb58 	b.w	80123dc <USBH_LL_IncTimer>

08002d2c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8002d2c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8002d30:	f00f bb62 	b.w	80123f8 <USBH_LL_Connect>

08002d34 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8002d34:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8002d38:	f00f bb71 	b.w	801241e <USBH_LL_Disconnect>

08002d3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002d3c:	4770      	bx	lr
	...

08002d40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8002d40:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8002d42:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 8002d46:	f004 f893 	bl	8006e70 <HAL_HCD_Start>
 8002d4a:	2803      	cmp	r0, #3
 8002d4c:	bf9a      	itte	ls
 8002d4e:	4b02      	ldrls	r3, [pc, #8]	; (8002d58 <USBH_LL_Start+0x18>)
 8002d50:	5c18      	ldrbls	r0, [r3, r0]
 8002d52:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8002d54:	bd08      	pop	{r3, pc}
 8002d56:	bf00      	nop
 8002d58:	080135c0 	.word	0x080135c0

08002d5c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8002d5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8002d5e:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 8002d62:	f004 f89b 	bl	8006e9c <HAL_HCD_Stop>
 8002d66:	2803      	cmp	r0, #3
 8002d68:	bf9a      	itte	ls
 8002d6a:	4b02      	ldrls	r3, [pc, #8]	; (8002d74 <USBH_LL_Stop+0x18>)
 8002d6c:	5c18      	ldrbls	r0, [r3, r0]
 8002d6e:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8002d70:	bd08      	pop	{r3, pc}
 8002d72:	bf00      	nop
 8002d74:	080135c0 	.word	0x080135c0

08002d78 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
// Used in ethernetif.c, 359, static void low_level_init(struct netif *netif)
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002d78:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002d7a:	b170      	cbz	r0, 8002d9a <LAN8742_RegisterBusIO+0x22>
 8002d7c:	68ca      	ldr	r2, [r1, #12]
 8002d7e:	b162      	cbz	r2, 8002d9a <LAN8742_RegisterBusIO+0x22>
 8002d80:	688c      	ldr	r4, [r1, #8]
 8002d82:	b154      	cbz	r4, 8002d9a <LAN8742_RegisterBusIO+0x22>
 8002d84:	690b      	ldr	r3, [r1, #16]
 8002d86:	b143      	cbz	r3, 8002d9a <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8002d88:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8002d8a:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8002d8c:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002d8e:	60c1      	str	r1, [r0, #12]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002d90:	6104      	str	r4, [r0, #16]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002d92:	6142      	str	r2, [r0, #20]
  pObj->IO.GetTick = ioctx->GetTick;
 8002d94:	6183      	str	r3, [r0, #24]
  
  return LAN8742_STATUS_OK;
 8002d96:	2000      	movs	r0, #0
 8002d98:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 8002d9a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002d9e:	bd30      	pop	{r4, r5, pc}

08002da0 <LAN8742_Init>:
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
// Used in ethernetif.c, 363, static void low_level_init(struct netif *netif)
int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002da2:	2300      	movs	r3, #0
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8002da4:	6846      	ldr	r6, [r0, #4]
 {
 8002da6:	4604      	mov	r4, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002da8:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8002daa:	b166      	cbz	r6, 8002dc6 <LAN8742_Init+0x26>
     }
   }
      
   if(status == LAN8742_STATUS_OK)
   {
     tickstart =  pObj->IO.GetTick();
 8002dac:	69a3      	ldr	r3, [r4, #24]
 8002dae:	4798      	blx	r3
 8002db0:	4605      	mov	r5, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002db2:	69a3      	ldr	r3, [r4, #24]
 8002db4:	4798      	blx	r3
 8002db6:	1b40      	subs	r0, r0, r5
 8002db8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8002dbc:	d9f9      	bls.n	8002db2 <LAN8742_Init+0x12>
     {
     }
     pObj->Is_Initialized = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	2500      	movs	r5, #0
 8002dc2:	6063      	str	r3, [r4, #4]
 8002dc4:	e027      	b.n	8002e16 <LAN8742_Init+0x76>
     if(pObj->IO.Init != 0)
 8002dc6:	6883      	ldr	r3, [r0, #8]
 8002dc8:	b103      	cbz	r3, 8002dcc <LAN8742_Init+0x2c>
       pObj->IO.Init();
 8002dca:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002dcc:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8002dce:	2500      	movs	r5, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002dd0:	6023      	str	r3, [r4, #0]
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002dd2:	6963      	ldr	r3, [r4, #20]
 8002dd4:	aa01      	add	r2, sp, #4
 8002dd6:	2112      	movs	r1, #18
 8002dd8:	4630      	mov	r0, r6
 8002dda:	4798      	blx	r3
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	db1d      	blt.n	8002e1c <LAN8742_Init+0x7c>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002de0:	9b01      	ldr	r3, [sp, #4]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	42b3      	cmp	r3, r6
 8002de8:	d11a      	bne.n	8002e20 <LAN8742_Init+0x80>
         status = LAN8742_STATUS_OK;
 8002dea:	2500      	movs	r5, #0
         pObj->DevAddr = addr;
 8002dec:	6026      	str	r6, [r4, #0]
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002dee:	6820      	ldr	r0, [r4, #0]
 8002df0:	281f      	cmp	r0, #31
 8002df2:	d833      	bhi.n	8002e5c <LAN8742_Init+0xbc>
     if(status == LAN8742_STATUS_OK)
 8002df4:	b97d      	cbnz	r5, 8002e16 <LAN8742_Init+0x76>
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002df6:	6923      	ldr	r3, [r4, #16]
 8002df8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4798      	blx	r3
 8002e00:	2800      	cmp	r0, #0
 8002e02:	db2e      	blt.n	8002e62 <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002e04:	6963      	ldr	r3, [r4, #20]
 8002e06:	aa01      	add	r2, sp, #4
 8002e08:	4629      	mov	r1, r5
 8002e0a:	6820      	ldr	r0, [r4, #0]
 8002e0c:	4798      	blx	r3
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	da0a      	bge.n	8002e28 <LAN8742_Init+0x88>
           status = LAN8742_STATUS_READ_ERROR;
 8002e12:	f06f 0504 	mvn.w	r5, #4
   }
   
   return status;
 }
 8002e16:	4628      	mov	r0, r5
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
         status = LAN8742_STATUS_READ_ERROR;
 8002e1c:	f06f 0504 	mvn.w	r5, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002e20:	3601      	adds	r6, #1
 8002e22:	2e20      	cmp	r6, #32
 8002e24:	d1d5      	bne.n	8002dd2 <LAN8742_Init+0x32>
 8002e26:	e7e2      	b.n	8002dee <LAN8742_Init+0x4e>
           tickstart = pObj->IO.GetTick();
 8002e28:	69a3      	ldr	r3, [r4, #24]
 8002e2a:	4798      	blx	r3
 8002e2c:	4606      	mov	r6, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002e2e:	9b01      	ldr	r3, [sp, #4]
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	d402      	bmi.n	8002e3a <LAN8742_Init+0x9a>
   if(status == LAN8742_STATUS_OK)
 8002e34:	2d00      	cmp	r5, #0
 8002e36:	d1ee      	bne.n	8002e16 <LAN8742_Init+0x76>
 8002e38:	e7b8      	b.n	8002dac <LAN8742_Init+0xc>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002e3a:	69a3      	ldr	r3, [r4, #24]
 8002e3c:	4798      	blx	r3
 8002e3e:	1b80      	subs	r0, r0, r6
 8002e40:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002e44:	d807      	bhi.n	8002e56 <LAN8742_Init+0xb6>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002e46:	6963      	ldr	r3, [r4, #20]
 8002e48:	aa01      	add	r2, sp, #4
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	6820      	ldr	r0, [r4, #0]
 8002e4e:	4798      	blx	r3
 8002e50:	2800      	cmp	r0, #0
 8002e52:	daec      	bge.n	8002e2e <LAN8742_Init+0x8e>
 8002e54:	e7dd      	b.n	8002e12 <LAN8742_Init+0x72>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002e56:	f06f 0501 	mvn.w	r5, #1
 8002e5a:	e7e8      	b.n	8002e2e <LAN8742_Init+0x8e>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002e5c:	f06f 0502 	mvn.w	r5, #2
 8002e60:	e7d9      	b.n	8002e16 <LAN8742_Init+0x76>
         status = LAN8742_STATUS_WRITE_ERROR;
 8002e62:	f06f 0503 	mvn.w	r5, #3
   return status;
 8002e66:	e7d6      	b.n	8002e16 <LAN8742_Init+0x76>

08002e68 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e68:	4914      	ldr	r1, [pc, #80]	; (8002ebc <SystemInit+0x54>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002e6a:	4815      	ldr	r0, [pc, #84]	; (8002ec0 <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e6c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002e74:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <SystemInit+0x5c>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002e88:	681c      	ldr	r4, [r3, #0]
 8002e8a:	4020      	ands	r0, r4
 8002e8c:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e92:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002eaa:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002eac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <SystemInit+0x60>)
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8002eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002eb8:	608b      	str	r3, [r1, #8]
 8002eba:	bd10      	pop	{r4, pc}
 8002ebc:	e000ed00 	.word	0xe000ed00
 8002ec0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ec4:	58024400 	.word	0x58024400
 8002ec8:	51008108 	.word	0x51008108

08002ecc <ksz8851_interface_init>:
 * @brief Initialize SPI bus
 * @param None
 * @return Error code
 */
uint8_t ksz8851_interface_init(struct KSZ8851_INTERFACE *interface)
{
 8002ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed0:	b08e      	sub	sp, #56	; 0x38
 8002ed2:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	2214      	movs	r2, #20
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	a809      	add	r0, sp, #36	; 0x24
 8002eda:	f00f fb07 	bl	80124ec <memset>
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8002ede:	2210      	movs	r2, #16
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	a805      	add	r0, sp, #20
 8002ee4:	f00f fb02 	bl	80124ec <memset>

  dmc_puts("ksz8851_interface_init\n");
 8002ee8:	4898      	ldr	r0, [pc, #608]	; (800314c <ksz8851_interface_init+0x280>)
 8002eea:	f7fd fd6f 	bl	80009cc <dmc_puts>

  /* Configure the SPI peripheral */
  /* Set the SPI parameters */
  if (interface->hspi->Instance == SPI1)
 8002eee:	692b      	ldr	r3, [r5, #16]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b97      	ldr	r3, [pc, #604]	; (8003150 <ksz8851_interface_init+0x284>)
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f040 8086 	bne.w	8003006 <ksz8851_interface_init+0x13a>
  {
    dmc_puts("SPI1...\n");
 8002efa:	4896      	ldr	r0, [pc, #600]	; (8003154 <ksz8851_interface_init+0x288>)
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2600      	movs	r6, #0
    dmc_puts("SPI1...\n");
 8002efe:	f7fd fd65 	bl	80009cc <dmc_puts>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f02:	4b95      	ldr	r3, [pc, #596]	; (8003158 <ksz8851_interface_init+0x28c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f04:	2405      	movs	r4, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	f04f 0802 	mov.w	r8, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f0a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	a909      	add	r1, sp, #36	; 0x24
 8002f12:	4892      	ldr	r0, [pc, #584]	; (800315c <ksz8851_interface_init+0x290>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f18:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002f1c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002f20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f24:	9200      	str	r2, [sp, #0]
 8002f26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002f34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f38:	f002 0201 	and.w	r2, r2, #1
 8002f3c:	9201      	str	r2, [sp, #4]
 8002f3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f44:	f042 0208 	orr.w	r2, r2, #8
 8002f48:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f50:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f52:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	960b      	str	r6, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5c:	9302      	str	r3, [sp, #8]
 8002f5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f60:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f62:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f64:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f66:	f003 f93d 	bl	80061e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f6a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f6c:	a909      	add	r1, sp, #36	; 0x24
 8002f6e:	487c      	ldr	r0, [pc, #496]	; (8003160 <ksz8851_interface_init+0x294>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f70:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f72:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8002f78:	4c7a      	ldr	r4, [pc, #488]	; (8003164 <ksz8851_interface_init+0x298>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7c:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f7e:	f003 f931 	bl	80061e4 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f82:	4879      	ldr	r0, [pc, #484]	; (8003168 <ksz8851_interface_init+0x29c>)
 8002f84:	2340      	movs	r3, #64	; 0x40
 8002f86:	2126      	movs	r1, #38	; 0x26
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f88:	60e6      	str	r6, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f8a:	6166      	str	r6, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f8c:	61a6      	str	r6, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002f8e:	61e6      	str	r6, [r4, #28]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f90:	e884 000b 	stmia.w	r4, {r0, r1, r3}
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f98:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f9a:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa0:	6223      	str	r3, [r4, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002fa6:	f001 f87f 	bl	80040a8 <HAL_DMA_Init>
 8002faa:	b108      	cbz	r0, 8002fb0 <ksz8851_interface_init+0xe4>
    {
      Error_Handler();
 8002fac:	f7ff f8c4 	bl	8002138 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002fb0:	2306      	movs	r3, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
    pSyncConfig.SyncEnable = DISABLE;
    pSyncConfig.EventEnable = DISABLE;
    pSyncConfig.RequestNumber = 1;
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi1_tx, &pSyncConfig) != HAL_OK)
 8002fb2:	a905      	add	r1, sp, #20
 8002fb4:	486b      	ldr	r0, [pc, #428]	; (8003164 <ksz8851_interface_init+0x298>)
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002fb6:	9305      	str	r3, [sp, #20]
    pSyncConfig.RequestNumber = 1;
 8002fb8:	2301      	movs	r3, #1
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002fba:	9606      	str	r6, [sp, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8002fbc:	f88d 601c 	strb.w	r6, [sp, #28]
    pSyncConfig.EventEnable = DISABLE;
 8002fc0:	f88d 601d 	strb.w	r6, [sp, #29]
    pSyncConfig.RequestNumber = 1;
 8002fc4:	9308      	str	r3, [sp, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi1_tx, &pSyncConfig) != HAL_OK)
 8002fc6:	f001 fb97 	bl	80046f8 <HAL_DMAEx_ConfigMuxSync>
 8002fca:	b108      	cbz	r0, 8002fd0 <ksz8851_interface_init+0x104>
    {
      Error_Handler();
 8002fcc:	f7ff f8b4 	bl	8002138 <Error_Handler>
    }

    __HAL_LINKDMA(interface->hspi,hdmatx,hdma_spi1_tx);
 8002fd0:	692b      	ldr	r3, [r5, #16]

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream1;
 8002fd2:	4866      	ldr	r0, [pc, #408]	; (800316c <ksz8851_interface_init+0x2a0>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002fd4:	4a66      	ldr	r2, [pc, #408]	; (8003170 <ksz8851_interface_init+0x2a4>)
    __HAL_LINKDMA(interface->hspi,hdmatx,hdma_spi1_tx);
 8002fd6:	679c      	str	r4, [r3, #120]	; 0x78
 8002fd8:	63a3      	str	r3, [r4, #56]	; 0x38
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002fda:	2325      	movs	r3, #37	; 0x25
 8002fdc:	e880 000c 	stmia.w	r0, {r2, r3}
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe0:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe6:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe8:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fea:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fec:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002fee:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ff4:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ff6:	6203      	str	r3, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002ffc:	f001 f854 	bl	80040a8 <HAL_DMA_Init>
 8003000:	b108      	cbz	r0, 8003006 <ksz8851_interface_init+0x13a>
    {
      Error_Handler();
 8003002:	f7ff f899 	bl	8002138 <Error_Handler>
    }
  }
  if (interface->hspi->Instance == SPI4)
 8003006:	692b      	ldr	r3, [r5, #16]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <ksz8851_interface_init+0x2a8>)
 800300c:	429a      	cmp	r2, r3
 800300e:	d16e      	bne.n	80030ee <ksz8851_interface_init+0x222>
  {
    dmc_puts("SPI4...\n");
 8003010:	4859      	ldr	r0, [pc, #356]	; (8003178 <ksz8851_interface_init+0x2ac>)
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2600      	movs	r6, #0
    dmc_puts("SPI4...\n");
 8003014:	f7fd fcda 	bl	80009cc <dmc_puts>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003018:	4b4f      	ldr	r3, [pc, #316]	; (8003158 <ksz8851_interface_init+0x28c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800301a:	4858      	ldr	r0, [pc, #352]	; (800317c <ksz8851_interface_init+0x2b0>)
 800301c:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 800301e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8003022:	4c57      	ldr	r4, [pc, #348]	; (8003180 <ksz8851_interface_init+0x2b4>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003028:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800302c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003030:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003034:	9203      	str	r2, [sp, #12]
 8003036:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003038:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800303c:	f042 0210 	orr.w	r2, r2, #16
 8003040:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	960b      	str	r6, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	9304      	str	r3, [sp, #16]
 8003050:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003052:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003056:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305c:	2303      	movs	r3, #3
 800305e:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003060:	2305      	movs	r3, #5
 8003062:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003064:	f003 f8be 	bl	80061e4 <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8003068:	4b46      	ldr	r3, [pc, #280]	; (8003184 <ksz8851_interface_init+0x2b8>)
 800306a:	f04f 0e53 	mov.w	lr, #83	; 0x53
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800306e:	4620      	mov	r0, r4
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003070:	60a6      	str	r6, [r4, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003072:	60e6      	str	r6, [r4, #12]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003074:	6166      	str	r6, [r4, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003076:	61a6      	str	r6, [r4, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8003078:	61e6      	str	r6, [r4, #28]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 800307a:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800307e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003082:	6123      	str	r3, [r4, #16]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003088:	6223      	str	r3, [r4, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800308a:	2304      	movs	r3, #4
 800308c:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800308e:	f001 f80b 	bl	80040a8 <HAL_DMA_Init>
 8003092:	b108      	cbz	r0, 8003098 <ksz8851_interface_init+0x1cc>
    {
      Error_Handler();
 8003094:	f7ff f850 	bl	8002138 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003098:	2306      	movs	r3, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
    pSyncConfig.SyncEnable = DISABLE;
    pSyncConfig.EventEnable = DISABLE;
    pSyncConfig.RequestNumber = 1;
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi4_rx, &pSyncConfig) != HAL_OK)
 800309a:	a905      	add	r1, sp, #20
 800309c:	4838      	ldr	r0, [pc, #224]	; (8003180 <ksz8851_interface_init+0x2b4>)
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800309e:	9305      	str	r3, [sp, #20]
    pSyncConfig.RequestNumber = 1;
 80030a0:	2301      	movs	r3, #1
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80030a2:	9606      	str	r6, [sp, #24]
    pSyncConfig.SyncEnable = DISABLE;
 80030a4:	f88d 601c 	strb.w	r6, [sp, #28]
    pSyncConfig.EventEnable = DISABLE;
 80030a8:	f88d 601d 	strb.w	r6, [sp, #29]
    pSyncConfig.RequestNumber = 1;
 80030ac:	9308      	str	r3, [sp, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_spi4_rx, &pSyncConfig) != HAL_OK)
 80030ae:	f001 fb23 	bl	80046f8 <HAL_DMAEx_ConfigMuxSync>
 80030b2:	b108      	cbz	r0, 80030b8 <ksz8851_interface_init+0x1ec>
    {
      Error_Handler();
 80030b4:	f7ff f840 	bl	8002138 <Error_Handler>
    }

    __HAL_LINKDMA(interface->hspi,hdmarx,hdma_spi4_rx);
 80030b8:	692b      	ldr	r3, [r5, #16]

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream3;
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ba:	2654      	movs	r6, #84	; 0x54
    hdma_spi4_tx.Instance = DMA1_Stream3;
 80030bc:	4832      	ldr	r0, [pc, #200]	; (8003188 <ksz8851_interface_init+0x2bc>)
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030be:	2740      	movs	r7, #64	; 0x40
    __HAL_LINKDMA(interface->hspi,hdmarx,hdma_spi4_rx);
 80030c0:	67dc      	str	r4, [r3, #124]	; 0x7c
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(interface->hspi,hdmarx,hdma_spi4_rx);
 80030c6:	63a3      	str	r3, [r4, #56]	; 0x38
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030c8:	4b30      	ldr	r3, [pc, #192]	; (800318c <ksz8851_interface_init+0x2c0>)
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030ca:	6102      	str	r2, [r0, #16]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030cc:	e880 00c8 	stmia.w	r0, {r3, r6, r7}
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60c3      	str	r3, [r0, #12]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d4:	6143      	str	r3, [r0, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d6:	6183      	str	r3, [r0, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80030d8:	61c3      	str	r3, [r0, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80030da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030de:	6203      	str	r3, [r0, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030e0:	2304      	movs	r3, #4
 80030e2:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80030e4:	f000 ffe0 	bl	80040a8 <HAL_DMA_Init>
 80030e8:	b108      	cbz	r0, 80030ee <ksz8851_interface_init+0x222>
    {
      Error_Handler();
 80030ea:	f7ff f825 	bl	8002138 <Error_Handler>
    }
  }

  interface->hspi->Init.Mode = SPI_MODE_MASTER;
 80030ee:	6928      	ldr	r0, [r5, #16]
 80030f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  interface->hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80030f4:	2400      	movs	r4, #0
  interface->hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80030f6:	2207      	movs	r2, #7
  interface->hspi->Init.Mode = SPI_MODE_MASTER;
 80030f8:	6043      	str	r3, [r0, #4]
  interface->hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  interface->hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  interface->hspi->Init.NSS = SPI_NSS_SOFT;  // SPI_NSS_HARD_OUTPUT
 80030fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  interface->hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80030fe:	60c2      	str	r2, [r0, #12]
  interface->hspi->Init.NSS = SPI_NSS_SOFT;  // SPI_NSS_HARD_OUTPUT
 8003100:	6183      	str	r3, [r0, #24]
  // SPI4: 100MHz / 8 = 12.5 MHz: SPI_BAUDRATEPRESCALER_8
  interface->hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;  // KSZ8851SNL can handle up to 50 MHz. 256: 0.78125
 8003102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  interface->hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  interface->hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  interface->hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  interface->hspi->Init.CRCPolynomial = 7;
 8003106:	62c2      	str	r2, [r0, #44]	; 0x2c
  interface->hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;  // KSZ8851SNL can handle up to 50 MHz. 256: 0.78125
 8003108:	61c3      	str	r3, [r0, #28]
  interface->hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800310a:	6343      	str	r3, [r0, #52]	; 0x34
  interface->hspi->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  interface->hspi->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  interface->hspi->Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  interface->hspi->Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  interface->hspi->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 800310c:	2303      	movs	r3, #3
  interface->hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800310e:	6084      	str	r4, [r0, #8]
  interface->hspi->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8003110:	6483      	str	r3, [r0, #72]	; 0x48
  interface->hspi->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8003112:	2330      	movs	r3, #48	; 0x30
  interface->hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003114:	6104      	str	r4, [r0, #16]
  interface->hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003116:	6144      	str	r4, [r0, #20]
  interface->hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003118:	6204      	str	r4, [r0, #32]
  interface->hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800311a:	6244      	str	r4, [r0, #36]	; 0x24
  interface->hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311c:	6284      	str	r4, [r0, #40]	; 0x28
  interface->hspi->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800311e:	6384      	str	r4, [r0, #56]	; 0x38
  interface->hspi->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003120:	63c4      	str	r4, [r0, #60]	; 0x3c
  interface->hspi->Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003122:	6404      	str	r4, [r0, #64]	; 0x40
  interface->hspi->Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003124:	6444      	str	r4, [r0, #68]	; 0x44
  interface->hspi->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8003126:	64c3      	str	r3, [r0, #76]	; 0x4c
  interface->hspi->Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003128:	6504      	str	r4, [r0, #80]	; 0x50
  interface->hspi->Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800312a:	6544      	str	r4, [r0, #84]	; 0x54
  interface->hspi->Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800312c:	6584      	str	r4, [r0, #88]	; 0x58
  if (HAL_SPI_Init(interface->hspi) != HAL_OK)
 800312e:	f007 fe93 	bl	800ae58 <HAL_SPI_Init>
 8003132:	4602      	mov	r2, r0
 8003134:	b938      	cbnz	r0, 8003146 <ksz8851_interface_init+0x27a>
  {
    return false;
  }

  /* Pull the CS pin low */
  HAL_GPIO_WritePin((GPIO_TypeDef*) interface->cs_port, interface->cs_pin, GPIO_PIN_RESET);
 8003136:	6828      	ldr	r0, [r5, #0]
 8003138:	88a9      	ldrh	r1, [r5, #4]
 800313a:	f003 f9b9 	bl	80064b0 <HAL_GPIO_WritePin>

  return true;
 800313e:	2001      	movs	r0, #1
}
 8003140:	b00e      	add	sp, #56	; 0x38
 8003142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
 8003146:	4620      	mov	r0, r4
 8003148:	e7fa      	b.n	8003140 <ksz8851_interface_init+0x274>
 800314a:	bf00      	nop
 800314c:	08013667 	.word	0x08013667
 8003150:	40013000 	.word	0x40013000
 8003154:	0801367f 	.word	0x0801367f
 8003158:	58024400 	.word	0x58024400
 800315c:	58020000 	.word	0x58020000
 8003160:	58020c00 	.word	0x58020c00
 8003164:	24001180 	.word	0x24001180
 8003168:	40020010 	.word	0x40020010
 800316c:	24001108 	.word	0x24001108
 8003170:	40020028 	.word	0x40020028
 8003174:	40013400 	.word	0x40013400
 8003178:	08013688 	.word	0x08013688
 800317c:	58021000 	.word	0x58021000
 8003180:	24000f08 	.word	0x24000f08
 8003184:	40020040 	.word	0x40020040
 8003188:	24000f80 	.word	0x24000f80
 800318c:	40020058 	.word	0x40020058

08003190 <ksz8851_reg_read>:
 * @brief Read KSZ8851 register
 * @param[in] address Register address
 * @return Register value
 */
uint16_t ksz8851_reg_read(struct KSZ8851_INTERFACE *interface, uint16_t reg)
{
 8003190:	b530      	push	{r4, r5, lr}
 8003192:	460d      	mov	r5, r1
 8003194:	b085      	sub	sp, #20
 8003196:	4604      	mov	r4, r0
  uint8_t outbuf[4];
  uint16_t cmd = 0;
  uint16_t rddata = 0;

  /* Pull the CS pin low */
  HAL_GPIO_WritePin((GPIO_TypeDef*) interface->cs_port, interface->cs_pin, GPIO_PIN_RESET);
 8003198:	2200      	movs	r2, #0
 800319a:	8881      	ldrh	r1, [r0, #4]
 800319c:	6800      	ldr	r0, [r0, #0]
 800319e:	f003 f987 	bl	80064b0 <HAL_GPIO_WritePin>
  cmd = (reg << 2) & REG_ADDR_MASK; // & 0x3F0

  /* Add byte enables to cmd */
  /* Last 2 bits still under "don't care bits" handled with byte enable. */
  /* Select byte enable for command. */
  if (reg & 2)
 80031a2:	07aa      	lsls	r2, r5, #30
  cmd = (reg << 2) & REG_ADDR_MASK; // & 0x3F0
 80031a4:	ea4f 0385 	mov.w	r3, r5, lsl #2
  outbuf[1] = cmd & 0xff;
  outbuf[2] = 0xff;
  outbuf[3] = 0xff;

  /* Perform blocking SPI transfer. Discard function returned value! TODO: handle it? */
  (void) HAL_SPI_TransmitReceive(interface->hspi, (uint8_t*) outbuf, (uint8_t *) inbuf, 4, 5000);
 80031a8:	a903      	add	r1, sp, #12
 80031aa:	6920      	ldr	r0, [r4, #16]
  cmd = (reg << 2) & REG_ADDR_MASK; // & 0x3F0
 80031ac:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
    cmd |= (0xc << 10);
 80031b0:	bf4c      	ite	mi
 80031b2:	f443 5340 	orrmi.w	r3, r3, #12288	; 0x3000
    cmd |= (0x3 << 10);
 80031b6:	f443 6340 	orrpl.w	r3, r3, #3072	; 0xc00
  outbuf[0] = cmd >> 8;
 80031ba:	0a1a      	lsrs	r2, r3, #8
  outbuf[1] = cmd & 0xff;
 80031bc:	f88d 300d 	strb.w	r3, [sp, #13]
  outbuf[2] = 0xff;
 80031c0:	23ff      	movs	r3, #255	; 0xff
  outbuf[0] = cmd >> 8;
 80031c2:	f88d 200c 	strb.w	r2, [sp, #12]
  (void) HAL_SPI_TransmitReceive(interface->hspi, (uint8_t*) outbuf, (uint8_t *) inbuf, 4, 5000);
 80031c6:	aa02      	add	r2, sp, #8
  outbuf[2] = 0xff;
 80031c8:	f88d 300e 	strb.w	r3, [sp, #14]
  outbuf[3] = 0xff;
 80031cc:	f88d 300f 	strb.w	r3, [sp, #15]
  (void) HAL_SPI_TransmitReceive(interface->hspi, (uint8_t*) outbuf, (uint8_t *) inbuf, 4, 5000);
 80031d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2304      	movs	r3, #4
 80031d8:	f008 f87a 	bl	800b2d0 <HAL_SPI_TransmitReceive>

  /* Terminate the operation by raising the CS pin */
  HAL_GPIO_WritePin((GPIO_TypeDef*) interface->cs_port, interface->cs_pin, GPIO_PIN_SET);
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	88a1      	ldrh	r1, [r4, #4]
 80031e2:	f003 f965 	bl	80064b0 <HAL_GPIO_WritePin>

  rddata = (inbuf[3] << 8) | inbuf[2];
 80031e6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80031ea:	f89d 300a 	ldrb.w	r3, [sp, #10]
  return rddata;
}
 80031ee:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80031f2:	b005      	add	sp, #20
 80031f4:	bd30      	pop	{r4, r5, pc}

080031f6 <ksz8851_reg_write>:
 * @brief Write KSZ8851 register
 * @param[in] address Register address
 * @param[in] data Register value
 */
void ksz8851_reg_write(struct KSZ8851_INTERFACE *interface, uint16_t reg, uint16_t wrdata)
{
 80031f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031f8:	460e      	mov	r6, r1
 80031fa:	4604      	mov	r4, r0
 80031fc:	4615      	mov	r5, r2
  uint8_t outbuf[4];
  uint16_t cmd = 0;

  /* Pull the CS pin low */
  HAL_GPIO_WritePin((GPIO_TypeDef*) interface->cs_port, interface->cs_pin, GPIO_PIN_RESET);
 80031fe:	8881      	ldrh	r1, [r0, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	6800      	ldr	r0, [r0, #0]
 8003204:	f003 f954 	bl	80064b0 <HAL_GPIO_WritePin>


  /* Add byte enables to cmd */
  /* Last 2 bits still under "don't care bits" handled with byte enable. */
  /* Select byte enable for command. */
  if (reg & 2)
 8003208:	07b2      	lsls	r2, r6, #30
  cmd = (reg << 2) & REG_ADDR_MASK;
 800320a:	ea4f 0386 	mov.w	r3, r6, lsl #2
  /* Add opcode to cmd */
  /* Add command write code. */
  cmd |= CMD_WRITE;
  outbuf[0] = cmd >> 8;
  outbuf[1] = cmd & 0xff;
  outbuf[2] = wrdata & 0xff;
 800320e:	f88d 5006 	strb.w	r5, [sp, #6]
  outbuf[3] = wrdata >> 8;
 8003212:	ea4f 2515 	mov.w	r5, r5, lsr #8

  /* Perform blocking SPI transfer. Discard function returned value! TODO: handle it? */
  (void) HAL_SPI_Transmit(interface->hspi, (uint8_t*) outbuf, 4, 2000);
 8003216:	6920      	ldr	r0, [r4, #16]
  cmd = (reg << 2) & REG_ADDR_MASK;
 8003218:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
  outbuf[3] = wrdata >> 8;
 800321c:	f88d 5007 	strb.w	r5, [sp, #7]
    cmd |= (0xc << 10);
 8003220:	bf4c      	ite	mi
 8003222:	f443 5340 	orrmi.w	r3, r3, #12288	; 0x3000
    cmd |= (0x3 << 10);
 8003226:	f443 6340 	orrpl.w	r3, r3, #3072	; 0xc00
  cmd |= CMD_WRITE;
 800322a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  outbuf[0] = cmd >> 8;
 800322e:	0a1a      	lsrs	r2, r3, #8
  outbuf[1] = cmd & 0xff;
 8003230:	f88d 3005 	strb.w	r3, [sp, #5]
  (void) HAL_SPI_Transmit(interface->hspi, (uint8_t*) outbuf, 4, 2000);
 8003234:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  outbuf[0] = cmd >> 8;
 8003238:	f88d 2004 	strb.w	r2, [sp, #4]
  (void) HAL_SPI_Transmit(interface->hspi, (uint8_t*) outbuf, 4, 2000);
 800323c:	2204      	movs	r2, #4
 800323e:	eb0d 0102 	add.w	r1, sp, r2
 8003242:	f007 ff1d 	bl	800b080 <HAL_SPI_Transmit>

  /* Terminate the operation by raising the CS pin */
  HAL_GPIO_WritePin((GPIO_TypeDef*) interface->cs_port, interface->cs_pin, GPIO_PIN_SET);
 8003246:	2201      	movs	r2, #1
 8003248:	88a1      	ldrh	r1, [r4, #4]
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	f003 f930 	bl	80064b0 <HAL_GPIO_WritePin>
}
 8003250:	b002      	add	sp, #8
 8003252:	bd70      	pop	{r4, r5, r6, pc}

08003254 <ksz8851_reg_setbits>:
 * @brief Read register content, set bitmask and write back to register.
 * @param reg the register address to modify.
 * @param bits_to_set bitmask to apply.
 */
void ksz8851_reg_setbits(struct KSZ8851_INTERFACE *interface, uint16_t reg, uint16_t bits_to_set)
{
 8003254:	b570      	push	{r4, r5, r6, lr}
 8003256:	4614      	mov	r4, r2
 8003258:	4605      	mov	r5, r0
 800325a:	460e      	mov	r6, r1
  uint16_t temp;

  // In order to set a bit in a register, such as during initialization,
  // read the register first, modify the target bit only and write it back.
  temp = ksz8851_reg_read(interface, reg);
 800325c:	f7ff ff98 	bl	8003190 <ksz8851_reg_read>
  temp |= bits_to_set;
 8003260:	ea40 0204 	orr.w	r2, r0, r4
  ksz8851_reg_write(interface, reg, temp);
 8003264:	4628      	mov	r0, r5
 8003266:	4631      	mov	r1, r6
 8003268:	b292      	uxth	r2, r2
}
 800326a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ksz8851_reg_write(interface, reg, temp);
 800326e:	f7ff bfc2 	b.w	80031f6 <ksz8851_reg_write>

08003272 <ksz8851_reg_clrbits>:
 * @brief Read register content, clear bitmask and write back to register.
 * @param reg the register address to modify.
 * @param bits_to_set bitmask to apply.
 */
void ksz8851_reg_clrbits(struct KSZ8851_INTERFACE *interface, uint16_t reg, uint16_t bits_to_clr)
{
 8003272:	b570      	push	{r4, r5, r6, lr}
 8003274:	4614      	mov	r4, r2
 8003276:	4605      	mov	r5, r0
 8003278:	460e      	mov	r6, r1
  uint16_t temp;

  // In order to set a bit in a register, such as during initialization,
  // read the register first, modify the target bit only and write it back.
  temp = ksz8851_reg_read(interface, reg);
 800327a:	f7ff ff89 	bl	8003190 <ksz8851_reg_read>
  temp &= ~bits_to_clr;
 800327e:	ea20 0204 	bic.w	r2, r0, r4
  ksz8851_reg_write(interface, reg, temp);
 8003282:	4628      	mov	r0, r5
 8003284:	4631      	mov	r1, r6
 8003286:	b292      	uxth	r2, r2
}
 8003288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ksz8851_reg_write(interface, reg, temp);
 800328c:	f7ff bfb3 	b.w	80031f6 <ksz8851_reg_write>

08003290 <ksz8851_soft_reset>:
{
 8003290:	b510      	push	{r4, lr}
 8003292:	4604      	mov	r4, r0
  if (queue_only)
 8003294:	b181      	cbz	r1, 80032b8 <ksz8851_soft_reset+0x28>
    ksz8851_reg_setbits(interface, REG_RESET_CTRL, QMU_SOFTWARE_RESET);
 8003296:	2202      	movs	r2, #2
 8003298:	2126      	movs	r1, #38	; 0x26
 800329a:	f7ff ffdb 	bl	8003254 <ksz8851_reg_setbits>
    HAL_Delay(1);
 800329e:	2001      	movs	r0, #1
 80032a0:	f000 fb5a 	bl	8003958 <HAL_Delay>
    ksz8851_reg_clrbits(interface, REG_RESET_CTRL, QMU_SOFTWARE_RESET);
 80032a4:	2202      	movs	r2, #2
    ksz8851_reg_clrbits(interface, REG_RESET_CTRL, GLOBAL_SOFTWARE_RESET);
 80032a6:	4620      	mov	r0, r4
 80032a8:	2126      	movs	r1, #38	; 0x26
 80032aa:	f7ff ffe2 	bl	8003272 <ksz8851_reg_clrbits>
  HAL_Delay(1);
 80032ae:	2001      	movs	r0, #1
}
 80032b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(1);
 80032b4:	f000 bb50 	b.w	8003958 <HAL_Delay>
    ksz8851_reg_setbits(interface, REG_RESET_CTRL, GLOBAL_SOFTWARE_RESET);
 80032b8:	2201      	movs	r2, #1
 80032ba:	2126      	movs	r1, #38	; 0x26
 80032bc:	f7ff ffca 	bl	8003254 <ksz8851_reg_setbits>
    HAL_Delay(1);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f000 fb49 	bl	8003958 <HAL_Delay>
    ksz8851_reg_clrbits(interface, REG_RESET_CTRL, GLOBAL_SOFTWARE_RESET);
 80032c6:	2201      	movs	r2, #1
 80032c8:	e7ed      	b.n	80032a6 <ksz8851_soft_reset+0x16>

080032ca <ksz8851_IntEnable>:
//      KSZ8851SNL_INT_RX_STOPPED |   /** Enable receive process stopped interrupt */
//      KSZ8851SNL_INT_TX_STOPPED |   /** Enable transmit process stopped interrupt */
//      KSZ8851SNL_INT_LINK_CHANGE |  /** Enable link change interrupt */
//      KSZ8851SNL_INT_RX_SPI_ERROR); /** Enable receive SPI bus error interrupt */

  ksz8851_reg_write(interface, REG_INT_ENABLE,     /* IER */
 80032ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ce:	2190      	movs	r1, #144	; 0x90
 80032d0:	f7ff bf91 	b.w	80031f6 <ksz8851_reg_write>

080032d4 <ksz8851_init_chip>:
{
 80032d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d8:	4604      	mov	r4, r0
  if (ksz8851_interface_init(interface) == false)
 80032da:	f7ff fdf7 	bl	8002ecc <ksz8851_interface_init>
 80032de:	2800      	cmp	r0, #0
 80032e0:	f000 80f8 	beq.w	80034d4 <ksz8851_init_chip+0x200>
  uint32_t TickResetMicrel = HAL_GetTick();
 80032e4:	f000 fb32 	bl	800394c <HAL_GetTick>
      dmc_puts(TERMINAL_YELLOW);
 80032e8:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8003504 <ksz8851_init_chip+0x230>
  uint32_t TickResetMicrel = HAL_GetTick();
 80032ec:	4680      	mov	r8, r0
      dmc_puts("Chip ID: ");
 80032ee:	f8df a218 	ldr.w	sl, [pc, #536]	; 8003508 <ksz8851_init_chip+0x234>
      dmc_puts(TERMINAL_DEFAULT);
 80032f2:	4f7d      	ldr	r7, [pc, #500]	; (80034e8 <ksz8851_init_chip+0x214>)
    ksz8851_soft_reset(interface, 0);
 80032f4:	2100      	movs	r1, #0
 80032f6:	4620      	mov	r0, r4
 80032f8:	f7ff ffca 	bl	8003290 <ksz8851_soft_reset>
    uint32_t TickReadID = HAL_GetTick();
 80032fc:	f000 fb26 	bl	800394c <HAL_GetTick>
 8003300:	4683      	mov	fp, r0
      dev_id = ksz8851_reg_read(interface, REG_CHIP_ID); /* CIDER */
 8003302:	21c0      	movs	r1, #192	; 0xc0
 8003304:	4620      	mov	r0, r4
 8003306:	f7ff ff43 	bl	8003190 <ksz8851_reg_read>
 800330a:	4605      	mov	r5, r0
      dmc_puts(TERMINAL_YELLOW);
 800330c:	4648      	mov	r0, r9
 800330e:	f7fd fb5d 	bl	80009cc <dmc_puts>
      dmc_puts("Chip ID: ");
 8003312:	4650      	mov	r0, sl
 8003314:	f7fd fb5a 	bl	80009cc <dmc_puts>
      dmc_puthex4cr(dev_id);
 8003318:	4628      	mov	r0, r5
 800331a:	f7fd fb9f 	bl	8000a5c <dmc_puthex4cr>
      dmc_puts(TERMINAL_DEFAULT);
 800331e:	4638      	mov	r0, r7
 8003320:	f7fd fb54 	bl	80009cc <dmc_puts>
 8003324:	f025 060f 	bic.w	r6, r5, #15
      if (HAL_GetTick() - TickReadID > 10)
 8003328:	f000 fb10 	bl	800394c <HAL_GetTick>
 800332c:	eba0 000b 	sub.w	r0, r0, fp
 8003330:	280a      	cmp	r0, #10
 8003332:	f240 80d1 	bls.w	80034d8 <ksz8851_init_chip+0x204>
    if (HAL_GetTick() - TickResetMicrel > 100)
 8003336:	f000 fb09 	bl	800394c <HAL_GetTick>
 800333a:	eba0 0008 	sub.w	r0, r0, r8
 800333e:	2864      	cmp	r0, #100	; 0x64
 8003340:	d90b      	bls.n	800335a <ksz8851_init_chip+0x86>
      dmc_puts(TERMINAL_LIGHT_RED);
 8003342:	486a      	ldr	r0, [pc, #424]	; (80034ec <ksz8851_init_chip+0x218>)
 8003344:	f7fd fb42 	bl	80009cc <dmc_puts>
      dmc_puts("FAILED: wrong Chip ID: ");
 8003348:	4869      	ldr	r0, [pc, #420]	; (80034f0 <ksz8851_init_chip+0x21c>)
 800334a:	f7fd fb3f 	bl	80009cc <dmc_puts>
      dmc_puthex4cr(dev_id);
 800334e:	4628      	mov	r0, r5
 8003350:	f7fd fb84 	bl	8000a5c <dmc_puthex4cr>
      dmc_puts(TERMINAL_DEFAULT);
 8003354:	4638      	mov	r0, r7
 8003356:	f7fd fb39 	bl	80009cc <dmc_puts>
  while ((dev_id & 0xFFF0) != CHIP_ID_8851_16);
 800335a:	b2b6      	uxth	r6, r6
 800335c:	f648 0370 	movw	r3, #34928	; 0x8870
 8003360:	429e      	cmp	r6, r3
 8003362:	d1c7      	bne.n	80032f4 <ksz8851_init_chip+0x20>
  dmc_puts(TERMINAL_LIGHT_GREEN);
 8003364:	4863      	ldr	r0, [pc, #396]	; (80034f4 <ksz8851_init_chip+0x220>)
 8003366:	f7fd fb31 	bl	80009cc <dmc_puts>
  dmc_puts("Device ID: ");
 800336a:	4863      	ldr	r0, [pc, #396]	; (80034f8 <ksz8851_init_chip+0x224>)
 800336c:	f7fd fb2e 	bl	80009cc <dmc_puts>
  dmc_puthex4cr(dev_id);
 8003370:	4628      	mov	r0, r5
 8003372:	f7fd fb73 	bl	8000a5c <dmc_puthex4cr>
  dmc_puts(TERMINAL_DEFAULT);
 8003376:	485c      	ldr	r0, [pc, #368]	; (80034e8 <ksz8851_init_chip+0x214>)
 8003378:	f7fd fb28 	bl	80009cc <dmc_puts>
  ksz8851_reg_write(interface, REG_MAC_ADDR_0, (interface->MAC_address[4] << 8) | interface->MAC_address[5]); /* MARL */
 800337c:	7e63      	ldrb	r3, [r4, #25]
 800337e:	7e22      	ldrb	r2, [r4, #24]
 8003380:	2110      	movs	r1, #16
 8003382:	4620      	mov	r0, r4
 8003384:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8003388:	f7ff ff35 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_MAC_ADDR_2, (interface->MAC_address[2] << 8) | interface->MAC_address[3]); /* MARM */
 800338c:	7de3      	ldrb	r3, [r4, #23]
 800338e:	7da2      	ldrb	r2, [r4, #22]
 8003390:	2112      	movs	r1, #18
 8003392:	4620      	mov	r0, r4
 8003394:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8003398:	f7ff ff2d 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_MAC_ADDR_4, (interface->MAC_address[0] << 8) | interface->MAC_address[1]); /* MARH */
 800339c:	7d63      	ldrb	r3, [r4, #21]
 800339e:	7d22      	ldrb	r2, [r4, #20]
 80033a0:	2114      	movs	r1, #20
 80033a2:	4620      	mov	r0, r4
 80033a4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80033a8:	f7ff ff25 	bl	80031f6 <ksz8851_reg_write>
  uint16_t addr_0 = ksz8851_reg_read(interface, REG_MAC_ADDR_0);
 80033ac:	2110      	movs	r1, #16
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff feee 	bl	8003190 <ksz8851_reg_read>
  uint16_t addr_2 = ksz8851_reg_read(interface, REG_MAC_ADDR_2);
 80033b4:	2112      	movs	r1, #18
  uint16_t addr_0 = ksz8851_reg_read(interface, REG_MAC_ADDR_0);
 80033b6:	4605      	mov	r5, r0
  uint16_t addr_2 = ksz8851_reg_read(interface, REG_MAC_ADDR_2);
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7ff fee9 	bl	8003190 <ksz8851_reg_read>
  uint16_t addr_4 = ksz8851_reg_read(interface, REG_MAC_ADDR_4);
 80033be:	2114      	movs	r1, #20
  uint16_t addr_2 = ksz8851_reg_read(interface, REG_MAC_ADDR_2);
 80033c0:	4606      	mov	r6, r0
  uint16_t addr_4 = ksz8851_reg_read(interface, REG_MAC_ADDR_4);
 80033c2:	4620      	mov	r0, r4
 80033c4:	f7ff fee4 	bl	8003190 <ksz8851_reg_read>
 80033c8:	4607      	mov	r7, r0
  dmc_puts("MAC_ADDR: ");
 80033ca:	484c      	ldr	r0, [pc, #304]	; (80034fc <ksz8851_init_chip+0x228>)
 80033cc:	f7fd fafe 	bl	80009cc <dmc_puts>
  dmc_puthex2(addr_4 >> 8);
 80033d0:	f3c7 200f 	ubfx	r0, r7, #8, #16
 80033d4:	f7fd fb0f 	bl	80009f6 <dmc_puthex2>
  dmc_puts(":");
 80033d8:	4849      	ldr	r0, [pc, #292]	; (8003500 <ksz8851_init_chip+0x22c>)
 80033da:	f7fd faf7 	bl	80009cc <dmc_puts>
  dmc_puthex2(addr_4 & 0xff);
 80033de:	b2f8      	uxtb	r0, r7
 80033e0:	f7fd fb09 	bl	80009f6 <dmc_puthex2>
  dmc_puts(":");
 80033e4:	4846      	ldr	r0, [pc, #280]	; (8003500 <ksz8851_init_chip+0x22c>)
 80033e6:	f7fd faf1 	bl	80009cc <dmc_puts>
  dmc_puthex2(addr_2 >> 8);
 80033ea:	f3c6 200f 	ubfx	r0, r6, #8, #16
 80033ee:	f7fd fb02 	bl	80009f6 <dmc_puthex2>
  dmc_puts(":");
 80033f2:	4843      	ldr	r0, [pc, #268]	; (8003500 <ksz8851_init_chip+0x22c>)
 80033f4:	f7fd faea 	bl	80009cc <dmc_puts>
  dmc_puthex2(addr_2 & 0xff);
 80033f8:	b2f0      	uxtb	r0, r6
 80033fa:	f7fd fafc 	bl	80009f6 <dmc_puthex2>
  dmc_puts(":");
 80033fe:	4840      	ldr	r0, [pc, #256]	; (8003500 <ksz8851_init_chip+0x22c>)
 8003400:	f7fd fae4 	bl	80009cc <dmc_puts>
  dmc_puthex2(addr_0 >> 8);
 8003404:	f3c5 200f 	ubfx	r0, r5, #8, #16
 8003408:	f7fd faf5 	bl	80009f6 <dmc_puthex2>
  dmc_puts(":");
 800340c:	483c      	ldr	r0, [pc, #240]	; (8003500 <ksz8851_init_chip+0x22c>)
 800340e:	f7fd fadd 	bl	80009cc <dmc_puts>
  dmc_puthex2cr(addr_0 & 0xff);
 8003412:	b2e8      	uxtb	r0, r5
 8003414:	f7fd fb03 	bl	8000a1e <dmc_puthex2cr>
  ksz8851_reg_write(interface, REG_TX_ADDR_PTR,  /* TXFDPR */
 8003418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800341c:	2184      	movs	r1, #132	; 0x84
 800341e:	4620      	mov	r0, r4
 8003420:	f7ff fee9 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_TX_CTRL,    /* TXCR */
 8003424:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8003428:	2170      	movs	r1, #112	; 0x70
 800342a:	4620      	mov	r0, r4
 800342c:	f7ff fee3 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RX_ADDR_PTR,  /* RXFDPR */
 8003430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003434:	2186      	movs	r1, #134	; 0x86
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff fedd 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RX_FRAME_CNT_THRES, 1); /* RXFCTFC */
 800343c:	2201      	movs	r2, #1
 800343e:	219c      	movs	r1, #156	; 0x9c
 8003440:	4620      	mov	r0, r4
 8003442:	f7ff fed8 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RX_CTRL1,   /* RXCR1 */
 8003446:	f647 42f0 	movw	r2, #31984	; 0x7cf0
 800344a:	2174      	movs	r1, #116	; 0x74
 800344c:	4620      	mov	r0, r4
 800344e:	f7ff fed2 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RX_CTRL2,     /* RXCR2 */
 8003452:	2296      	movs	r2, #150	; 0x96
 8003454:	2176      	movs	r1, #118	; 0x76
 8003456:	4620      	mov	r0, r4
 8003458:	f7ff fecd 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RXQ_CMD,      /* RXQCR */
 800345c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003460:	2182      	movs	r1, #130	; 0x82
 8003462:	4620      	mov	r0, r4
 8003464:	f7ff fec7 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_BUS_CLOCK_CTRL, /* OBCR */
 8003468:	2204      	movs	r2, #4
 800346a:	2120      	movs	r1, #32
 800346c:	4620      	mov	r0, r4
 800346e:	f7ff fec2 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_setbits(interface, REG_PORT_CTRL,    /* P1CR */
 8003472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003476:	21f6      	movs	r1, #246	; 0xf6
 8003478:	4620      	mov	r0, r4
 800347a:	f7ff feeb 	bl	8003254 <ksz8851_reg_setbits>
  if ((ksz8851_reg_read(interface, REG_PORT_CTRL) & PORT_AUTO_NEG_RESTART) != PORT_AUTO_NEG_RESTART) /* P1CR */
 800347e:	21f6      	movs	r1, #246	; 0xf6
 8003480:	4620      	mov	r0, r4
 8003482:	f7ff fe85 	bl	8003190 <ksz8851_reg_read>
 8003486:	0483      	lsls	r3, r0, #18
 8003488:	d404      	bmi.n	8003494 <ksz8851_init_chip+0x1c0>
    ksz8851_reg_clrbits(interface, REG_PORT_CTRL,  /* P1CR */
 800348a:	2220      	movs	r2, #32
 800348c:	21f6      	movs	r1, #246	; 0xf6
 800348e:	4620      	mov	r0, r4
 8003490:	f7ff feef 	bl	8003272 <ksz8851_reg_clrbits>
  ksz8851_reg_write(interface, REG_INT_STATUS, 0xFFFF);  /* ISR */
 8003494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003498:	2192      	movs	r1, #146	; 0x92
 800349a:	4620      	mov	r0, r4
 800349c:	f7ff feab 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RX_LOW_WATERMARK,   /* FCLWR */
 80034a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80034a4:	21b0      	movs	r1, #176	; 0xb0
 80034a6:	4620      	mov	r0, r4
 80034a8:	f7ff fea5 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RX_HIGH_WATERMARK,  /* FCHWR */
 80034ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b0:	21b2      	movs	r1, #178	; 0xb2
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7ff fe9f 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_IntEnable(interface);
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7ff ff06 	bl	80032ca <ksz8851_IntEnable>
  ksz8851_reg_setbits(interface, REG_TX_CTRL,  /* TXCR */
 80034be:	2201      	movs	r2, #1
 80034c0:	2170      	movs	r1, #112	; 0x70
 80034c2:	4620      	mov	r0, r4
 80034c4:	f7ff fec6 	bl	8003254 <ksz8851_reg_setbits>
  ksz8851_reg_setbits(interface, REG_RX_CTRL1, /* RXCR1 */
 80034c8:	4620      	mov	r0, r4
 80034ca:	2201      	movs	r2, #1
 80034cc:	2174      	movs	r1, #116	; 0x74
 80034ce:	f7ff fec1 	bl	8003254 <ksz8851_reg_setbits>
 80034d2:	2001      	movs	r0, #1
}
 80034d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((dev_id & 0xFFF0) != CHIP_ID_8851_16);
 80034d8:	b2b2      	uxth	r2, r6
 80034da:	f648 0370 	movw	r3, #34928	; 0x8870
 80034de:	429a      	cmp	r2, r3
 80034e0:	f47f af0f 	bne.w	8003302 <ksz8851_init_chip+0x2e>
 80034e4:	e727      	b.n	8003336 <ksz8851_init_chip+0x62>
 80034e6:	bf00      	nop
 80034e8:	08013624 	.word	0x08013624
 80034ec:	0801362a 	.word	0x0801362a
 80034f0:	08013630 	.word	0x08013630
 80034f4:	08013648 	.word	0x08013648
 80034f8:	0801364e 	.word	0x0801364e
 80034fc:	0801365a 	.word	0x0801365a
 8003500:	08013665 	.word	0x08013665
 8003504:	0801361e 	.word	0x0801361e
 8003508:	0801363e 	.word	0x0801363e

0800350c <ksz8851_init>:
{
 800350c:	b470      	push	{r4, r5, r6}
  interface->cs_pin = cs_pin;
 800350e:	8083      	strh	r3, [r0, #4]
  interface->rst_port = rst_port;
 8003510:	9b03      	ldr	r3, [sp, #12]
{
 8003512:	9d05      	ldr	r5, [sp, #20]
  interface->rst_port = rst_port;
 8003514:	6083      	str	r3, [r0, #8]
  interface->frameId = 0;
 8003516:	2300      	movs	r3, #0
{
 8003518:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  interface->hspi = hspi;
 800351c:	6101      	str	r1, [r0, #16]
  interface->rst_pin = rst_pin;
 800351e:	8186      	strh	r6, [r0, #12]
  interface->cs_port = cs_port;
 8003520:	6002      	str	r2, [r0, #0]
  interface->frameId = 0;
 8003522:	8383      	strh	r3, [r0, #28]
  memcpy(interface->MAC_address, MACaddress, 6);
 8003524:	682b      	ldr	r3, [r5, #0]
 8003526:	6143      	str	r3, [r0, #20]
 8003528:	88ab      	ldrh	r3, [r5, #4]
 800352a:	8303      	strh	r3, [r0, #24]
}
 800352c:	bc70      	pop	{r4, r5, r6}
  ksz8851_init_chip(interface);
 800352e:	f7ff bed1 	b.w	80032d4 <ksz8851_init_chip>

08003532 <ksz8851_IntDisable>:
      KSZ8851SNL_INT_RX_DONE);      /** Enable receive done interrupt */
}

void ksz8851_IntDisable(struct KSZ8851_INTERFACE *interface)
{
  ksz8851_reg_write(interface, REG_INT_ENABLE, INT_NO_INT);
 8003532:	2200      	movs	r2, #0
 8003534:	2190      	movs	r1, #144	; 0x90
 8003536:	f7ff be5e 	b.w	80031f6 <ksz8851_reg_write>

0800353a <ksz8851_IntClearAll>:
}

void ksz8851_IntClearAll(struct KSZ8851_INTERFACE *interface)
{
  ksz8851_reg_write(interface, REG_INT_STATUS, 0xFFFF);  /* ISR */
 800353a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800353e:	2192      	movs	r1, #146	; 0x92
 8003540:	f7ff be59 	b.w	80031f6 <ksz8851_reg_write>

08003544 <ksz8851_fifo_read>:

  return spiIntCode;
}

uint16_t ksz8851_fifo_read(struct KSZ8851_INTERFACE *interface, uint8_t *buf, uint16_t len)
{
 8003544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003546:	4604      	mov	r4, r0
 8003548:	b085      	sub	sp, #20
 800354a:	460f      	mov	r7, r1
  uint8_t tmp_buf[9];
  uint8_t pad_bytes;
  HAL_StatusTypeDef errorcode = HAL_OK;

  // TODO: check len value
  if (len == 0)
 800354c:	4616      	mov	r6, r2
 800354e:	2a00      	cmp	r2, #0
 8003550:	d03a      	beq.n	80035c8 <ksz8851_fifo_read+0x84>
  {
    return 0;
  }

  /* Pull the CS pin low */
  HAL_GPIO_WritePin((GPIO_TypeDef*) interface->cs_port, interface->cs_pin, GPIO_PIN_RESET);
 8003552:	8881      	ldrh	r1, [r0, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	6800      	ldr	r0, [r0, #0]
 8003558:	f002 ffaa 	bl	80064b0 <HAL_GPIO_WritePin>

  /* Calculate number of dummy pad bytes to read a 32-bits aligned buffer */
  pad_bytes = ((len & 0x03) != 0) ? (4 - (len & 0x03)) : 0;
 800355c:	f006 0303 	and.w	r3, r6, #3
 8003560:	b29d      	uxth	r5, r3
 8003562:	b115      	cbz	r5, 800356a <ksz8851_fifo_read+0x26>
 8003564:	f1c3 0504 	rsb	r5, r3, #4
 8003568:	b2ed      	uxtb	r5, r5

  // The first byte: Command phase
  tmp_buf[0] = FIFO_READ;
 800356a:	a904      	add	r1, sp, #16
 800356c:	2380      	movs	r3, #128	; 0x80
  // The first 4 bytes are dummy data and must be discarded
  // The first 4 bytes are the RX packet header, ignore

  /* Perform blocking SPI transfer. */
  (void) HAL_SPI_Transmit(interface->hspi, (uint8_t*) tmp_buf, 11, 2000);
 800356e:	220b      	movs	r2, #11
 8003570:	6920      	ldr	r0, [r4, #16]
  tmp_buf[0] = FIFO_READ;
 8003572:	f801 3d0c 	strb.w	r3, [r1, #-12]!
  (void) HAL_SPI_Transmit(interface->hspi, (uint8_t*) tmp_buf, 11, 2000);
 8003576:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800357a:	f007 fd81 	bl	800b080 <HAL_SPI_Transmit>

 // (void) HAL_SPI_Receive(interface->hspi, (uint8_t*) tmp_buf, 2, 2000);

  /* Maintain alignment to 4-byte boundaries */
  /* update length to a 32-bits aligned value */
  len += pad_bytes;
 800357e:	4435      	add	r5, r6
}

void clr_dma_rx_ended(struct KSZ8851_INTERFACE *interface)
{
//  dmc_puts("clr_dma_rx_ended\n");
  interface->dma_rx_ended = 0;
 8003580:	2300      	movs	r3, #0
  errorcode = HAL_SPI_Receive(interface->hspi, (uint8_t*) buf, len, 2000);
 8003582:	4639      	mov	r1, r7
  len += pad_bytes;
 8003584:	b2ae      	uxth	r6, r5
  interface->dma_rx_ended = 0;
 8003586:	77e3      	strb	r3, [r4, #31]
  memset(buf, 0x55, 4);
 8003588:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
  errorcode = HAL_SPI_Receive(interface->hspi, (uint8_t*) buf, len, 2000);
 800358c:	4632      	mov	r2, r6
  memset(buf, 0x55, 4);
 800358e:	603b      	str	r3, [r7, #0]
  errorcode = HAL_SPI_Receive(interface->hspi, (uint8_t*) buf, len, 2000);
 8003590:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003594:	6920      	ldr	r0, [r4, #16]
 8003596:	f008 f845 	bl	800b624 <HAL_SPI_Receive>
  if (errorcode != HAL_OK)
 800359a:	b160      	cbz	r0, 80035b6 <ksz8851_fifo_read+0x72>
    dmc_puts(__FILE__);
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <ksz8851_fifo_read+0x8c>)
 800359e:	f7fd fa15 	bl	80009cc <dmc_puts>
    dmc_puts(", ");
 80035a2:	480c      	ldr	r0, [pc, #48]	; (80035d4 <ksz8851_fifo_read+0x90>)
 80035a4:	f7fd fa12 	bl	80009cc <dmc_puts>
    dmc_putint(__LINE__);
 80035a8:	f240 30c3 	movw	r0, #963	; 0x3c3
 80035ac:	f7fd fa17 	bl	80009de <dmc_putint>
    dmc_puts(": Error: HAL_SPI_Transmit");
 80035b0:	4809      	ldr	r0, [pc, #36]	; (80035d8 <ksz8851_fifo_read+0x94>)
 80035b2:	f7fd fa0b 	bl	80009cc <dmc_puts>
  pad_bytes = ((len & 0x03) != 0) ? (4 - (len & 0x03)) : 0;
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <ksz8851_fifo_read+0x98>)
    __NOP();
 80035b8:	bf00      	nop
  for (uint32_t i = 0; i < 2000000; i++) // 200000000 ~ 1 Sec
 80035ba:	3b01      	subs	r3, #1
 80035bc:	d1fc      	bne.n	80035b8 <ksz8851_fifo_read+0x74>
  HAL_GPIO_WritePin((GPIO_TypeDef*) interface->cs_port, interface->cs_pin, GPIO_PIN_SET);
 80035be:	2201      	movs	r2, #1
 80035c0:	88a1      	ldrh	r1, [r4, #4]
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	f002 ff74 	bl	80064b0 <HAL_GPIO_WritePin>
}
 80035c8:	4630      	mov	r0, r6
 80035ca:	b005      	add	sp, #20
 80035cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ce:	bf00      	nop
 80035d0:	080135d4 	.word	0x080135d4
 80035d4:	08013601 	.word	0x08013601
 80035d8:	08013604 	.word	0x08013604
 80035dc:	001e8480 	.word	0x001e8480

080035e0 <ksz8851_fifo_write>:
{
 80035e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035e2:	4614      	mov	r4, r2
 80035e4:	4605      	mov	r5, r0
 80035e6:	460f      	mov	r7, r1
  HAL_GPIO_WritePin((GPIO_TypeDef*) interface->cs_port, interface->cs_pin, GPIO_PIN_RESET);
 80035e8:	2200      	movs	r2, #0
 80035ea:	8881      	ldrh	r1, [r0, #4]
 80035ec:	6800      	ldr	r0, [r0, #0]
 80035ee:	f002 ff5f 	bl	80064b0 <HAL_GPIO_WritePin>
  if (len == 0)
 80035f2:	2c00      	cmp	r4, #0
 80035f4:	d050      	beq.n	8003698 <ksz8851_fifo_write+0xb8>
  outbuf[0] = FIFO_WRITE;
 80035f6:	23c0      	movs	r3, #192	; 0xc0
  len &= 0x07FF;
 80035f8:	f3c4 060a 	ubfx	r6, r4, #0, #11
  pad_bytes = ((len & 0x03) != 0) ? (4 - (len & 0x03)) : 0;
 80035fc:	f014 0403 	ands.w	r4, r4, #3
  errorcode = HAL_SPI_Transmit(interface->hspi, (uint8_t*) outbuf, 5, 2000);
 8003600:	4669      	mov	r1, sp
  outbuf[0] = FIFO_WRITE;
 8003602:	f88d 3000 	strb.w	r3, [sp]
  outbuf[1] = (interface->frameId++ & FRAME_ID_MASK);
 8003606:	8bab      	ldrh	r3, [r5, #28]
  pad_bytes = ((len & 0x03) != 0) ? (4 - (len & 0x03)) : 0;
 8003608:	bf18      	it	ne
 800360a:	f006 0403 	andne.w	r4, r6, #3
  errorcode = HAL_SPI_Transmit(interface->hspi, (uint8_t*) outbuf, 5, 2000);
 800360e:	6928      	ldr	r0, [r5, #16]
  outbuf[1] = (interface->frameId++ & FRAME_ID_MASK);
 8003610:	f103 0201 	add.w	r2, r3, #1
 8003614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  pad_bytes = ((len & 0x03) != 0) ? (4 - (len & 0x03)) : 0;
 8003618:	bf18      	it	ne
 800361a:	f1c4 0404 	rsbne	r4, r4, #4
  outbuf[3] = len & LSB_MASK;
 800361e:	f88d 6003 	strb.w	r6, [sp, #3]
  outbuf[1] = (interface->frameId++ & FRAME_ID_MASK);
 8003622:	f88d 3001 	strb.w	r3, [sp, #1]
  outbuf[2] = 0;
 8003626:	f04f 0300 	mov.w	r3, #0
  outbuf[1] = (interface->frameId++ & FRAME_ID_MASK);
 800362a:	83aa      	strh	r2, [r5, #28]
  errorcode = HAL_SPI_Transmit(interface->hspi, (uint8_t*) outbuf, 5, 2000);
 800362c:	f04f 0205 	mov.w	r2, #5
  outbuf[2] = 0;
 8003630:	f88d 3002 	strb.w	r3, [sp, #2]
  outbuf[4] = len >> MSB_POS;
 8003634:	ea4f 2316 	mov.w	r3, r6, lsr #8
  pad_bytes = ((len & 0x03) != 0) ? (4 - (len & 0x03)) : 0;
 8003638:	bf18      	it	ne
 800363a:	b2e4      	uxtbne	r4, r4
  outbuf[4] = len >> MSB_POS;
 800363c:	f88d 3004 	strb.w	r3, [sp, #4]
  errorcode = HAL_SPI_Transmit(interface->hspi, (uint8_t*) outbuf, 5, 2000);
 8003640:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003644:	f007 fd1c 	bl	800b080 <HAL_SPI_Transmit>
  if (errorcode != HAL_OK)
 8003648:	b160      	cbz	r0, 8003664 <ksz8851_fifo_write+0x84>
    dmc_puts(__FILE__);
 800364a:	4814      	ldr	r0, [pc, #80]	; (800369c <ksz8851_fifo_write+0xbc>)
 800364c:	f7fd f9be 	bl	80009cc <dmc_puts>
    dmc_puts(", ");
 8003650:	4813      	ldr	r0, [pc, #76]	; (80036a0 <ksz8851_fifo_write+0xc0>)
 8003652:	f7fd f9bb 	bl	80009cc <dmc_puts>
    dmc_putint(__LINE__);
 8003656:	f240 4053 	movw	r0, #1107	; 0x453
 800365a:	f7fd f9c0 	bl	80009de <dmc_putint>
    dmc_puts(": Error: HAL_SPI_Transmit");
 800365e:	4811      	ldr	r0, [pc, #68]	; (80036a4 <ksz8851_fifo_write+0xc4>)
 8003660:	f7fd f9b4 	bl	80009cc <dmc_puts>
  errorcode = HAL_SPI_Transmit(interface->hspi, (uint8_t*) buf, len, 2000);
 8003664:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003668:	1932      	adds	r2, r6, r4
 800366a:	4639      	mov	r1, r7
 800366c:	6928      	ldr	r0, [r5, #16]
 800366e:	f007 fd07 	bl	800b080 <HAL_SPI_Transmit>
  if (errorcode != HAL_OK)
 8003672:	b160      	cbz	r0, 800368e <ksz8851_fifo_write+0xae>
    dmc_puts(__FILE__);
 8003674:	4809      	ldr	r0, [pc, #36]	; (800369c <ksz8851_fifo_write+0xbc>)
 8003676:	f7fd f9a9 	bl	80009cc <dmc_puts>
    dmc_puts(", ");
 800367a:	4809      	ldr	r0, [pc, #36]	; (80036a0 <ksz8851_fifo_write+0xc0>)
 800367c:	f7fd f9a6 	bl	80009cc <dmc_puts>
    dmc_putint(__LINE__);
 8003680:	f240 408d 	movw	r0, #1165	; 0x48d
 8003684:	f7fd f9ab 	bl	80009de <dmc_putint>
    dmc_puts(": Error: HAL_SPI_Transmit");
 8003688:	4806      	ldr	r0, [pc, #24]	; (80036a4 <ksz8851_fifo_write+0xc4>)
 800368a:	f7fd f99f 	bl	80009cc <dmc_puts>
  HAL_GPIO_WritePin((GPIO_TypeDef*) interface->cs_port, interface->cs_pin, GPIO_PIN_SET);
 800368e:	2201      	movs	r2, #1
 8003690:	88a9      	ldrh	r1, [r5, #4]
 8003692:	6828      	ldr	r0, [r5, #0]
 8003694:	f002 ff0c 	bl	80064b0 <HAL_GPIO_WritePin>
}
 8003698:	b003      	add	sp, #12
 800369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800369c:	080135d4 	.word	0x080135d4
 80036a0:	08013601 	.word	0x08013601
 80036a4:	08013604 	.word	0x08013604

080036a8 <ksz8851snl_reset_rx>:
{
 80036a8:	b538      	push	{r3, r4, r5, lr}
  usValue &= ~( ( uint16_t ) (RX_CTRL_ENABLE | RX_CTRL_FLUSH_QUEUE) );
 80036aa:	f647 74fe 	movw	r4, #32766	; 0x7ffe
  usValue = ksz8851_reg_read(interface, REG_RX_CTRL1);
 80036ae:	2174      	movs	r1, #116	; 0x74
{
 80036b0:	4605      	mov	r5, r0
  usValue = ksz8851_reg_read(interface, REG_RX_CTRL1);
 80036b2:	f7ff fd6d 	bl	8003190 <ksz8851_reg_read>
  usValue &= ~( ( uint16_t ) (RX_CTRL_ENABLE | RX_CTRL_FLUSH_QUEUE) );
 80036b6:	4004      	ands	r4, r0
  ksz8851_reg_write(interface, REG_RX_CTRL1, usValue );
 80036b8:	2174      	movs	r1, #116	; 0x74
 80036ba:	4628      	mov	r0, r5
 80036bc:	4622      	mov	r2, r4
 80036be:	f7ff fd9a 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RX_CTRL1, usValue | RX_CTRL_FLUSH_QUEUE );
 80036c2:	f444 4200 	orr.w	r2, r4, #32768	; 0x8000
 80036c6:	4628      	mov	r0, r5
 80036c8:	2174      	movs	r1, #116	; 0x74
 80036ca:	f7ff fd94 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RX_CTRL1, usValue );
 80036ce:	4622      	mov	r2, r4
 80036d0:	4628      	mov	r0, r5
 80036d2:	2174      	movs	r1, #116	; 0x74
 80036d4:	f7ff fd8f 	bl	80031f6 <ksz8851_reg_write>
  ksz8851_reg_write(interface, REG_RX_CTRL1, usValue | RX_CTRL_ENABLE );
 80036d8:	4628      	mov	r0, r5
 80036da:	f044 0201 	orr.w	r2, r4, #1
 80036de:	2174      	movs	r1, #116	; 0x74
 80036e0:	f7ff fd89 	bl	80031f6 <ksz8851_reg_write>
}
 80036e4:	4620      	mov	r0, r4
 80036e6:	bd38      	pop	{r3, r4, r5, pc}

080036e8 <ksz8851_Send>:
{
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	4615      	mov	r5, r2
 80036ec:	460e      	mov	r6, r1
  data = ksz8851_reg_read(interface, REG_TX_MEM_INFO); /* TXMIR */
 80036ee:	2178      	movs	r1, #120	; 0x78
{
 80036f0:	4604      	mov	r4, r0
  data = ksz8851_reg_read(interface, REG_TX_MEM_INFO); /* TXMIR */
 80036f2:	f7ff fd4d 	bl	8003190 <ksz8851_reg_read>
  txPacketLength = pTXLength + EXTRA_SIZE;
 80036f6:	f105 0208 	add.w	r2, r5, #8
  if (txmir < txPacketLength)
 80036fa:	f3c0 000c 	ubfx	r0, r0, #0, #13
  txPacketLength = pTXLength + EXTRA_SIZE;
 80036fe:	b292      	uxth	r2, r2
  if (txmir < txPacketLength)
 8003700:	4290      	cmp	r0, r2
 8003702:	d213      	bcs.n	800372c <ksz8851_Send+0x44>
    ksz8851_reg_write(interface, REG_TX_TOTAL_FRAME_SIZE, txPacketLength); /* TXNTFSR */
 8003704:	219e      	movs	r1, #158	; 0x9e
 8003706:	4620      	mov	r0, r4
 8003708:	f7ff fd75 	bl	80031f6 <ksz8851_reg_write>
    ksz8851_reg_setbits(interface, REG_TXQ_CMD, TXQ_MEM_AVAILABLE_INT);  /* TXQCR */
 800370c:	2202      	movs	r2, #2
 800370e:	2180      	movs	r1, #128	; 0x80
 8003710:	4620      	mov	r0, r4
 8003712:	f7ff fd9f 	bl	8003254 <ksz8851_reg_setbits>
      data = ksz8851_reg_read(interface, REG_INT_STATUS);  /* ISR */
 8003716:	2192      	movs	r1, #146	; 0x92
 8003718:	4620      	mov	r0, r4
 800371a:	f7ff fd39 	bl	8003190 <ksz8851_reg_read>
      if (data & INT_TX_SPACE)
 800371e:	0642      	lsls	r2, r0, #25
 8003720:	d5f9      	bpl.n	8003716 <ksz8851_Send+0x2e>
    ksz8851_reg_setbits(interface, REG_INT_STATUS, INT_TX_SPACE);  /* ISR */
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	2192      	movs	r1, #146	; 0x92
 8003726:	4620      	mov	r0, r4
 8003728:	f7ff fd94 	bl	8003254 <ksz8851_reg_setbits>
  ksz8851_IntDisable(interface);
 800372c:	4620      	mov	r0, r4
 800372e:	f7ff ff00 	bl	8003532 <ksz8851_IntDisable>
  ksz8851_reg_setbits(interface, REG_RXQ_CMD, RXQ_START);  /* RXQCR */
 8003732:	2208      	movs	r2, #8
 8003734:	2182      	movs	r1, #130	; 0x82
 8003736:	4620      	mov	r0, r4
 8003738:	f7ff fd8c 	bl	8003254 <ksz8851_reg_setbits>
  ksz8851_fifo_write(interface, pTXData, pTXLength);
 800373c:	462a      	mov	r2, r5
 800373e:	4631      	mov	r1, r6
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff ff4d 	bl	80035e0 <ksz8851_fifo_write>
  ksz8851_reg_clrbits(interface, REG_RXQ_CMD, RXQ_START);  /* RXQCR */
 8003746:	2208      	movs	r2, #8
 8003748:	2182      	movs	r1, #130	; 0x82
 800374a:	4620      	mov	r0, r4
 800374c:	f7ff fd91 	bl	8003272 <ksz8851_reg_clrbits>
  ksz8851_reg_setbits(interface, REG_TXQ_CMD, TXQ_ENQUEUE);  /* RXQCR */
 8003750:	2201      	movs	r2, #1
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	4620      	mov	r0, r4
 8003756:	f7ff fd7d 	bl	8003254 <ksz8851_reg_setbits>
    data = ksz8851_reg_read(interface, REG_TXQ_CMD); /* RXQCR */
 800375a:	2180      	movs	r1, #128	; 0x80
 800375c:	4620      	mov	r0, r4
 800375e:	f7ff fd17 	bl	8003190 <ksz8851_reg_read>
    if (!(data & TXQ_ENQUEUE))        /* bit 0 or 0x0001 */
 8003762:	07c3      	lsls	r3, r0, #31
 8003764:	d4f9      	bmi.n	800375a <ksz8851_Send+0x72>
  ksz8851_IntEnable(interface);
 8003766:	4620      	mov	r0, r4
}
 8003768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ksz8851_IntEnable(interface);
 800376c:	f7ff bdad 	b.w	80032ca <ksz8851_IntEnable>

08003770 <ksz8851_Receive>:
{
 8003770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003774:	4689      	mov	r9, r1
  data = ksz8851_reg_read(interface, REG_INT_STATUS);  /* ISR */
 8003776:	2192      	movs	r1, #146	; 0x92
{
 8003778:	4604      	mov	r4, r0
 800377a:	4692      	mov	sl, r2
  data = ksz8851_reg_read(interface, REG_INT_STATUS);  /* ISR */
 800377c:	f7ff fd08 	bl	8003190 <ksz8851_reg_read>
  if (!(data & IRQ_RXI))  /* INT_RX_DONE */
 8003780:	f410 5500 	ands.w	r5, r0, #8192	; 0x2000
 8003784:	d012      	beq.n	80037ac <ksz8851_Receive+0x3c>
  ksz8851_IntDisable(interface);
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff fed3 	bl	8003532 <ksz8851_IntDisable>
  ksz8851_reg_setbits(interface, REG_INT_STATUS, IRQ_RXI);
 800378c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003790:	2192      	movs	r1, #146	; 0x92
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff fd5e 	bl	8003254 <ksz8851_reg_setbits>
  data = ksz8851_reg_read(interface, REG_RX_FRAME_CNT_THRES);  /* RXFCTR */
 8003798:	219c      	movs	r1, #156	; 0x9c
 800379a:	4620      	mov	r0, r4
 800379c:	f7ff fcf8 	bl	8003190 <ksz8851_reg_read>
  rxFrameCount = (data >> MSB_POS) & 0x00ff;
 80037a0:	f3c0 250f 	ubfx	r5, r0, #8, #16
  if (rxFrameCount == 0)
 80037a4:	b92d      	cbnz	r5, 80037b2 <ksz8851_Receive+0x42>
  ksz8851_IntEnable(interface);
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7ff fd8f 	bl	80032ca <ksz8851_IntEnable>
}
 80037ac:	4628      	mov	r0, r5
 80037ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (rxFrameCount == 0)
 80037b2:	462f      	mov	r7, r5
 80037b4:	2500      	movs	r5, #0
    rxStatus = ksz8851_reg_read(interface, REG_RX_FHR_STATUS);   /* RXFHSR */
 80037b6:	217c      	movs	r1, #124	; 0x7c
 80037b8:	4620      	mov	r0, r4
    rxFrameCount--;
 80037ba:	3f01      	subs	r7, #1
    rxStatus = ksz8851_reg_read(interface, REG_RX_FHR_STATUS);   /* RXFHSR */
 80037bc:	f7ff fce8 	bl	8003190 <ksz8851_reg_read>
    if ((!(rxStatus & RX_VALID)) || (rxStatus & RX_ERRORS))
 80037c0:	0403      	lsls	r3, r0, #16
    rxFrameCount--;
 80037c2:	b2bf      	uxth	r7, r7
    if ((!(rxStatus & RX_VALID)) || (rxStatus & RX_ERRORS))
 80037c4:	d504      	bpl.n	80037d0 <ksz8851_Receive+0x60>
 80037c6:	f643 4817 	movw	r8, #15383	; 0x3c17
 80037ca:	ea10 0808 	ands.w	r8, r0, r8
 80037ce:	d00a      	beq.n	80037e6 <ksz8851_Receive+0x76>
        ksz8851_reg_setbits(interface, REG_RXQ_CMD, RXQ_CMD_FREE_PACKET);
 80037d0:	2201      	movs	r2, #1
 80037d2:	2182      	movs	r1, #130	; 0x82
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7ff fd3d 	bl	8003254 <ksz8851_reg_setbits>
  while (rxFrameCount > 0)
 80037da:	2f00      	cmp	r7, #0
 80037dc:	d1eb      	bne.n	80037b6 <ksz8851_Receive+0x46>
  ksz8851_IntClearAll(interface);
 80037de:	4620      	mov	r0, r4
 80037e0:	f7ff feab 	bl	800353a <ksz8851_IntClearAll>
 80037e4:	e7df      	b.n	80037a6 <ksz8851_Receive+0x36>
      rxPacketLength = ksz8851_reg_read(interface, REG_RX_FHR_BYTE_CNT) & RX_BYTE_CNT_MASK;  /* RXFHBCR */
 80037e6:	217e      	movs	r1, #126	; 0x7e
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7ff fcd1 	bl	8003190 <ksz8851_reg_read>
 80037ee:	f3c0 050b 	ubfx	r5, r0, #0, #12
      if(rxPacketLength == 0)
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	d0ec      	beq.n	80037d0 <ksz8851_Receive+0x60>
      bytesToRead = 4 * ((rxPacketLength + 3) >> 2);
 80037f6:	1cee      	adds	r6, r5, #3
 80037f8:	f026 0603 	bic.w	r6, r6, #3
 80037fc:	b2b6      	uxth	r6, r6
      if ((bytesToRead > pRXLength) || (rxPacketLength <= 4))
 80037fe:	4556      	cmp	r6, sl
 8003800:	d8e6      	bhi.n	80037d0 <ksz8851_Receive+0x60>
 8003802:	2d04      	cmp	r5, #4
 8003804:	d9e4      	bls.n	80037d0 <ksz8851_Receive+0x60>
      ksz8851_reg_clrbits(interface, REG_RX_ADDR_PTR, ADDR_PTR_MASK);
 8003806:	4620      	mov	r0, r4
 8003808:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800380c:	2186      	movs	r1, #134	; 0x86
 800380e:	f7ff fd30 	bl	8003272 <ksz8851_reg_clrbits>
      ksz8851_reg_setbits(interface, REG_RXQ_CMD, RXQ_START | RXQ_AUTO_DEQUEUE);
 8003812:	4620      	mov	r0, r4
 8003814:	2218      	movs	r2, #24
 8003816:	2182      	movs	r1, #130	; 0x82
 8003818:	f7ff fd1c 	bl	8003254 <ksz8851_reg_setbits>
      memset(pRXData, 0, bytesToRead);
 800381c:	4632      	mov	r2, r6
 800381e:	4641      	mov	r1, r8
 8003820:	4648      	mov	r0, r9
 8003822:	f00e fe63 	bl	80124ec <memset>
      rxPacketLength = ksz8851_fifo_read(interface, pRXData, bytesToRead);
 8003826:	4632      	mov	r2, r6
 8003828:	4649      	mov	r1, r9
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff fe8a 	bl	8003544 <ksz8851_fifo_read>
      ksz8851_reg_clrbits(interface, REG_RXQ_CMD, RXQ_START);
 8003830:	2208      	movs	r2, #8
      rxPacketLength = ksz8851_fifo_read(interface, pRXData, bytesToRead);
 8003832:	4605      	mov	r5, r0
      ksz8851_reg_clrbits(interface, REG_RXQ_CMD, RXQ_START);
 8003834:	2182      	movs	r1, #130	; 0x82
 8003836:	4620      	mov	r0, r4
 8003838:	f7ff fd1b 	bl	8003272 <ksz8851_reg_clrbits>
 800383c:	e7cd      	b.n	80037da <ksz8851_Receive+0x6a>

0800383e <set_dma_tx_ended>:
  interface->dma_tx_ended = 1;
 800383e:	2301      	movs	r3, #1
 8003840:	f880 3020 	strb.w	r3, [r0, #32]
 8003844:	4770      	bx	lr

08003846 <set_dma_rx_ended>:
}

void set_dma_rx_ended(struct KSZ8851_INTERFACE *interface)
{
//  dmc_puts("set_dma_rx_ended\n");
  interface->dma_rx_ended = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	77c3      	strb	r3, [r0, #31]
 800384a:	4770      	bx	lr

0800384c <set_spi_irq>:
}

void set_spi_irq(struct KSZ8851_INTERFACE *interface)
{
//  dmc_puts("set_dma_rx_ended\n");
  interface->spi_irq = 1;
 800384c:	2301      	movs	r3, #1
 800384e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8003852:	4770      	bx	lr

08003854 <ksz8851_init_0>:
 * @brief KSZ8851 initialization
 * @param None
 * @return None
 */
void ksz8851_init_0(void)
{
 8003854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t MAC_address[] = { 0x00, 0x80, 0xe1, 0x00, 0x00, 0x01 };
 8003856:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <ksz8851_init_0+0x2c>)
 8003858:	ab04      	add	r3, sp, #16

  ksz8851_init(&KSZ8851_interface_0, &hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0, 0, MAC_address);
 800385a:	490a      	ldr	r1, [pc, #40]	; (8003884 <ksz8851_init_0+0x30>)
  uint8_t MAC_address[] = { 0x00, 0x80, 0xe1, 0x00, 0x00, 0x01 };
 800385c:	6810      	ldr	r0, [r2, #0]
  ksz8851_init(&KSZ8851_interface_0, &hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0, 0, MAC_address);
 800385e:	9302      	str	r3, [sp, #8]
 8003860:	2300      	movs	r3, #0
  uint8_t MAC_address[] = { 0x00, 0x80, 0xe1, 0x00, 0x00, 0x01 };
 8003862:	8892      	ldrh	r2, [r2, #4]
 8003864:	9004      	str	r0, [sp, #16]
 8003866:	f8ad 2014 	strh.w	r2, [sp, #20]
  ksz8851_init(&KSZ8851_interface_0, &hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0, 0, MAC_address);
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2310      	movs	r3, #16
 8003870:	4a05      	ldr	r2, [pc, #20]	; (8003888 <ksz8851_init_0+0x34>)
 8003872:	4806      	ldr	r0, [pc, #24]	; (800388c <ksz8851_init_0+0x38>)
 8003874:	f7ff fe4a 	bl	800350c <ksz8851_init>
}
 8003878:	b007      	add	sp, #28
 800387a:	f85d fb04 	ldr.w	pc, [sp], #4
 800387e:	bf00      	nop
 8003880:	08013304 	.word	0x08013304
 8003884:	24001080 	.word	0x24001080
 8003888:	58020000 	.word	0x58020000
 800388c:	24000d9c 	.word	0x24000d9c

08003890 <ksz8851_init_1>:
 * @brief KSZ8851 initialization
 * @param None
 * @return None
 */
void ksz8851_init_1(void)
{
 8003890:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t MAC_address[] = { 0x00, 0x80, 0xe1, 0x00, 0x00, 0x02 };
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <ksz8851_init_1+0x2c>)
 8003894:	ab04      	add	r3, sp, #16

  ksz8851_init(&KSZ8851_interface_1, &hspi4, SPI4_CS_GPIO_Port, SPI4_CS_Pin, 0, 0, MAC_address);
 8003896:	490a      	ldr	r1, [pc, #40]	; (80038c0 <ksz8851_init_1+0x30>)
  uint8_t MAC_address[] = { 0x00, 0x80, 0xe1, 0x00, 0x00, 0x02 };
 8003898:	6810      	ldr	r0, [r2, #0]
  ksz8851_init(&KSZ8851_interface_1, &hspi4, SPI4_CS_GPIO_Port, SPI4_CS_Pin, 0, 0, MAC_address);
 800389a:	9302      	str	r3, [sp, #8]
 800389c:	2300      	movs	r3, #0
  uint8_t MAC_address[] = { 0x00, 0x80, 0xe1, 0x00, 0x00, 0x02 };
 800389e:	8892      	ldrh	r2, [r2, #4]
 80038a0:	9004      	str	r0, [sp, #16]
 80038a2:	f8ad 2014 	strh.w	r2, [sp, #20]
  ksz8851_init(&KSZ8851_interface_1, &hspi4, SPI4_CS_GPIO_Port, SPI4_CS_Pin, 0, 0, MAC_address);
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038ae:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <ksz8851_init_1+0x34>)
 80038b0:	4805      	ldr	r0, [pc, #20]	; (80038c8 <ksz8851_init_1+0x38>)
 80038b2:	f7ff fe2b 	bl	800350c <ksz8851_init>
}
 80038b6:	b007      	add	sp, #28
 80038b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80038bc:	0801330a 	.word	0x0801330a
 80038c0:	24000ff8 	.word	0x24000ff8
 80038c4:	58021000 	.word	0x58021000
 80038c8:	24000dc8 	.word	0x24000dc8

080038cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <HAL_InitTick+0x3c>)
{
 80038d0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <HAL_InitTick+0x40>)
 80038d4:	7818      	ldrb	r0, [r3, #0]
 80038d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038da:	fbb3 f3f0 	udiv	r3, r3, r0
 80038de:	6810      	ldr	r0, [r2, #0]
 80038e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80038e4:	f000 f8da 	bl	8003a9c <HAL_SYSTICK_Config>
 80038e8:	4604      	mov	r4, r0
 80038ea:	b958      	cbnz	r0, 8003904 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ec:	2d0f      	cmp	r5, #15
 80038ee:	d809      	bhi.n	8003904 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f0:	4602      	mov	r2, r0
 80038f2:	4629      	mov	r1, r5
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	f000 f874 	bl	80039e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <HAL_InitTick+0x44>)
 80038fe:	4620      	mov	r0, r4
 8003900:	601d      	str	r5, [r3, #0]
 8003902:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003904:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	24000020 	.word	0x24000020
 800390c:	24000018 	.word	0x24000018
 8003910:	24000024 	.word	0x24000024

08003914 <HAL_Init>:
{
 8003914:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003916:	2003      	movs	r0, #3
 8003918:	f000 f846 	bl	80039a8 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800391c:	2000      	movs	r0, #0
 800391e:	f7ff ffd5 	bl	80038cc <HAL_InitTick>
 8003922:	4604      	mov	r4, r0
 8003924:	b918      	cbnz	r0, 800392e <HAL_Init+0x1a>
  HAL_MspInit();
 8003926:	f7fe ff37 	bl	8002798 <HAL_MspInit>
}
 800392a:	4620      	mov	r0, r4
 800392c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800392e:	2401      	movs	r4, #1
 8003930:	e7fb      	b.n	800392a <HAL_Init+0x16>
	...

08003934 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003934:	4a03      	ldr	r2, [pc, #12]	; (8003944 <HAL_IncTick+0x10>)
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <HAL_IncTick+0x14>)
 8003938:	6811      	ldr	r1, [r2, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	440b      	add	r3, r1
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	240000cc 	.word	0x240000cc
 8003948:	24000020 	.word	0x24000020

0800394c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800394c:	4b01      	ldr	r3, [pc, #4]	; (8003954 <HAL_GetTick+0x8>)
 800394e:	6818      	ldr	r0, [r3, #0]
}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	240000cc 	.word	0x240000cc

08003958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff fff6 	bl	800394c <HAL_GetTick>
 8003960:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003962:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003964:	bf1e      	ittt	ne
 8003966:	4b04      	ldrne	r3, [pc, #16]	; (8003978 <HAL_Delay+0x20>)
 8003968:	781b      	ldrbne	r3, [r3, #0]
 800396a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800396c:	f7ff ffee 	bl	800394c <HAL_GetTick>
 8003970:	1b40      	subs	r0, r0, r5
 8003972:	4284      	cmp	r4, r0
 8003974:	d8fa      	bhi.n	800396c <HAL_Delay+0x14>
  {
  }
}
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	24000020 	.word	0x24000020

0800397c <HAL_SYSCFG_ETHInterfaceSelect>:
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 800397c:	f430 0300 	bics.w	r3, r0, #8388608	; 0x800000
{
 8003980:	b510      	push	{r4, lr}
 8003982:	4604      	mov	r4, r0
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 8003984:	d004      	beq.n	8003990 <HAL_SYSCFG_ETHInterfaceSelect+0x14>
 8003986:	f240 2117 	movw	r1, #535	; 0x217
 800398a:	4805      	ldr	r0, [pc, #20]	; (80039a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800398c:	f7fe fbd5 	bl	800213a <assert_failed>

  MODIFY_REG(SYSCFG->PMCR, SYCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));  
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <HAL_SYSCFG_ETHInterfaceSelect+0x28>)
 8003992:	6858      	ldr	r0, [r3, #4]
 8003994:	f420 0060 	bic.w	r0, r0, #14680064	; 0xe00000
 8003998:	4320      	orrs	r0, r4
 800399a:	6058      	str	r0, [r3, #4]
 800399c:	bd10      	pop	{r4, pc}
 800399e:	bf00      	nop
 80039a0:	08013691 	.word	0x08013691
 80039a4:	58000400 	.word	0x58000400

080039a8 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80039a8:	1ec3      	subs	r3, r0, #3
 80039aa:	2b04      	cmp	r3, #4
{
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80039b0:	d903      	bls.n	80039ba <HAL_NVIC_SetPriorityGrouping+0x12>
 80039b2:	21a2      	movs	r1, #162	; 0xa2
 80039b4:	4809      	ldr	r0, [pc, #36]	; (80039dc <HAL_NVIC_SetPriorityGrouping+0x34>)
 80039b6:	f7fe fbc0 	bl	800213a <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_NVIC_SetPriorityGrouping+0x38>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80039bc:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039be:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80039c0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	0c1b      	lsrs	r3, r3, #16
 80039cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80039d4:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80039d6:	60d4      	str	r4, [r2, #12]
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	bf00      	nop
 80039dc:	080136cb 	.word	0x080136cb
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80039e4:	2a0f      	cmp	r2, #15
{
 80039e6:	b570      	push	{r4, r5, r6, lr}
 80039e8:	4604      	mov	r4, r0
 80039ea:	460e      	mov	r6, r1
 80039ec:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80039ee:	d903      	bls.n	80039f8 <HAL_NVIC_SetPriority+0x14>
 80039f0:	21ba      	movs	r1, #186	; 0xba
 80039f2:	481d      	ldr	r0, [pc, #116]	; (8003a68 <HAL_NVIC_SetPriority+0x84>)
 80039f4:	f7fe fba1 	bl	800213a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80039f8:	2e0f      	cmp	r6, #15
 80039fa:	d903      	bls.n	8003a04 <HAL_NVIC_SetPriority+0x20>
 80039fc:	21bb      	movs	r1, #187	; 0xbb
 80039fe:	481a      	ldr	r0, [pc, #104]	; (8003a68 <HAL_NVIC_SetPriority+0x84>)
 8003a00:	f7fe fb9b 	bl	800213a <assert_failed>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_NVIC_SetPriority+0x88>)
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a06:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a08:	68d9      	ldr	r1, [r3, #12]
 8003a0a:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0e:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a12:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	bf28      	it	cs
 8003a18:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	2a06      	cmp	r2, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	fa00 f203 	lsl.w	r2, r0, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a20:	bf8c      	ite	hi
 8003a22:	3903      	subhi	r1, #3
 8003a24:	2100      	movls	r1, #0
  if ((int32_t)(IRQn) >= 0)
 8003a26:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a28:	f102 32ff 	add.w	r2, r2, #4294967295
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a2c:	fa00 f001 	lsl.w	r0, r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	ea02 0206 	and.w	r2, r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a34:	f100 30ff 	add.w	r0, r0, #4294967295
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	fa02 f201 	lsl.w	r2, r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a3c:	ea05 0500 	and.w	r5, r5, r0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	ea42 0205 	orr.w	r2, r2, r5
 8003a44:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8003a48:	db07      	blt.n	8003a5a <HAL_NVIC_SetPriority+0x76>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8003a54:	f884 2300 	strb.w	r2, [r4, #768]	; 0x300
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5a:	f004 040f 	and.w	r4, r4, #15
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_NVIC_SetPriority+0x8c>)
 8003a62:	551a      	strb	r2, [r3, r4]
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	bf00      	nop
 8003a68:	080136cb 	.word	0x080136cb
 8003a6c:	e000ed00 	.word	0xe000ed00
 8003a70:	e000ed14 	.word	0xe000ed14

08003a74 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003a74:	2800      	cmp	r0, #0
 8003a76:	da03      	bge.n	8003a80 <HAL_NVIC_EnableIRQ+0xc>
 8003a78:	21ce      	movs	r1, #206	; 0xce
 8003a7a:	4806      	ldr	r0, [pc, #24]	; (8003a94 <HAL_NVIC_EnableIRQ+0x20>)
 8003a7c:	f7fe bb5d 	b.w	800213a <assert_failed>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a80:	0942      	lsrs	r2, r0, #5
 8003a82:	2301      	movs	r3, #1
 8003a84:	f000 001f 	and.w	r0, r0, #31
 8003a88:	fa03 f000 	lsl.w	r0, r3, r0
 8003a8c:	4b02      	ldr	r3, [pc, #8]	; (8003a98 <HAL_NVIC_EnableIRQ+0x24>)
 8003a8e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003a92:	4770      	bx	lr
 8003a94:	080136cb 	.word	0x080136cb
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a9c:	3801      	subs	r0, #1
 8003a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003aa2:	d20a      	bcs.n	8003aba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa6:	21f0      	movs	r1, #240	; 0xf0
 8003aa8:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aaa:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aac:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aae:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003aba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000e010 	.word	0xe000e010
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003ac8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <HAL_MPU_Disable+0x18>)
 8003ace:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4b02      	ldr	r3, [pc, #8]	; (8003ae4 <HAL_MPU_Disable+0x1c>)
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	e000ed00 	.word	0xe000ed00
 8003ae4:	e000ed90 	.word	0xe000ed90

08003ae8 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003ae8:	4a06      	ldr	r2, [pc, #24]	; (8003b04 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003aea:	f040 0001 	orr.w	r0, r0, #1
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_MPU_Enable+0x20>)
 8003af0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003af2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00
 8003b08:	e000ed90 	.word	0xe000ed90

08003b0c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003b0c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8003b0e:	7843      	ldrb	r3, [r0, #1]
{
 8003b10:	4604      	mov	r4, r0
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d904      	bls.n	8003b20 <HAL_MPU_ConfigRegion+0x14>
 8003b16:	f240 113d 	movw	r1, #317	; 0x13d
 8003b1a:	483b      	ldr	r0, [pc, #236]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003b1c:	f7fe fb0d 	bl	800213a <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 8003b20:	7823      	ldrb	r3, [r4, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d904      	bls.n	8003b30 <HAL_MPU_ConfigRegion+0x24>
 8003b26:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8003b2a:	4837      	ldr	r0, [pc, #220]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003b2c:	f7fe fb05 	bl	800213a <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003b30:	7862      	ldrb	r2, [r4, #1]
 8003b32:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <HAL_MPU_ConfigRegion+0x100>)
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	461d      	mov	r5, r3

  if ((MPU_Init->Enable) != RESET)
 8003b38:	7822      	ldrb	r2, [r4, #0]
 8003b3a:	2a00      	cmp	r2, #0
 8003b3c:	d060      	beq.n	8003c00 <HAL_MPU_ConfigRegion+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8003b3e:	7b23      	ldrb	r3, [r4, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d904      	bls.n	8003b4e <HAL_MPU_ConfigRegion+0x42>
 8003b44:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003b48:	482f      	ldr	r0, [pc, #188]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003b4a:	f7fe faf6 	bl	800213a <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8003b4e:	7ae3      	ldrb	r3, [r4, #11]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d907      	bls.n	8003b64 <HAL_MPU_ConfigRegion+0x58>
 8003b54:	3b05      	subs	r3, #5
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d904      	bls.n	8003b64 <HAL_MPU_ConfigRegion+0x58>
 8003b5a:	f240 1147 	movw	r1, #327	; 0x147
 8003b5e:	482a      	ldr	r0, [pc, #168]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003b60:	f7fe faeb 	bl	800213a <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8003b64:	7aa3      	ldrb	r3, [r4, #10]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d904      	bls.n	8003b74 <HAL_MPU_ConfigRegion+0x68>
 8003b6a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003b6e:	4826      	ldr	r0, [pc, #152]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003b70:	f7fe fae3 	bl	800213a <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8003b74:	7b63      	ldrb	r3, [r4, #13]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d904      	bls.n	8003b84 <HAL_MPU_ConfigRegion+0x78>
 8003b7a:	f240 1149 	movw	r1, #329	; 0x149
 8003b7e:	4822      	ldr	r0, [pc, #136]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003b80:	f7fe fadb 	bl	800213a <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8003b84:	7ba3      	ldrb	r3, [r4, #14]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d904      	bls.n	8003b94 <HAL_MPU_ConfigRegion+0x88>
 8003b8a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003b8e:	481e      	ldr	r0, [pc, #120]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003b90:	f7fe fad3 	bl	800213a <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8003b94:	7be3      	ldrb	r3, [r4, #15]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d904      	bls.n	8003ba4 <HAL_MPU_ConfigRegion+0x98>
 8003b9a:	f240 114b 	movw	r1, #331	; 0x14b
 8003b9e:	481a      	ldr	r0, [pc, #104]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003ba0:	f7fe facb 	bl	800213a <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8003ba4:	7a63      	ldrb	r3, [r4, #9]
 8003ba6:	2bff      	cmp	r3, #255	; 0xff
 8003ba8:	d104      	bne.n	8003bb4 <HAL_MPU_ConfigRegion+0xa8>
 8003baa:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003bae:	4816      	ldr	r0, [pc, #88]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003bb0:	f7fe fac3 	bl	800213a <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8003bb4:	7a23      	ldrb	r3, [r4, #8]
 8003bb6:	3b04      	subs	r3, #4
 8003bb8:	2b1b      	cmp	r3, #27
 8003bba:	d904      	bls.n	8003bc6 <HAL_MPU_ConfigRegion+0xba>
 8003bbc:	f240 114d 	movw	r1, #333	; 0x14d
 8003bc0:	4811      	ldr	r0, [pc, #68]	; (8003c08 <HAL_MPU_ConfigRegion+0xfc>)
 8003bc2:	f7fe faba 	bl	800213a <assert_failed>

    MPU->RBAR = MPU_Init->BaseAddress;
 8003bc6:	6863      	ldr	r3, [r4, #4]
 8003bc8:	60eb      	str	r3, [r5, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003bca:	7ae3      	ldrb	r3, [r4, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bcc:	7b22      	ldrb	r2, [r4, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003bce:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bd0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003bd4:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003bd6:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003bd8:	7aa2      	ldrb	r2, [r4, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003bda:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003bde:	7b62      	ldrb	r2, [r4, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003be0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003be4:	7ba2      	ldrb	r2, [r4, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003be6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003bea:	7be2      	ldrb	r2, [r4, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003bf0:	7a62      	ldrb	r2, [r4, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003bf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003bf6:	7a22      	ldrb	r2, [r4, #8]
 8003bf8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bfc:	612b      	str	r3, [r5, #16]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    MPU->RBAR = 0x00;
 8003c00:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003c02:	611a      	str	r2, [r3, #16]
 8003c04:	bd38      	pop	{r3, r4, r5, pc}
 8003c06:	bf00      	nop
 8003c08:	080136cb 	.word	0x080136cb
 8003c0c:	e000ed90 	.word	0xe000ed90

08003c10 <HAL_CRYP_InCpltCallback>:
 8003c10:	4770      	bx	lr

08003c12 <HAL_CRYP_OutCpltCallback>:
 8003c12:	4770      	bx	lr

08003c14 <HAL_CRYP_IRQHandler>:
void HAL_CRYP_IRQHandler(CRYP_HandleTypeDef *hcryp)
{
  uint32_t CurrentMode  = 0U; 
  
  /*put CRYP_IT_OUTI flag status in CurrentMode variable*/
  CurrentMode  = __HAL_CRYP_GET_IT(hcryp, CRYP_IT_OUTI);
 8003c14:	6803      	ldr	r3, [r0, #0]
 8003c16:	69d9      	ldr	r1, [r3, #28]
  
  if((__HAL_CRYP_GET_IT(hcryp, CRYP_IT_INI) != RESET)| (CurrentMode != RESET))
 8003c18:	69da      	ldr	r2, [r3, #28]
{
 8003c1a:	b570      	push	{r4, r5, r6, lr}
  if((__HAL_CRYP_GET_IT(hcryp, CRYP_IT_INI) != RESET)| (CurrentMode != RESET))
 8003c1c:	078d      	lsls	r5, r1, #30
{
 8003c1e:	4604      	mov	r4, r0
  if((__HAL_CRYP_GET_IT(hcryp, CRYP_IT_INI) != RESET)| (CurrentMode != RESET))
 8003c20:	d401      	bmi.n	8003c26 <HAL_CRYP_IRQHandler+0x12>
 8003c22:	07d0      	lsls	r0, r2, #31
 8003c24:	d55f      	bpl.n	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
  {
    if ((hcryp->Init.Algorithm == CRYP_DES_ECB)|| (hcryp->Init.Algorithm == CRYP_DES_CBC) || (hcryp->Init.Algorithm == CRYP_TDES_ECB) || (hcryp->Init.Algorithm == CRYP_TDES_CBC))
 8003c26:	6962      	ldr	r2, [r4, #20]
 8003c28:	f032 0018 	bics.w	r0, r2, #24
 8003c2c:	f022 0108 	bic.w	r1, r2, #8
 8003c30:	d15a      	bne.n	8003ce8 <HAL_CRYP_IRQHandler+0xd4>
  */
static HAL_StatusTypeDef CRYP_TDES_IT(CRYP_HandleTypeDef *hcryp)
{
  uint32_t temp = 0U;  /* Temporary CrypOutBuff */ 
  
  if(hcryp->State == HAL_CRYP_STATE_BUSY)
 8003c32:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003c36:	2a02      	cmp	r2, #2
 8003c38:	f040 80d8 	bne.w	8003dec <HAL_CRYP_IRQHandler+0x1d8>
  { 
    if((__HAL_CRYP_GET_IT(hcryp, CRYP_IT_INI) != RESET) && (__HAL_CRYP_GET_FLAG(hcryp, CRYP_FLAG_INRIS) != RESET))
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	07d1      	lsls	r1, r2, #31
 8003c40:	d521      	bpl.n	8003c86 <HAL_CRYP_IRQHandler+0x72>
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	07d2      	lsls	r2, r2, #31
 8003c46:	d51e      	bpl.n	8003c86 <HAL_CRYP_IRQHandler+0x72>
      
    {     
      /* Write input block in the IN FIFO */
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003c48:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003c4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c4c:	b292      	uxth	r2, r2
 8003c4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c52:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003c54:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003c56:	3201      	adds	r2, #1
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	85e2      	strh	r2, [r4, #46]	; 0x2e
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003c5c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003c5e:	b292      	uxth	r2, r2
 8003c60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      hcryp->CrypInCount++;
      
      if(hcryp->CrypInCount ==  hcryp->Size)
 8003c64:	8e61      	ldrh	r1, [r4, #50]	; 0x32
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003c66:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003c68:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003c6a:	3201      	adds	r2, #1
 8003c6c:	b292      	uxth	r2, r2
 8003c6e:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if(hcryp->CrypInCount ==  hcryp->Size)
 8003c70:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003c72:	b292      	uxth	r2, r2
 8003c74:	4291      	cmp	r1, r2
 8003c76:	d106      	bne.n	8003c86 <HAL_CRYP_IRQHandler+0x72>
      {     
        /* Disable interruption */
        __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_INI);
 8003c78:	695a      	ldr	r2, [r3, #20]
        
        /* Call the input data transfer complete callback */
        HAL_CRYP_InCpltCallback(hcryp);
 8003c7a:	4620      	mov	r0, r4
        __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_INI);
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	615a      	str	r2, [r3, #20]
        HAL_CRYP_InCpltCallback(hcryp);
 8003c82:	f7ff ffc5 	bl	8003c10 <HAL_CRYP_InCpltCallback>
      }
    }
    if((__HAL_CRYP_GET_IT(hcryp, CRYP_IT_OUTI) != RESET)&& (__HAL_CRYP_GET_FLAG(hcryp, CRYP_FLAG_OUTRIS) != RESET))
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	0796      	lsls	r6, r2, #30
 8003c8c:	d52b      	bpl.n	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	0795      	lsls	r5, r2, #30
 8003c92:	d528      	bpl.n	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
    {
      /* Read the output block from the Output FIFO and put them in temporary Buffer then get CrypOutBuff from temporary buffer  */    
      temp = hcryp->Instance->DOUT;
 8003c94:	68d8      	ldr	r0, [r3, #12]
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp;      
 8003c96:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003c98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      hcryp->CrypOutCount++;  
 8003ca0:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003ca2:	3201      	adds	r2, #1
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	8622      	strh	r2, [r4, #48]	; 0x30
      temp = hcryp->Instance->DOUT;  
 8003ca8:	68d8      	ldr	r0, [r3, #12]
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp;      
 8003caa:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003cac:	b292      	uxth	r2, r2
 8003cae:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      hcryp->CrypOutCount++;            
 8003cb2:	8e22      	ldrh	r2, [r4, #48]	; 0x30
      if(hcryp->CrypOutCount ==  hcryp->Size)
 8003cb4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
      hcryp->CrypOutCount++;            
 8003cb6:	3201      	adds	r2, #1
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	8622      	strh	r2, [r4, #48]	; 0x30
      if(hcryp->CrypOutCount ==  hcryp->Size)
 8003cbc:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003cbe:	b292      	uxth	r2, r2
 8003cc0:	4291      	cmp	r1, r2
 8003cc2:	d110      	bne.n	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
      {
        /* Disable interruption */
        __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_OUTI);
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	f022 0202 	bic.w	r2, r2, #2
 8003cca:	615a      	str	r2, [r3, #20]
        
        /* Disable CRYP */
        __HAL_CRYP_DISABLE(hcryp);
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd2:	601a      	str	r2, [r3, #0]
        
        /* Process unlocked */
        __HAL_UNLOCK(hcryp);   
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        
        /* Change the CRYP state */
        hcryp->State = HAL_CRYP_STATE_READY;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      
      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
      
      /* Call output transfer complete callback */
      HAL_CRYP_OutCpltCallback(hcryp);
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7ff ff96 	bl	8003c12 <HAL_CRYP_OutCpltCallback>
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
    else if((hcryp->Init.Algorithm == CRYP_AES_ECB) || (hcryp->Init.Algorithm == CRYP_AES_CBC) || (hcryp->Init.Algorithm == CRYP_AES_CTR))
 8003ce8:	2920      	cmp	r1, #32
 8003cea:	d002      	beq.n	8003cf2 <HAL_CRYP_IRQHandler+0xde>
 8003cec:	2a30      	cmp	r2, #48	; 0x30
 8003cee:	f040 8082 	bne.w	8003df6 <HAL_CRYP_IRQHandler+0x1e2>
  if(hcryp->State == HAL_CRYP_STATE_BUSY)
 8003cf2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003cf6:	2a02      	cmp	r2, #2
 8003cf8:	d178      	bne.n	8003dec <HAL_CRYP_IRQHandler+0x1d8>
    if(((hcryp->Instance->SR & CRYP_FLAG_IFNF ) != RESET) && (hcryp->CrypInCount < hcryp->Size))
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	0790      	lsls	r0, r2, #30
 8003cfe:	d534      	bpl.n	8003d6a <HAL_CRYP_IRQHandler+0x156>
 8003d00:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d02:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8003d04:	b292      	uxth	r2, r2
 8003d06:	428a      	cmp	r2, r1
 8003d08:	d22f      	bcs.n	8003d6a <HAL_CRYP_IRQHandler+0x156>
      hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003d0a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003d14:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003d16:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d18:	3201      	adds	r2, #1
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	85e2      	strh	r2, [r4, #46]	; 0x2e
      hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003d1e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d20:	b292      	uxth	r2, r2
 8003d22:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003d26:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;   
 8003d28:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d2a:	3201      	adds	r2, #1
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	85e2      	strh	r2, [r4, #46]	; 0x2e
      hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003d30:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d32:	b292      	uxth	r2, r2
 8003d34:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003d38:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003d3a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d3c:	3201      	adds	r2, #1
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	85e2      	strh	r2, [r4, #46]	; 0x2e
      hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003d42:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d44:	b292      	uxth	r2, r2
 8003d46:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003d4a:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;      
 8003d4c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d4e:	3201      	adds	r2, #1
 8003d50:	b292      	uxth	r2, r2
 8003d52:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if(hcryp->CrypInCount ==  hcryp->Size)
 8003d54:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003d56:	b292      	uxth	r2, r2
 8003d58:	4291      	cmp	r1, r2
 8003d5a:	d106      	bne.n	8003d6a <HAL_CRYP_IRQHandler+0x156>
        __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_INI);
 8003d5c:	695a      	ldr	r2, [r3, #20]
        HAL_CRYP_InCpltCallback(hcryp);
 8003d5e:	4620      	mov	r0, r4
        __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_INI);
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	615a      	str	r2, [r3, #20]
        HAL_CRYP_InCpltCallback(hcryp);
 8003d66:	f7ff ff53 	bl	8003c10 <HAL_CRYP_InCpltCallback>
    if(((hcryp->Instance->SR & CRYP_FLAG_OFNE ) != RESET) && (hcryp->CrypOutCount < hcryp->Size))
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	0751      	lsls	r1, r2, #29
 8003d70:	d5b9      	bpl.n	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
 8003d72:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003d74:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8003d76:	b292      	uxth	r2, r2
 8003d78:	428a      	cmp	r2, r1
 8003d7a:	d2b4      	bcs.n	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
      temp  = hcryp->Instance->DOUT;
 8003d7c:	68dd      	ldr	r5, [r3, #12]
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp;      
 8003d7e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003d80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003d82:	b292      	uxth	r2, r2
 8003d84:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
      hcryp->CrypOutCount++;
 8003d88:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003d8a:	3201      	adds	r2, #1
 8003d8c:	b292      	uxth	r2, r2
 8003d8e:	8622      	strh	r2, [r4, #48]	; 0x30
      temp  = hcryp->Instance->DOUT;    
 8003d90:	68dd      	ldr	r5, [r3, #12]
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp;
 8003d92:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003d94:	b292      	uxth	r2, r2
 8003d96:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
      hcryp->CrypOutCount++;    
 8003d9a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003d9c:	3201      	adds	r2, #1
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	8622      	strh	r2, [r4, #48]	; 0x30
      temp  = hcryp->Instance->DOUT;    
 8003da2:	68dd      	ldr	r5, [r3, #12]
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp;      
 8003da4:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003da6:	b292      	uxth	r2, r2
 8003da8:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
      hcryp->CrypOutCount++;
 8003dac:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003dae:	3201      	adds	r2, #1
 8003db0:	b292      	uxth	r2, r2
 8003db2:	8622      	strh	r2, [r4, #48]	; 0x30
      temp  = hcryp->Instance->DOUT;   
 8003db4:	68dd      	ldr	r5, [r3, #12]
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp;
 8003db6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003db8:	b292      	uxth	r2, r2
 8003dba:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
      hcryp->CrypOutCount++;
 8003dbe:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003dc0:	3201      	adds	r2, #1
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	8622      	strh	r2, [r4, #48]	; 0x30
      if (hcryp->Size == hcryp->CrypOutCount)
 8003dc6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003dc8:	b292      	uxth	r2, r2
 8003dca:	4291      	cmp	r1, r2
 8003dcc:	d18b      	bne.n	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
        __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_OUTI);
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	f022 0202 	bic.w	r2, r2, #2
 8003dd4:	615a      	str	r2, [r3, #20]
        hcryp->State = HAL_CRYP_STATE_READY;
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_CRYP_DISABLE(hcryp);
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de2:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hcryp);
 8003de4:	2300      	movs	r3, #0
 8003de6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003dea:	e779      	b.n	8003ce0 <HAL_CRYP_IRQHandler+0xcc>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY; 
 8003dec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dee:	f043 0308 	orr.w	r3, r3, #8
 8003df2:	6463      	str	r3, [r4, #68]	; 0x44
 8003df4:	bd70      	pop	{r4, r5, r6, pc}
    else if((hcryp->Init.Algorithm == CRYP_AES_GCM) ||(hcryp->Init.Algorithm == CRYP_CR_ALGOMODE_AES_CCM) )
 8003df6:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8003dfa:	f47f af74 	bne.w	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
      if ((hcryp->Instance->CR & CRYP_PHASE_HEADER) == CRYP_PHASE_HEADER )
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8003e04:	d062      	beq.n	8003ecc <HAL_CRYP_IRQHandler+0x2b8>
{
  uint32_t loopcounter = 0U;
  
  /***************************** Header phase *********************************/
  
  if(hcryp->Init.HeaderSize ==  hcryp->CrypHeaderCount)
 8003e06:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e08:	69e1      	ldr	r1, [r4, #28]
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	4291      	cmp	r1, r2
 8003e0e:	d11a      	bne.n	8003e46 <HAL_CRYP_IRQHandler+0x232>
  {     
    /* Disable interrupts */
    __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_INI );
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	615a      	str	r2, [r3, #20]
    
    /* Disable the CRYP peripheral */
    __HAL_CRYP_DISABLE(hcryp);
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e1e:	601a      	str	r2, [r3, #0]
    
    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8003e20:	2202      	movs	r2, #2
 8003e22:	6362      	str	r2, [r4, #52]	; 0x34
    
    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD); 
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003e32:	601a      	str	r2, [r3, #0]
    
    /* Enable Interrupts */
    __HAL_CRYP_ENABLE_IT(hcryp, CRYP_IT_INI | CRYP_IT_OUTI );
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	f042 0203 	orr.w	r2, r2, #3
 8003e3a:	615a      	str	r2, [r3, #20]
    
    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);  
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	bd70      	pop	{r4, r5, r6, pc}
  }    
  else if ((hcryp->Init.HeaderSize) - (hcryp->CrypHeaderCount) >= 4U)
 8003e46:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e48:	b292      	uxth	r2, r2
 8003e4a:	1a8a      	subs	r2, r1, r2
 8003e4c:	2a03      	cmp	r2, #3
 8003e4e:	d808      	bhi.n	8003e62 <HAL_CRYP_IRQHandler+0x24e>
 8003e50:	2200      	movs	r2, #0
    hcryp->CrypHeaderCount++ ;           
  }
  else
  {      
    /*  Last block optionally pad the data with zeros*/
    for(loopcounter = 0U; loopcounter < (hcryp->Init.HeaderSize %4U ); loopcounter++)
 8003e52:	f001 0103 	and.w	r1, r1, #3
 8003e56:	428a      	cmp	r2, r1
 8003e58:	d329      	bcc.n	8003eae <HAL_CRYP_IRQHandler+0x29a>
      hcryp->CrypHeaderCount++ ;
    }
    while(loopcounter <4U )
    { 
      /* Pad the data with zeros to have a complete block */     
      hcryp->Instance->DIN = 0x0U;         
 8003e5a:	2100      	movs	r1, #0
    while(loopcounter <4U )
 8003e5c:	2a03      	cmp	r2, #3
 8003e5e:	d932      	bls.n	8003ec6 <HAL_CRYP_IRQHandler+0x2b2>
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
    hcryp->Instance->DIN = *(uint32_t*)(hcryp->Init.Header + hcryp->CrypHeaderCount );
 8003e62:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e64:	69a1      	ldr	r1, [r4, #24]
 8003e66:	b292      	uxth	r2, r2
 8003e68:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e6c:	609a      	str	r2, [r3, #8]
    hcryp->CrypHeaderCount++ ;       
 8003e6e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e70:	3201      	adds	r2, #1
 8003e72:	b292      	uxth	r2, r2
 8003e74:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hcryp->Instance->DIN = *(uint32_t*)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003e76:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e78:	b292      	uxth	r2, r2
 8003e7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e7e:	609a      	str	r2, [r3, #8]
    hcryp->CrypHeaderCount++  ;       
 8003e80:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e82:	3201      	adds	r2, #1
 8003e84:	b292      	uxth	r2, r2
 8003e86:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hcryp->Instance->DIN = *(uint32_t*)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003e88:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e90:	609a      	str	r2, [r3, #8]
    hcryp->CrypHeaderCount++ ;
 8003e92:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e94:	3201      	adds	r2, #1
 8003e96:	b292      	uxth	r2, r2
 8003e98:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hcryp->Instance->DIN = *(uint32_t*)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003e9a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e9c:	b292      	uxth	r2, r2
 8003e9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ea2:	609a      	str	r2, [r3, #8]
    hcryp->CrypHeaderCount++ ;           
 8003ea4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003eac:	bd70      	pop	{r4, r5, r6, pc}
      hcryp->Instance->DIN = *(uint32_t*)(hcryp->Init.Header+ hcryp->CrypHeaderCount);    
 8003eae:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    for(loopcounter = 0U; loopcounter < (hcryp->Init.HeaderSize %4U ); loopcounter++)
 8003eb0:	3201      	adds	r2, #1
      hcryp->Instance->DIN = *(uint32_t*)(hcryp->Init.Header+ hcryp->CrypHeaderCount);    
 8003eb2:	69a5      	ldr	r5, [r4, #24]
 8003eb4:	b280      	uxth	r0, r0
 8003eb6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8003eba:	6098      	str	r0, [r3, #8]
      hcryp->CrypHeaderCount++ ;
 8003ebc:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	b280      	uxth	r0, r0
 8003ec2:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8003ec4:	e7c7      	b.n	8003e56 <HAL_CRYP_IRQHandler+0x242>
      hcryp->Instance->DIN = 0x0U;         
 8003ec6:	6099      	str	r1, [r3, #8]
      loopcounter++;
 8003ec8:	3201      	adds	r2, #1
 8003eca:	e7c7      	b.n	8003e5c <HAL_CRYP_IRQHandler+0x248>
  if(hcryp->Size == 0U)
 8003ecc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8003ece:	b949      	cbnz	r1, 8003ee4 <HAL_CRYP_IRQHandler+0x2d0>
    __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_INI| CRYP_IT_OUTI);
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	f022 0203 	bic.w	r2, r2, #3
 8003ed6:	615a      	str	r2, [r3, #20]
    hcryp->State = HAL_CRYP_STATE_READY;      
 8003ed8:	2301      	movs	r3, #1
    __HAL_UNLOCK(hcryp);
 8003eda:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hcryp->State = HAL_CRYP_STATE_READY;      
 8003ede:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hcryp->Size) - (hcryp->CrypInCount) >= 4)
 8003ee4:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003ee6:	b280      	uxth	r0, r0
 8003ee8:	1a08      	subs	r0, r1, r0
 8003eea:	2803      	cmp	r0, #3
 8003eec:	dd37      	ble.n	8003f5e <HAL_CRYP_IRQHandler+0x34a>
    hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003eee:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003ef0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ef2:	b292      	uxth	r2, r2
 8003ef4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003ef8:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++;
 8003efa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003efc:	3201      	adds	r2, #1
 8003efe:	b292      	uxth	r2, r2
 8003f00:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003f02:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003f04:	b292      	uxth	r2, r2
 8003f06:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003f0a:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++;   
 8003f0c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003f0e:	3201      	adds	r2, #1
 8003f10:	b292      	uxth	r2, r2
 8003f12:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003f14:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003f16:	b292      	uxth	r2, r2
 8003f18:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003f1c:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++;
 8003f1e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003f20:	3201      	adds	r2, #1
 8003f22:	b292      	uxth	r2, r2
 8003f24:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003f26:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003f2e:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++; 
 8003f30:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003f32:	3201      	adds	r2, #1
 8003f34:	b292      	uxth	r2, r2
 8003f36:	85e2      	strh	r2, [r4, #46]	; 0x2e
    if(hcryp->Size == hcryp->CrypInCount) 
 8003f38:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	4291      	cmp	r1, r2
 8003f3e:	d106      	bne.n	8003f4e <HAL_CRYP_IRQHandler+0x33a>
      __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_INI);
 8003f40:	695a      	ldr	r2, [r3, #20]
      HAL_CRYP_InCpltCallback(hcryp);
 8003f42:	4620      	mov	r0, r4
      __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_INI);
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	615a      	str	r2, [r3, #20]
      HAL_CRYP_InCpltCallback(hcryp);
 8003f4a:	f7ff fe61 	bl	8003c10 <HAL_CRYP_InCpltCallback>
    if(hcryp->CrypOutCount < hcryp->Size)        
 8003f4e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8003f50:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	428b      	cmp	r3, r1
 8003f56:	f4bf aec6 	bcs.w	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
      temp  = hcryp->Instance->DOUT;
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	e70e      	b.n	8003d7c <HAL_CRYP_IRQHandler+0x168>
  else if ((hcryp->Size %4U )!= 0U)
 8003f5e:	f011 0503 	ands.w	r5, r1, #3
 8003f62:	f43f aec0 	beq.w	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
    for(loopcounter = 0U; loopcounter < (hcryp->Size %4 ); loopcounter++)
 8003f66:	42aa      	cmp	r2, r5
 8003f68:	4628      	mov	r0, r5
 8003f6a:	d318      	bcc.n	8003f9e <HAL_CRYP_IRQHandler+0x38a>
      hcryp->Instance->DIN = 0x0U;         
 8003f6c:	2200      	movs	r2, #0
      loopcounter++;
 8003f6e:	3001      	adds	r0, #1
      hcryp->Instance->DIN = 0x0U;         
 8003f70:	609a      	str	r2, [r3, #8]
    while(loopcounter < 4U )
 8003f72:	2804      	cmp	r0, #4
 8003f74:	d1fb      	bne.n	8003f6e <HAL_CRYP_IRQHandler+0x35a>
    __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_INI);
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	615a      	str	r2, [r3, #20]
    if((hcryp->Instance->SR & CRYP_FLAG_OFNE ) != RESET) 
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	0752      	lsls	r2, r2, #29
 8003f82:	d418      	bmi.n	8003fb6 <HAL_CRYP_IRQHandler+0x3a2>
    if(hcryp->CrypOutCount >=  hcryp->Size)
 8003f84:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003f86:	b292      	uxth	r2, r2
 8003f88:	4291      	cmp	r1, r2
 8003f8a:	f63f aeac 	bhi.w	8003ce6 <HAL_CRYP_IRQHandler+0xd2>
      __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_OUTI|CRYP_IT_INI);
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	f022 0203 	bic.w	r2, r2, #3
 8003f94:	615a      	str	r2, [r3, #20]
      hcryp->State = HAL_CRYP_STATE_READY;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003f9c:	e722      	b.n	8003de4 <HAL_CRYP_IRQHandler+0x1d0>
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003f9e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    for(loopcounter = 0U; loopcounter < (hcryp->Size %4 ); loopcounter++)
 8003fa0:	3201      	adds	r2, #1
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount );
 8003fa2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003fa4:	b280      	uxth	r0, r0
 8003fa6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8003faa:	6098      	str	r0, [r3, #8]
      hcryp->CrypInCount++;
 8003fac:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003fae:	3001      	adds	r0, #1
 8003fb0:	b280      	uxth	r0, r0
 8003fb2:	85e0      	strh	r0, [r4, #46]	; 0x2e
 8003fb4:	e7d7      	b.n	8003f66 <HAL_CRYP_IRQHandler+0x352>
        *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount))=temp; 
 8003fb6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        temp= hcryp->Instance->DOUT; 
 8003fb8:	68de      	ldr	r6, [r3, #12]
      for(loopcounter = 0U; loopcounter < 4U; loopcounter++)        
 8003fba:	3801      	subs	r0, #1
        *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount))=temp; 
 8003fbc:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
        hcryp->CrypOutCount++;   
 8003fc4:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003fc6:	f102 0201 	add.w	r2, r2, #1
 8003fca:	b292      	uxth	r2, r2
 8003fcc:	8622      	strh	r2, [r4, #48]	; 0x30
      for(loopcounter = 0U; loopcounter < 4U; loopcounter++)        
 8003fce:	d1f3      	bne.n	8003fb8 <HAL_CRYP_IRQHandler+0x3a4>
 8003fd0:	e7d8      	b.n	8003f84 <HAL_CRYP_IRQHandler+0x370>
	...

08003fd4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fd4:	6803      	ldr	r3, [r0, #0]
 8003fd6:	2118      	movs	r1, #24
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fde:	3a10      	subs	r2, #16
 8003fe0:	f023 0303 	bic.w	r3, r3, #3
 8003fe4:	fbb2 f2f1 	udiv	r2, r2, r1

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fe8:	4904      	ldr	r1, [pc, #16]	; (8003ffc <DMA_CalcBaseAndBitshift+0x28>)

  if (stream_number > 3U)
 8003fea:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fec:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fee:	bf88      	it	hi
 8003ff0:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ff2:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ff4:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8003ff6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	0801374a 	.word	0x0801374a

08004000 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = 0U;
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 8004000:	6801      	ldr	r1, [r0, #0]

  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004004:	440b      	add	r3, r1
 8004006:	2b8c      	cmp	r3, #140	; 0x8c
 8004008:	b2cb      	uxtb	r3, r1
 800400a:	d810      	bhi.n	800402e <DMA_CalcDMAMUXChannelBaseAndMask+0x2e>
     (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
  {
    /*BDMA Channels are connected to DMAMUX2 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800400c:	2214      	movs	r2, #20
 800400e:	3b08      	subs	r3, #8
 8004010:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004014:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8004018:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004020:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
     (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004022:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 8004024:	2201      	movs	r2, #1
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	6683      	str	r3, [r0, #104]	; 0x68
 800402c:	4770      	bx	lr
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800402e:	2218      	movs	r2, #24
 8004030:	3b10      	subs	r3, #16
 8004032:	fbb3 f3f2 	udiv	r3, r3, r2
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004036:	4a08      	ldr	r2, [pc, #32]	; (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004038:	440a      	add	r2, r1
 800403a:	2aa8      	cmp	r2, #168	; 0xa8
      stream_number += 8U;
 800403c:	bf98      	it	ls
 800403e:	3308      	addls	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004040:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8004044:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 8004048:	0092      	lsls	r2, r2, #2
 800404a:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800404c:	4a03      	ldr	r2, [pc, #12]	; (800405c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800404e:	e7e8      	b.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x22>
 8004050:	a7fdabf8 	.word	0xa7fdabf8
 8004054:	58025880 	.word	0x58025880
 8004058:	bffdfbf0 	.word	0xbffdfbf0
 800405c:	40020880 	.word	0x40020880

08004060 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004060:	7902      	ldrb	r2, [r0, #4]
{
 8004062:	b510      	push	{r4, lr}

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004064:	1e54      	subs	r4, r2, #1
 8004066:	2c07      	cmp	r4, #7
 8004068:	d80d      	bhi.n	8004086 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x26>
  {
    if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 800406a:	6803      	ldr	r3, [r0, #0]
 800406c:	4909      	ldr	r1, [pc, #36]	; (8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x34>)
 800406e:	4419      	add	r1, r3
 8004070:	298c      	cmp	r1, #140	; 0x8c
 8004072:	d809      	bhi.n	8004088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>
      (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
    {
      /*BDMA Channels are connected to DMAMUX2 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x38>)
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800407c:	4b07      	ldr	r3, [pc, #28]	; (800409c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x3c>)
    else
    {
      /*DMA1 and DMA2 Streams use DMAMUX1 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800407e:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1U << (request - 1U);
 8004080:	2301      	movs	r3, #1
 8004082:	40a3      	lsls	r3, r4
 8004084:	6743      	str	r3, [r0, #116]	; 0x74
 8004086:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004092:	e7f4      	b.n	800407e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x1e>
 8004094:	a7fdabf8 	.word	0xa7fdabf8
 8004098:	1600963f 	.word	0x1600963f
 800409c:	58025940 	.word	0x58025940
 80040a0:	1000823f 	.word	0x1000823f
 80040a4:	40020940 	.word	0x40020940

080040a8 <HAL_DMA_Init>:
{
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7ff fc4e 	bl	800394c <HAL_GetTick>
 80040b0:	4605      	mov	r5, r0
  if(hdma == NULL)
 80040b2:	2c00      	cmp	r4, #0
 80040b4:	f000 8131 	beq.w	800431a <HAL_DMA_Init+0x272>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	4aa8      	ldr	r2, [pc, #672]	; (800435c <HAL_DMA_Init+0x2b4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d049      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040c0:	3218      	adds	r2, #24
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d046      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040c6:	3218      	adds	r2, #24
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d043      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040cc:	3218      	adds	r2, #24
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d040      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040d2:	3218      	adds	r2, #24
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d03d      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040d8:	3218      	adds	r2, #24
 80040da:	4293      	cmp	r3, r2
 80040dc:	d03a      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040de:	3218      	adds	r2, #24
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d037      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040e4:	3218      	adds	r2, #24
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d034      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040ea:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d030      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040f2:	3218      	adds	r2, #24
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d02d      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040f8:	3218      	adds	r2, #24
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d02a      	beq.n	8004154 <HAL_DMA_Init+0xac>
 80040fe:	3218      	adds	r2, #24
 8004100:	4293      	cmp	r3, r2
 8004102:	d027      	beq.n	8004154 <HAL_DMA_Init+0xac>
 8004104:	3218      	adds	r2, #24
 8004106:	4293      	cmp	r3, r2
 8004108:	d024      	beq.n	8004154 <HAL_DMA_Init+0xac>
 800410a:	3218      	adds	r2, #24
 800410c:	4293      	cmp	r3, r2
 800410e:	d021      	beq.n	8004154 <HAL_DMA_Init+0xac>
 8004110:	3218      	adds	r2, #24
 8004112:	4293      	cmp	r3, r2
 8004114:	d01e      	beq.n	8004154 <HAL_DMA_Init+0xac>
 8004116:	3218      	adds	r2, #24
 8004118:	4293      	cmp	r3, r2
 800411a:	d01b      	beq.n	8004154 <HAL_DMA_Init+0xac>
 800411c:	4a90      	ldr	r2, [pc, #576]	; (8004360 <HAL_DMA_Init+0x2b8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d018      	beq.n	8004154 <HAL_DMA_Init+0xac>
 8004122:	3214      	adds	r2, #20
 8004124:	4293      	cmp	r3, r2
 8004126:	d015      	beq.n	8004154 <HAL_DMA_Init+0xac>
 8004128:	3214      	adds	r2, #20
 800412a:	4293      	cmp	r3, r2
 800412c:	d012      	beq.n	8004154 <HAL_DMA_Init+0xac>
 800412e:	3214      	adds	r2, #20
 8004130:	4293      	cmp	r3, r2
 8004132:	d00f      	beq.n	8004154 <HAL_DMA_Init+0xac>
 8004134:	3214      	adds	r2, #20
 8004136:	4293      	cmp	r3, r2
 8004138:	d00c      	beq.n	8004154 <HAL_DMA_Init+0xac>
 800413a:	3214      	adds	r2, #20
 800413c:	4293      	cmp	r3, r2
 800413e:	d009      	beq.n	8004154 <HAL_DMA_Init+0xac>
 8004140:	3214      	adds	r2, #20
 8004142:	4293      	cmp	r3, r2
 8004144:	d006      	beq.n	8004154 <HAL_DMA_Init+0xac>
 8004146:	3214      	adds	r2, #20
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <HAL_DMA_Init+0xac>
 800414c:	21de      	movs	r1, #222	; 0xde
 800414e:	4885      	ldr	r0, [pc, #532]	; (8004364 <HAL_DMA_Init+0x2bc>)
 8004150:	f7fd fff3 	bl	800213a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004154:	68a3      	ldr	r3, [r4, #8]
 8004156:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800415a:	d005      	beq.n	8004168 <HAL_DMA_Init+0xc0>
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d003      	beq.n	8004168 <HAL_DMA_Init+0xc0>
 8004160:	21df      	movs	r1, #223	; 0xdf
 8004162:	4880      	ldr	r0, [pc, #512]	; (8004364 <HAL_DMA_Init+0x2bc>)
 8004164:	f7fd ffe9 	bl	800213a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004168:	68e3      	ldr	r3, [r4, #12]
 800416a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800416e:	d003      	beq.n	8004178 <HAL_DMA_Init+0xd0>
 8004170:	21e0      	movs	r1, #224	; 0xe0
 8004172:	487c      	ldr	r0, [pc, #496]	; (8004364 <HAL_DMA_Init+0x2bc>)
 8004174:	f7fd ffe1 	bl	800213a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004178:	6923      	ldr	r3, [r4, #16]
 800417a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800417e:	d003      	beq.n	8004188 <HAL_DMA_Init+0xe0>
 8004180:	21e1      	movs	r1, #225	; 0xe1
 8004182:	4878      	ldr	r0, [pc, #480]	; (8004364 <HAL_DMA_Init+0x2bc>)
 8004184:	f7fd ffd9 	bl	800213a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004188:	6963      	ldr	r3, [r4, #20]
 800418a:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800418e:	d006      	beq.n	800419e <HAL_DMA_Init+0xf6>
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d003      	beq.n	800419e <HAL_DMA_Init+0xf6>
 8004196:	21e2      	movs	r1, #226	; 0xe2
 8004198:	4872      	ldr	r0, [pc, #456]	; (8004364 <HAL_DMA_Init+0x2bc>)
 800419a:	f7fd ffce 	bl	800213a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800419e:	69a3      	ldr	r3, [r4, #24]
 80041a0:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 80041a4:	d006      	beq.n	80041b4 <HAL_DMA_Init+0x10c>
 80041a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041aa:	d003      	beq.n	80041b4 <HAL_DMA_Init+0x10c>
 80041ac:	21e3      	movs	r1, #227	; 0xe3
 80041ae:	486d      	ldr	r0, [pc, #436]	; (8004364 <HAL_DMA_Init+0x2bc>)
 80041b0:	f7fd ffc3 	bl	800213a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80041b4:	69e3      	ldr	r3, [r4, #28]
 80041b6:	f033 0220 	bics.w	r2, r3, #32
 80041ba:	d006      	beq.n	80041ca <HAL_DMA_Init+0x122>
 80041bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c0:	d003      	beq.n	80041ca <HAL_DMA_Init+0x122>
 80041c2:	21e4      	movs	r1, #228	; 0xe4
 80041c4:	4867      	ldr	r0, [pc, #412]	; (8004364 <HAL_DMA_Init+0x2bc>)
 80041c6:	f7fd ffb8 	bl	800213a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80041ca:	6a23      	ldr	r3, [r4, #32]
 80041cc:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80041d0:	d003      	beq.n	80041da <HAL_DMA_Init+0x132>
 80041d2:	21e5      	movs	r1, #229	; 0xe5
 80041d4:	4863      	ldr	r0, [pc, #396]	; (8004364 <HAL_DMA_Init+0x2bc>)
 80041d6:	f7fd ffb0 	bl	800213a <assert_failed>
  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream , D2 domain*/
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	4e62      	ldr	r6, [pc, #392]	; (8004368 <HAL_DMA_Init+0x2c0>)
 80041de:	1999      	adds	r1, r3, r6
 80041e0:	f5b1 6f95 	cmp.w	r1, #1192	; 0x4a8
 80041e4:	f200 80c4 	bhi.w	8004370 <HAL_DMA_Init+0x2c8>
    assert_param(IS_DMA_D2_REQUEST(hdma->Init.Request));
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	2b73      	cmp	r3, #115	; 0x73
 80041ec:	d903      	bls.n	80041f6 <HAL_DMA_Init+0x14e>
 80041ee:	21ea      	movs	r1, #234	; 0xea
 80041f0:	485c      	ldr	r0, [pc, #368]	; (8004364 <HAL_DMA_Init+0x2bc>)
 80041f2:	f7fd ffa2 	bl	800213a <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80041f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041f8:	f033 0304 	bics.w	r3, r3, #4
 80041fc:	d003      	beq.n	8004206 <HAL_DMA_Init+0x15e>
 80041fe:	21eb      	movs	r1, #235	; 0xeb
 8004200:	4858      	ldr	r0, [pc, #352]	; (8004364 <HAL_DMA_Init+0x2bc>)
 8004202:	f7fd ff9a 	bl	800213a <assert_failed>
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004208:	b1b3      	cbz	r3, 8004238 <HAL_DMA_Init+0x190>
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800420a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800420c:	2b03      	cmp	r3, #3
 800420e:	d903      	bls.n	8004218 <HAL_DMA_Init+0x170>
 8004210:	21f0      	movs	r1, #240	; 0xf0
 8004212:	4854      	ldr	r0, [pc, #336]	; (8004364 <HAL_DMA_Init+0x2bc>)
 8004214:	f7fd ff91 	bl	800213a <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004218:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800421a:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800421e:	d003      	beq.n	8004228 <HAL_DMA_Init+0x180>
 8004220:	21f1      	movs	r1, #241	; 0xf1
 8004222:	4850      	ldr	r0, [pc, #320]	; (8004364 <HAL_DMA_Init+0x2bc>)
 8004224:	f7fd ff89 	bl	800213a <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004228:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800422a:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800422e:	d003      	beq.n	8004238 <HAL_DMA_Init+0x190>
 8004230:	21f2      	movs	r1, #242	; 0xf2
 8004232:	484c      	ldr	r0, [pc, #304]	; (8004364 <HAL_DMA_Init+0x2bc>)
 8004234:	f7fd ff81 	bl	800213a <assert_failed>
    __HAL_UNLOCK(hdma);
 8004238:	2300      	movs	r3, #0
 800423a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 800424e:	6821      	ldr	r1, [r4, #0]
 8004250:	680b      	ldr	r3, [r1, #0]
 8004252:	07d8      	lsls	r0, r3, #31
 8004254:	d457      	bmi.n	8004306 <HAL_DMA_Init+0x25e>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004256:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004258:	4d44      	ldr	r5, [pc, #272]	; (800436c <HAL_DMA_Init+0x2c4>)
    registerValue |=  hdma->Init.Direction           |
 800425a:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800425c:	401d      	ands	r5, r3
    registerValue |=  hdma->Init.Direction           |
 800425e:	68e3      	ldr	r3, [r4, #12]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004260:	69a0      	ldr	r0, [r4, #24]
    registerValue |=  hdma->Init.Direction           |
 8004262:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004264:	6922      	ldr	r2, [r4, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	6962      	ldr	r2, [r4, #20]
 800426a:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800426c:	69e2      	ldr	r2, [r4, #28]
 800426e:	4303      	orrs	r3, r0
 8004270:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8004272:	6a22      	ldr	r2, [r4, #32]
 8004274:	4313      	orrs	r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004276:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004278:	2a04      	cmp	r2, #4
    registerValue |=  hdma->Init.Direction           |
 800427a:	ea43 0305 	orr.w	r3, r3, r5
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800427e:	bf01      	itttt	eq
 8004280:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8004282:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8004284:	4335      	orreq	r5, r6
 8004286:	432b      	orreq	r3, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004288:	2a04      	cmp	r2, #4
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800428a:	600b      	str	r3, [r1, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800428c:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800428e:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004292:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004296:	d10c      	bne.n	80042b2 <HAL_DMA_Init+0x20a>
      registerValue |= hdma->Init.FIFOThreshold;
 8004298:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800429a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800429c:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800429e:	b145      	cbz	r5, 80042b2 <HAL_DMA_Init+0x20a>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d13c      	bne.n	800431e <HAL_DMA_Init+0x276>
    switch (hdma->Init.FIFOThreshold)
 80042a4:	2a01      	cmp	r2, #1
 80042a6:	d04b      	beq.n	8004340 <HAL_DMA_Init+0x298>
 80042a8:	d301      	bcc.n	80042ae <HAL_DMA_Init+0x206>
 80042aa:	2a02      	cmp	r2, #2
    switch (hdma->Init.FIFOThreshold)
 80042ac:	d101      	bne.n	80042b2 <HAL_DMA_Init+0x20a>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ae:	01ea      	lsls	r2, r5, #7
 80042b0:	d449      	bmi.n	8004346 <HAL_DMA_Init+0x29e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042b2:	614b      	str	r3, [r1, #20]
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff fe8d 	bl	8003fd4 <DMA_CalcBaseAndBitshift>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80042bc:	233f      	movs	r3, #63	; 0x3f
 80042be:	4093      	lsls	r3, r2
 80042c0:	6083      	str	r3, [r0, #8]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042c2:	4620      	mov	r0, r4
 80042c4:	2500      	movs	r5, #0
 80042c6:	f7ff fe9b 	bl	8004000 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042ca:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042ce:	2b80      	cmp	r3, #128	; 0x80
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042d0:	bf04      	itt	eq
 80042d2:	2300      	moveq	r3, #0
 80042d4:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042d6:	6863      	ldr	r3, [r4, #4]
 80042d8:	b2d9      	uxtb	r1, r3
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042da:	3b01      	subs	r3, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042dc:	6011      	str	r1, [r2, #0]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042de:	2b07      	cmp	r3, #7
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042e2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80042e4:	6051      	str	r1, [r2, #4]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042e6:	f200 8084 	bhi.w	80043f2 <HAL_DMA_Init+0x34a>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7ff feb8 	bl	8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask>
     hdma->DMAmuxRequestGen->RGCR = 0U;
 80042f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042f2:	6f62      	ldr	r2, [r4, #116]	; 0x74
     hdma->DMAmuxRequestGen->RGCR = 0U;
 80042f4:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80042f8:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042fa:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80042fc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042fe:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004300:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004304:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004306:	f7ff fb21 	bl	800394c <HAL_GetTick>
 800430a:	1b40      	subs	r0, r0, r5
 800430c:	2805      	cmp	r0, #5
 800430e:	d99e      	bls.n	800424e <HAL_DMA_Init+0x1a6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004310:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004312:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004314:	2303      	movs	r3, #3
 8004316:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 800431a:	2001      	movs	r0, #1
 800431c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800431e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004322:	d116      	bne.n	8004352 <HAL_DMA_Init+0x2aa>
    switch (hdma->Init.FIFOThreshold)
 8004324:	2a03      	cmp	r2, #3
 8004326:	d8c4      	bhi.n	80042b2 <HAL_DMA_Init+0x20a>
 8004328:	a001      	add	r0, pc, #4	; (adr r0, 8004330 <HAL_DMA_Init+0x288>)
 800432a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004347 	.word	0x08004347
 8004334:	080042af 	.word	0x080042af
 8004338:	08004347 	.word	0x08004347
 800433c:	08004341 	.word	0x08004341
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004340:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004344:	d1b5      	bne.n	80042b2 <HAL_DMA_Init+0x20a>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004346:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8004348:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800434a:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800434c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004350:	bd70      	pop	{r4, r5, r6, pc}
    switch (hdma->Init.FIFOThreshold)
 8004352:	2a02      	cmp	r2, #2
 8004354:	d9f7      	bls.n	8004346 <HAL_DMA_Init+0x29e>
 8004356:	2a03      	cmp	r2, #3
 8004358:	e7a8      	b.n	80042ac <HAL_DMA_Init+0x204>
 800435a:	bf00      	nop
 800435c:	40020010 	.word	0x40020010
 8004360:	58025408 	.word	0x58025408
 8004364:	0801370c 	.word	0x0801370c
 8004368:	bffdfff0 	.word	0xbffdfff0
 800436c:	fe10803f 	.word	0xfe10803f
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET) /*<BDMA channel , D3 domain*/
 8004370:	4d22      	ldr	r5, [pc, #136]	; (80043fc <HAL_DMA_Init+0x354>)
 8004372:	442b      	add	r3, r5
 8004374:	2b8c      	cmp	r3, #140	; 0x8c
 8004376:	d83a      	bhi.n	80043ee <HAL_DMA_Init+0x346>
    assert_param(IS_BDMA_D3_REQUEST(hdma->Init.Request));
 8004378:	6863      	ldr	r3, [r4, #4]
 800437a:	2b11      	cmp	r3, #17
 800437c:	d904      	bls.n	8004388 <HAL_DMA_Init+0x2e0>
 800437e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8004382:	481f      	ldr	r0, [pc, #124]	; (8004400 <HAL_DMA_Init+0x358>)
 8004384:	f7fd fed9 	bl	800213a <assert_failed>
    __HAL_UNLOCK(hdma);
 8004388:	2300      	movs	r3, #0
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800438a:	6822      	ldr	r2, [r4, #0]
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800438c:	68a1      	ldr	r1, [r4, #8]
    __HAL_UNLOCK(hdma);
 800438e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8004392:	2302      	movs	r3, #2
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8004394:	2940      	cmp	r1, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8004396:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800439a:	6816      	ldr	r6, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 800439c:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 80043a0:	f026 0670 	bic.w	r6, r6, #112	; 0x70
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 80043a4:	d021      	beq.n	80043ea <HAL_DMA_Init+0x342>
 80043a6:	2980      	cmp	r1, #128	; 0x80
 80043a8:	bf14      	ite	ne
 80043aa:	2000      	movne	r0, #0
 80043ac:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043b0:	6923      	ldr	r3, [r4, #16]
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043b2:	4415      	add	r5, r2
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043b4:	68e1      	ldr	r1, [r4, #12]
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043b6:	08db      	lsrs	r3, r3, #3
 80043b8:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043bc:	6961      	ldr	r1, [r4, #20]
 80043be:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043c2:	69a1      	ldr	r1, [r4, #24]
 80043c4:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
                      D2_TO_D3_DMA_PRIORITY(hdma->Init.Priority);
 80043c8:	6a21      	ldr	r1, [r4, #32]
 80043ca:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 80043ce:	69e1      	ldr	r1, [r4, #28]
 80043d0:	08c9      	lsrs	r1, r1, #3
 80043d2:	4333      	orrs	r3, r6
 80043d4:	f001 0120 	and.w	r1, r1, #32
 80043d8:	430b      	orrs	r3, r1
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 80043da:	4303      	orrs	r3, r0
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80043dc:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043de:	2214      	movs	r2, #20
 80043e0:	fbb5 f5f2 	udiv	r5, r5, r2
 80043e4:	00ad      	lsls	r5, r5, #2
 80043e6:	65e5      	str	r5, [r4, #92]	; 0x5c
 80043e8:	e76b      	b.n	80042c2 <HAL_DMA_Init+0x21a>
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 80043ea:	2010      	movs	r0, #16
 80043ec:	e7e0      	b.n	80043b0 <HAL_DMA_Init+0x308>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	e78f      	b.n	8004312 <HAL_DMA_Init+0x26a>
    hdma->DMAmuxRequestGen = 0U;
 80043f2:	66e5      	str	r5, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80043f4:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043f6:	6765      	str	r5, [r4, #116]	; 0x74
 80043f8:	e77f      	b.n	80042fa <HAL_DMA_Init+0x252>
 80043fa:	bf00      	nop
 80043fc:	a7fdabf8 	.word	0xa7fdabf8
 8004400:	0801370c 	.word	0x0801370c

08004404 <HAL_DMA_Abort_IT>:
{
 8004404:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8004406:	b128      	cbz	r0, 8004414 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004408:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800440c:	2b02      	cmp	r3, #2
 800440e:	d003      	beq.n	8004418 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004414:	2001      	movs	r0, #1
 8004416:	bd10      	pop	{r4, pc}
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8004418:	6803      	ldr	r3, [r0, #0]
 800441a:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <HAL_DMA_Abort_IT+0x84>)
 800441c:	441a      	add	r2, r3
 800441e:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8004422:	d808      	bhi.n	8004436 <HAL_DMA_Abort_IT+0x32>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004424:	2204      	movs	r2, #4
 8004426:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004432:	2000      	movs	r0, #0
 8004434:	bd10      	pop	{r4, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	f022 020e 	bic.w	r2, r2, #14
 800443c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004446:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004448:	6813      	ldr	r3, [r2, #0]
 800444a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8004450:	2301      	movs	r3, #1
 8004452:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004454:	4093      	lsls	r3, r2
 8004456:	4a0d      	ldr	r2, [pc, #52]	; (800448c <HAL_DMA_Abort_IT+0x88>)
 8004458:	6053      	str	r3, [r2, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800445a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800445c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800445e:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8004460:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004462:	b133      	cbz	r3, 8004472 <HAL_DMA_Abort_IT+0x6e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800446a:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800446c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800446e:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8004470:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8004472:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8004474:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8004476:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800447a:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800447c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0d6      	beq.n	8004432 <HAL_DMA_Abort_IT+0x2e>
        hdma->XferAbortCallback(hdma);
 8004484:	4798      	blx	r3
 8004486:	e7d4      	b.n	8004432 <HAL_DMA_Abort_IT+0x2e>
 8004488:	bffdfff0 	.word	0xbffdfff0
 800448c:	58025400 	.word	0x58025400

08004490 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8004490:	2300      	movs	r3, #0
{
 8004492:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8004496:	4d92      	ldr	r5, [pc, #584]	; (80046e0 <HAL_DMA_IRQHandler+0x250>)
{
 8004498:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800449a:	9301      	str	r3, [sp, #4]
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 800449c:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800449e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 80044a0:	195a      	adds	r2, r3, r5
  tmpisr = regs->ISR;
 80044a2:	f8d6 8000 	ldr.w	r8, [r6]
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 80044a6:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 80044aa:	f200 80c0 	bhi.w	800462e <HAL_DMA_IRQHandler+0x19e>
  uint32_t timeout = SystemCoreClock / 9600U;
 80044ae:	4a8d      	ldr	r2, [pc, #564]	; (80046e4 <HAL_DMA_IRQHandler+0x254>)
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044b0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600U;
 80044b2:	6817      	ldr	r7, [r2, #0]
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044b4:	2208      	movs	r2, #8
 80044b6:	408a      	lsls	r2, r1
 80044b8:	ea18 0f02 	tst.w	r8, r2
 80044bc:	d00b      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x46>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	0740      	lsls	r0, r0, #29
 80044c2:	d508      	bpl.n	80044d6 <HAL_DMA_IRQHandler+0x46>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	f020 0004 	bic.w	r0, r0, #4
 80044ca:	6018      	str	r0, [r3, #0]
        regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044cc:	60b2      	str	r2, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044d6:	4a84      	ldr	r2, [pc, #528]	; (80046e8 <HAL_DMA_IRQHandler+0x258>)
 80044d8:	408a      	lsls	r2, r1
 80044da:	ea18 0f02 	tst.w	r8, r2
 80044de:	d007      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x60>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044e0:	6958      	ldr	r0, [r3, #20]
 80044e2:	0600      	lsls	r0, r0, #24
 80044e4:	d504      	bpl.n	80044f0 <HAL_DMA_IRQHandler+0x60>
        regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044e6:	60b2      	str	r2, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044ea:	f042 0202 	orr.w	r2, r2, #2
 80044ee:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044f0:	4a7e      	ldr	r2, [pc, #504]	; (80046ec <HAL_DMA_IRQHandler+0x25c>)
 80044f2:	408a      	lsls	r2, r1
 80044f4:	ea18 0f02 	tst.w	r8, r2
 80044f8:	d007      	beq.n	800450a <HAL_DMA_IRQHandler+0x7a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	0780      	lsls	r0, r0, #30
 80044fe:	d504      	bpl.n	800450a <HAL_DMA_IRQHandler+0x7a>
        regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004500:	60b2      	str	r2, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004502:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004504:	f042 0204 	orr.w	r2, r2, #4
 8004508:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800450a:	2210      	movs	r2, #16
 800450c:	408a      	lsls	r2, r1
 800450e:	ea18 0f02 	tst.w	r8, r2
 8004512:	d00f      	beq.n	8004534 <HAL_DMA_IRQHandler+0xa4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004514:	6819      	ldr	r1, [r3, #0]
 8004516:	0709      	lsls	r1, r1, #28
 8004518:	d50c      	bpl.n	8004534 <HAL_DMA_IRQHandler+0xa4>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800451a:	60b2      	str	r2, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	0350      	lsls	r0, r2, #13
 8004520:	d53f      	bpl.n	80045a2 <HAL_DMA_IRQHandler+0x112>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	0319      	lsls	r1, r3, #12
 8004526:	d401      	bmi.n	800452c <HAL_DMA_IRQHandler+0x9c>
          if(hdma->XferHalfCpltCallback != NULL)
 8004528:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800452a:	e000      	b.n	800452e <HAL_DMA_IRQHandler+0x9e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800452c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 800452e:	b10b      	cbz	r3, 8004534 <HAL_DMA_IRQHandler+0xa4>
            hdma->XferHalfCpltCallback(hdma);
 8004530:	4620      	mov	r0, r4
 8004532:	4798      	blx	r3
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004534:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004536:	2120      	movs	r1, #32
 8004538:	4081      	lsls	r1, r0
 800453a:	ea18 0f01 	tst.w	r8, r1
 800453e:	d041      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x134>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	195a      	adds	r2, r3, r5
 8004544:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	bf94      	ite	ls
 800454c:	f3c2 1200 	ubfxls	r2, r2, #4, #1
 8004550:	f3c2 0240 	ubfxhi	r2, r2, #1, #1
 8004554:	2a00      	cmp	r2, #0
 8004556:	d035      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x134>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004558:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800455a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800455e:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004560:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004562:	d126      	bne.n	80045b2 <HAL_DMA_IRQHandler+0x122>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004564:	f022 0216 	bic.w	r2, r2, #22
 8004568:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800456a:	695a      	ldr	r2, [r3, #20]
 800456c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004570:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004572:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004574:	b90a      	cbnz	r2, 800457a <HAL_DMA_IRQHandler+0xea>
 8004576:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004578:	b11a      	cbz	r2, 8004582 <HAL_DMA_IRQHandler+0xf2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f022 0208 	bic.w	r2, r2, #8
 8004580:	601a      	str	r2, [r3, #0]
          regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004582:	233f      	movs	r3, #63	; 0x3f
 8004584:	4083      	lsls	r3, r0
 8004586:	60b3      	str	r3, [r6, #8]
          __HAL_UNLOCK(hdma);
 8004588:	2300      	movs	r3, #0
 800458a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800458e:	2301      	movs	r3, #1
 8004590:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8004594:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8004596:	b10b      	cbz	r3, 800459c <HAL_DMA_IRQHandler+0x10c>
        hdma->XferErrorCallback(hdma);
 8004598:	4620      	mov	r0, r4
 800459a:	4798      	blx	r3
}
 800459c:	b002      	add	sp, #8
 800459e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	05d2      	lsls	r2, r2, #23
 80045a6:	d4bf      	bmi.n	8004528 <HAL_DMA_IRQHandler+0x98>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f022 0208 	bic.w	r2, r2, #8
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	e7ba      	b.n	8004528 <HAL_DMA_IRQHandler+0x98>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045b2:	0356      	lsls	r6, r2, #13
 80045b4:	d52c      	bpl.n	8004610 <HAL_DMA_IRQHandler+0x180>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0318      	lsls	r0, r3, #12
 80045ba:	d436      	bmi.n	800462a <HAL_DMA_IRQHandler+0x19a>
            if(hdma->XferM1CpltCallback != NULL)
 80045bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 80045be:	b10b      	cbz	r3, 80045c4 <HAL_DMA_IRQHandler+0x134>
            hdma->XferCpltCallback(hdma);
 80045c0:	4620      	mov	r0, r4
 80045c2:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0e8      	beq.n	800459c <HAL_DMA_IRQHandler+0x10c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045cc:	07d9      	lsls	r1, r3, #31
 80045ce:	d51d      	bpl.n	800460c <HAL_DMA_IRQHandler+0x17c>
        hdma->State = HAL_DMA_STATE_ABORT;
 80045d0:	2304      	movs	r3, #4
 80045d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80045e4:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 80045e8:	9a01      	ldr	r2, [sp, #4]
 80045ea:	3201      	adds	r2, #1
 80045ec:	4297      	cmp	r7, r2
 80045ee:	9201      	str	r2, [sp, #4]
 80045f0:	d302      	bcc.n	80045f8 <HAL_DMA_IRQHandler+0x168>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET);
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	07d2      	lsls	r2, r2, #31
 80045f6:	d4f7      	bmi.n	80045e8 <HAL_DMA_IRQHandler+0x158>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 80045f8:	681b      	ldr	r3, [r3, #0]
        __HAL_UNLOCK(hdma);
 80045fa:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 80045fc:	07de      	lsls	r6, r3, #31
        __HAL_UNLOCK(hdma);
 80045fe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 8004602:	bf4c      	ite	mi
 8004604:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8004606:	2301      	movpl	r3, #1
 8004608:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800460c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800460e:	e7c2      	b.n	8004596 <HAL_DMA_IRQHandler+0x106>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004616:	d108      	bne.n	800462a <HAL_DMA_IRQHandler+0x19a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	f021 0110 	bic.w	r1, r1, #16
 800461e:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004620:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8004622:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8004626:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 800462a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800462c:	e7c7      	b.n	80045be <HAL_DMA_IRQHandler+0x12e>
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET)  /*D3 domain BDMA */
 800462e:	4a30      	ldr	r2, [pc, #192]	; (80046f0 <HAL_DMA_IRQHandler+0x260>)
 8004630:	441a      	add	r2, r3
 8004632:	2a8c      	cmp	r2, #140	; 0x8c
 8004634:	d8b2      	bhi.n	800459c <HAL_DMA_IRQHandler+0x10c>
    if ((RESET != (BDMA->ISR & (BDMA_FLAG_HT0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_HTIE)))
 8004636:	4a2f      	ldr	r2, [pc, #188]	; (80046f4 <HAL_DMA_IRQHandler+0x264>)
 8004638:	2104      	movs	r1, #4
 800463a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800463c:	6815      	ldr	r5, [r2, #0]
 800463e:	4081      	lsls	r1, r0
 8004640:	4229      	tst	r1, r5
 8004642:	d012      	beq.n	800466a <HAL_DMA_IRQHandler+0x1da>
 8004644:	6819      	ldr	r1, [r3, #0]
 8004646:	074d      	lsls	r5, r1, #29
 8004648:	d50f      	bpl.n	800466a <HAL_DMA_IRQHandler+0x1da>
        if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	0690      	lsls	r0, r2, #26
 800464e:	d403      	bmi.n	8004658 <HAL_DMA_IRQHandler+0x1c8>
          (*ccr_reg) &= ~BDMA_CCR_HTIE;
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	f022 0204 	bic.w	r2, r2, #4
 8004656:	601a      	str	r2, [r3, #0]
        BDMA->IFCR  |= (BDMA_ISR_HTIF0 << hdma->StreamIndex);
 8004658:	4a26      	ldr	r2, [pc, #152]	; (80046f4 <HAL_DMA_IRQHandler+0x264>)
 800465a:	2304      	movs	r3, #4
 800465c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800465e:	6851      	ldr	r1, [r2, #4]
 8004660:	4083      	lsls	r3, r0
 8004662:	430b      	orrs	r3, r1
 8004664:	6053      	str	r3, [r2, #4]
       if(hdma->XferHalfCpltCallback != NULL)
 8004666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004668:	e795      	b.n	8004596 <HAL_DMA_IRQHandler+0x106>
    else if ((RESET != (BDMA->ISR & (BDMA_FLAG_TC0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TCIE)))
 800466a:	6811      	ldr	r1, [r2, #0]
 800466c:	2202      	movs	r2, #2
 800466e:	4082      	lsls	r2, r0
 8004670:	420a      	tst	r2, r1
 8004672:	d018      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x216>
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	0791      	lsls	r1, r2, #30
 8004678:	d515      	bpl.n	80046a6 <HAL_DMA_IRQHandler+0x216>
      if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	f012 0220 	ands.w	r2, r2, #32
 8004680:	d108      	bne.n	8004694 <HAL_DMA_IRQHandler+0x204>
        (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE);
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	f021 010a 	bic.w	r1, r1, #10
 8004688:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800468a:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800468c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004690:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      BDMA->IFCR |= (BDMA_ISR_TCIF0 << hdma->StreamIndex);
 8004694:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <HAL_DMA_IRQHandler+0x264>)
 8004696:	2302      	movs	r3, #2
 8004698:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800469a:	6851      	ldr	r1, [r2, #4]
 800469c:	4083      	lsls	r3, r0
 800469e:	430b      	orrs	r3, r1
 80046a0:	6053      	str	r3, [r2, #4]
      if(hdma->XferCpltCallback != NULL)
 80046a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046a4:	e777      	b.n	8004596 <HAL_DMA_IRQHandler+0x106>
    else if (( RESET != (BDMA->ISR & (BDMA_FLAG_TE0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TEIE)))
 80046a6:	4913      	ldr	r1, [pc, #76]	; (80046f4 <HAL_DMA_IRQHandler+0x264>)
 80046a8:	2208      	movs	r2, #8
 80046aa:	680d      	ldr	r5, [r1, #0]
 80046ac:	4082      	lsls	r2, r0
 80046ae:	422a      	tst	r2, r5
 80046b0:	f43f af74 	beq.w	800459c <HAL_DMA_IRQHandler+0x10c>
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	0712      	lsls	r2, r2, #28
 80046b8:	f57f af70 	bpl.w	800459c <HAL_DMA_IRQHandler+0x10c>
      (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE | BDMA_CCR_HTIE);
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	f022 020e 	bic.w	r2, r2, #14
 80046c2:	601a      	str	r2, [r3, #0]
      BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 80046c4:	2201      	movs	r2, #1
 80046c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80046c8:	6848      	ldr	r0, [r1, #4]
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	4303      	orrs	r3, r0
 80046d0:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 80046d2:	2300      	movs	r3, #0
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046d4:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80046d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80046da:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 80046de:	e795      	b.n	800460c <HAL_DMA_IRQHandler+0x17c>
 80046e0:	bffdfff0 	.word	0xbffdfff0
 80046e4:	24000018 	.word	0x24000018
 80046e8:	00800001 	.word	0x00800001
 80046ec:	00800004 	.word	0x00800004
 80046f0:	a7fdabf8 	.word	0xa7fdabf8
 80046f4:	58025400 	.word	0x58025400

080046f8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t syncSignalID = 0;
  uint32_t syncPolarity = 0;

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80046fa:	4a6a      	ldr	r2, [pc, #424]	; (80048a4 <HAL_DMAEx_ConfigMuxSync+0x1ac>)
{
 80046fc:	4604      	mov	r4, r0
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80046fe:	6803      	ldr	r3, [r0, #0]
{
 8004700:	460d      	mov	r5, r1
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004702:	4293      	cmp	r3, r2
 8004704:	d04a      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004706:	3218      	adds	r2, #24
 8004708:	4293      	cmp	r3, r2
 800470a:	d047      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 800470c:	3218      	adds	r2, #24
 800470e:	4293      	cmp	r3, r2
 8004710:	d044      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004712:	3218      	adds	r2, #24
 8004714:	4293      	cmp	r3, r2
 8004716:	d041      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004718:	3218      	adds	r2, #24
 800471a:	4293      	cmp	r3, r2
 800471c:	d03e      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 800471e:	3218      	adds	r2, #24
 8004720:	4293      	cmp	r3, r2
 8004722:	d03b      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004724:	3218      	adds	r2, #24
 8004726:	4293      	cmp	r3, r2
 8004728:	d038      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 800472a:	3218      	adds	r2, #24
 800472c:	4293      	cmp	r3, r2
 800472e:	d035      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004730:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004734:	4293      	cmp	r3, r2
 8004736:	d031      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004738:	3218      	adds	r2, #24
 800473a:	4293      	cmp	r3, r2
 800473c:	d02e      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 800473e:	3218      	adds	r2, #24
 8004740:	4293      	cmp	r3, r2
 8004742:	d02b      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004744:	3218      	adds	r2, #24
 8004746:	4293      	cmp	r3, r2
 8004748:	d028      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 800474a:	3218      	adds	r2, #24
 800474c:	4293      	cmp	r3, r2
 800474e:	d025      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004750:	3218      	adds	r2, #24
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004756:	3218      	adds	r2, #24
 8004758:	4293      	cmp	r3, r2
 800475a:	d01f      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 800475c:	3218      	adds	r2, #24
 800475e:	4293      	cmp	r3, r2
 8004760:	d01c      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004762:	4a51      	ldr	r2, [pc, #324]	; (80048a8 <HAL_DMAEx_ConfigMuxSync+0x1b0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d019      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004768:	3214      	adds	r2, #20
 800476a:	4293      	cmp	r3, r2
 800476c:	d016      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 800476e:	3214      	adds	r2, #20
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004774:	3214      	adds	r2, #20
 8004776:	4293      	cmp	r3, r2
 8004778:	d010      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 800477a:	3214      	adds	r2, #20
 800477c:	4293      	cmp	r3, r2
 800477e:	d00d      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004780:	3214      	adds	r2, #20
 8004782:	4293      	cmp	r3, r2
 8004784:	d00a      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004786:	3214      	adds	r2, #20
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 800478c:	3214      	adds	r2, #20
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_DMAEx_ConfigMuxSync+0xa4>
 8004792:	f240 115d 	movw	r1, #349	; 0x15d
 8004796:	4845      	ldr	r0, [pc, #276]	; (80048ac <HAL_DMAEx_ConfigMuxSync+0x1b4>)
 8004798:	f7fd fccf 	bl	800213a <assert_failed>
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
 800479c:	7a2b      	ldrb	r3, [r5, #8]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d904      	bls.n	80047ac <HAL_DMAEx_ConfigMuxSync+0xb4>
 80047a2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80047a6:	4841      	ldr	r0, [pc, #260]	; (80048ac <HAL_DMAEx_ConfigMuxSync+0x1b4>)
 80047a8:	f7fd fcc7 	bl	800213a <assert_failed>
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
 80047ac:	7a6b      	ldrb	r3, [r5, #9]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d904      	bls.n	80047bc <HAL_DMAEx_ConfigMuxSync+0xc4>
 80047b2:	f240 115f 	movw	r1, #351	; 0x15f
 80047b6:	483d      	ldr	r0, [pc, #244]	; (80048ac <HAL_DMAEx_ConfigMuxSync+0x1b4>)
 80047b8:	f7fd fcbf 	bl	800213a <assert_failed>
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));
 80047bc:	68eb      	ldr	r3, [r5, #12]
 80047be:	3b01      	subs	r3, #1
 80047c0:	2b1f      	cmp	r3, #31
 80047c2:	d904      	bls.n	80047ce <HAL_DMAEx_ConfigMuxSync+0xd6>
 80047c4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80047c8:	4838      	ldr	r0, [pc, #224]	; (80048ac <HAL_DMAEx_ConfigMuxSync+0x1b4>)
 80047ca:	f7fd fcb6 	bl	800213a <assert_failed>

  if(pSyncConfig->SyncEnable == ENABLE)
 80047ce:	7a2b      	ldrb	r3, [r5, #8]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d15b      	bne.n	800488c <HAL_DMAEx_ConfigMuxSync+0x194>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));
 80047d4:	686b      	ldr	r3, [r5, #4]
 80047d6:	f433 23c0 	bics.w	r3, r3, #393216	; 0x60000
 80047da:	d004      	beq.n	80047e6 <HAL_DMAEx_ConfigMuxSync+0xee>
 80047dc:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80047e0:	4832      	ldr	r0, [pc, #200]	; (80048ac <HAL_DMAEx_ConfigMuxSync+0x1b4>)
 80047e2:	f7fd fcaa 	bl	800213a <assert_failed>

    if(IS_D2_DMA_INSTANCE(hdma) != 0U)
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_DMAEx_ConfigMuxSync+0x1b8>)
 80047ea:	4413      	add	r3, r2
 80047ec:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	d846      	bhi.n	8004882 <HAL_DMAEx_ConfigMuxSync+0x18a>
    {
      assert_param(IS_D2_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
 80047f4:	2b07      	cmp	r3, #7
 80047f6:	d904      	bls.n	8004802 <HAL_DMAEx_ConfigMuxSync+0x10a>
 80047f8:	f44f 71b4 	mov.w	r1, #360	; 0x168
    }
    else
    {
      assert_param(IS_D3_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
 80047fc:	482b      	ldr	r0, [pc, #172]	; (80048ac <HAL_DMAEx_ConfigMuxSync+0x1b4>)
 80047fe:	f7fd fc9c 	bl	800213a <assert_failed>
    }
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
 8004802:	e895 1001 	ldmia.w	r5, {r0, ip}
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8004806:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800480a:	2b01      	cmp	r3, #1
 800480c:	d142      	bne.n	8004894 <HAL_DMAEx_ConfigMuxSync+0x19c>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800480e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004812:	2b01      	cmp	r3, #1
 8004814:	d043      	beq.n	800489e <HAL_DMAEx_ConfigMuxSync+0x1a6>

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004816:	6e26      	ldr	r6, [r4, #96]	; 0x60
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	f04f 5ef8 	mov.w	lr, #520093696	; 0x1f000000
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	f423 3381 	bic.w	r3, r3, #66048	; 0x10200
 8004822:	6033      	str	r3, [r6, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004824:	6833      	ldr	r3, [r6, #0]
 8004826:	fa9e feae 	rbit	lr, lr
 800482a:	f44f 0778 	mov.w	r7, #16252928	; 0xf80000
 800482e:	fabe fe8e 	clz	lr, lr
 8004832:	fa97 f7a7 	rbit	r7, r7
 8004836:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800483a:	fab7 f787 	clz	r7, r7
 800483e:	fa91 f1a1 	rbit	r1, r1
 8004842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004846:	fab1 f181 	clz	r1, r1
 800484a:	fa92 f2a2 	rbit	r2, r2
 800484e:	fa00 fe0e 	lsl.w	lr, r0, lr
 8004852:	b2db      	uxtb	r3, r3
 8004854:	68e8      	ldr	r0, [r5, #12]
 8004856:	fab2 f282 	clz	r2, r2
 800485a:	ea43 030c 	orr.w	r3, r3, ip
 800485e:	3801      	subs	r0, #1
 8004860:	ea43 030e 	orr.w	r3, r3, lr
 8004864:	40b8      	lsls	r0, r7
 8004866:	4303      	orrs	r3, r0
 8004868:	7a28      	ldrb	r0, [r5, #8]
 800486a:	fa00 f101 	lsl.w	r1, r0, r1
               ((pSyncConfig->RequestNumber - 1U) << POSITION_VAL(DMAMUX_CxCR_NBREQ)) | \
               syncPolarity | (pSyncConfig->SyncEnable << DMAMUX_POSITION_CxCR_SE)    | \
               (pSyncConfig->EventEnable << DMAMUX_POSITION_CxCR_EGE));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800486e:	2000      	movs	r0, #0
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004870:	430b      	orrs	r3, r1
 8004872:	7a69      	ldrb	r1, [r5, #9]
 8004874:	fa01 f202 	lsl.w	r2, r1, r2
 8004878:	4313      	orrs	r3, r2
 800487a:	6033      	str	r3, [r6, #0]
    __HAL_UNLOCK(hdma);
 800487c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

    return HAL_OK;
 8004880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_D3_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
 8004882:	2b0f      	cmp	r3, #15
 8004884:	d9bd      	bls.n	8004802 <HAL_DMAEx_ConfigMuxSync+0x10a>
 8004886:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800488a:	e7b7      	b.n	80047fc <HAL_DMAEx_ConfigMuxSync+0x104>
  uint32_t syncPolarity = 0;
 800488c:	f04f 0c00 	mov.w	ip, #0
  uint32_t syncSignalID = 0;
 8004890:	4660      	mov	r0, ip
 8004892:	e7b8      	b.n	8004806 <HAL_DMAEx_ConfigMuxSync+0x10e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004894:	f44f 6300 	mov.w	r3, #2048	; 0x800

    /* Return error status */
    return HAL_ERROR;
 8004898:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800489a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hdma);
 800489e:	2002      	movs	r0, #2
  }
}
 80048a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40020010 	.word	0x40020010
 80048a8:	58025408 	.word	0x58025408
 80048ac:	08013752 	.word	0x08013752
 80048b0:	bffdfff0 	.word	0xbffdfff0

080048b4 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80048b4:	688b      	ldr	r3, [r1, #8]
 80048b6:	680a      	ldr	r2, [r1, #0]
  uint32_t macregval;
  
  /*------------------------ MACCR Configuration --------------------*/  
  macregval =(macconf->InterPacketGapVal |
              macconf->SourceAddrControl |
                (uint32_t)(macconf->ChecksumOffload << 27) |  
 80048b8:	f891 c004 	ldrb.w	ip, [r1, #4]
 80048bc:	431a      	orrs	r2, r3
                  (uint32_t)(macconf->GiantPacketSizeLimitControl << 23) |
                    (uint32_t)(macconf->Support2KPacket << 22) |
                      (uint32_t)(macconf->CRCStripTypePacket << 21) |
                        (uint32_t)(macconf->AutomaticPadCRCStrip << 20) | 
                          (uint32_t)(!macconf->Watchdog << 19) | 
 80048be:	7c0b      	ldrb	r3, [r1, #16]
 80048c0:	2b00      	cmp	r3, #0
{
 80048c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                          (uint32_t)(!macconf->Watchdog << 19) | 
 80048c6:	bf08      	it	eq
 80048c8:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
{
 80048cc:	b085      	sub	sp, #20
                          (uint32_t)(!macconf->Watchdog << 19) | 
 80048ce:	bf18      	it	ne
 80048d0:	2300      	movne	r3, #0
                  (uint32_t)(macconf->GiantPacketSizeLimitControl << 23) |
 80048d2:	f891 e00c 	ldrb.w	lr, [r1, #12]
                    (uint32_t)(macconf->Support2KPacket << 22) |
 80048d6:	7b4f      	ldrb	r7, [r1, #13]
                          (uint32_t)(!macconf->Watchdog << 19) | 
 80048d8:	9300      	str	r3, [sp, #0]
                            (uint32_t)(!macconf->Jabber << 17) | 
 80048da:	7c4b      	ldrb	r3, [r1, #17]
                      (uint32_t)(macconf->CRCStripTypePacket << 21) |
 80048dc:	7b8e      	ldrb	r6, [r1, #14]
                            (uint32_t)(!macconf->Jabber << 17) | 
 80048de:	2b00      	cmp	r3, #0
                        (uint32_t)(macconf->AutomaticPadCRCStrip << 20) | 
 80048e0:	7bcd      	ldrb	r5, [r1, #15]
                              (uint32_t)(macconf->JumboPacket << 16) |
 80048e2:	7c8c      	ldrb	r4, [r1, #18]
                            (uint32_t)(!macconf->Jabber << 17) | 
 80048e4:	bf0c      	ite	eq
 80048e6:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 80048ea:	2300      	movne	r3, #0
                                macconf->Speed |
                                  macconf->DuplexMode | 
                                    (uint32_t)(macconf->LoopbackMode << 12) |
 80048ec:	f891 901c 	ldrb.w	r9, [r1, #28]
                            (uint32_t)(!macconf->Jabber << 17) | 
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	694b      	ldr	r3, [r1, #20]
                                      (uint32_t)(macconf->CarrierSenseBeforeTransmit << 11)|
 80048f4:	f891 b01d 	ldrb.w	fp, [r1, #29]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	698b      	ldr	r3, [r1, #24]
 80048fc:	4313      	orrs	r3, r2
                                        (uint32_t)(!macconf->ReceiveOwn << 10)|
 80048fe:	7f8a      	ldrb	r2, [r1, #30]
 8004900:	2a00      	cmp	r2, #0
 8004902:	bf0c      	ite	eq
 8004904:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 8004908:	2200      	movne	r2, #0
 800490a:	9202      	str	r2, [sp, #8]
                                          (uint32_t)(macconf->CarrierSenseDuringTransmit << 9)|
 800490c:	7fca      	ldrb	r2, [r1, #31]
 800490e:	9203      	str	r2, [sp, #12]
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 8004910:	f891 2020 	ldrb.w	r2, [r1, #32]
 8004914:	2a00      	cmp	r2, #0
                                              macconf->BackOffLimit | 
                                                (uint32_t)(macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);
  
  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004916:	6802      	ldr	r2, [r0, #0]
 8004918:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800491a:	f8d2 a000 	ldr.w	sl, [r2]
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 800491e:	bf08      	it	eq
 8004920:	f44f 7880 	moveq.w	r8, #256	; 0x100
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004924:	ea43 0300 	orr.w	r3, r3, r0
 8004928:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 800492a:	f02a 4a7f 	bic.w	sl, sl, #4278190080	; 0xff000000
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 800492e:	bf18      	it	ne
 8004930:	f04f 0800 	movne.w	r8, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004934:	4303      	orrs	r3, r0
 8004936:	9803      	ldr	r0, [sp, #12]
 8004938:	f42a 0a7b 	bic.w	sl, sl, #16449536	; 0xfb0000
 800493c:	f42a 4afe 	bic.w	sl, sl, #32512	; 0x7f00
 8004940:	f02a 0a7c 	bic.w	sl, sl, #124	; 0x7c
 8004944:	ea43 030a 	orr.w	r3, r3, sl
 8004948:	ea43 63cc 	orr.w	r3, r3, ip, lsl #27
 800494c:	ea43 53ce 	orr.w	r3, r3, lr, lsl #23
 8004950:	ea43 5387 	orr.w	r3, r3, r7, lsl #22
 8004954:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 8004958:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800495c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004960:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 8004964:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                                                (uint32_t)(macconf->DeferralCheck << 4)|
 8004968:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800496c:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8004970:	9800      	ldr	r0, [sp, #0]
 8004972:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 8004976:	4303      	orrs	r3, r0
 8004978:	9801      	ldr	r0, [sp, #4]
 800497a:	4303      	orrs	r3, r0
 800497c:	9802      	ldr	r0, [sp, #8]
 800497e:	4303      	orrs	r3, r0
 8004980:	ea43 0308 	orr.w	r3, r3, r8
 8004984:	6013      	str	r3, [r2, #0]
  
  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004986:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               (uint32_t)(macconf->ExtendedInterPacketGap << 24)|
                 (uint32_t)(macconf->UnicastSlowProtocolPacketDetect << 18)|
                   (uint32_t)(macconf->SlowProtocolDetect << 17)|
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 8004988:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               (uint32_t)(macconf->ExtendedInterPacketGap << 24)|
 800498c:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 8004990:	2b00      	cmp	r3, #0
                       macconf->GiantPacketSizeLimit);
  
  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004992:	6853      	ldr	r3, [r2, #4]
                 (uint32_t)(macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004994:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004998:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
                   (uint32_t)(macconf->SlowProtocolDetect << 17)|
 800499c:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 80049a0:	bf0c      	ite	eq
 80049a2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80049a6:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80049a8:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 80049ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049b0:	f023 0307 	bic.w	r3, r3, #7
 80049b4:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 80049b8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80049ba:	4333      	orrs	r3, r6
  
  /*------------------------ MACTFCR Configuration --------------------*/  
  macregval = ((uint32_t)(macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold | 
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
                   (macconf->PauseTime << 16));
 80049bc:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80049be:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80049c2:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold | 
 80049c6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80049c8:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
  macregval = ((uint32_t)(macconf->TransmitFlowControl << 1) |
 80049cc:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80049d0:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 80049d2:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80049d4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 80049d6:	68d3      	ldr	r3, [r2, #12]
 80049d8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	4303      	orrs	r3, r0
  macregval = ((uint32_t)(macconf->ProgrammableWatchdog << 8) |
 80049e2:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 80049e6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80049ea:	60d3      	str	r3, [r2, #12]
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
 80049ec:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
 80049f0:	2b00      	cmp	r3, #0
  
  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 80049f2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80049f4:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
 80049f8:	bf0c      	ite	eq
 80049fa:	2080      	moveq	r0, #128	; 0x80
 80049fc:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004a06:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/  
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
  
  /*------------------------ MTLRQOMR Configuration --------------------*/  
  macregval = (macconf->ReceiveQueueMode |
 8004a08:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 8004a0a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
                 (uint32_t)(macconf->ForwardRxErrorPacket << 4) |
 8004a0e:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 8004a12:	4303      	orrs	r3, r0
 8004a14:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004a16:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004a1a:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004a1e:	f020 0003 	bic.w	r0, r0, #3
 8004a22:	4303      	orrs	r3, r0
               (uint32_t)(macconf->UnicastPausePacketDetect << 1));
 8004a24:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004a28:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004a2c:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004a32:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8004a36:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8004a3a:	4303      	orrs	r3, r0
 8004a3c:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 8004a40:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
                   (uint32_t)(macconf->ForwardRxUndersizedGoodPacket << 3));
 8004a44:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 8004a48:	2b00      	cmp	r3, #0
  
  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);  
 8004a4a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
 8004a4e:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 8004a52:	bf0c      	ite	eq
 8004a54:	2040      	moveq	r0, #64	; 0x40
 8004a56:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);  
 8004a58:	432b      	orrs	r3, r5
 8004a5a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8004a5e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a62:	4303      	orrs	r3, r0
 8004a64:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8004a68:	b005      	add	sp, #20
 8004a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004a70 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/    
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004a70:	6802      	ldr	r2, [r0, #0]
 8004a72:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8004a76:	6803      	ldr	r3, [r0, #0]
 8004a78:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
{
 8004a7c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004a7e:	f023 0302 	bic.w	r3, r3, #2
 8004a82:	680c      	ldr	r4, [r1, #0]
  
  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 8004a84:	790d      	ldrb	r5, [r1, #4]
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004a86:	4323      	orrs	r3, r4
               dmaconf->BurstMode |
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
  
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004a88:	f241 0404 	movw	r4, #4100	; 0x1004
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004a8c:	6003      	str	r3, [r0, #0]
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
 8004a8e:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004a90:	5910      	ldr	r0, [r2, r4]
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
 8004a92:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004a94:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 8004a98:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8004a9c:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004a9e:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 8004aa2:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004aa4:	4303      	orrs	r3, r0
  
  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->PBLx8Mode <<16) | 
               dmaconf->MaximumSegmentSize);
  
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004aa6:	f502 5088 	add.w	r0, r2, #4352	; 0x1100
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004aaa:	5113      	str	r3, [r2, r4]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004aac:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <ETH_SetDMAConfig+0x88>)
 8004aae:	6805      	ldr	r5, [r0, #0]
  dmaregval = ((uint32_t)(dmaconf->PBLx8Mode <<16) | 
 8004ab0:	7b4c      	ldrb	r4, [r1, #13]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ab2:	402b      	ands	r3, r5
 8004ab4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004ab8:	6a0c      	ldr	r4, [r1, #32]
 8004aba:	4323      	orrs	r3, r4
  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength | 
               (uint32_t)(dmaconf->SecondPacketOperate << 4)| 
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
  
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004abc:	f241 1404 	movw	r4, #4356	; 0x1104
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ac0:	6003      	str	r3, [r0, #0]
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
 8004ac2:	7f4b      	ldrb	r3, [r1, #29]
               (uint32_t)(dmaconf->SecondPacketOperate << 4)| 
 8004ac4:	7d08      	ldrb	r0, [r1, #20]
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
 8004ac6:	031b      	lsls	r3, r3, #12
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004ac8:	5915      	ldr	r5, [r2, r4]
  dmaregval = (dmaconf->TxDMABurstLength | 
 8004aca:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004ace:	6908      	ldr	r0, [r1, #16]
 8004ad0:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004ad2:	480a      	ldr	r0, [pc, #40]	; (8004afc <ETH_SetDMAConfig+0x8c>)
 8004ad4:	4028      	ands	r0, r5
 8004ad6:	4303      	orrs	r3, r0
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->FlushRxPacket << 31) |
               dmaconf->RxDMABurstLength);
  
  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004ad8:	f241 1008 	movw	r0, #4360	; 0x1108
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004adc:	5113      	str	r3, [r2, r4]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004ade:	5813      	ldr	r3, [r2, r0]
  dmaregval = ((uint32_t)(dmaconf->FlushRxPacket << 31) |
 8004ae0:	7f0c      	ldrb	r4, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004ae2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ae6:	6989      	ldr	r1, [r1, #24]
 8004ae8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004aec:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
 8004af0:	430b      	orrs	r3, r1
 8004af2:	5013      	str	r3, [r2, r0]
 8004af4:	bd30      	pop	{r4, r5, pc}
 8004af6:	bf00      	nop
 8004af8:	fffec000 	.word	0xfffec000
 8004afc:	ffc0efef 	.word	0xffc0efef

08004b00 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration 
  * @param  ItMode: Enable or disable Tx EOT interrept     
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList; 
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004b04:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
{
 8004b08:	4693      	mov	fp, r2
 8004b0a:	eb00 0a8e 	add.w	sl, r0, lr, lsl #2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t descnbr = 0, idx;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b0e:	f8da 3018 	ldr.w	r3, [sl, #24]
  
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  
  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004b12:	68dd      	ldr	r5, [r3, #12]
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	da02      	bge.n	8004b1e <ETH_Prepare_Tx_Descriptors+0x1e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
      
      return HAL_ETH_ERROR_BUSY;
 8004b18:	2002      	movs	r0, #2
 8004b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG))
 8004b1e:	680c      	ldr	r4, [r1, #0]
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004b20:	688e      	ldr	r6, [r1, #8]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG))
 8004b22:	f014 0704 	ands.w	r7, r4, #4
 8004b26:	d02a      	beq.n	8004b7e <ETH_Prepare_Tx_Descriptors+0x7e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004b28:	0c2d      	lsrs	r5, r5, #16
 8004b2a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004b2c:	f8d0 8000 	ldr.w	r8, [r0]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004b30:	042d      	lsls	r5, r5, #16
 8004b32:	ea45 0c02 	orr.w	ip, r5, r2
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004b36:	f44c 3280 	orr.w	r2, ip, #65536	; 0x10000
 8004b3a:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004b3c:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
 8004b40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b44:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG))
 8004b48:	0722      	lsls	r2, r4, #28
 8004b4a:	d518      	bpl.n	8004b7e <ETH_Prepare_Tx_Descriptors+0x7e>
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004b4c:	689d      	ldr	r5, [r3, #8]
 8004b4e:	b2aa      	uxth	r2, r5
 8004b50:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8004b52:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004b56:	6b0a      	ldr	r2, [r1, #48]	; 0x30
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004b58:	609d      	str	r5, [r3, #8]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004b5a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004b5e:	f42c 2540 	bic.w	r5, ip, #786432	; 0xc0000
 8004b62:	432a      	orrs	r2, r5
 8004b64:	60da      	str	r2, [r3, #12]
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8004b66:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8004b6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b6e:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004b72:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8004b76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b7a:	f8c8 2050 	str.w	r2, [r8, #80]	; 0x50
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO))
 8004b7e:	f014 0810 	ands.w	r8, r4, #16
 8004b82:	d00b      	beq.n	8004b9c <ETH_Prepare_Tx_Descriptors+0x9c>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004b84:	689d      	ldr	r5, [r3, #8]
 8004b86:	698a      	ldr	r2, [r1, #24]
 8004b88:	f425 557f 	bic.w	r5, r5, #16320	; 0x3fc0
 8004b8c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004b90:	432a      	orrs	r2, r5
 8004b92:	609a      	str	r2, [r3, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b9a:	60da      	str	r2, [r3, #12]
  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG)) || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO)))
 8004b9c:	f014 0c14 	ands.w	ip, r4, #20
 8004ba0:	d018      	beq.n	8004bd4 <ETH_Prepare_Tx_Descriptors+0xd4>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004ba2:	68da      	ldr	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004ba4:	f042 4540 	orr.w	r5, r2, #3221225472	; 0xc0000000
 8004ba8:	60dd      	str	r5, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1);
 8004baa:	f10e 0501 	add.w	r5, lr, #1
 8004bae:	2d03      	cmp	r5, #3
 8004bb0:	bf88      	it	hi
 8004bb2:	f1ae 0503 	subhi.w	r5, lr, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004bb6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8004bba:	f8dc c018 	ldr.w	ip, [ip, #24]
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004bbe:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8004bc2:	f1b9 0f00 	cmp.w	r9, #0
 8004bc6:	da5f      	bge.n	8004c88 <ETH_Prepare_Tx_Descriptors+0x188>
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004bc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	e7a1      	b.n	8004b18 <ETH_Prepare_Tx_Descriptors+0x18>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004bd4:	4675      	mov	r5, lr
  descnbr += 1U;
  
  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004bd6:	f8d3 9008 	ldr.w	r9, [r3, #8]
  descnbr += 1U;
 8004bda:	f10c 0c01 	add.w	ip, ip, #1
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004bde:	6832      	ldr	r2, [r6, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004be0:	f429 597f 	bic.w	r9, r9, #16320	; 0x3fc0
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004be4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004be6:	f029 093f 	bic.w	r9, r9, #63	; 0x3f
 8004bea:	6872      	ldr	r2, [r6, #4]
 8004bec:	ea49 0902 	orr.w	r9, r9, r2
  
  if(txbuffer->next != NULL)
 8004bf0:	68b2      	ldr	r2, [r6, #8]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004bf2:	f8c3 9008 	str.w	r9, [r3, #8]
 8004bf6:	f029 597f 	bic.w	r9, r9, #1069547520	; 0x3fc00000
 8004bfa:	f429 197c 	bic.w	r9, r9, #4128768	; 0x3f0000
  if(txbuffer->next != NULL)
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	d046      	beq.n	8004c90 <ETH_Prepare_Tx_Descriptors+0x190>
  {
    txbuffer = txbuffer->next; 
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004c02:	6816      	ldr	r6, [r2, #0]
 8004c04:	605e      	str	r6, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004c06:	6856      	ldr	r6, [r2, #4]
 8004c08:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8004c0c:	609e      	str	r6, [r3, #8]
 8004c0e:	68de      	ldr	r6, [r3, #12]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0);		
  }
  
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO))
 8004c10:	f1b8 0f00 	cmp.w	r8, #0
 8004c14:	d044      	beq.n	8004ca0 <ETH_Prepare_Tx_Descriptors+0x1a0>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004c16:	f426 08f0 	bic.w	r8, r6, #7864320	; 0x780000
 8004c1a:	6a0e      	ldr	r6, [r1, #32]
 8004c1c:	ea48 48c6 	orr.w	r8, r8, r6, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);	
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004c20:	69ce      	ldr	r6, [r1, #28]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);	
 8004c22:	ea4f 4898 	mov.w	r8, r8, lsr #18
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004c26:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);	
 8004c2a:	ea4f 4888 	mov.w	r8, r8, lsl #18
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004c2e:	ea48 0806 	orr.w	r8, r8, r6
 8004c32:	f8c3 800c 	str.w	r8, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }
  
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG))
 8004c36:	b12f      	cbz	r7, 8004c44 <ETH_Prepare_Tx_Descriptors+0x144>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);		
 8004c38:	689e      	ldr	r6, [r3, #8]
 8004c3a:	f426 4740 	bic.w	r7, r6, #49152	; 0xc000
 8004c3e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8004c40:	433e      	orrs	r6, r7
 8004c42:	609e      	str	r6, [r3, #8]
  }
  
  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004c44:	68de      	ldr	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT); 
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004c46:	f026 4780 	bic.w	r7, r6, #1073741824	; 0x40000000
 8004c4a:	f047 4720 	orr.w	r7, r7, #2684354560	; 0xa0000000
 8004c4e:	60df      	str	r7, [r3, #12]
  
  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC))
 8004c50:	07a7      	lsls	r7, r4, #30
 8004c52:	d506      	bpl.n	8004c62 <ETH_Prepare_Tx_Descriptors+0x162>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004c54:	68cc      	ldr	r4, [r1, #12]
 8004c56:	f026 4687 	bic.w	r6, r6, #1132462080	; 0x43800000
 8004c5a:	f044 4420 	orr.w	r4, r4, #2684354560	; 0xa0000000
 8004c5e:	4334      	orrs	r4, r6
 8004c60:	60dc      	str	r4, [r3, #12]
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
    
    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004c62:	4e52      	ldr	r6, [pc, #328]	; (8004dac <ETH_Prepare_Tx_Descriptors+0x2ac>)
  while (txbuffer->next != NULL)
 8004c64:	6894      	ldr	r4, [r2, #8]
 8004c66:	bbb4      	cbnz	r4, 8004cd6 <ETH_Prepare_Tx_Descriptors+0x1d6>
 8004c68:	689a      	ldr	r2, [r3, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
  }
  
  if(ItMode != ((uint32_t)RESET))
 8004c6a:	f1bb 0f00 	cmp.w	fp, #0
 8004c6e:	f000 8099 	beq.w	8004da4 <ETH_Prepare_Tx_Descriptors+0x2a4>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);     
 8004c72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  }
  else
  {    
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC); 
 8004c76:	609a      	str	r2, [r3, #8]
  }
      
  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD); 
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c7e:	60da      	str	r2, [r3, #12]
  
  dmatxdesclist->CurTxDesc = descidx;
 8004c80:	6285      	str	r5, [r0, #40]	; 0x28
  
  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004c82:	2000      	movs	r0, #0
}
 8004c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c88:	4663      	mov	r3, ip
    descnbr += 1U;
 8004c8a:	f04f 0c01 	mov.w	ip, #1
 8004c8e:	e7a2      	b.n	8004bd6 <ETH_Prepare_Tx_Descriptors+0xd6>
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004c90:	711a      	strb	r2, [r3, #4]
 8004c92:	715a      	strb	r2, [r3, #5]
 8004c94:	719a      	strb	r2, [r3, #6]
 8004c96:	71da      	strb	r2, [r3, #7]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0);		
 8004c98:	4632      	mov	r2, r6
 8004c9a:	f8c3 9008 	str.w	r9, [r3, #8]
 8004c9e:	e7b6      	b.n	8004c0e <ETH_Prepare_Tx_Descriptors+0x10e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004ca0:	f426 48ff 	bic.w	r8, r6, #32640	; 0x7f80
 8004ca4:	684e      	ldr	r6, [r1, #4]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM))
 8004ca6:	f014 0f01 	tst.w	r4, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004caa:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
 8004cae:	ea48 0606 	orr.w	r6, r8, r6
 8004cb2:	60de      	str	r6, [r3, #12]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004cb4:	bf1f      	itttt	ne
 8004cb6:	f426 3840 	bicne.w	r8, r6, #196608	; 0x30000
 8004cba:	694e      	ldrne	r6, [r1, #20]
 8004cbc:	ea48 0606 	orrne.w	r6, r8, r6
 8004cc0:	60de      	strne	r6, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD))
 8004cc2:	06a6      	lsls	r6, r4, #26
 8004cc4:	d5b7      	bpl.n	8004c36 <ETH_Prepare_Tx_Descriptors+0x136>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004cc6:	68de      	ldr	r6, [r3, #12]
 8004cc8:	f026 6840 	bic.w	r8, r6, #201326592	; 0xc000000
 8004ccc:	690e      	ldr	r6, [r1, #16]
 8004cce:	ea48 0606 	orr.w	r6, r8, r6
 8004cd2:	60de      	str	r6, [r3, #12]
 8004cd4:	e7af      	b.n	8004c36 <ETH_Prepare_Tx_Descriptors+0x136>
    INCR_TX_DESC_INDEX(descidx, 1);
 8004cd6:	1c6f      	adds	r7, r5, #1
 8004cd8:	2f03      	cmp	r7, #3
 8004cda:	bf88      	it	hi
 8004cdc:	1eef      	subhi	r7, r5, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004cde:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 8004ce2:	699b      	ldr	r3, [r3, #24]
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8004ce4:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8004ce8:	f1b8 0f00 	cmp.w	r8, #0
 8004cec:	da15      	bge.n	8004d1a <ETH_Prepare_Tx_Descriptors+0x21a>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004cee:	f8da 1018 	ldr.w	r1, [sl, #24]
      for(idx = 0; idx < descnbr; idx ++)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	4594      	cmp	ip, r2
 8004cf6:	f43f af0f 	beq.w	8004b18 <ETH_Prepare_Tx_Descriptors+0x18>
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004cfa:	68cb      	ldr	r3, [r1, #12]
      for(idx = 0; idx < descnbr; idx ++)
 8004cfc:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004cfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d02:	60cb      	str	r3, [r1, #12]
        INCR_TX_DESC_INDEX(descidx, 1);
 8004d04:	f10e 0301 	add.w	r3, lr, #1
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	bf88      	it	hi
 8004d0c:	f1ae 0303 	subhi.w	r3, lr, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004d10:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for(idx = 0; idx < descnbr; idx ++)
 8004d14:	469e      	mov	lr, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004d16:	6989      	ldr	r1, [r1, #24]
 8004d18:	e7ec      	b.n	8004cf4 <ETH_Prepare_Tx_Descriptors+0x1f4>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004d1a:	6822      	ldr	r2, [r4, #0]
    descnbr += 1U;
 8004d1c:	f10c 0c01 	add.w	ip, ip, #1
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004d20:	f8d3 9008 	ldr.w	r9, [r3, #8]
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004d24:	601a      	str	r2, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004d26:	ea09 0906 	and.w	r9, r9, r6
 8004d2a:	6862      	ldr	r2, [r4, #4]
 8004d2c:	ea49 0902 	orr.w	r9, r9, r2
    if (txbuffer->next != NULL)
 8004d30:	68a2      	ldr	r2, [r4, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004d32:	f8c3 9008 	str.w	r9, [r3, #8]
 8004d36:	f029 597f 	bic.w	r9, r9, #1069547520	; 0x3fc00000
 8004d3a:	f429 197c 	bic.w	r9, r9, #4128768	; 0x3f0000
    if (txbuffer->next != NULL)
 8004d3e:	b1d2      	cbz	r2, 8004d76 <ETH_Prepare_Tx_Descriptors+0x276>
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004d40:	6855      	ldr	r5, [r2, #4]
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004d42:	6814      	ldr	r4, [r2, #0]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004d44:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004d48:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004d4a:	609d      	str	r5, [r3, #8]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO))
 8004d4c:	680d      	ldr	r5, [r1, #0]
 8004d4e:	06ec      	lsls	r4, r5, #27
 8004d50:	d519      	bpl.n	8004d86 <ETH_Prepare_Tx_Descriptors+0x286>
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004d52:	69cc      	ldr	r4, [r1, #28]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);	
 8004d54:	ea4f 4898 	mov.w	r8, r8, lsr #18
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004d58:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);	
 8004d5c:	ea4f 4888 	mov.w	r8, r8, lsl #18
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004d60:	ea48 0404 	orr.w	r4, r8, r4
 8004d64:	60dc      	str	r4, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004d66:	68dc      	ldr	r4, [r3, #12]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004d68:	463d      	mov	r5, r7
 8004d6a:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8004d6e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004d72:	60dc      	str	r4, [r3, #12]
 8004d74:	e776      	b.n	8004c64 <ETH_Prepare_Tx_Descriptors+0x164>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004d76:	711a      	strb	r2, [r3, #4]
 8004d78:	715a      	strb	r2, [r3, #5]
 8004d7a:	719a      	strb	r2, [r3, #6]
 8004d7c:	71da      	strb	r2, [r3, #7]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0);		
 8004d7e:	4622      	mov	r2, r4
 8004d80:	f8c3 9008 	str.w	r9, [r3, #8]
 8004d84:	e7e2      	b.n	8004d4c <ETH_Prepare_Tx_Descriptors+0x24c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);  
 8004d86:	f428 48ff 	bic.w	r8, r8, #32640	; 0x7f80
 8004d8a:	684c      	ldr	r4, [r1, #4]
 8004d8c:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
 8004d90:	ea48 0804 	orr.w	r8, r8, r4
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM))
 8004d94:	07ec      	lsls	r4, r5, #31
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);  
 8004d96:	f8c3 800c 	str.w	r8, [r3, #12]
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM))
 8004d9a:	d5e4      	bpl.n	8004d66 <ETH_Prepare_Tx_Descriptors+0x266>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004d9c:	f428 3840 	bic.w	r8, r8, #196608	; 0x30000
 8004da0:	694c      	ldr	r4, [r1, #20]
 8004da2:	e7dd      	b.n	8004d60 <ETH_Prepare_Tx_Descriptors+0x260>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC); 
 8004da4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004da8:	e765      	b.n	8004c76 <ETH_Prepare_Tx_Descriptors+0x176>
 8004daa:	bf00      	nop
 8004dac:	ffffc000 	.word	0xffffc000

08004db0 <HAL_ETH_DescAssignMemory>:
  if((pBuffer1 == NULL) || (Index >= ETH_RX_DESC_CNT))
 8004db0:	b10a      	cbz	r2, 8004db6 <HAL_ETH_DescAssignMemory+0x6>
 8004db2:	2903      	cmp	r1, #3
 8004db4:	d903      	bls.n	8004dbe <HAL_ETH_DescAssignMemory+0xe>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004db6:	2301      	movs	r3, #1
 8004db8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004dba:	4618      	mov	r0, r3
 8004dbc:	4770      	bx	lr
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index]; 
 8004dbe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004dc2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8004dc4:	600a      	str	r2, [r1, #0]
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8004dc6:	610a      	str	r2, [r1, #16]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004dc8:	68ca      	ldr	r2, [r1, #12]
 8004dca:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
 8004dce:	60c8      	str	r0, [r1, #12]
  if(pBuffer2 != NULL)
 8004dd0:	b123      	cbz	r3, 8004ddc <HAL_ETH_DescAssignMemory+0x2c>
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004dd2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8004dd6:	608b      	str	r3, [r1, #8]
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8004dd8:	614b      	str	r3, [r1, #20]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004dda:	60ca      	str	r2, [r1, #12]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004ddc:	68cb      	ldr	r3, [r1, #12]
  return HAL_OK;
 8004dde:	2000      	movs	r0, #0
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004de4:	60cb      	str	r3, [r1, #12]
}
 8004de6:	4770      	bx	lr

08004de8 <HAL_ETH_Start>:
  if(heth->gState == HAL_ETH_STATE_READY)
 8004de8:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	2a10      	cmp	r2, #16
{
 8004df0:	b510      	push	{r4, lr}
  if(heth->gState == HAL_ETH_STATE_READY)
 8004df2:	d12a      	bne.n	8004e4a <HAL_ETH_Start+0x62>
    heth->gState = HAL_ETH_STATE_BUSY;
 8004df4:	2323      	movs	r3, #35	; 0x23
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST); 
 8004df6:	f241 1404 	movw	r4, #4356	; 0x1104
    heth->gState = HAL_ETH_STATE_BUSY;
 8004dfa:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004dfe:	6803      	ldr	r3, [r0, #0]
 8004e00:	6819      	ldr	r1, [r3, #0]
 8004e02:	f041 0102 	orr.w	r1, r1, #2
 8004e06:	6019      	str	r1, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	f041 0101 	orr.w	r1, r1, #1
 8004e0e:	6019      	str	r1, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004e10:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8004e14:	f041 0101 	orr.w	r1, r1, #1
 8004e18:	f8c3 1d00 	str.w	r1, [r3, #3328]	; 0xd00
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST); 
 8004e1c:	5919      	ldr	r1, [r3, r4]
 8004e1e:	f041 0101 	orr.w	r1, r1, #1
 8004e22:	5119      	str	r1, [r3, r4]
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR); 
 8004e24:	f241 1408 	movw	r4, #4360	; 0x1108
 8004e28:	5919      	ldr	r1, [r3, r4]
 8004e2a:	f041 0101 	orr.w	r1, r1, #1
 8004e2e:	5119      	str	r1, [r3, r4]
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004e30:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 8004e3a:	6019      	str	r1, [r3, #0]
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8004e3c:	2322      	movs	r3, #34	; 0x22
    heth->gState = HAL_ETH_STATE_READY;
 8004e3e:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8004e42:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
    return HAL_OK;
 8004e46:	2000      	movs	r0, #0
 8004e48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e4a:	2001      	movs	r0, #1
}
 8004e4c:	bd10      	pop	{r4, pc}

08004e4e <HAL_ETH_Transmit>:
{
 8004e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e50:	4604      	mov	r4, r0
 8004e52:	4615      	mov	r5, r2
  if(pTxConfig == NULL)
 8004e54:	b929      	cbnz	r1, 8004e62 <HAL_ETH_Transmit+0x14>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004e56:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004e58:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004e5c:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR; 
 8004e5e:	2001      	movs	r0, #1
}
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(heth->gState == HAL_ETH_STATE_READY)
 8004e62:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d1f9      	bne.n	8004e5e <HAL_ETH_Transmit+0x10>
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f7ff fe48 	bl	8004b00 <ETH_Prepare_Tx_Descriptors>
 8004e70:	b118      	cbz	r0, 8004e7a <HAL_ETH_Transmit+0x2c>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004e72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e74:	f043 0302 	orr.w	r3, r3, #2
 8004e78:	e7f0      	b.n	8004e5c <HAL_ETH_Transmit+0xe>
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004e7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e7c:	1d9a      	adds	r2, r3, #6
 8004e7e:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1);
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	2a03      	cmp	r2, #3
 8004e86:	bf8a      	itet	hi
 8004e88:	3b03      	subhi	r3, #3
 8004e8a:	62a2      	strls	r2, [r4, #40]	; 0x28
 8004e8c:	62a3      	strhi	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004e8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	3206      	adds	r2, #6
 8004e94:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004e98:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e9c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004e9e:	f7fe fd55 	bl	800394c <HAL_GetTick>
 8004ea2:	4607      	mov	r7, r0
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004ea4:	68f2      	ldr	r2, [r6, #12]
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	db04      	blt.n	8004eb4 <HAL_ETH_Transmit+0x66>
    heth->gState = HAL_ETH_STATE_READY;
 8004eaa:	2310      	movs	r3, #16
    return HAL_OK;
 8004eac:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 8004eae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    return HAL_OK;
 8004eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004eba:	6819      	ldr	r1, [r3, #0]
 8004ebc:	04c9      	lsls	r1, r1, #19
 8004ebe:	d509      	bpl.n	8004ed4 <HAL_ETH_Transmit+0x86>
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004ec0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004ec2:	f042 0208 	orr.w	r2, r2, #8
 8004ec6:	6562      	str	r2, [r4, #84]	; 0x54
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	65a3      	str	r3, [r4, #88]	; 0x58
        heth->gState = HAL_ETH_STATE_ERROR;
 8004ecc:	23e0      	movs	r3, #224	; 0xe0
          heth->gState = HAL_ETH_STATE_READY;
 8004ece:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8004ed2:	e7c4      	b.n	8004e5e <HAL_ETH_Transmit+0x10>
      if(Timeout != HAL_MAX_DELAY)
 8004ed4:	1c6b      	adds	r3, r5, #1
 8004ed6:	d0e6      	beq.n	8004ea6 <HAL_ETH_Transmit+0x58>
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8004ed8:	f7fe fd38 	bl	800394c <HAL_GetTick>
 8004edc:	1bc0      	subs	r0, r0, r7
 8004ede:	4285      	cmp	r5, r0
 8004ee0:	d301      	bcc.n	8004ee6 <HAL_ETH_Transmit+0x98>
 8004ee2:	2d00      	cmp	r5, #0
 8004ee4:	d1de      	bne.n	8004ea4 <HAL_ETH_Transmit+0x56>
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004ee6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	6563      	str	r3, [r4, #84]	; 0x54
          heth->gState = HAL_ETH_STATE_READY;
 8004eee:	2310      	movs	r3, #16
 8004ef0:	e7ed      	b.n	8004ece <HAL_ETH_Transmit+0x80>

08004ef2 <HAL_ETH_IsRxDataAvailable>:
{
 8004ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(dmarxdesclist->AppDescNbr != 0)
 8004ef4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8004ef6:	b96d      	cbnz	r5, 8004f14 <HAL_ETH_IsRxDataAvailable+0x22>
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8004ef8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004efa:	462a      	mov	r2, r5
 8004efc:	4629      	mov	r1, r5
 8004efe:	2605      	movs	r6, #5
 8004f00:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8004f04:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < ETH_RX_DESC_CNT))
 8004f06:	68ff      	ldr	r7, [r7, #12]
 8004f08:	2f00      	cmp	r7, #0
 8004f0a:	da1b      	bge.n	8004f44 <HAL_ETH_IsRxDataAvailable+0x52>
  if(appdesccnt > 0)
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	d13b      	bne.n	8004f88 <HAL_ETH_IsRxDataAvailable+0x96>
  dmarxdesclist->AppDescNbr = 0U;  
 8004f10:	2300      	movs	r3, #0
 8004f12:	6443      	str	r3, [r0, #68]	; 0x44
    return 0;
 8004f14:	2000      	movs	r0, #0
}
 8004f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004f18:	00bf      	lsls	r7, r7, #2
 8004f1a:	d50a      	bpl.n	8004f32 <HAL_ETH_IsRxDataAvailable+0x40>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004f1c:	2b03      	cmp	r3, #3
      appdesccnt = 1U;
 8004f1e:	f04f 0101 	mov.w	r1, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004f22:	bf88      	it	hi
 8004f24:	1ee3      	subhi	r3, r4, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];  
 8004f26:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8004f2a:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
 8004f2c:	4622      	mov	r2, r4
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004f2e:	461c      	mov	r4, r3
 8004f30:	e7e9      	b.n	8004f06 <HAL_ETH_IsRxDataAvailable+0x14>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004f32:	2b03      	cmp	r3, #3
      appdesccnt += 1U;
 8004f34:	f101 0101 	add.w	r1, r1, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004f38:	bf88      	it	hi
 8004f3a:	1ee3      	subhi	r3, r4, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];            
 8004f3c:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 8004f40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f42:	e7f4      	b.n	8004f2e <HAL_ETH_IsRxDataAvailable+0x3c>
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < ETH_RX_DESC_CNT))
 8004f44:	3e01      	subs	r6, #1
 8004f46:	d0e1      	beq.n	8004f0c <HAL_ETH_IsRxDataAvailable+0x1a>
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET) 
 8004f48:	f017 5f80 	tst.w	r7, #268435456	; 0x10000000
 8004f4c:	f104 0301 	add.w	r3, r4, #1
 8004f50:	d0e2      	beq.n	8004f18 <HAL_ETH_IsRxDataAvailable+0x26>
      appdesccnt += 1U;
 8004f52:	3101      	adds	r1, #1
      if(appdesccnt == 1)
 8004f54:	2901      	cmp	r1, #1
 8004f56:	bf08      	it	eq
 8004f58:	4622      	moveq	r2, r4
      INCR_RX_DESC_INDEX(descidx, 1); 
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	bf88      	it	hi
 8004f5e:	1ee3      	subhi	r3, r4, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];  
 8004f60:	eb00 0483 	add.w	r4, r0, r3, lsl #2
      if((READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET) && 
 8004f64:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8004f66:	68e4      	ldr	r4, [r4, #12]
 8004f68:	2c00      	cmp	r4, #0
 8004f6a:	db08      	blt.n	8004f7e <HAL_ETH_IsRxDataAvailable+0x8c>
 8004f6c:	0064      	lsls	r4, r4, #1
 8004f6e:	d506      	bpl.n	8004f7e <HAL_ETH_IsRxDataAvailable+0x8c>
        dmarxdesclist->AppContextDesc = 1;
 8004f70:	2401      	movs	r4, #1
 8004f72:	6484      	str	r4, [r0, #72]	; 0x48
        INCR_RX_DESC_INDEX(descidx, 1); 
 8004f74:	191c      	adds	r4, r3, r4
 8004f76:	2c03      	cmp	r4, #3
 8004f78:	bf8c      	ite	hi
 8004f7a:	3b03      	subhi	r3, #3
 8004f7c:	4623      	movls	r3, r4
      dmarxdesclist->CurRxDesc = descidx;
 8004f7e:	63c3      	str	r3, [r0, #60]	; 0x3c
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8004f80:	6402      	str	r2, [r0, #64]	; 0x40
      dmarxdesclist->AppDescNbr = appdesccnt;
 8004f82:	6441      	str	r1, [r0, #68]	; 0x44
      return 1;
 8004f84:	2001      	movs	r0, #1
 8004f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004f88:	eb00 0382 	add.w	r3, r0, r2, lsl #2
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004f8c:	2400      	movs	r4, #0
 8004f8e:	f04f 0e01 	mov.w	lr, #1
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004f92:	f04f 0c03 	mov.w	ip, #3
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004f98:	691e      	ldr	r6, [r3, #16]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004f9a:	731c      	strb	r4, [r3, #12]
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004f9c:	601e      	str	r6, [r3, #0]
      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8004f9e:	695e      	ldr	r6, [r3, #20]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004fa0:	735c      	strb	r4, [r3, #13]
 8004fa2:	739c      	strb	r4, [r3, #14]
 8004fa4:	f883 e00f 	strb.w	lr, [r3, #15]
      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8004fa8:	b116      	cbz	r6, 8004fb0 <HAL_ETH_IsRxDataAvailable+0xbe>
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8004faa:	609e      	str	r6, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004fac:	f883 c00f 	strb.w	ip, [r3, #15]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004fb0:	68de      	ldr	r6, [r3, #12]
 8004fb2:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 8004fb6:	60df      	str	r7, [r3, #12]
      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8004fb8:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8004fba:	b117      	cbz	r7, 8004fc2 <HAL_ETH_IsRxDataAvailable+0xd0>
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004fbc:	f046 4640 	orr.w	r6, r6, #3221225472	; 0xc0000000
 8004fc0:	60de      	str	r6, [r3, #12]
      INCR_RX_DESC_INDEX(descidx, 1);
 8004fc2:	1c53      	adds	r3, r2, #1
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8004fc4:	3501      	adds	r5, #1
      INCR_RX_DESC_INDEX(descidx, 1);
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	bf8c      	ite	hi
 8004fca:	3a03      	subhi	r2, #3
 8004fcc:	461a      	movls	r2, r3
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8004fce:	42a9      	cmp	r1, r5
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx]; 
 8004fd0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8004fd6:	d1df      	bne.n	8004f98 <HAL_ETH_IsRxDataAvailable+0xa6>
 8004fd8:	e79a      	b.n	8004f10 <HAL_ETH_IsRxDataAvailable+0x1e>

08004fda <HAL_ETH_TxCpltCallback>:
 8004fda:	4770      	bx	lr

08004fdc <HAL_ETH_RxCpltCallback>:
 8004fdc:	4770      	bx	lr

08004fde <HAL_ETH_DMAErrorCallback>:
 8004fde:	4770      	bx	lr

08004fe0 <HAL_ETH_MACErrorCallback>:
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_ETH_PMTCallback>:
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_ETH_EEECallback>:
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_ETH_WakeUpCallback>:
{
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004fe8:	6803      	ldr	r3, [r0, #0]
 8004fea:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	0652      	lsls	r2, r2, #25
{
 8004ff2:	b510      	push	{r4, lr}
 8004ff4:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004ff6:	d511      	bpl.n	800501c <HAL_ETH_IRQHandler+0x34>
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE)) 
 8004ff8:	f241 1234 	movw	r2, #4404	; 0x1134
 8004ffc:	589b      	ldr	r3, [r3, r2]
 8004ffe:	0659      	lsls	r1, r3, #25
 8005000:	d50c      	bpl.n	800501c <HAL_ETH_IRQHandler+0x34>
      if(HAL_ETH_IsRxDataAvailable(heth) == 1)
 8005002:	f7ff ff76 	bl	8004ef2 <HAL_ETH_IsRxDataAvailable>
 8005006:	2801      	cmp	r0, #1
 8005008:	d102      	bne.n	8005010 <HAL_ETH_IRQHandler+0x28>
        HAL_ETH_RxCpltCallback(heth);
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff ffe6 	bl	8004fdc <HAL_ETH_RxCpltCallback>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	f248 0240 	movw	r2, #32832	; 0x8040
 8005016:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800501a:	601a      	str	r2, [r3, #0]
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	07d2      	lsls	r2, r2, #31
 8005026:	d50d      	bpl.n	8005044 <HAL_ETH_IRQHandler+0x5c>
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE)) 
 8005028:	f241 1234 	movw	r2, #4404	; 0x1134
 800502c:	589b      	ldr	r3, [r3, r2]
 800502e:	07d8      	lsls	r0, r3, #31
 8005030:	d508      	bpl.n	8005044 <HAL_ETH_IRQHandler+0x5c>
      HAL_ETH_TxCpltCallback(heth);
 8005032:	4620      	mov	r0, r4
 8005034:	f7ff ffd1 	bl	8004fda <HAL_ETH_TxCpltCallback>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	f248 0201 	movw	r2, #32769	; 0x8001
 800503e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005042:	601a      	str	r2, [r3, #0]
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8005044:	6822      	ldr	r2, [r4, #0]
 8005046:	f502 538b 	add.w	r3, r2, #4448	; 0x1160
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	0449      	lsls	r1, r1, #17
 800504e:	d51d      	bpl.n	800508c <HAL_ETH_IRQHandler+0xa4>
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8005050:	f241 1134 	movw	r1, #4404	; 0x1134
 8005054:	5850      	ldr	r0, [r2, r1]
 8005056:	0440      	lsls	r0, r0, #17
 8005058:	d518      	bpl.n	800508c <HAL_ETH_IRQHandler+0xa4>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800505a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800505c:	f040 0008 	orr.w	r0, r0, #8
 8005060:	6560      	str	r0, [r4, #84]	; 0x54
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	04c0      	lsls	r0, r0, #19
 8005066:	d54d      	bpl.n	8005104 <HAL_ETH_IRQHandler+0x11c>
        heth->DMAErrorCode = __HAL_ETH_DMA_GET_IT(heth, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	f241 1302 	movw	r3, #4354	; 0x1102
 800506e:	4383      	bics	r3, r0
 8005070:	bf0c      	ite	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	2300      	movne	r3, #0
 8005076:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8005078:	5853      	ldr	r3, [r2, r1]
 800507a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800507e:	5053      	str	r3, [r2, r1]
        heth->gState = HAL_ETH_STATE_ERROR;
 8005080:	23e0      	movs	r3, #224	; 0xe0
 8005082:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      HAL_ETH_DMAErrorCallback(heth);
 8005086:	4620      	mov	r0, r4
 8005088:	f7ff ffa9 	bl	8004fde <HAL_ETH_DMAErrorCallback>
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8005092:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005096:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800509a:	d10a      	bne.n	80050b2 <HAL_ETH_IRQHandler+0xca>
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800509c:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
    HAL_ETH_MACErrorCallback(heth);
 80050a0:	4620      	mov	r0, r4
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80050a2:	65e3      	str	r3, [r4, #92]	; 0x5c
    heth->gState = HAL_ETH_STATE_ERROR;
 80050a4:	23e0      	movs	r3, #224	; 0xe0
 80050a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    HAL_ETH_MACErrorCallback(heth);
 80050aa:	f7ff ff99 	bl	8004fe0 <HAL_ETH_MACErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 80050ae:	2300      	movs	r3, #0
 80050b0:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80050b8:	06d0      	lsls	r0, r2, #27
 80050ba:	d509      	bpl.n	80050d0 <HAL_ETH_IRQHandler+0xe8>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80050bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 80050c0:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80050c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050c6:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ETH_PMTCallback(heth);
 80050c8:	f7ff ff8b 	bl	8004fe2 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80050cc:	2300      	movs	r3, #0
 80050ce:	6623      	str	r3, [r4, #96]	; 0x60
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80050d6:	0691      	lsls	r1, r2, #26
 80050d8:	d509      	bpl.n	80050ee <HAL_ETH_IRQHandler+0x106>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80050da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 80050de:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	6663      	str	r3, [r4, #100]	; 0x64
    HAL_ETH_EEECallback(heth);
 80050e6:	f7ff ff7d 	bl	8004fe4 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 80050ea:	2300      	movs	r3, #0
 80050ec:	6663      	str	r3, [r4, #100]	; 0x64
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != RESET)
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <HAL_ETH_IRQHandler+0x138>)
 80050f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f2:	0252      	lsls	r2, r2, #9
 80050f4:	d505      	bpl.n	8005102 <HAL_ETH_IRQHandler+0x11a>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80050f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 80050fa:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_ETH_WakeUpCallback(heth);
 80050fe:	f7ff ff72 	bl	8004fe6 <HAL_ETH_WakeUpCallback>
 8005102:	bd10      	pop	{r4, pc}
        heth->DMAErrorCode = __HAL_ETH_DMA_GET_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	f402 42cd 	and.w	r2, r2, #26240	; 0x6680
 800510a:	f5a2 4ecd 	sub.w	lr, r2, #26240	; 0x6680
 800510e:	f1de 0200 	rsbs	r2, lr, #0
 8005112:	eb42 020e 	adc.w	r2, r2, lr
 8005116:	65a2      	str	r2, [r4, #88]	; 0x58
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005118:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e7b2      	b.n	8005086 <HAL_ETH_IRQHandler+0x9e>
 8005120:	58000080 	.word	0x58000080

08005124 <HAL_ETH_ReadPHYRegister>:
{
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4604      	mov	r4, r0
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB))
 8005128:	6800      	ldr	r0, [r0, #0]
{
 800512a:	461d      	mov	r5, r3
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB))
 800512c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8005130:	07db      	lsls	r3, r3, #31
 8005132:	d501      	bpl.n	8005138 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8005134:	2001      	movs	r0, #1
 8005136:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005138:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));  
 800513c:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8005140:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005144:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005148:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800514c:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8005150:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8005154:	f7fe fbfa 	bl	800394c <HAL_GetTick>
 8005158:	4606      	mov	r6, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB))
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8005160:	f010 0001 	ands.w	r0, r0, #1
 8005164:	d104      	bne.n	8005170 <HAL_ETH_ReadPHYRegister+0x4c>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8005166:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800516a:	b29b      	uxth	r3, r3
 800516c:	602b      	str	r3, [r5, #0]
}
 800516e:	bd70      	pop	{r4, r5, r6, pc}
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8005170:	f7fe fbec 	bl	800394c <HAL_GetTick>
 8005174:	1b80      	subs	r0, r0, r6
 8005176:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800517a:	d9ee      	bls.n	800515a <HAL_ETH_ReadPHYRegister+0x36>
 800517c:	e7da      	b.n	8005134 <HAL_ETH_ReadPHYRegister+0x10>
	...

08005180 <HAL_ETH_WritePHYRegister>:
{
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4604      	mov	r4, r0
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB))
 8005184:	6800      	ldr	r0, [r0, #0]
 8005186:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 800518a:	07ed      	lsls	r5, r5, #31
 800518c:	d501      	bpl.n	8005192 <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 800518e:	2001      	movs	r0, #1
 8005190:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005192:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
 8005196:	b29b      	uxth	r3, r3
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));  
 8005198:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 800519c:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80051a0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80051a4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80051a8:	490c      	ldr	r1, [pc, #48]	; (80051dc <HAL_ETH_WritePHYRegister+0x5c>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80051aa:	f022 020c 	bic.w	r2, r2, #12
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80051ae:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80051b2:	f042 0205 	orr.w	r2, r2, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80051b6:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
  tickstart = HAL_GetTick();
 80051ba:	f7fe fbc7 	bl	800394c <HAL_GetTick>
 80051be:	4605      	mov	r5, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB))
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 80051c6:	f010 0001 	ands.w	r0, r0, #1
 80051ca:	d100      	bne.n	80051ce <HAL_ETH_WritePHYRegister+0x4e>
}
 80051cc:	bd38      	pop	{r3, r4, r5, pc}
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80051ce:	f7fe fbbd 	bl	800394c <HAL_GetTick>
 80051d2:	1b40      	subs	r0, r0, r5
 80051d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80051d8:	d9f2      	bls.n	80051c0 <HAL_ETH_WritePHYRegister+0x40>
 80051da:	e7d8      	b.n	800518e <HAL_ETH_WritePHYRegister+0xe>
 80051dc:	40028000 	.word	0x40028000

080051e0 <HAL_ETH_SetMDIOClockRange>:
{
 80051e0:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 80051e2:	6803      	ldr	r3, [r0, #0]
{
 80051e4:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 80051e6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 80051ea:	f003 fd1b 	bl	8008c24 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <HAL_ETH_SetMDIOClockRange+0x58>)
 80051f0:	4a12      	ldr	r2, [pc, #72]	; (800523c <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;  
 80051f2:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000)&&(hclk < 35000000))
 80051f6:	4403      	add	r3, r0
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d805      	bhi.n	8005208 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80051fc:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;		
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
 8005206:	bd38      	pop	{r3, r4, r5, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8005208:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <HAL_ETH_SetMDIOClockRange+0x60>)
 800520a:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <HAL_ETH_SetMDIOClockRange+0x64>)
 800520c:	4403      	add	r3, r0
 800520e:	4293      	cmp	r3, r2
 8005210:	d802      	bhi.n	8005218 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005212:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8005216:	e7f3      	b.n	8005200 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_ETH_SetMDIOClockRange+0x68>)
 800521a:	4a0c      	ldr	r2, [pc, #48]	; (800524c <HAL_ETH_SetMDIOClockRange+0x6c>)
 800521c:	4403      	add	r3, r0
 800521e:	4293      	cmp	r3, r2
 8005220:	d9ee      	bls.n	8005200 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_ETH_SetMDIOClockRange+0x70>)
 8005224:	4a0b      	ldr	r2, [pc, #44]	; (8005254 <HAL_ETH_SetMDIOClockRange+0x74>)
 8005226:	4403      	add	r3, r0
 8005228:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800522a:	bf94      	ite	ls
 800522c:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;    
 8005230:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 8005234:	e7e4      	b.n	8005200 <HAL_ETH_SetMDIOClockRange+0x20>
 8005236:	bf00      	nop
 8005238:	feced300 	.word	0xfeced300
 800523c:	00e4e1bf 	.word	0x00e4e1bf
 8005240:	fde9f140 	.word	0xfde9f140
 8005244:	017d783f 	.word	0x017d783f
 8005248:	fc6c7900 	.word	0xfc6c7900
 800524c:	026259ff 	.word	0x026259ff
 8005250:	fa0a1f00 	.word	0xfa0a1f00
 8005254:	02faf07f 	.word	0x02faf07f

08005258 <HAL_ETH_Init>:
{
 8005258:	b570      	push	{r4, r5, r6, lr}
  if(heth == NULL)
 800525a:	4605      	mov	r5, r0
{
 800525c:	b0a4      	sub	sp, #144	; 0x90
  if(heth == NULL)
 800525e:	2800      	cmp	r0, #0
 8005260:	f000 80c0 	beq.w	80053e4 <HAL_ETH_Init+0x18c>
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005264:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005268:	b90b      	cbnz	r3, 800526e <HAL_ETH_Init+0x16>
    HAL_ETH_MspInit(heth);
 800526a:	f7fb ff8b 	bl	8001184 <HAL_ETH_MspInit>
  heth->gState = HAL_ETH_STATE_BUSY;
 800526e:	2323      	movs	r3, #35	; 0x23
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005270:	7a28      	ldrb	r0, [r5, #8]
  heth->gState = HAL_ETH_STATE_BUSY;
 8005272:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005276:	4b96      	ldr	r3, [pc, #600]	; (80054d0 <HAL_ETH_Init+0x278>)
 8005278:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800527c:	f042 0202 	orr.w	r2, r2, #2
 8005280:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8005284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005290:	2800      	cmp	r0, #0
 8005292:	f040 8098 	bne.w	80053c6 <HAL_ETH_Init+0x16e>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005296:	f7fe fb71 	bl	800397c <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800529a:	682b      	ldr	r3, [r5, #0]
 800529c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80052a8:	f7fe fb50 	bl	800394c <HAL_GetTick>
 80052ac:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR))
 80052ae:	682b      	ldr	r3, [r5, #0]
 80052b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b4:	681c      	ldr	r4, [r3, #0]
 80052b6:	f014 0401 	ands.w	r4, r4, #1
 80052ba:	f040 8087 	bne.w	80053cc <HAL_ETH_Init+0x174>
  ETH_MAC_MDIO_ClkConfig(heth);
 80052be:	4628      	mov	r0, r5
 80052c0:	f7ff ff8e 	bl	80051e0 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 80052c4:	682e      	ldr	r6, [r5, #0]
 80052c6:	f003 fcad 	bl	8008c24 <HAL_RCC_GetHCLKFreq>
 80052ca:	4b82      	ldr	r3, [pc, #520]	; (80054d4 <HAL_ETH_Init+0x27c>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 80052cc:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10; 
 80052ce:	9414      	str	r4, [sp, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE; 
 80052d0:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80052d4:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  macDefaultConf.DeferralCheck = DISABLE;
 80052d8:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80052dc:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80052e0:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80052e2:	f88d 408d 	strb.w	r4, [sp, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80052e6:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80052ea:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80052ee:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 80052f0:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80052f4:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80052f8:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80052fa:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80052fc:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80052fe:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005302:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005306:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 800530a:	fbb0 f0f3 	udiv	r0, r0, r3
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800530e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 8005312:	3801      	subs	r0, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005314:	9311      	str	r3, [sp, #68]	; 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005316:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 800531a:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800531e:	2601      	movs	r6, #1
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005320:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005322:	2320      	movs	r3, #32
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005324:	4628      	mov	r0, r5
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005326:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800532a:	9322      	str	r3, [sp, #136]	; 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800532c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE; 
 8005330:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005334:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005336:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800533a:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.Speed = ETH_SPEED_100M;
 800533e:	9310      	str	r3, [sp, #64]	; 0x40
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005340:	2302      	movs	r3, #2
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005342:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005346:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.Jabber = ENABLE;
 800534a:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
  macDefaultConf.ReceiveOwn = ENABLE;
 800534e:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
  macDefaultConf.RetryTransmission = ENABLE;
 8005352:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.Support2KPacket = DISABLE;
 8005356:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800535a:	9321      	str	r3, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800535c:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005360:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005364:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005368:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800536c:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800536e:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005372:	f7ff fa9f 	bl	80048b4 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005376:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800537a:	a902      	add	r1, sp, #8
 800537c:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800537e:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005382:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005384:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005386:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800538a:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = 536;
 800538c:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800538e:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005390:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005394:	f88d 4015 	strb.w	r4, [sp, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005398:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800539c:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80053a0:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80053a4:	f7ff fb64 	bl	8004a70 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);	
 80053a8:	6829      	ldr	r1, [r5, #0]
  if ((heth->Init.RxBuffLen % 4) != 0)
 80053aa:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);	
 80053ac:	f501 5288 	add.w	r2, r1, #4352	; 0x1100
 80053b0:	6813      	ldr	r3, [r2, #0]
 80053b2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80053b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ba:	6013      	str	r3, [r2, #0]
  if ((heth->Init.RxBuffLen % 4) != 0)
 80053bc:	f010 0203 	ands.w	r2, r0, #3
 80053c0:	d012      	beq.n	80053e8 <HAL_ETH_Init+0x190>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80053c2:	656e      	str	r6, [r5, #84]	; 0x54
 80053c4:	e00b      	b.n	80053de <HAL_ETH_Init+0x186>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80053c6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80053ca:	e764      	b.n	8005296 <HAL_ETH_Init+0x3e>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80053cc:	f7fe fabe 	bl	800394c <HAL_GetTick>
 80053d0:	1b80      	subs	r0, r0, r6
 80053d2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80053d6:	f67f af6a 	bls.w	80052ae <HAL_ETH_Init+0x56>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80053da:	2304      	movs	r3, #4
 80053dc:	656b      	str	r3, [r5, #84]	; 0x54
    heth->gState = HAL_ETH_STATE_ERROR;
 80053de:	23e0      	movs	r3, #224	; 0xe0
 80053e0:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
    return HAL_ERROR;
 80053e4:	2001      	movs	r0, #1
 80053e6:	e071      	b.n	80054cc <HAL_ETH_Init+0x274>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80053e8:	f241 1408 	movw	r4, #4360	; 0x1108
 80053ec:	590b      	ldr	r3, [r1, r4]
 80053ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80053f2:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80053f6:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 80053fa:	68e8      	ldr	r0, [r5, #12]
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80053fc:	510b      	str	r3, [r1, r4]
 80053fe:	f100 0660 	add.w	r6, r0, #96	; 0x60
 8005402:	f105 0418 	add.w	r4, r5, #24
    dmatxdesc = heth->Init.TxDesc + i;
 8005406:	4603      	mov	r3, r0
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	705a      	strb	r2, [r3, #1]
 800540c:	709a      	strb	r2, [r3, #2]
 800540e:	70da      	strb	r2, [r3, #3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005410:	711a      	strb	r2, [r3, #4]
 8005412:	715a      	strb	r2, [r3, #5]
 8005414:	719a      	strb	r2, [r3, #6]
 8005416:	71da      	strb	r2, [r3, #7]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005418:	721a      	strb	r2, [r3, #8]
 800541a:	725a      	strb	r2, [r3, #9]
 800541c:	729a      	strb	r2, [r3, #10]
 800541e:	72da      	strb	r2, [r3, #11]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005420:	731a      	strb	r2, [r3, #12]
 8005422:	735a      	strb	r2, [r3, #13]
 8005424:	739a      	strb	r2, [r3, #14]
 8005426:	73da      	strb	r2, [r3, #15]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005428:	f844 3b04 	str.w	r3, [r4], #4
 800542c:	3318      	adds	r3, #24
  for(i=0; i < ETH_TX_DESC_CNT; i++)
 800542e:	42b3      	cmp	r3, r6
 8005430:	d1ea      	bne.n	8005408 <HAL_ETH_Init+0x1b0>
  heth->TxDescList.CurTxDesc = 0;
 8005432:	62aa      	str	r2, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005434:	f241 132c 	movw	r3, #4396	; 0x112c
 8005438:	2203      	movs	r2, #3
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800543a:	2400      	movs	r4, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800543c:	50ca      	str	r2, [r1, r3]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800543e:	f241 1314 	movw	r3, #4372	; 0x1114
    dmarxdesc =  heth->Init.RxDesc + i;
 8005442:	692a      	ldr	r2, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005444:	50c8      	str	r0, [r1, r3]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005446:	f501 5389 	add.w	r3, r1, #4384	; 0x1120
 800544a:	f102 0660 	add.w	r6, r2, #96	; 0x60
 800544e:	6018      	str	r0, [r3, #0]
 8005450:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    dmarxdesc =  heth->Init.RxDesc + i;
 8005454:	4613      	mov	r3, r2
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005456:	701c      	strb	r4, [r3, #0]
 8005458:	705c      	strb	r4, [r3, #1]
 800545a:	709c      	strb	r4, [r3, #2]
 800545c:	70dc      	strb	r4, [r3, #3]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800545e:	711c      	strb	r4, [r3, #4]
 8005460:	715c      	strb	r4, [r3, #5]
 8005462:	719c      	strb	r4, [r3, #6]
 8005464:	71dc      	strb	r4, [r3, #7]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005466:	721c      	strb	r4, [r3, #8]
 8005468:	725c      	strb	r4, [r3, #9]
 800546a:	729c      	strb	r4, [r3, #10]
 800546c:	72dc      	strb	r4, [r3, #11]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800546e:	731c      	strb	r4, [r3, #12]
 8005470:	735c      	strb	r4, [r3, #13]
 8005472:	739c      	strb	r4, [r3, #14]
 8005474:	73dc      	strb	r4, [r3, #15]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005476:	741c      	strb	r4, [r3, #16]
 8005478:	745c      	strb	r4, [r3, #17]
 800547a:	749c      	strb	r4, [r3, #18]
 800547c:	74dc      	strb	r4, [r3, #19]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800547e:	751c      	strb	r4, [r3, #20]
 8005480:	755c      	strb	r4, [r3, #21]
 8005482:	759c      	strb	r4, [r3, #22]
 8005484:	75dc      	strb	r4, [r3, #23]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005486:	f840 3b04 	str.w	r3, [r0], #4
 800548a:	3318      	adds	r3, #24
  for(i = 0; i < ETH_RX_DESC_CNT; i++)
 800548c:	42b3      	cmp	r3, r6
 800548e:	d1e2      	bne.n	8005456 <HAL_ETH_Init+0x1fe>
  WRITE_REG(heth->Instance->DMACRDRLR, (ETH_RX_DESC_CNT - 1));
 8005490:	2003      	movs	r0, #3
 8005492:	f241 1330 	movw	r3, #4400	; 0x1130
  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005496:	63ec      	str	r4, [r5, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005498:	642c      	str	r4, [r5, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800549a:	646c      	str	r4, [r5, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800549c:	64ec      	str	r4, [r5, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800549e:	64ac      	str	r4, [r5, #72]	; 0x48
  WRITE_REG(heth->Instance->DMACRDRLR, (ETH_RX_DESC_CNT - 1));
 80054a0:	50c8      	str	r0, [r1, r3]
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80054a2:	f241 131c 	movw	r3, #4380	; 0x111c
  return HAL_OK;
 80054a6:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80054a8:	50ca      	str	r2, [r1, r3]
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)heth->Init.RxDesc + ((ETH_RX_DESC_CNT - 1)*sizeof(ETH_DMADescTypeDef))));
 80054aa:	3248      	adds	r2, #72	; 0x48
 80054ac:	f241 1328 	movw	r3, #4392	; 0x1128
 80054b0:	50ca      	str	r2, [r1, r3]
  heth->Instance->MACA0HR = ((heth->Init.MACAddr[5] << 8) | heth->Init.MACAddr[4]);
 80054b2:	686b      	ldr	r3, [r5, #4]
 80054b4:	889a      	ldrh	r2, [r3, #4]
 80054b6:	f8c1 2300 	str.w	r2, [r1, #768]	; 0x300
 80054ba:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = ((heth->Init.MACAddr[3] << 24) | (heth->Init.MACAddr[2] << 16) | (heth->Init.MACAddr[1] << 8) | heth->Init.MACAddr[0]);
 80054bc:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 80054c0:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80054c2:	656c      	str	r4, [r5, #84]	; 0x54
  heth->gState = HAL_ETH_STATE_READY;
 80054c4:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
  heth->RxState = HAL_ETH_STATE_READY;
 80054c8:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
}
 80054cc:	b024      	add	sp, #144	; 0x90
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	58024400 	.word	0x58024400
 80054d4:	000f4240 	.word	0x000f4240

080054d8 <HAL_FDCAN_Init>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef* hfdcan)
{
 80054d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t tickstart = 0U;

  /* Check FDCAN handle */
  if(hfdcan == NULL)
 80054dc:	4604      	mov	r4, r0
 80054de:	2800      	cmp	r0, #0
 80054e0:	f000 8282 	beq.w	80059e8 <HAL_FDCAN_Init+0x510>
  {
     return HAL_ERROR;
  }

  /* Check FDCAN instance */
  if(hfdcan->Instance == FDCAN1)
 80054e4:	6803      	ldr	r3, [r0, #0]
 80054e6:	4a9e      	ldr	r2, [pc, #632]	; (8005760 <HAL_FDCAN_Init+0x288>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	f040 82a9 	bne.w	8005a40 <HAL_FDCAN_Init+0x568>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100);
 80054ee:	4b9d      	ldr	r3, [pc, #628]	; (8005764 <HAL_FDCAN_Init+0x28c>)
 80054f0:	6043      	str	r3, [r0, #4]
  }

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 80054f2:	68a3      	ldr	r3, [r4, #8]
 80054f4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80054f8:	d006      	beq.n	8005508 <HAL_FDCAN_Init+0x30>
 80054fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fe:	d003      	beq.n	8005508 <HAL_FDCAN_Init+0x30>
 8005500:	21e6      	movs	r1, #230	; 0xe6
 8005502:	4899      	ldr	r0, [pc, #612]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005504:	f7fc fe19 	bl	800213a <assert_failed>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 8005508:	68e3      	ldr	r3, [r4, #12]
 800550a:	2b04      	cmp	r3, #4
 800550c:	d903      	bls.n	8005516 <HAL_FDCAN_Init+0x3e>
 800550e:	21e7      	movs	r1, #231	; 0xe7
 8005510:	4895      	ldr	r0, [pc, #596]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005512:	f7fc fe12 	bl	800213a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 8005516:	7c23      	ldrb	r3, [r4, #16]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d903      	bls.n	8005524 <HAL_FDCAN_Init+0x4c>
 800551c:	21e8      	movs	r1, #232	; 0xe8
 800551e:	4892      	ldr	r0, [pc, #584]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005520:	f7fc fe0b 	bl	800213a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 8005524:	7c63      	ldrb	r3, [r4, #17]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d903      	bls.n	8005532 <HAL_FDCAN_Init+0x5a>
 800552a:	21e9      	movs	r1, #233	; 0xe9
 800552c:	488e      	ldr	r0, [pc, #568]	; (8005768 <HAL_FDCAN_Init+0x290>)
 800552e:	f7fc fe04 	bl	800213a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 8005532:	7ca3      	ldrb	r3, [r4, #18]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d903      	bls.n	8005540 <HAL_FDCAN_Init+0x68>
 8005538:	21ea      	movs	r1, #234	; 0xea
 800553a:	488b      	ldr	r0, [pc, #556]	; (8005768 <HAL_FDCAN_Init+0x290>)
 800553c:	f7fc fdfd 	bl	800213a <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 8005540:	6963      	ldr	r3, [r4, #20]
 8005542:	3b01      	subs	r3, #1
 8005544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005548:	d303      	bcc.n	8005552 <HAL_FDCAN_Init+0x7a>
 800554a:	21eb      	movs	r1, #235	; 0xeb
 800554c:	4886      	ldr	r0, [pc, #536]	; (8005768 <HAL_FDCAN_Init+0x290>)
 800554e:	f7fc fdf4 	bl	800213a <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 8005552:	69a3      	ldr	r3, [r4, #24]
 8005554:	3b01      	subs	r3, #1
 8005556:	2b7f      	cmp	r3, #127	; 0x7f
 8005558:	d903      	bls.n	8005562 <HAL_FDCAN_Init+0x8a>
 800555a:	21ec      	movs	r1, #236	; 0xec
 800555c:	4882      	ldr	r0, [pc, #520]	; (8005768 <HAL_FDCAN_Init+0x290>)
 800555e:	f7fc fdec 	bl	800213a <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 8005562:	69e3      	ldr	r3, [r4, #28]
 8005564:	3b02      	subs	r3, #2
 8005566:	2bfe      	cmp	r3, #254	; 0xfe
 8005568:	d903      	bls.n	8005572 <HAL_FDCAN_Init+0x9a>
 800556a:	21ed      	movs	r1, #237	; 0xed
 800556c:	487e      	ldr	r0, [pc, #504]	; (8005768 <HAL_FDCAN_Init+0x290>)
 800556e:	f7fc fde4 	bl	800213a <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8005572:	6a23      	ldr	r3, [r4, #32]
 8005574:	3b02      	subs	r3, #2
 8005576:	2b7e      	cmp	r3, #126	; 0x7e
 8005578:	d903      	bls.n	8005582 <HAL_FDCAN_Init+0xaa>
 800557a:	21ee      	movs	r1, #238	; 0xee
 800557c:	487a      	ldr	r0, [pc, #488]	; (8005768 <HAL_FDCAN_Init+0x290>)
 800557e:	f7fc fddc 	bl	800213a <assert_failed>
  if(hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005582:	68a3      	ldr	r3, [r4, #8]
 8005584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005588:	d11f      	bne.n	80055ca <HAL_FDCAN_Init+0xf2>
  {
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 800558a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800558c:	3b01      	subs	r3, #1
 800558e:	2b1f      	cmp	r3, #31
 8005590:	d903      	bls.n	800559a <HAL_FDCAN_Init+0xc2>
 8005592:	21f1      	movs	r1, #241	; 0xf1
 8005594:	4874      	ldr	r0, [pc, #464]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005596:	f7fc fdd0 	bl	800213a <assert_failed>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 800559a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800559c:	3b01      	subs	r3, #1
 800559e:	2b0f      	cmp	r3, #15
 80055a0:	d903      	bls.n	80055aa <HAL_FDCAN_Init+0xd2>
 80055a2:	21f2      	movs	r1, #242	; 0xf2
 80055a4:	4870      	ldr	r0, [pc, #448]	; (8005768 <HAL_FDCAN_Init+0x290>)
 80055a6:	f7fc fdc8 	bl	800213a <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 80055aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055ac:	3b01      	subs	r3, #1
 80055ae:	2b1f      	cmp	r3, #31
 80055b0:	d903      	bls.n	80055ba <HAL_FDCAN_Init+0xe2>
 80055b2:	21f3      	movs	r1, #243	; 0xf3
 80055b4:	486c      	ldr	r0, [pc, #432]	; (8005768 <HAL_FDCAN_Init+0x290>)
 80055b6:	f7fc fdc0 	bl	800213a <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG2(hfdcan->Init.DataTimeSeg2));
 80055ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055bc:	3b01      	subs	r3, #1
 80055be:	2b0f      	cmp	r3, #15
 80055c0:	d903      	bls.n	80055ca <HAL_FDCAN_Init+0xf2>
 80055c2:	21f4      	movs	r1, #244	; 0xf4
 80055c4:	4868      	ldr	r0, [pc, #416]	; (8005768 <HAL_FDCAN_Init+0x290>)
 80055c6:	f7fc fdb8 	bl	800213a <assert_failed>
  }
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, 128));
 80055ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d903      	bls.n	80055d8 <HAL_FDCAN_Init+0x100>
 80055d0:	21f6      	movs	r1, #246	; 0xf6
 80055d2:	4865      	ldr	r0, [pc, #404]	; (8005768 <HAL_FDCAN_Init+0x290>)
 80055d4:	f7fc fdb1 	bl	800213a <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, 64));
 80055d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d903      	bls.n	80055e6 <HAL_FDCAN_Init+0x10e>
 80055de:	21f7      	movs	r1, #247	; 0xf7
 80055e0:	4861      	ldr	r0, [pc, #388]	; (8005768 <HAL_FDCAN_Init+0x290>)
 80055e2:	f7fc fdaa 	bl	800213a <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.RxFifo0ElmtsNbr, 64));
 80055e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d903      	bls.n	80055f4 <HAL_FDCAN_Init+0x11c>
 80055ec:	21f8      	movs	r1, #248	; 0xf8
 80055ee:	485e      	ldr	r0, [pc, #376]	; (8005768 <HAL_FDCAN_Init+0x290>)
 80055f0:	f7fc fda3 	bl	800213a <assert_failed>
  if(hfdcan->Init.RxFifo0ElmtsNbr > 0)
 80055f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f6:	b153      	cbz	r3, 800560e <HAL_FDCAN_Init+0x136>
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.RxFifo0ElmtSize));
 80055f8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80055fa:	2a12      	cmp	r2, #18
 80055fc:	d803      	bhi.n	8005606 <HAL_FDCAN_Init+0x12e>
 80055fe:	4b5b      	ldr	r3, [pc, #364]	; (800576c <HAL_FDCAN_Init+0x294>)
 8005600:	40d3      	lsrs	r3, r2
 8005602:	07df      	lsls	r7, r3, #31
 8005604:	d403      	bmi.n	800560e <HAL_FDCAN_Init+0x136>
 8005606:	21fb      	movs	r1, #251	; 0xfb
 8005608:	4857      	ldr	r0, [pc, #348]	; (8005768 <HAL_FDCAN_Init+0x290>)
 800560a:	f7fc fd96 	bl	800213a <assert_failed>
  }
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.RxFifo1ElmtsNbr, 64));
 800560e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d903      	bls.n	800561c <HAL_FDCAN_Init+0x144>
 8005614:	21fd      	movs	r1, #253	; 0xfd
 8005616:	4854      	ldr	r0, [pc, #336]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005618:	f7fc fd8f 	bl	800213a <assert_failed>
  if(hfdcan->Init.RxFifo1ElmtsNbr > 0)
 800561c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800561e:	b15b      	cbz	r3, 8005638 <HAL_FDCAN_Init+0x160>
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.RxFifo1ElmtSize));
 8005620:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005622:	2a12      	cmp	r2, #18
 8005624:	d803      	bhi.n	800562e <HAL_FDCAN_Init+0x156>
 8005626:	4b51      	ldr	r3, [pc, #324]	; (800576c <HAL_FDCAN_Init+0x294>)
 8005628:	40d3      	lsrs	r3, r2
 800562a:	07de      	lsls	r6, r3, #31
 800562c:	d404      	bmi.n	8005638 <HAL_FDCAN_Init+0x160>
 800562e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005632:	484d      	ldr	r0, [pc, #308]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005634:	f7fc fd81 	bl	800213a <assert_failed>
  }
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.RxBuffersNbr, 64));
 8005638:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d904      	bls.n	8005648 <HAL_FDCAN_Init+0x170>
 800563e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005642:	4849      	ldr	r0, [pc, #292]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005644:	f7fc fd79 	bl	800213a <assert_failed>
  if(hfdcan->Init.RxBuffersNbr > 0)
 8005648:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800564a:	b15b      	cbz	r3, 8005664 <HAL_FDCAN_Init+0x18c>
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.RxBufferSize));
 800564c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800564e:	2a12      	cmp	r2, #18
 8005650:	d803      	bhi.n	800565a <HAL_FDCAN_Init+0x182>
 8005652:	4b46      	ldr	r3, [pc, #280]	; (800576c <HAL_FDCAN_Init+0x294>)
 8005654:	40d3      	lsrs	r3, r2
 8005656:	07dd      	lsls	r5, r3, #31
 8005658:	d404      	bmi.n	8005664 <HAL_FDCAN_Init+0x18c>
 800565a:	f240 1105 	movw	r1, #261	; 0x105
 800565e:	4842      	ldr	r0, [pc, #264]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005660:	f7fc fd6b 	bl	800213a <assert_failed>
  }
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.TxEventsNbr, 32));
 8005664:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005666:	2b20      	cmp	r3, #32
 8005668:	d904      	bls.n	8005674 <HAL_FDCAN_Init+0x19c>
 800566a:	f240 1107 	movw	r1, #263	; 0x107
 800566e:	483e      	ldr	r0, [pc, #248]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005670:	f7fc fd63 	bl	800213a <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr), 32));
 8005674:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005676:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005678:	4413      	add	r3, r2
 800567a:	2b20      	cmp	r3, #32
 800567c:	d904      	bls.n	8005688 <HAL_FDCAN_Init+0x1b0>
 800567e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005682:	4839      	ldr	r0, [pc, #228]	; (8005768 <HAL_FDCAN_Init+0x290>)
 8005684:	f7fc fd59 	bl	800213a <assert_failed>
  if(hfdcan->Init.TxFifoQueueElmtsNbr > 0)
 8005688:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800568a:	b143      	cbz	r3, 800569e <HAL_FDCAN_Init+0x1c6>
  {
    assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 800568c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800568e:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 8005692:	d004      	beq.n	800569e <HAL_FDCAN_Init+0x1c6>
 8005694:	f240 110b 	movw	r1, #267	; 0x10b
 8005698:	4833      	ldr	r0, [pc, #204]	; (8005768 <HAL_FDCAN_Init+0x290>)
 800569a:	f7fc fd4e 	bl	800213a <assert_failed>
  }
  if((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0)
 800569e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056a0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80056a2:	42d3      	cmn	r3, r2
 80056a4:	d00b      	beq.n	80056be <HAL_FDCAN_Init+0x1e6>
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
 80056a6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80056a8:	2a12      	cmp	r2, #18
 80056aa:	d803      	bhi.n	80056b4 <HAL_FDCAN_Init+0x1dc>
 80056ac:	4b2f      	ldr	r3, [pc, #188]	; (800576c <HAL_FDCAN_Init+0x294>)
 80056ae:	40d3      	lsrs	r3, r2
 80056b0:	07d8      	lsls	r0, r3, #31
 80056b2:	d404      	bmi.n	80056be <HAL_FDCAN_Init+0x1e6>
 80056b4:	f240 110f 	movw	r1, #271	; 0x10f
 80056b8:	482b      	ldr	r0, [pc, #172]	; (8005768 <HAL_FDCAN_Init+0x290>)
 80056ba:	f7fc fd3e 	bl	800213a <assert_failed>
  }

  if(hfdcan->State == HAL_FDCAN_STATE_RESET)
 80056be:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80056c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056c6:	b923      	cbnz	r3, 80056d2 <HAL_FDCAN_Init+0x1fa>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80056c8:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95

    /* Init the low level hardware */
    HAL_FDCAN_MspInit(hfdcan);
 80056cc:	4620      	mov	r0, r4
 80056ce:	f7fb fef1 	bl	80014b4 <HAL_FDCAN_MspInit>
  }

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	6993      	ldr	r3, [r2, #24]
 80056d6:	f023 0310 	bic.w	r3, r3, #16
 80056da:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056dc:	f7fe f936 	bl	800394c <HAL_GetTick>
 80056e0:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	0711      	lsls	r1, r2, #28
 80056e8:	f100 816f 	bmi.w	80059ca <HAL_FDCAN_Init+0x4f2>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056f4:	f7fe f92a 	bl	800394c <HAL_GetTick>
 80056f8:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == RESET)
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	07d2      	lsls	r2, r2, #31
 8005700:	f140 8175 	bpl.w	80059ee <HAL_FDCAN_Init+0x516>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	f042 0202 	orr.w	r2, r2, #2
 800570a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if(hfdcan->Init.AutoRetransmission == ENABLE)
 800570c:	7c22      	ldrb	r2, [r4, #16]
 800570e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	bf0c      	ite	eq
 8005714:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005718:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 800571c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if(hfdcan->Init.TransmitPause == ENABLE)
 800571e:	7c62      	ldrb	r2, [r4, #17]
 8005720:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	bf0c      	ite	eq
 8005726:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800572a:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 800572e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if(hfdcan->Init.ProtocolException == ENABLE)
 8005730:	7ca2      	ldrb	r2, [r4, #18]
 8005732:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	bf0c      	ite	eq
 8005738:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800573c:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8005740:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	68a0      	ldr	r0, [r4, #8]
 8005746:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800574a:	4302      	orrs	r2, r0
 800574c:	619a      	str	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if(hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800574e:	68e2      	ldr	r2, [r4, #12]
 8005750:	2a01      	cmp	r2, #1
 8005752:	f040 8153 	bne.w	80059fc <HAL_FDCAN_Init+0x524>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	f042 0204 	orr.w	r2, r2, #4
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800575c:	619a      	str	r2, [r3, #24]
 800575e:	e007      	b.n	8005770 <HAL_FDCAN_Init+0x298>
 8005760:	4000a000 	.word	0x4000a000
 8005764:	4000a100 	.word	0x4000a100
 8005768:	080137a6 	.word	0x080137a6
 800576c:	000445f0 	.word	0x000445f0
    }
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 8005770:	69a2      	ldr	r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1) << 16));

  /* If FD operation with BRS is selected, set the data bit timing register */
  if(hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005772:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 8005776:	f102 31ff 	add.w	r1, r2, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 800577a:	69e2      	ldr	r2, [r4, #28]
 800577c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005780:	ea4f 2202 	mov.w	r2, r2, lsl #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 8005784:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 8005788:	6a21      	ldr	r1, [r4, #32]
 800578a:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 800578e:	ea42 0201 	orr.w	r2, r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1) << 16));
 8005792:	6961      	ldr	r1, [r4, #20]
 8005794:	f101 31ff 	add.w	r1, r1, #4294967295
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 8005798:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 800579c:	61da      	str	r2, [r3, #28]
  if(hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800579e:	d10e      	bne.n	80057be <HAL_FDCAN_Init+0x2e6>
  {
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 80057a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80057a2:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 80057a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80057a6:	3a01      	subs	r2, #1
 80057a8:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 80057aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 80057ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80057b0:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 80057b2:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1) << 16));
 80057b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057b6:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 80057b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 80057bc:	60da      	str	r2, [r3, #12]
  }

  if(hfdcan->Init.TxFifoQueueElmtsNbr > 0)
 80057be:	6e26      	ldr	r6, [r4, #96]	; 0x60
 80057c0:	b12e      	cbz	r6, 80057ce <HAL_FDCAN_Init+0x2f6>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80057c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80057c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80057c8:	430a      	orrs	r2, r1
 80057ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0)
 80057ce:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80057d0:	42c6      	cmn	r6, r0
 80057d2:	d009      	beq.n	80057e8 <HAL_FDCAN_Init+0x310>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80057d4:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 80057d8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80057da:	4d9e      	ldr	r5, [pc, #632]	; (8005a54 <HAL_FDCAN_Init+0x57c>)
 80057dc:	f021 0107 	bic.w	r1, r1, #7
 80057e0:	5caa      	ldrb	r2, [r5, r2]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if(hfdcan->Init.RxFifo0ElmtsNbr > 0)
 80057e8:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
 80057ec:	f1b8 0f00 	cmp.w	r8, #0
 80057f0:	d009      	beq.n	8005806 <HAL_FDCAN_Init+0x32e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, CvtEltSize[hfdcan->Init.RxFifo0ElmtSize]);
 80057f2:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 80057f6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80057f8:	4d96      	ldr	r5, [pc, #600]	; (8005a54 <HAL_FDCAN_Init+0x57c>)
 80057fa:	f021 0107 	bic.w	r1, r1, #7
 80057fe:	5caa      	ldrb	r2, [r5, r2]
 8005800:	430a      	orrs	r2, r1
 8005802:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if(hfdcan->Init.RxFifo1ElmtsNbr > 0)
 8005806:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 800580a:	f1bc 0f00 	cmp.w	ip, #0
 800580e:	d00a      	beq.n	8005826 <HAL_FDCAN_Init+0x34e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << 4));
 8005810:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005814:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005816:	4d8f      	ldr	r5, [pc, #572]	; (8005a54 <HAL_FDCAN_Init+0x57c>)
 8005818:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800581c:	5c69      	ldrb	r1, [r5, r1]
 800581e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8005822:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if(hfdcan->Init.RxBuffersNbr > 0)
 8005826:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
 800582a:	f1ba 0f00 	cmp.w	sl, #0
 800582e:	d00a      	beq.n	8005846 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << 8));
 8005830:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005834:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005836:	4d87      	ldr	r5, [pc, #540]	; (8005a54 <HAL_FDCAN_Init+0x57c>)
 8005838:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800583c:	5c69      	ldrb	r1, [r5, r1]
 800583e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005842:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if(hfdcan->Instance == FDCAN1)
 8005846:	4a84      	ldr	r2, [pc, #528]	; (8005a58 <HAL_FDCAN_Init+0x580>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d104      	bne.n	8005856 <HAL_FDCAN_Init+0x37e>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800584c:	6861      	ldr	r1, [r4, #4]
 800584e:	688a      	ldr	r2, [r1, #8]
 8005850:	f022 0203 	bic.w	r2, r2, #3
 8005854:	608a      	str	r2, [r1, #8]
  uint32_t RAMcounter;

  hfdcan->msgRam.StandardFilterSA = hfdcan->Init.MessageRAMOffset;

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 8005856:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800585a:	f8df e20c 	ldr.w	lr, [pc, #524]	; 8005a68 <HAL_FDCAN_Init+0x590>
  hfdcan->msgRam.StandardFilterSA = hfdcan->Init.MessageRAMOffset;
 800585e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 8005860:	ea02 020e 	and.w	r2, r2, lr
  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + hfdcan->Init.StdFiltersNbr;
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << 16));
 8005864:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 8005868:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800586c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 8005870:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8005874:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005876:	f425 057f 	bic.w	r5, r5, #16711680	; 0xff0000
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + hfdcan->Init.StdFiltersNbr;
 800587a:	188f      	adds	r7, r1, r2
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 800587c:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 8005880:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 8005884:	f501 512c 	add.w	r1, r1, #11008	; 0x2b00
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 8005888:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 800588c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 8005890:	0089      	lsls	r1, r1, #2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 8005892:	ea05 050e 	and.w	r5, r5, lr
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4);
 8005896:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 800589a:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2);
 800589e:	eb07 0749 	add.w	r7, r7, r9, lsl #1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 80058a2:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << 16));
 80058a6:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80058aa:	f425 057f 	bic.w	r5, r5, #16711680	; 0xff0000
 80058ae:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80058b2:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (hfdcan->msgRam.RxFIFO0SA << 2));
 80058b6:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 80058ba:	ea05 050e 	and.w	r5, r5, lr
 80058be:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
 80058c2:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << 16));
 80058c6:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 80058ca:	f425 05fe 	bic.w	r5, r5, #8323072	; 0x7f0000
 80058ce:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 80058d2:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80058d6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80058d8:	fb05 f808 	mul.w	r8, r5, r8
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (hfdcan->msgRam.RxFIFO1SA << 2));
 80058dc:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80058e0:	4447      	add	r7, r8
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (hfdcan->msgRam.RxFIFO1SA << 2));
 80058e2:	f025 05fc 	bic.w	r5, r5, #252	; 0xfc
 80058e6:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
 80058ea:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << 16));
 80058ee:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80058f2:	f425 05fe 	bic.w	r5, r5, #8323072	; 0x7f0000
 80058f6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80058fa:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80058fe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005900:	fb05 fc0c 	mul.w	ip, r5, ip
 8005904:	eb07 050c 	add.w	r5, r7, ip
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (hfdcan->msgRam.RxBufferSA << 2));
 8005908:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 800590c:	f027 07fc 	bic.w	r7, r7, #252	; 0xfc
 8005910:	ea47 0785 	orr.w	r7, r7, r5, lsl #2
 8005914:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005918:	6d67      	ldr	r7, [r4, #84]	; 0x54
 800591a:	fb07 f70a 	mul.w	r7, r7, sl
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (hfdcan->msgRam.TxEventFIFOSA << 2));
 800591e:	f8d3 a0f0 	ldr.w	sl, [r3, #240]	; 0xf0
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005922:	443d      	add	r5, r7
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (hfdcan->msgRam.TxEventFIFOSA << 2));
 8005924:	ea0a 0e0e 	and.w	lr, sl, lr
 8005928:	ea4e 0e85 	orr.w	lr, lr, r5, lsl #2
 800592c:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << 16));
 8005930:	f8d3 a0f0 	ldr.w	sl, [r3, #240]	; 0xf0
 8005934:	f8d4 e058 	ldr.w	lr, [r4, #88]	; 0x58
 8005938:	f42a 1a7c 	bic.w	sl, sl, #4128768	; 0x3f0000
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2);
 800593c:	eb05 0b4e 	add.w	fp, r5, lr, lsl #1
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << 16));
 8005940:	ea4a 4a0e 	orr.w	sl, sl, lr, lsl #16
 8005944:	f8c3 a0f0 	str.w	sl, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (hfdcan->msgRam.TxBufferSA << 2));
 8005948:	f8d3 a0c0 	ldr.w	sl, [r3, #192]	; 0xc0
 800594c:	f02a 05fc 	bic.w	r5, sl, #252	; 0xfc
 8005950:	ea45 058b 	orr.w	r5, r5, fp, lsl #2
 8005954:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << 16));
 8005958:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 800595c:	f425 157c 	bic.w	r5, r5, #4128768	; 0x3f0000
 8005960:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8005964:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 8005968:	f8d3 a0c0 	ldr.w	sl, [r3, #192]	; 0xc0
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);
 800596c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 800596e:	f02a 5a7c 	bic.w	sl, sl, #1056964608	; 0x3f000000
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);
 8005972:	4368      	muls	r0, r5
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 8005974:	ea4a 6a06 	orr.w	sl, sl, r6, lsl #24
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4);
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2 * 4);
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4);

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 8005978:	4375      	muls	r5, r6
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 800597a:	f8c3 a0c0 	str.w	sl, [r3, #192]	; 0xc0
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4);
 800597e:	6722      	str	r2, [r4, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2 * 4);
 8005980:	eb02 02c9 	add.w	r2, r2, r9, lsl #3
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 8005984:	66e1      	str	r1, [r4, #108]	; 0x6c
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2 * 4);
 8005986:	6762      	str	r2, [r4, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4);
 8005988:	eb02 0288 	add.w	r2, r2, r8, lsl #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
 800598c:	eb02 038c 	add.w	r3, r2, ip, lsl #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4);
 8005990:	67a2      	str	r2, [r4, #120]	; 0x78

  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 8005992:	4a32      	ldr	r2, [pc, #200]	; (8005a5c <HAL_FDCAN_Init+0x584>)
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
 8005994:	67e3      	str	r3, [r4, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4);
 8005996:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800599a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2 * 4);
 800599e:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 80059a2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4);
 80059a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80059aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 80059ae:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 80059b2:	4293      	cmp	r3, r2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 80059b4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 80059b8:	d834      	bhi.n	8005a24 <HAL_FDCAN_Init+0x54c>
  else
  {
    /* Flush the allocated Message RAM area */
    for(RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4)
    {
      *(__IO uint32_t *)(RAMcounter) = 0x00000000;
 80059ba:	2200      	movs	r2, #0
    for(RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4)
 80059bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80059c0:	4299      	cmp	r1, r3
 80059c2:	d235      	bcs.n	8005a30 <HAL_FDCAN_Init+0x558>
      *(__IO uint32_t *)(RAMcounter) = 0x00000000;
 80059c4:	f841 2b04 	str.w	r2, [r1], #4
 80059c8:	e7f8      	b.n	80059bc <HAL_FDCAN_Init+0x4e4>
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80059ca:	f7fd ffbf 	bl	800394c <HAL_GetTick>
 80059ce:	1b40      	subs	r0, r0, r5
 80059d0:	280a      	cmp	r0, #10
 80059d2:	f67f ae86 	bls.w	80056e2 <HAL_FDCAN_Init+0x20a>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80059d6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059e2:	2303      	movs	r3, #3
 80059e4:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
     return HAL_ERROR;
 80059e8:	2001      	movs	r0, #1
 80059ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80059ee:	f7fd ffad 	bl	800394c <HAL_GetTick>
 80059f2:	1b40      	subs	r0, r0, r5
 80059f4:	280a      	cmp	r0, #10
 80059f6:	f67f ae80 	bls.w	80056fa <HAL_FDCAN_Init+0x222>
 80059fa:	e7ec      	b.n	80059d6 <HAL_FDCAN_Init+0x4fe>
  else if(hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	f43f aeb7 	beq.w	8005770 <HAL_FDCAN_Init+0x298>
    if(hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005a02:	2a02      	cmp	r2, #2
 8005a04:	d00a      	beq.n	8005a1c <HAL_FDCAN_Init+0x544>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005a06:	6999      	ldr	r1, [r3, #24]
      if(hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a08:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005a0a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005a0e:	6199      	str	r1, [r3, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a10:	6919      	ldr	r1, [r3, #16]
 8005a12:	f041 0110 	orr.w	r1, r1, #16
 8005a16:	6119      	str	r1, [r3, #16]
      if(hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a18:	f47f aeaa 	bne.w	8005770 <HAL_FDCAN_Init+0x298>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	f042 0220 	orr.w	r2, r2, #32
 8005a22:	e69b      	b.n	800575c <HAL_FDCAN_Init+0x284>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a24:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005a28:	f043 0320 	orr.w	r3, r3, #32
 8005a2c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a30:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a32:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a34:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a38:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8005a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
 8005a40:	4a07      	ldr	r2, [pc, #28]	; (8005a60 <HAL_FDCAN_Init+0x588>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	f43f ad55 	beq.w	80054f2 <HAL_FDCAN_Init+0x1a>
 8005a48:	21e5      	movs	r1, #229	; 0xe5
 8005a4a:	4806      	ldr	r0, [pc, #24]	; (8005a64 <HAL_FDCAN_Init+0x58c>)
 8005a4c:	f7fc fb75 	bl	800213a <assert_failed>
 8005a50:	e54f      	b.n	80054f2 <HAL_FDCAN_Init+0x1a>
 8005a52:	bf00      	nop
 8005a54:	08013793 	.word	0x08013793
 8005a58:	4000a000 	.word	0x4000a000
 8005a5c:	4000b5fc 	.word	0x4000b5fc
 8005a60:	4000a400 	.word	0x4000a400
 8005a64:	080137a6 	.word	0x080137a6
 8005a68:	ffff0003 	.word	0xffff0003

08005a6c <HAL_FDCAN_ClockCalibrationCallback>:
 8005a6c:	4770      	bx	lr

08005a6e <HAL_FDCAN_TxEventFifoCallback>:
 8005a6e:	4770      	bx	lr

08005a70 <HAL_FDCAN_RxFifo0Callback>:
 8005a70:	4770      	bx	lr

08005a72 <HAL_FDCAN_RxFifo1Callback>:
 8005a72:	4770      	bx	lr

08005a74 <HAL_FDCAN_TxFifoEmptyCallback>:
 8005a74:	4770      	bx	lr

08005a76 <HAL_FDCAN_TxBufferCompleteCallback>:
 8005a76:	4770      	bx	lr

08005a78 <HAL_FDCAN_TxBufferAbortCallback>:
 8005a78:	4770      	bx	lr

08005a7a <HAL_FDCAN_RxBufferNewMessageCallback>:
 8005a7a:	4770      	bx	lr

08005a7c <HAL_FDCAN_TimestampWraparoundCallback>:
 8005a7c:	4770      	bx	lr

08005a7e <HAL_FDCAN_TimeoutOccurredCallback>:
 8005a7e:	4770      	bx	lr

08005a80 <HAL_FDCAN_HighPriorityMessageCallback>:
 8005a80:	4770      	bx	lr

08005a82 <HAL_FDCAN_ErrorCallback>:
{
 8005a82:	4770      	bx	lr

08005a84 <HAL_FDCAN_TT_ScheduleSyncCallback>:
 8005a84:	4770      	bx	lr

08005a86 <HAL_FDCAN_TT_TimeMarkCallback>:
 8005a86:	4770      	bx	lr

08005a88 <HAL_FDCAN_TT_StopWatchCallback>:
{
 8005a88:	4770      	bx	lr

08005a8a <HAL_FDCAN_TT_GlobalTimeCallback>:
{
 8005a8a:	4770      	bx	lr

08005a8c <HAL_FDCAN_IRQHandler>:
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005a8c:	4aa2      	ldr	r2, [pc, #648]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
{
 8005a8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005a92:	6911      	ldr	r1, [r2, #16]
{
 8005a94:	4604      	mov	r4, r0
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005a96:	6953      	ldr	r3, [r2, #20]
 8005a98:	ea4f 7983 	mov.w	r9, r3, lsl #30
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005a9c:	6803      	ldr	r3, [r0, #0]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005a9e:	ea09 7981 	and.w	r9, r9, r1, lsl #30
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005aa2:	6d19      	ldr	r1, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005aa4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005aa6:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005aa8:	ea01 0805 	and.w	r8, r1, r5
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005aac:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005aae:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005ab0:	400f      	ands	r7, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005ab2:	6d59      	ldr	r1, [r3, #84]	; 0x54
  ErrStatus = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005ab4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005ab6:	f408 4870 	and.w	r8, r8, #61440	; 0xf000
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005aba:	400e      	ands	r6, r1
  ErrStatus &= hfdcan->Instance->IE;
 8005abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005abe:	f007 070f 	and.w	r7, r7, #15
  ErrStatus &= hfdcan->Instance->IE;
 8005ac2:	400d      	ands	r5, r1
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ac4:	6d19      	ldr	r1, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005ac6:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005aca:	05c9      	lsls	r1, r1, #23
  ErrStatus &= hfdcan->Instance->IE;
 8005acc:	f005 557f 	and.w	r5, r5, #1069547520	; 0x3fc00000
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ad0:	d50f      	bpl.n	8005af2 <HAL_FDCAN_IRQHandler+0x66>
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ad2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ad4:	05c9      	lsls	r1, r1, #23
 8005ad6:	d50c      	bpl.n	8005af2 <HAL_FDCAN_IRQHandler+0x66>
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG);
 8005ad8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ada:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005ade:	6559      	str	r1, [r3, #84]	; 0x54
 8005ae0:	6951      	ldr	r1, [r2, #20]
 8005ae2:	6151      	str	r1, [r2, #20]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ae8:	6519      	str	r1, [r3, #80]	; 0x50
 8005aea:	2300      	movs	r3, #0
 8005aec:	6113      	str	r3, [r2, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005aee:	f7ff ffc7 	bl	8005a80 <HAL_FDCAN_HighPriorityMessageCallback>
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005af6:	0551      	lsls	r1, r2, #21
 8005af8:	d51c      	bpl.n	8005b34 <HAL_FDCAN_IRQHandler+0xa8>
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005afa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005afc:	0552      	lsls	r2, r2, #21
 8005afe:	d519      	bpl.n	8005b34 <HAL_FDCAN_IRQHandler+0xa8>
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE);
 8005b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b06:	655a      	str	r2, [r3, #84]	; 0x54
 8005b08:	4a83      	ldr	r2, [pc, #524]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005b0a:	6951      	ldr	r1, [r2, #20]
 8005b0c:	6151      	str	r1, [r2, #20]
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005b0e:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005b12:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8005b16:	4001      	ands	r1, r0
      CLEAR_BIT(hfdcan->Instance->TXBCIE, AbortedBuffers);
 8005b18:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8005b1c:	ea20 0001 	bic.w	r0, r0, r1
 8005b20:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005b24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005b28:	6518      	str	r0, [r3, #80]	; 0x50
 8005b2a:	2300      	movs	r3, #0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005b2c:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005b2e:	6113      	str	r3, [r2, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005b30:	f7ff ffa2 	bl	8005a78 <HAL_FDCAN_TxBufferAbortCallback>
  if(ClkCalibrationITs != 0U)
 8005b34:	f1b9 0f00 	cmp.w	r9, #0
 8005b38:	d010      	beq.n	8005b5c <HAL_FDCAN_IRQHandler+0xd0>
    __HAL_FDCAN_DISABLE_IT(hfdcan, ClkCalibrationITs);
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	ea4f 7099 	mov.w	r0, r9, lsr #30
 8005b40:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005b42:	6553      	str	r3, [r2, #84]	; 0x54
 8005b44:	4b74      	ldr	r3, [pc, #464]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005b46:	6959      	ldr	r1, [r3, #20]
 8005b48:	ea21 0100 	bic.w	r1, r1, r0
 8005b4c:	6159      	str	r1, [r3, #20]
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005b4e:	2100      	movs	r1, #0
 8005b50:	6511      	str	r1, [r2, #80]	; 0x50
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005b52:	4649      	mov	r1, r9
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005b54:	6118      	str	r0, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005b56:	4620      	mov	r0, r4
 8005b58:	f7ff ff88 	bl	8005a6c <HAL_FDCAN_ClockCalibrationCallback>
  if(TxEventFifoITs != 0U)
 8005b5c:	f1b8 0f00 	cmp.w	r8, #0
 8005b60:	d00f      	beq.n	8005b82 <HAL_FDCAN_IRQHandler+0xf6>
    __HAL_FDCAN_DISABLE_IT(hfdcan, TxEventFifoITs);
 8005b62:	6822      	ldr	r2, [r4, #0]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005b64:	4620      	mov	r0, r4
    __HAL_FDCAN_DISABLE_IT(hfdcan, TxEventFifoITs);
 8005b66:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005b68:	ea23 0308 	bic.w	r3, r3, r8
 8005b6c:	6553      	str	r3, [r2, #84]	; 0x54
 8005b6e:	4b6a      	ldr	r3, [pc, #424]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005b70:	6959      	ldr	r1, [r3, #20]
 8005b72:	6159      	str	r1, [r3, #20]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005b74:	4641      	mov	r1, r8
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005b76:	f8c2 8050 	str.w	r8, [r2, #80]	; 0x50
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005b7e:	f7ff ff76 	bl	8005a6e <HAL_FDCAN_TxEventFifoCallback>
  if(RxFifo0ITs != 0U)
 8005b82:	b177      	cbz	r7, 8005ba2 <HAL_FDCAN_IRQHandler+0x116>
    __HAL_FDCAN_DISABLE_IT(hfdcan, RxFifo0ITs);
 8005b84:	6822      	ldr	r2, [r4, #0]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005b86:	4620      	mov	r0, r4
    __HAL_FDCAN_DISABLE_IT(hfdcan, RxFifo0ITs);
 8005b88:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005b8a:	ea23 0307 	bic.w	r3, r3, r7
 8005b8e:	6553      	str	r3, [r2, #84]	; 0x54
 8005b90:	4b61      	ldr	r3, [pc, #388]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005b92:	6959      	ldr	r1, [r3, #20]
 8005b94:	6159      	str	r1, [r3, #20]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005b96:	4639      	mov	r1, r7
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005b98:	6517      	str	r7, [r2, #80]	; 0x50
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005b9e:	f7ff ff67 	bl	8005a70 <HAL_FDCAN_RxFifo0Callback>
  if(RxFifo1ITs != 0U)
 8005ba2:	b176      	cbz	r6, 8005bc2 <HAL_FDCAN_IRQHandler+0x136>
    __HAL_FDCAN_DISABLE_IT(hfdcan, RxFifo1ITs);
 8005ba4:	6822      	ldr	r2, [r4, #0]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ba6:	4620      	mov	r0, r4
    __HAL_FDCAN_DISABLE_IT(hfdcan, RxFifo1ITs);
 8005ba8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005baa:	ea23 0306 	bic.w	r3, r3, r6
 8005bae:	6553      	str	r3, [r2, #84]	; 0x54
 8005bb0:	4b59      	ldr	r3, [pc, #356]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005bb2:	6959      	ldr	r1, [r3, #20]
 8005bb4:	6159      	str	r1, [r3, #20]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005bb6:	4631      	mov	r1, r6
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005bb8:	6516      	str	r6, [r2, #80]	; 0x50
 8005bba:	2200      	movs	r2, #0
 8005bbc:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005bbe:	f7ff ff58 	bl	8005a72 <HAL_FDCAN_RxFifo1Callback>
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bc6:	0517      	lsls	r7, r2, #20
 8005bc8:	d511      	bpl.n	8005bee <HAL_FDCAN_IRQHandler+0x162>
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005bca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bcc:	0516      	lsls	r6, r2, #20
 8005bce:	d50e      	bpl.n	8005bee <HAL_FDCAN_IRQHandler+0x162>
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TX_FIFO_EMPTY);
 8005bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005bd2:	4620      	mov	r0, r4
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TX_FIFO_EMPTY);
 8005bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
 8005bda:	4a4f      	ldr	r2, [pc, #316]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005bdc:	6951      	ldr	r1, [r2, #20]
 8005bde:	6151      	str	r1, [r2, #20]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005be0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005be4:	6519      	str	r1, [r3, #80]	; 0x50
 8005be6:	2300      	movs	r3, #0
 8005be8:	6113      	str	r3, [r2, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005bea:	f7ff ff43 	bl	8005a74 <HAL_FDCAN_TxFifoEmptyCallback>
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bf2:	0590      	lsls	r0, r2, #22
 8005bf4:	d51c      	bpl.n	8005c30 <HAL_FDCAN_IRQHandler+0x1a4>
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != RESET)
 8005bf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bf8:	0591      	lsls	r1, r2, #22
 8005bfa:	d519      	bpl.n	8005c30 <HAL_FDCAN_IRQHandler+0x1a4>
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TX_COMPLETE);
 8005bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c02:	655a      	str	r2, [r3, #84]	; 0x54
 8005c04:	4a44      	ldr	r2, [pc, #272]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005c06:	6951      	ldr	r1, [r2, #20]
 8005c08:	6151      	str	r1, [r2, #20]
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005c0a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005c0e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005c12:	4001      	ands	r1, r0
      CLEAR_BIT(hfdcan->Instance->TXBTIE, TransmittedBuffers);
 8005c14:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005c18:	ea20 0001 	bic.w	r0, r0, r1
 8005c1c:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005c20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005c24:	6518      	str	r0, [r3, #80]	; 0x50
 8005c26:	2300      	movs	r3, #0
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005c28:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005c2a:	6113      	str	r3, [r2, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005c2c:	f7ff ff23 	bl	8005a76 <HAL_FDCAN_TxBufferCompleteCallback>
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c34:	0312      	lsls	r2, r2, #12
 8005c36:	d511      	bpl.n	8005c5c <HAL_FDCAN_IRQHandler+0x1d0>
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c3a:	0317      	lsls	r7, r2, #12
 8005c3c:	d50e      	bpl.n	8005c5c <HAL_FDCAN_IRQHandler+0x1d0>
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE);
 8005c3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005c40:	4620      	mov	r0, r4
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE);
 8005c42:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
 8005c48:	4a33      	ldr	r2, [pc, #204]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005c4a:	6951      	ldr	r1, [r2, #20]
 8005c4c:	6151      	str	r1, [r2, #20]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005c4e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005c52:	6519      	str	r1, [r3, #80]	; 0x50
 8005c54:	2300      	movs	r3, #0
 8005c56:	6113      	str	r3, [r2, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005c58:	f7ff ff0f 	bl	8005a7a <HAL_FDCAN_RxBufferNewMessageCallback>
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c60:	03d6      	lsls	r6, r2, #15
 8005c62:	d511      	bpl.n	8005c88 <HAL_FDCAN_IRQHandler+0x1fc>
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c66:	03d0      	lsls	r0, r2, #15
 8005c68:	d50e      	bpl.n	8005c88 <HAL_FDCAN_IRQHandler+0x1fc>
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND);
 8005c6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005c6c:	4620      	mov	r0, r4
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND);
 8005c6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c72:	655a      	str	r2, [r3, #84]	; 0x54
 8005c74:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005c76:	6951      	ldr	r1, [r2, #20]
 8005c78:	6151      	str	r1, [r2, #20]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005c7a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005c7e:	6519      	str	r1, [r3, #80]	; 0x50
 8005c80:	2300      	movs	r3, #0
 8005c82:	6113      	str	r3, [r2, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005c84:	f7ff fefa 	bl	8005a7c <HAL_FDCAN_TimestampWraparoundCallback>
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c8c:	0351      	lsls	r1, r2, #13
 8005c8e:	d511      	bpl.n	8005cb4 <HAL_FDCAN_IRQHandler+0x228>
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005c90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c92:	0352      	lsls	r2, r2, #13
 8005c94:	d50e      	bpl.n	8005cb4 <HAL_FDCAN_IRQHandler+0x228>
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED);
 8005c96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005c98:	4620      	mov	r0, r4
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED);
 8005c9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005ca2:	6951      	ldr	r1, [r2, #20]
 8005ca4:	6151      	str	r1, [r2, #20]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005ca6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8005caa:	6519      	str	r1, [r3, #80]	; 0x50
 8005cac:	2300      	movs	r3, #0
 8005cae:	6113      	str	r3, [r2, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005cb0:	f7ff fee5 	bl	8005a7e <HAL_FDCAN_TimeoutOccurredCallback>
  if(__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cb8:	0397      	lsls	r7, r2, #14
 8005cba:	d514      	bpl.n	8005ce6 <HAL_FDCAN_IRQHandler+0x25a>
    if(__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cbe:	0396      	lsls	r6, r2, #14
 8005cc0:	d511      	bpl.n	8005ce6 <HAL_FDCAN_IRQHandler+0x25a>
      __HAL_FDCAN_DISABLE_IT(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE);
 8005cc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cc4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
 8005cca:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005ccc:	6951      	ldr	r1, [r2, #20]
 8005cce:	6151      	str	r1, [r2, #20]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005cd0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8005cd4:	6519      	str	r1, [r3, #80]	; 0x50
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	6111      	str	r1, [r2, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005cda:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8005cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ce2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  if(ErrStatus != 0U)
 8005ce6:	b175      	cbz	r5, 8005d06 <HAL_FDCAN_IRQHandler+0x27a>
    __HAL_FDCAN_DISABLE_IT(hfdcan, ErrStatus);
 8005ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cea:	ea22 0205 	bic.w	r2, r2, r5
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54
 8005cf0:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <HAL_FDCAN_IRQHandler+0x28c>)
 8005cf2:	6951      	ldr	r1, [r2, #20]
 8005cf4:	6151      	str	r1, [r2, #20]
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrStatus);
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	651d      	str	r5, [r3, #80]	; 0x50
 8005cfa:	6111      	str	r1, [r2, #16]
    hfdcan->ErrorCode |= ErrStatus;
 8005cfc:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8005d00:	4315      	orrs	r5, r2
 8005d02:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  if((hfdcan->Instance == FDCAN1) && \
 8005d06:	4a05      	ldr	r2, [pc, #20]	; (8005d1c <HAL_FDCAN_IRQHandler+0x290>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d174      	bne.n	8005df6 <HAL_FDCAN_IRQHandler+0x36a>
     ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0))
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	689a      	ldr	r2, [r3, #8]
  if((hfdcan->Instance == FDCAN1) && \
 8005d10:	0790      	lsls	r0, r2, #30
 8005d12:	d070      	beq.n	8005df6 <HAL_FDCAN_IRQHandler+0x36a>
 8005d14:	e004      	b.n	8005d20 <HAL_FDCAN_IRQHandler+0x294>
 8005d16:	bf00      	nop
 8005d18:	4000a800 	.word	0x4000a800
 8005d1c:	4000a000 	.word	0x4000a000
    TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005d20:	6a1a      	ldr	r2, [r3, #32]
    TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005d22:	6a59      	ldr	r1, [r3, #36]	; 0x24
    TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005d24:	6a1f      	ldr	r7, [r3, #32]
    TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005d26:	4011      	ands	r1, r2
    TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d2a:	4017      	ands	r7, r2
    TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005d2c:	6a1a      	ldr	r2, [r3, #32]
    TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005d2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if(TTSchedSyncITs != 0U)
 8005d30:	f011 010f 	ands.w	r1, r1, #15
    TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005d34:	6a1e      	ldr	r6, [r3, #32]
    TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005d36:	f007 0730 	and.w	r7, r7, #48	; 0x30
    TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005d3a:	ea02 0800 	and.w	r8, r2, r0
    TTDistErrors &= hfdcan->ttcan->TTIE;
 8005d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005d40:	6a1d      	ldr	r5, [r3, #32]
    TTDistErrors &= hfdcan->ttcan->TTIE;
 8005d42:	ea06 0602 	and.w	r6, r6, r2
    TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005d48:	f408 78c0 	and.w	r8, r8, #384	; 0x180
    TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005d4c:	ea05 0502 	and.w	r5, r5, r2
    TTDistErrors &= hfdcan->ttcan->TTIE;
 8005d50:	f406 46fc 	and.w	r6, r6, #32256	; 0x7e00
    TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005d54:	f405 25f0 	and.w	r5, r5, #491520	; 0x78000
    if(TTSchedSyncITs != 0U)
 8005d58:	d007      	beq.n	8005d6a <HAL_FDCAN_IRQHandler+0x2de>
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTSchedSyncITs);
 8005d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005d5c:	4620      	mov	r0, r4
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTSchedSyncITs);
 8005d5e:	ea22 0201 	bic.w	r2, r2, r1
 8005d62:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005d64:	6219      	str	r1, [r3, #32]
      HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005d66:	f7ff fe8d 	bl	8005a84 <HAL_FDCAN_TT_ScheduleSyncCallback>
    if(TTTimeMarkITs != 0U)
 8005d6a:	b14f      	cbz	r7, 8005d80 <HAL_FDCAN_IRQHandler+0x2f4>
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTTimeMarkITs);
 8005d6c:	6863      	ldr	r3, [r4, #4]
      HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005d6e:	4639      	mov	r1, r7
 8005d70:	4620      	mov	r0, r4
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTTimeMarkITs);
 8005d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d74:	ea22 0207 	bic.w	r2, r2, r7
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005d7a:	621f      	str	r7, [r3, #32]
      HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005d7c:	f7ff fe83 	bl	8005a86 <HAL_FDCAN_TT_TimeMarkCallback>
    if(__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005d80:	6863      	ldr	r3, [r4, #4]
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	0651      	lsls	r1, r2, #25
 8005d86:	d510      	bpl.n	8005daa <HAL_FDCAN_IRQHandler+0x31e>
      if(__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d8a:	0652      	lsls	r2, r2, #25
 8005d8c:	d50d      	bpl.n	8005daa <HAL_FDCAN_IRQHandler+0x31e>
        __HAL_FDCAN_TT_DISABLE_IT(hfdcan, FDCAN_TT_IT_STOP_WATCH);
 8005d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005d90:	2040      	movs	r0, #64	; 0x40
        __HAL_FDCAN_TT_DISABLE_IT(hfdcan, FDCAN_TT_IT_STOP_WATCH);
 8005d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24
        SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> 16);
 8005d98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        SWCycleCount = hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV;
 8005d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005d9c:	0c09      	lsrs	r1, r1, #16
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005d9e:	6218      	str	r0, [r3, #32]
        HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005da0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7ff fe6f 	bl	8005a88 <HAL_FDCAN_TT_StopWatchCallback>
    if(TTGlobTimeITs != 0U)
 8005daa:	f1b8 0f00 	cmp.w	r8, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_FDCAN_IRQHandler+0x33a>
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTGlobTimeITs);
 8005db0:	6863      	ldr	r3, [r4, #4]
      HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005db2:	4641      	mov	r1, r8
 8005db4:	4620      	mov	r0, r4
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTGlobTimeITs);
 8005db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db8:	ea22 0208 	bic.w	r2, r2, r8
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005dbe:	f8c3 8020 	str.w	r8, [r3, #32]
      HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005dc2:	f7ff fe62 	bl	8005a8a <HAL_FDCAN_TT_GlobalTimeCallback>
    if(TTDistErrors != 0U)
 8005dc6:	b156      	cbz	r6, 8005dde <HAL_FDCAN_IRQHandler+0x352>
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTDistErrors);
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dcc:	ea22 0206 	bic.w	r2, r2, r6
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005dd2:	621e      	str	r6, [r3, #32]
      hfdcan->ErrorCode |= TTDistErrors;
 8005dd4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005dd8:	431e      	orrs	r6, r3
 8005dda:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
    if(TTFatalErrors != 0U)
 8005dde:	b155      	cbz	r5, 8005df6 <HAL_FDCAN_IRQHandler+0x36a>
      __HAL_FDCAN_TT_DISABLE_IT(hfdcan, TTFatalErrors);
 8005de0:	6863      	ldr	r3, [r4, #4]
 8005de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005de4:	ea22 0205 	bic.w	r2, r2, r5
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005dea:	621d      	str	r5, [r3, #32]
      hfdcan->ErrorCode |= TTFatalErrors;
 8005dec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005df0:	431d      	orrs	r5, r3
 8005df2:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  if(hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005df6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005dfa:	b113      	cbz	r3, 8005e02 <HAL_FDCAN_IRQHandler+0x376>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7ff fe40 	bl	8005a82 <HAL_FDCAN_ErrorCallback>
 8005e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e06:	bf00      	nop

08005e08 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(uint32_t Bank)
{  
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e08:	4b4f      	ldr	r3, [pc, #316]	; (8005f48 <FLASH_SetErrorCode+0x140>)
 8005e0a:	2200      	movs	r2, #0
  
  if(Bank == FLASH_BANK_1)
 8005e0c:	2801      	cmp	r0, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e0e:	619a      	str	r2, [r3, #24]
  if(Bank == FLASH_BANK_1)
 8005e10:	d144      	bne.n	8005e9c <FLASH_SetErrorCode+0x94>
  {
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_WRPERR_BANK1))
 8005e12:	4a4e      	ldr	r2, [pc, #312]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005e14:	6911      	ldr	r1, [r2, #16]
 8005e16:	0389      	lsls	r1, r1, #14
 8005e18:	d503      	bpl.n	8005e22 <FLASH_SetErrorCode+0x1a>
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP_BANK1;
 8005e1a:	6999      	ldr	r1, [r3, #24]
 8005e1c:	f041 0101 	orr.w	r1, r1, #1
 8005e20:	6199      	str	r1, [r3, #24]
    }
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_PGSERR_BANK1))
 8005e22:	6912      	ldr	r2, [r2, #16]
 8005e24:	0350      	lsls	r0, r2, #13
 8005e26:	d503      	bpl.n	8005e30 <FLASH_SetErrorCode+0x28>
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS_BANK1;
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	f042 0202 	orr.w	r2, r2, #2
 8005e2e:	619a      	str	r2, [r3, #24]
    }
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_STRBER_BANK1R))
 8005e30:	4a46      	ldr	r2, [pc, #280]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005e32:	6911      	ldr	r1, [r2, #16]
 8005e34:	0309      	lsls	r1, r1, #12
 8005e36:	d503      	bpl.n	8005e40 <FLASH_SetErrorCode+0x38>
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_STRB_BANK1;
 8005e38:	6999      	ldr	r1, [r3, #24]
 8005e3a:	f041 0104 	orr.w	r1, r1, #4
 8005e3e:	6199      	str	r1, [r3, #24]
    }
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_INCERR_BANK1))
 8005e40:	6912      	ldr	r2, [r2, #16]
 8005e42:	0290      	lsls	r0, r2, #10
 8005e44:	d503      	bpl.n	8005e4e <FLASH_SetErrorCode+0x46>
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_INC_BANK1;
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	f042 0208 	orr.w	r2, r2, #8
 8005e4c:	619a      	str	r2, [r3, #24]
    }
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_OPERR_BANK1))
 8005e4e:	4a3f      	ldr	r2, [pc, #252]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005e50:	6911      	ldr	r1, [r2, #16]
 8005e52:	0249      	lsls	r1, r1, #9
 8005e54:	d503      	bpl.n	8005e5e <FLASH_SetErrorCode+0x56>
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_OPE_BANK1;
 8005e56:	6999      	ldr	r1, [r3, #24]
 8005e58:	f041 0110 	orr.w	r1, r1, #16
 8005e5c:	6199      	str	r1, [r3, #24]
    }
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_RDPERR_BANK1))
 8005e5e:	6912      	ldr	r2, [r2, #16]
 8005e60:	0210      	lsls	r0, r2, #8
 8005e62:	d503      	bpl.n	8005e6c <FLASH_SetErrorCode+0x64>
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_RDP_BANK1;
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	f042 0220 	orr.w	r2, r2, #32
 8005e6a:	619a      	str	r2, [r3, #24]
    }
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_RDSERR_BANK1))
 8005e6c:	4a37      	ldr	r2, [pc, #220]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005e6e:	6911      	ldr	r1, [r2, #16]
 8005e70:	01c9      	lsls	r1, r1, #7
 8005e72:	d503      	bpl.n	8005e7c <FLASH_SetErrorCode+0x74>
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_RDS_BANK1;
 8005e74:	6999      	ldr	r1, [r3, #24]
 8005e76:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005e7a:	6199      	str	r1, [r3, #24]
    }
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_SNECCE_BANK1RR))
 8005e7c:	6912      	ldr	r2, [r2, #16]
 8005e7e:	0192      	lsls	r2, r2, #6
 8005e80:	d503      	bpl.n	8005e8a <FLASH_SetErrorCode+0x82>
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_SNECC_BANK1;
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e88:	619a      	str	r2, [r3, #24]
    }
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_DBECCE_BANK1RR))
 8005e8a:	4a30      	ldr	r2, [pc, #192]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005e8c:	6912      	ldr	r2, [r2, #16]
 8005e8e:	0150      	lsls	r0, r2, #5
 8005e90:	d503      	bpl.n	8005e9a <FLASH_SetErrorCode+0x92>
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_DBECC_BANK1;
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_SNECC_BANK2;
    }
    if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_DBECCE_BANK2RR))
    {
      pFlash.ErrorCode |= HAL_FLASH_ERROR_DBECC_BANK2;
 8005e98:	619a      	str	r2, [r3, #24]
 8005e9a:	4770      	bx	lr
  else if(Bank == FLASH_BANK_2)
 8005e9c:	2802      	cmp	r0, #2
 8005e9e:	d1fc      	bne.n	8005e9a <FLASH_SetErrorCode+0x92>
    if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_WRPERR_BANK2))
 8005ea0:	4a2a      	ldr	r2, [pc, #168]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005ea2:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
 8005ea6:	0389      	lsls	r1, r1, #14
 8005ea8:	d503      	bpl.n	8005eb2 <FLASH_SetErrorCode+0xaa>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP_BANK2;
 8005eaa:	6999      	ldr	r1, [r3, #24]
 8005eac:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8005eb0:	6199      	str	r1, [r3, #24]
    if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_PGSERR_BANK2))
 8005eb2:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8005eb6:	0350      	lsls	r0, r2, #13
 8005eb8:	d503      	bpl.n	8005ec2 <FLASH_SetErrorCode+0xba>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS_BANK2;
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ec0:	619a      	str	r2, [r3, #24]
    if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_STRBER_BANK2R))
 8005ec2:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005ec4:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
 8005ec8:	0309      	lsls	r1, r1, #12
 8005eca:	d503      	bpl.n	8005ed4 <FLASH_SetErrorCode+0xcc>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_STRB_BANK2;
 8005ecc:	6999      	ldr	r1, [r3, #24]
 8005ece:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8005ed2:	6199      	str	r1, [r3, #24]
    if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_INCERR_BANK2))
 8005ed4:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8005ed8:	0290      	lsls	r0, r2, #10
 8005eda:	d503      	bpl.n	8005ee4 <FLASH_SetErrorCode+0xdc>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_INC_BANK2;
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ee2:	619a      	str	r2, [r3, #24]
    if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_OPERR_BANK2))
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005ee6:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
 8005eea:	0249      	lsls	r1, r1, #9
 8005eec:	d503      	bpl.n	8005ef6 <FLASH_SetErrorCode+0xee>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_OPE_BANK2;
 8005eee:	6999      	ldr	r1, [r3, #24]
 8005ef0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005ef4:	6199      	str	r1, [r3, #24]
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_RDPERR_BANK2))
 8005ef6:	6911      	ldr	r1, [r2, #16]
 8005ef8:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <FLASH_SetErrorCode+0x148>)
 8005efa:	400a      	ands	r2, r1
 8005efc:	f112 4fff 	cmn.w	r2, #2139095040	; 0x7f800000
 8005f00:	d103      	bne.n	8005f0a <FLASH_SetErrorCode+0x102>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_RDP_BANK2;
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f08:	619a      	str	r2, [r3, #24]
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_RDSERR_BANK2))
 8005f0a:	4a10      	ldr	r2, [pc, #64]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005f0c:	6911      	ldr	r1, [r2, #16]
 8005f0e:	f001 4101 	and.w	r1, r1, #2164260864	; 0x81000000
 8005f12:	f1b1 4f01 	cmp.w	r1, #2164260864	; 0x81000000
 8005f16:	d103      	bne.n	8005f20 <FLASH_SetErrorCode+0x118>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_RDS_BANK2;
 8005f18:	6999      	ldr	r1, [r3, #24]
 8005f1a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8005f1e:	6199      	str	r1, [r3, #24]
    if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_SNECCE_BANK2RR))
 8005f20:	6912      	ldr	r2, [r2, #16]
 8005f22:	f002 4202 	and.w	r2, r2, #2181038080	; 0x82000000
 8005f26:	f1b2 4f02 	cmp.w	r2, #2181038080	; 0x82000000
 8005f2a:	d103      	bne.n	8005f34 <FLASH_SetErrorCode+0x12c>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_SNECC_BANK2;
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005f32:	619a      	str	r2, [r3, #24]
    if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_DBECCE_BANK2RR))
 8005f34:	4a05      	ldr	r2, [pc, #20]	; (8005f4c <FLASH_SetErrorCode+0x144>)
 8005f36:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8005f3a:	0152      	lsls	r2, r2, #5
 8005f3c:	d5ad      	bpl.n	8005e9a <FLASH_SetErrorCode+0x92>
      pFlash.ErrorCode |= HAL_FLASH_ERROR_DBECC_BANK2;
 8005f3e:	699a      	ldr	r2, [r3, #24]
 8005f40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005f44:	e7a8      	b.n	8005e98 <FLASH_SetErrorCode+0x90>
 8005f46:	bf00      	nop
 8005f48:	24001770 	.word	0x24001770
 8005f4c:	52002000 	.word	0x52002000
 8005f50:	80800000 	.word	0x80800000

08005f54 <HAL_FLASH_EndOfOperationCallback>:
 8005f54:	4770      	bx	lr

08005f56 <HAL_FLASH_OperationErrorCallback>:
{
 8005f56:	4770      	bx	lr

08005f58 <HAL_FLASH_IRQHandler>:
{
 8005f58:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
 8005f5a:	4e73      	ldr	r6, [pc, #460]	; (8006128 <HAL_FLASH_IRQHandler+0x1d0>)
 8005f5c:	4c73      	ldr	r4, [pc, #460]	; (800612c <HAL_FLASH_IRQHandler+0x1d4>)
 8005f5e:	6933      	ldr	r3, [r6, #16]
 8005f60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005f64:	d015      	beq.n	8005f92 <HAL_FLASH_IRQHandler+0x3a>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
 8005f66:	7825      	ldrb	r5, [r4, #0]
 8005f68:	b2ed      	uxtb	r5, r5
 8005f6a:	2d01      	cmp	r5, #1
 8005f6c:	d17f      	bne.n	800606e <HAL_FLASH_IRQHandler+0x116>
      pFlash.NbSectorsToErase--;
 8005f6e:	6863      	ldr	r3, [r4, #4]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	6063      	str	r3, [r4, #4]
      if(pFlash.NbSectorsToErase != 0)
 8005f74:	6863      	ldr	r3, [r4, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d06f      	beq.n	800605a <HAL_FLASH_IRQHandler+0x102>
        temp = pFlash.Sector;
 8005f7a:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(temp);
 8005f7c:	f7ff ffea 	bl	8005f54 <HAL_FLASH_EndOfOperationCallback>
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1 | FLASH_FLAG_ALL_ERRORS_BANK1);  
 8005f80:	4b6b      	ldr	r3, [pc, #428]	; (8006130 <HAL_FLASH_IRQHandler+0x1d8>)
        FLASH_Erase_Sector(temp, FLASH_BANK_1/*pFlash.Bank*/, pFlash.VoltageForErase);
 8005f82:	4629      	mov	r1, r5
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1 | FLASH_FLAG_ALL_ERRORS_BANK1);  
 8005f84:	6173      	str	r3, [r6, #20]
        temp = ++pFlash.Sector;
 8005f86:	68e0      	ldr	r0, [r4, #12]
 8005f88:	3001      	adds	r0, #1
 8005f8a:	60e0      	str	r0, [r4, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1/*pFlash.Bank*/, pFlash.VoltageForErase);
 8005f8c:	7a22      	ldrb	r2, [r4, #8]
 8005f8e:	f000 f8d1 	bl	8006134 <FLASH_Erase_Sector>
  if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
 8005f92:	4d65      	ldr	r5, [pc, #404]	; (8006128 <HAL_FLASH_IRQHandler+0x1d0>)
 8005f94:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 8005f98:	03db      	lsls	r3, r3, #15
 8005f9a:	d516      	bpl.n	8005fca <HAL_FLASH_IRQHandler+0x72>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
 8005f9c:	7823      	ldrb	r3, [r4, #0]
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	f040 808f 	bne.w	80060c2 <HAL_FLASH_IRQHandler+0x16a>
      pFlash.NbSectorsToErase--;
 8005fa4:	6863      	ldr	r3, [r4, #4]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	6063      	str	r3, [r4, #4]
      if(pFlash.NbSectorsToErase != 0)
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d07d      	beq.n	80060ac <HAL_FLASH_IRQHandler+0x154>
        temp = pFlash.Sector;
 8005fb0:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(temp);
 8005fb2:	f7ff ffcf 	bl	8005f54 <HAL_FLASH_EndOfOperationCallback>
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2 | FLASH_FLAG_ALL_ERRORS_BANK2);  
 8005fb6:	4b5e      	ldr	r3, [pc, #376]	; (8006130 <HAL_FLASH_IRQHandler+0x1d8>)
        FLASH_Erase_Sector(temp, FLASH_BANK_2 /*pFlash.Bank*/, pFlash.VoltageForErase);
 8005fb8:	2102      	movs	r1, #2
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2 | FLASH_FLAG_ALL_ERRORS_BANK2);  
 8005fba:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
        temp = ++pFlash.Sector;
 8005fbe:	68e0      	ldr	r0, [r4, #12]
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	60e0      	str	r0, [r4, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_2 /*pFlash.Bank*/, pFlash.VoltageForErase);
 8005fc4:	7a22      	ldrb	r2, [r4, #8]
 8005fc6:	f000 f8b5 	bl	8006134 <FLASH_Erase_Sector>
  if(__HAL_FLASH_GET_FLAG_BANK1((FLASH_FLAG_EOP_BANK1    | FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | \
 8005fca:	4b57      	ldr	r3, [pc, #348]	; (8006128 <HAL_FLASH_IRQHandler+0x1d0>)
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f403 03de 	and.w	r3, r3, #7274496	; 0x6f0000
 8005fd2:	f5b3 0fde 	cmp.w	r3, #7274496	; 0x6f0000
 8005fd6:	d113      	bne.n	8006000 <HAL_FLASH_IRQHandler+0xa8>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
 8005fd8:	7823      	ldrb	r3, [r4, #0]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	f040 8090 	bne.w	8006100 <HAL_FLASH_IRQHandler+0x1a8>
      pFlash.Sector = 0xFFFFFFFF;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
      temp = pFlash.Sector;
 8005fe4:	68e5      	ldr	r5, [r4, #12]
      pFlash.Sector = 0xFFFFFFFF;
 8005fe6:	60e3      	str	r3, [r4, #12]
    FLASH_SetErrorCode(FLASH_BANK_1);
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f7ff ff0d 	bl	8005e08 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(temp);
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f7ff ffb1 	bl	8005f56 <HAL_FLASH_OperationErrorCallback>
    __HAL_FLASH_CLEAR_FLAG_BANK1((FLASH_FLAG_EOP_BANK1    | FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | \
 8005ff4:	4b4c      	ldr	r3, [pc, #304]	; (8006128 <HAL_FLASH_IRQHandler+0x1d0>)
 8005ff6:	f44f 02de 	mov.w	r2, #7274496	; 0x6f0000
 8005ffa:	615a      	str	r2, [r3, #20]
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG_BANK2((FLASH_FLAG_EOP_BANK2    | FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | \
 8006000:	4b49      	ldr	r3, [pc, #292]	; (8006128 <HAL_FLASH_IRQHandler+0x1d0>)
 8006002:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8006006:	f403 03de 	and.w	r3, r3, #7274496	; 0x6f0000
 800600a:	f5b3 0fde 	cmp.w	r3, #7274496	; 0x6f0000
 800600e:	d113      	bne.n	8006038 <HAL_FLASH_IRQHandler+0xe0>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
 8006010:	7823      	ldrb	r3, [r4, #0]
 8006012:	2b04      	cmp	r3, #4
 8006014:	d17e      	bne.n	8006114 <HAL_FLASH_IRQHandler+0x1bc>
      pFlash.Sector = 0xFFFFFFFF;
 8006016:	f04f 33ff 	mov.w	r3, #4294967295
      temp = pFlash.Sector;
 800601a:	68e5      	ldr	r5, [r4, #12]
      pFlash.Sector = 0xFFFFFFFF;
 800601c:	60e3      	str	r3, [r4, #12]
    FLASH_SetErrorCode(FLASH_BANK_2);
 800601e:	2002      	movs	r0, #2
 8006020:	f7ff fef2 	bl	8005e08 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(temp);
 8006024:	4628      	mov	r0, r5
 8006026:	f7ff ff96 	bl	8005f56 <HAL_FLASH_OperationErrorCallback>
    __HAL_FLASH_CLEAR_FLAG_BANK2((FLASH_FLAG_EOP_BANK2    | FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | \
 800602a:	4b3f      	ldr	r3, [pc, #252]	; (8006128 <HAL_FLASH_IRQHandler+0x1d0>)
 800602c:	f44f 02de 	mov.w	r2, #7274496	; 0x6f0000
 8006030:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8006034:	2300      	movs	r3, #0
 8006036:	7023      	strb	r3, [r4, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8006038:	7823      	ldrb	r3, [r4, #0]
 800603a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800603e:	b95b      	cbnz	r3, 8006058 <HAL_FLASH_IRQHandler+0x100>
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
 8006040:	4b39      	ldr	r3, [pc, #228]	; (8006128 <HAL_FLASH_IRQHandler+0x1d0>)
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	f422 02de 	bic.w	r2, r2, #7274496	; 0x6f0000
 8006048:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
 800604a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800604e:	f422 02de 	bic.w	r2, r2, #7274496	; 0x6f0000
 8006052:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    __HAL_UNLOCK(&pFlash);
 8006056:	7521      	strb	r1, [r4, #20]
 8006058:	bd70      	pop	{r4, r5, r6, pc}
        pFlash.Sector = temp = 0xFFFFFFFF;
 800605a:	f04f 30ff 	mov.w	r0, #4294967295
 800605e:	60e0      	str	r0, [r4, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8006060:	7023      	strb	r3, [r4, #0]
        HAL_FLASH_EndOfOperationCallback(temp);
 8006062:	f7ff ff77 	bl	8005f54 <HAL_FLASH_EndOfOperationCallback>
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8006066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800606a:	6173      	str	r3, [r6, #20]
 800606c:	e791      	b.n	8005f92 <HAL_FLASH_IRQHandler+0x3a>
      if((pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE_BANK1) || (pFlash.ProcedureOnGoing == FLASH_PROC_ALLBANK_MASSERASE))
 800606e:	7823      	ldrb	r3, [r4, #0]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d002      	beq.n	800607a <HAL_FLASH_IRQHandler+0x122>
 8006074:	7823      	ldrb	r3, [r4, #0]
 8006076:	2b07      	cmp	r3, #7
 8006078:	d113      	bne.n	80060a2 <HAL_FLASH_IRQHandler+0x14a>
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
 800607a:	2001      	movs	r0, #1
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800607c:	f7ff ff6a 	bl	8005f54 <HAL_FLASH_EndOfOperationCallback>
      if((pFlash.ProcedureOnGoing != FLASH_PROC_SECTERASE_BANK2) && \
 8006080:	7823      	ldrb	r3, [r4, #0]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d085      	beq.n	8005f92 <HAL_FLASH_IRQHandler+0x3a>
         (pFlash.ProcedureOnGoing != FLASH_PROC_MASSERASE_BANK2)&& \
 8006086:	7823      	ldrb	r3, [r4, #0]
      if((pFlash.ProcedureOnGoing != FLASH_PROC_SECTERASE_BANK2) && \
 8006088:	2b05      	cmp	r3, #5
 800608a:	d082      	beq.n	8005f92 <HAL_FLASH_IRQHandler+0x3a>
         (pFlash.ProcedureOnGoing != FLASH_PROC_PROGRAM_BANK2))
 800608c:	7823      	ldrb	r3, [r4, #0]
         (pFlash.ProcedureOnGoing != FLASH_PROC_MASSERASE_BANK2)&& \
 800608e:	2b06      	cmp	r3, #6
 8006090:	f43f af7f 	beq.w	8005f92 <HAL_FLASH_IRQHandler+0x3a>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8006094:	2300      	movs	r3, #0
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8006096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800609a:	7023      	strb	r3, [r4, #0]
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800609c:	4b22      	ldr	r3, [pc, #136]	; (8006128 <HAL_FLASH_IRQHandler+0x1d0>)
 800609e:	615a      	str	r2, [r3, #20]
 80060a0:	e777      	b.n	8005f92 <HAL_FLASH_IRQHandler+0x3a>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_BANK1)
 80060a2:	7823      	ldrb	r3, [r4, #0]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d1eb      	bne.n	8006080 <HAL_FLASH_IRQHandler+0x128>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80060a8:	6920      	ldr	r0, [r4, #16]
 80060aa:	e7e7      	b.n	800607c <HAL_FLASH_IRQHandler+0x124>
        pFlash.Sector = temp = 0xFFFFFFFF;
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295
 80060b0:	60e0      	str	r0, [r4, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80060b2:	7023      	strb	r3, [r4, #0]
        HAL_FLASH_EndOfOperationCallback(temp);
 80060b4:	f7ff ff4e 	bl	8005f54 <HAL_FLASH_EndOfOperationCallback>
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80060b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060bc:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 80060c0:	e783      	b.n	8005fca <HAL_FLASH_IRQHandler+0x72>
      if((pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE_BANK2) || (pFlash.ProcedureOnGoing == FLASH_PROC_ALLBANK_MASSERASE))
 80060c2:	7823      	ldrb	r3, [r4, #0]
 80060c4:	2b05      	cmp	r3, #5
 80060c6:	d002      	beq.n	80060ce <HAL_FLASH_IRQHandler+0x176>
 80060c8:	7823      	ldrb	r3, [r4, #0]
 80060ca:	2b07      	cmp	r3, #7
 80060cc:	d116      	bne.n	80060fc <HAL_FLASH_IRQHandler+0x1a4>
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
 80060ce:	2002      	movs	r0, #2
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80060d0:	f7ff ff40 	bl	8005f54 <HAL_FLASH_EndOfOperationCallback>
      if((pFlash.ProcedureOnGoing != FLASH_PROC_SECTERASE_BANK1) && \
 80060d4:	7823      	ldrb	r3, [r4, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	f43f af77 	beq.w	8005fca <HAL_FLASH_IRQHandler+0x72>
          (pFlash.ProcedureOnGoing != FLASH_PROC_MASSERASE_BANK1)&& \
 80060dc:	7823      	ldrb	r3, [r4, #0]
      if((pFlash.ProcedureOnGoing != FLASH_PROC_SECTERASE_BANK1) && \
 80060de:	2b02      	cmp	r3, #2
 80060e0:	f43f af73 	beq.w	8005fca <HAL_FLASH_IRQHandler+0x72>
          (pFlash.ProcedureOnGoing != FLASH_PROC_PROGRAM_BANK1))
 80060e4:	7823      	ldrb	r3, [r4, #0]
          (pFlash.ProcedureOnGoing != FLASH_PROC_MASSERASE_BANK1)&& \
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	f43f af6f 	beq.w	8005fca <HAL_FLASH_IRQHandler+0x72>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80060ec:	2300      	movs	r3, #0
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80060ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80060f2:	7023      	strb	r3, [r4, #0]
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <HAL_FLASH_IRQHandler+0x1d0>)
 80060f6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80060fa:	e766      	b.n	8005fca <HAL_FLASH_IRQHandler+0x72>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80060fc:	6920      	ldr	r0, [r4, #16]
 80060fe:	e7e7      	b.n	80060d0 <HAL_FLASH_IRQHandler+0x178>
    else if((pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE_BANK1) || (pFlash.ProcedureOnGoing == FLASH_PROC_ALLBANK_MASSERASE))
 8006100:	7823      	ldrb	r3, [r4, #0]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d004      	beq.n	8006110 <HAL_FLASH_IRQHandler+0x1b8>
 8006106:	7823      	ldrb	r3, [r4, #0]
 8006108:	2b07      	cmp	r3, #7
 800610a:	d001      	beq.n	8006110 <HAL_FLASH_IRQHandler+0x1b8>
      temp = pFlash.Address;
 800610c:	6925      	ldr	r5, [r4, #16]
 800610e:	e76b      	b.n	8005fe8 <HAL_FLASH_IRQHandler+0x90>
      temp = FLASH_BANK_1;
 8006110:	2501      	movs	r5, #1
 8006112:	e769      	b.n	8005fe8 <HAL_FLASH_IRQHandler+0x90>
    else if((pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE_BANK2) || (pFlash.ProcedureOnGoing == FLASH_PROC_ALLBANK_MASSERASE))
 8006114:	7823      	ldrb	r3, [r4, #0]
 8006116:	2b05      	cmp	r3, #5
 8006118:	d004      	beq.n	8006124 <HAL_FLASH_IRQHandler+0x1cc>
 800611a:	7823      	ldrb	r3, [r4, #0]
 800611c:	2b07      	cmp	r3, #7
 800611e:	d001      	beq.n	8006124 <HAL_FLASH_IRQHandler+0x1cc>
      temp = pFlash.Address;
 8006120:	6925      	ldr	r5, [r4, #16]
 8006122:	e77c      	b.n	800601e <HAL_FLASH_IRQHandler+0xc6>
      temp = FLASH_BANK_2;
 8006124:	2502      	movs	r5, #2
 8006126:	e77a      	b.n	800601e <HAL_FLASH_IRQHandler+0xc6>
 8006128:	52002000 	.word	0x52002000
 800612c:	24001770 	.word	0x24001770
 8006130:	07ef0000 	.word	0x07ef0000

08006134 <FLASH_Erase_Sector>:
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));
 8006134:	1e4b      	subs	r3, r1, #1
 8006136:	2b01      	cmp	r3, #1
{
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	4604      	mov	r4, r0
 800613c:	460e      	mov	r6, r1
 800613e:	4615      	mov	r5, r2
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));
 8006140:	d904      	bls.n	800614c <FLASH_Erase_Sector+0x18>
 8006142:	f240 2181 	movw	r1, #641	; 0x281
 8006146:	4825      	ldr	r0, [pc, #148]	; (80061dc <FLASH_Erase_Sector+0xa8>)
 8006148:	f7fb fff7 	bl	800213a <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));  
 800614c:	f035 0330 	bics.w	r3, r5, #48	; 0x30
 8006150:	d004      	beq.n	800615c <FLASH_Erase_Sector+0x28>
 8006152:	f240 2182 	movw	r1, #642	; 0x282
 8006156:	4821      	ldr	r0, [pc, #132]	; (80061dc <FLASH_Erase_Sector+0xa8>)
 8006158:	f7fb ffef 	bl	800213a <assert_failed>
  assert_param(IS_FLASH_SECTOR(Sector));
 800615c:	2c07      	cmp	r4, #7
 800615e:	d904      	bls.n	800616a <FLASH_Erase_Sector+0x36>
 8006160:	f240 2183 	movw	r1, #643	; 0x283
 8006164:	481d      	ldr	r0, [pc, #116]	; (80061dc <FLASH_Erase_Sector+0xa8>)
 8006166:	f7fb ffe8 	bl	800213a <assert_failed>
  
  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800616a:	07f2      	lsls	r2, r6, #31
 800616c:	d516      	bpl.n	800619c <FLASH_Erase_Sector+0x68>
  {
    /* reset Program/erase VoltageRange for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800616e:	491c      	ldr	r1, [pc, #112]	; (80061e0 <FLASH_Erase_Sector+0xac>)
 8006170:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006174:	68cb      	ldr	r3, [r1, #12]
 8006176:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800617a:	60cb      	str	r3, [r1, #12]
 800617c:	fa92 f2a2 	rbit	r2, r2
  
    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << POSITION_VAL(FLASH_CR_SNB)));
 8006180:	68cb      	ldr	r3, [r1, #12]
 8006182:	fab2 f282 	clz	r2, r2
 8006186:	f043 0304 	orr.w	r3, r3, #4
 800618a:	fa04 f202 	lsl.w	r2, r4, r2
 800618e:	432b      	orrs	r3, r5
 8006190:	4313      	orrs	r3, r2
 8006192:	60cb      	str	r3, [r1, #12]
  
    FLASH->CR1 |= FLASH_CR_START;  
 8006194:	68cb      	ldr	r3, [r1, #12]
 8006196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619a:	60cb      	str	r3, [r1, #12]
  }

  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800619c:	07b3      	lsls	r3, r6, #30
 800619e:	d51b      	bpl.n	80061d8 <FLASH_Erase_Sector+0xa4>
  {
    /* reset Program/erase VoltageRange for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <FLASH_Erase_Sector+0xac>)
 80061a2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80061a6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80061aa:	f422 62e6 	bic.w	r2, r2, #1840	; 0x730
 80061ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80061b2:	fa91 f1a1 	rbit	r1, r1

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << POSITION_VAL(FLASH_CR_SNB)));
 80061b6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80061ba:	fab1 f181 	clz	r1, r1
 80061be:	f042 0204 	orr.w	r2, r2, #4
 80061c2:	408c      	lsls	r4, r1
 80061c4:	432a      	orrs	r2, r5
 80061c6:	4322      	orrs	r2, r4
 80061c8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    FLASH->CR2 |= FLASH_CR_START;  
 80061cc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80061d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80061d8:	bd70      	pop	{r4, r5, r6, pc}
 80061da:	bf00      	nop
 80061dc:	080137e6 	.word	0x080137e6
 80061e0:	52002000 	.word	0x52002000

080061e4 <HAL_GPIO_Init>:
  uint32_t temp = 0x00;
  EXTI_Core_TypeDef * EXTI_Ptr = EXTI_D1; 


  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80061e4:	4ba3      	ldr	r3, [pc, #652]	; (8006474 <HAL_GPIO_Init+0x290>)
 80061e6:	4298      	cmp	r0, r3
{
 80061e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	4604      	mov	r4, r0
 80061ee:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80061f0:	d02b      	beq.n	800624a <HAL_GPIO_Init+0x66>
 80061f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061f6:	4298      	cmp	r0, r3
 80061f8:	d027      	beq.n	800624a <HAL_GPIO_Init+0x66>
 80061fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061fe:	4298      	cmp	r0, r3
 8006200:	d023      	beq.n	800624a <HAL_GPIO_Init+0x66>
 8006202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006206:	4298      	cmp	r0, r3
 8006208:	d01f      	beq.n	800624a <HAL_GPIO_Init+0x66>
 800620a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620e:	4298      	cmp	r0, r3
 8006210:	d01b      	beq.n	800624a <HAL_GPIO_Init+0x66>
 8006212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006216:	4298      	cmp	r0, r3
 8006218:	d017      	beq.n	800624a <HAL_GPIO_Init+0x66>
 800621a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800621e:	4298      	cmp	r0, r3
 8006220:	d013      	beq.n	800624a <HAL_GPIO_Init+0x66>
 8006222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006226:	4298      	cmp	r0, r3
 8006228:	d00f      	beq.n	800624a <HAL_GPIO_Init+0x66>
 800622a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622e:	4298      	cmp	r0, r3
 8006230:	d00b      	beq.n	800624a <HAL_GPIO_Init+0x66>
 8006232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006236:	4298      	cmp	r0, r3
 8006238:	d007      	beq.n	800624a <HAL_GPIO_Init+0x66>
 800623a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623e:	4298      	cmp	r0, r3
 8006240:	d003      	beq.n	800624a <HAL_GPIO_Init+0x66>
 8006242:	21c4      	movs	r1, #196	; 0xc4
 8006244:	488c      	ldr	r0, [pc, #560]	; (8006478 <HAL_GPIO_Init+0x294>)
 8006246:	f7fb ff78 	bl	800213a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800624a:	882b      	ldrh	r3, [r5, #0]
 800624c:	b91b      	cbnz	r3, 8006256 <HAL_GPIO_Init+0x72>
 800624e:	21c5      	movs	r1, #197	; 0xc5
 8006250:	4889      	ldr	r0, [pc, #548]	; (8006478 <HAL_GPIO_Init+0x294>)
 8006252:	f7fb ff72 	bl	800213a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006256:	686b      	ldr	r3, [r5, #4]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d917      	bls.n	800628c <HAL_GPIO_Init+0xa8>
 800625c:	f1a3 0211 	sub.w	r2, r3, #17
 8006260:	2a01      	cmp	r2, #1
 8006262:	d913      	bls.n	800628c <HAL_GPIO_Init+0xa8>
 8006264:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006268:	4984      	ldr	r1, [pc, #528]	; (800647c <HAL_GPIO_Init+0x298>)
 800626a:	428a      	cmp	r2, r1
 800626c:	d00e      	beq.n	800628c <HAL_GPIO_Init+0xa8>
 800626e:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8006272:	428b      	cmp	r3, r1
 8006274:	d00a      	beq.n	800628c <HAL_GPIO_Init+0xa8>
 8006276:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 800627a:	428a      	cmp	r2, r1
 800627c:	d006      	beq.n	800628c <HAL_GPIO_Init+0xa8>
 800627e:	4a80      	ldr	r2, [pc, #512]	; (8006480 <HAL_GPIO_Init+0x29c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <HAL_GPIO_Init+0xa8>
 8006284:	21c6      	movs	r1, #198	; 0xc6
 8006286:	487c      	ldr	r0, [pc, #496]	; (8006478 <HAL_GPIO_Init+0x294>)
 8006288:	f7fb ff57 	bl	800213a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800628c:	68ab      	ldr	r3, [r5, #8]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d903      	bls.n	800629a <HAL_GPIO_Init+0xb6>
 8006292:	21c7      	movs	r1, #199	; 0xc7
 8006294:	4878      	ldr	r0, [pc, #480]	; (8006478 <HAL_GPIO_Init+0x294>)
 8006296:	f7fb ff50 	bl	800213a <assert_failed>
{
 800629a:	2600      	movs	r6, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 800629c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8006488 <HAL_GPIO_Init+0x2a4>
    ioposition = ((uint32_t)0x01) << position;
 80062a0:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062a2:	682f      	ldr	r7, [r5, #0]
    ioposition = ((uint32_t)0x01) << position;
 80062a4:	fa03 f906 	lsl.w	r9, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062a8:	ea09 0707 	and.w	r7, r9, r7
    if(iocurrent == ioposition)
 80062ac:	45b9      	cmp	r9, r7
 80062ae:	f040 80c8 	bne.w	8006442 <HAL_GPIO_Init+0x25e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062b2:	686a      	ldr	r2, [r5, #4]
 80062b4:	f022 0210 	bic.w	r2, r2, #16
 80062b8:	2a02      	cmp	r2, #2
 80062ba:	d116      	bne.n	80062ea <HAL_GPIO_Init+0x106>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80062bc:	692a      	ldr	r2, [r5, #16]
 80062be:	2a0f      	cmp	r2, #15
 80062c0:	d903      	bls.n	80062ca <HAL_GPIO_Init+0xe6>
 80062c2:	21d8      	movs	r1, #216	; 0xd8
 80062c4:	486c      	ldr	r0, [pc, #432]	; (8006478 <HAL_GPIO_Init+0x294>)
 80062c6:	f7fb ff38 	bl	800213a <assert_failed>
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062ca:	f006 0207 	and.w	r2, r6, #7
        temp = GPIOx->AFR[position >> 3];
 80062ce:	08f1      	lsrs	r1, r6, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062d0:	0090      	lsls	r0, r2, #2
 80062d2:	220f      	movs	r2, #15
 80062d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80062d8:	4082      	lsls	r2, r0
        temp = GPIOx->AFR[position >> 3];
 80062da:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062dc:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80062e0:	692a      	ldr	r2, [r5, #16]
 80062e2:	4082      	lsls	r2, r0
 80062e4:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 80062e8:	620a      	str	r2, [r1, #32]
 80062ea:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062ee:	f04f 0a03 	mov.w	sl, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80062f2:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062f4:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp = GPIOx->MODER;
 80062f8:	6820      	ldr	r0, [r4, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80062fa:	f002 0103 	and.w	r1, r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062fe:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006302:	ea6f 0a0a 	mvn.w	sl, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006306:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800630a:	3a01      	subs	r2, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800630c:	ea00 000a 	and.w	r0, r0, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006310:	2a01      	cmp	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006312:	ea41 0100 	orr.w	r1, r1, r0
      GPIOx->MODER = temp;
 8006316:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006318:	d817      	bhi.n	800634a <HAL_GPIO_Init+0x166>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800631a:	68ea      	ldr	r2, [r5, #12]
 800631c:	2a03      	cmp	r2, #3
 800631e:	d903      	bls.n	8006328 <HAL_GPIO_Init+0x144>
 8006320:	21ec      	movs	r1, #236	; 0xec
 8006322:	4855      	ldr	r0, [pc, #340]	; (8006478 <HAL_GPIO_Init+0x294>)
 8006324:	f7fb ff09 	bl	800213a <assert_failed>
        temp = GPIOx->OSPEEDR; 
 8006328:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 800632a:	68ea      	ldr	r2, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800632c:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006330:	686b      	ldr	r3, [r5, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006332:	fa02 f20b 	lsl.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006336:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2));
 800633a:	430a      	orrs	r2, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800633c:	40b3      	lsls	r3, r6
        GPIOx->OSPEEDR = temp;
 800633e:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 8006340:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006342:	ea22 0209 	bic.w	r2, r2, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006346:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8006348:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 800634a:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800634c:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800634e:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006352:	68ab      	ldr	r3, [r5, #8]
 8006354:	fa03 f30b 	lsl.w	r3, r3, fp
 8006358:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 800635c:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800635e:	00c3      	lsls	r3, r0, #3
 8006360:	d56f      	bpl.n	8006442 <HAL_GPIO_Init+0x25e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006362:	4b48      	ldr	r3, [pc, #288]	; (8006484 <HAL_GPIO_Init+0x2a0>)
 8006364:	f026 0103 	bic.w	r1, r6, #3
 8006368:	4a46      	ldr	r2, [pc, #280]	; (8006484 <HAL_GPIO_Init+0x2a0>)
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800636a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800636e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006372:	f101 41b0 	add.w	r1, r1, #1476395008	; 0x58000000
 8006376:	f043 0302 	orr.w	r3, r3, #2
 800637a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800637e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006382:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	9301      	str	r3, [sp, #4]
 800638c:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800638e:	f006 0303 	and.w	r3, r6, #3
        temp = SYSCFG->EXTICR[position >> 2];
 8006392:	688a      	ldr	r2, [r1, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006394:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8006398:	fa0c f30e 	lsl.w	r3, ip, lr
 800639c:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80063a0:	4b34      	ldr	r3, [pc, #208]	; (8006474 <HAL_GPIO_Init+0x290>)
 80063a2:	429c      	cmp	r4, r3
 80063a4:	d054      	beq.n	8006450 <HAL_GPIO_Init+0x26c>
 80063a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063aa:	429c      	cmp	r4, r3
 80063ac:	d052      	beq.n	8006454 <HAL_GPIO_Init+0x270>
 80063ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b2:	429c      	cmp	r4, r3
 80063b4:	d050      	beq.n	8006458 <HAL_GPIO_Init+0x274>
 80063b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ba:	429c      	cmp	r4, r3
 80063bc:	d04e      	beq.n	800645c <HAL_GPIO_Init+0x278>
 80063be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c2:	429c      	cmp	r4, r3
 80063c4:	d04c      	beq.n	8006460 <HAL_GPIO_Init+0x27c>
 80063c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ca:	429c      	cmp	r4, r3
 80063cc:	d04a      	beq.n	8006464 <HAL_GPIO_Init+0x280>
 80063ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d2:	429c      	cmp	r4, r3
 80063d4:	d048      	beq.n	8006468 <HAL_GPIO_Init+0x284>
 80063d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063da:	429c      	cmp	r4, r3
 80063dc:	d046      	beq.n	800646c <HAL_GPIO_Init+0x288>
 80063de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e2:	429c      	cmp	r4, r3
 80063e4:	d044      	beq.n	8006470 <HAL_GPIO_Init+0x28c>
 80063e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ea:	429c      	cmp	r4, r3
 80063ec:	bf14      	ite	ne
 80063ee:	230a      	movne	r3, #10
 80063f0:	2309      	moveq	r3, #9
 80063f2:	fa03 f30e 	lsl.w	r3, r3, lr
        temp &= ~((uint32_t)iocurrent);
 80063f6:	43fa      	mvns	r2, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80063f8:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80063fc:	608b      	str	r3, [r1, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063fe:	03c1      	lsls	r1, r0, #15
        temp = EXTI_Ptr->IMR1;
 8006400:	f8d8 3000 	ldr.w	r3, [r8]
        {
          temp |= iocurrent;
 8006404:	bf4c      	ite	mi
 8006406:	433b      	orrmi	r3, r7
        temp &= ~((uint32_t)iocurrent);
 8006408:	4013      	andpl	r3, r2
        }
        EXTI_Ptr->IMR1 = temp;

        temp = EXTI_Ptr->EMR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800640a:	0381      	lsls	r1, r0, #14
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800640c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
        EXTI_Ptr->IMR1 = temp;
 8006410:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_Ptr->EMR1;
 8006414:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 8006418:	bf4c      	ite	mi
 800641a:	433b      	orrmi	r3, r7
        temp &= ~((uint32_t)iocurrent);
 800641c:	4013      	andpl	r3, r2
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800641e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
        EXTI_Ptr->EMR1 = temp;
 8006422:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 8006426:	680b      	ldr	r3, [r1, #0]
        {
          temp |= iocurrent;
 8006428:	bf14      	ite	ne
 800642a:	433b      	orrne	r3, r7
        temp &= ~((uint32_t)iocurrent);
 800642c:	4013      	andeq	r3, r2
        }
        EXTI->RTSR1 = temp;
 800642e:	600b      	str	r3, [r1, #0]

        temp = EXTI->FTSR1;
 8006430:	684b      	ldr	r3, [r1, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006432:	0281      	lsls	r1, r0, #10
        temp &= ~((uint32_t)iocurrent);
 8006434:	bf54      	ite	pl
 8006436:	ea02 0703 	andpl.w	r7, r2, r3
        {
          temp |= iocurrent;
 800643a:	431f      	orrmi	r7, r3
        }
        EXTI->FTSR1 = temp;
 800643c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006440:	605f      	str	r7, [r3, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006442:	3601      	adds	r6, #1
 8006444:	2e10      	cmp	r6, #16
 8006446:	f47f af2b 	bne.w	80062a0 <HAL_GPIO_Init+0xbc>
      }      
    }
  }
}
 800644a:	b003      	add	sp, #12
 800644c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006450:	2300      	movs	r3, #0
 8006452:	e7ce      	b.n	80063f2 <HAL_GPIO_Init+0x20e>
 8006454:	2301      	movs	r3, #1
 8006456:	e7cc      	b.n	80063f2 <HAL_GPIO_Init+0x20e>
 8006458:	2302      	movs	r3, #2
 800645a:	e7ca      	b.n	80063f2 <HAL_GPIO_Init+0x20e>
 800645c:	2303      	movs	r3, #3
 800645e:	e7c8      	b.n	80063f2 <HAL_GPIO_Init+0x20e>
 8006460:	2304      	movs	r3, #4
 8006462:	e7c6      	b.n	80063f2 <HAL_GPIO_Init+0x20e>
 8006464:	2305      	movs	r3, #5
 8006466:	e7c4      	b.n	80063f2 <HAL_GPIO_Init+0x20e>
 8006468:	2306      	movs	r3, #6
 800646a:	e7c2      	b.n	80063f2 <HAL_GPIO_Init+0x20e>
 800646c:	2307      	movs	r3, #7
 800646e:	e7c0      	b.n	80063f2 <HAL_GPIO_Init+0x20e>
 8006470:	2308      	movs	r3, #8
 8006472:	e7be      	b.n	80063f2 <HAL_GPIO_Init+0x20e>
 8006474:	58020000 	.word	0x58020000
 8006478:	08013829 	.word	0x08013829
 800647c:	11110000 	.word	0x11110000
 8006480:	11220000 	.word	0x11220000
 8006484:	58024400 	.word	0x58024400
 8006488:	58000080 	.word	0x58000080

0800648c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006490:	460c      	mov	r4, r1
 8006492:	b921      	cbnz	r1, 800649e <HAL_GPIO_ReadPin+0x12>
 8006494:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006498:	4804      	ldr	r0, [pc, #16]	; (80064ac <HAL_GPIO_ReadPin+0x20>)
 800649a:	f7fb fe4e 	bl	800213a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800649e:	692b      	ldr	r3, [r5, #16]
 80064a0:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80064a2:	bf14      	ite	ne
 80064a4:	2001      	movne	r0, #1
 80064a6:	2000      	moveq	r0, #0
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
 80064aa:	bf00      	nop
 80064ac:	08013829 	.word	0x08013829

080064b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	4605      	mov	r5, r0
 80064b4:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80064b6:	460c      	mov	r4, r1
 80064b8:	b921      	cbnz	r1, 80064c4 <HAL_GPIO_WritePin+0x14>
 80064ba:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80064be:	4808      	ldr	r0, [pc, #32]	; (80064e0 <HAL_GPIO_WritePin+0x30>)
 80064c0:	f7fb fe3b 	bl	800213a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80064c4:	2e01      	cmp	r6, #1
 80064c6:	d906      	bls.n	80064d6 <HAL_GPIO_WritePin+0x26>
 80064c8:	f240 11b1 	movw	r1, #433	; 0x1b1
 80064cc:	4804      	ldr	r0, [pc, #16]	; (80064e0 <HAL_GPIO_WritePin+0x30>)
 80064ce:	f7fb fe34 	bl	800213a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80064d2:	832c      	strh	r4, [r5, #24]
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	d1fb      	bne.n	80064d2 <HAL_GPIO_WritePin+0x22>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80064da:	836c      	strh	r4, [r5, #26]
 80064dc:	bd70      	pop	{r4, r5, r6, pc}
 80064de:	bf00      	nop
 80064e0:	08013829 	.word	0x08013829

080064e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80064e8:	460c      	mov	r4, r1
 80064ea:	b921      	cbnz	r1, 80064f6 <HAL_GPIO_TogglePin+0x12>
 80064ec:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80064f0:	4803      	ldr	r0, [pc, #12]	; (8006500 <HAL_GPIO_TogglePin+0x1c>)
 80064f2:	f7fb fe22 	bl	800213a <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 80064f6:	696b      	ldr	r3, [r5, #20]
 80064f8:	405c      	eors	r4, r3
 80064fa:	616c      	str	r4, [r5, #20]
 80064fc:	bd38      	pop	{r3, r4, r5, pc}
 80064fe:	bf00      	nop
 8006500:	08013829 	.word	0x08013829

08006504 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006504:	4770      	bx	lr
	...

08006508 <HAL_GPIO_EXTI_IRQHandler>:
{
 8006508:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800650a:	4b04      	ldr	r3, [pc, #16]	; (800651c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800650c:	6899      	ldr	r1, [r3, #8]
 800650e:	4201      	tst	r1, r0
 8006510:	d002      	beq.n	8006518 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006512:	6098      	str	r0, [r3, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006514:	f7ff fff6 	bl	8006504 <HAL_GPIO_EXTI_Callback>
 8006518:	bd08      	pop	{r3, pc}
 800651a:	bf00      	nop
 800651c:	58000080 	.word	0x58000080

08006520 <HASH_GetDigest>:
  */
static void HASH_GetDigest(uint8_t *pMsgDigest, uint8_t Size)
{
  uint32_t msgdigest = (uint32_t)pMsgDigest;
  
  switch(Size)
 8006520:	2914      	cmp	r1, #20
 8006522:	d016      	beq.n	8006552 <HASH_GetDigest+0x32>
 8006524:	d802      	bhi.n	800652c <HASH_GetDigest+0xc>
 8006526:	2910      	cmp	r1, #16
 8006528:	d005      	beq.n	8006536 <HASH_GetDigest+0x16>
 800652a:	4770      	bx	lr
 800652c:	291c      	cmp	r1, #28
 800652e:	d021      	beq.n	8006574 <HASH_GetDigest+0x54>
 8006530:	2920      	cmp	r1, #32
 8006532:	d037      	beq.n	80065a4 <HASH_GetDigest+0x84>
 8006534:	4770      	bx	lr
  {
    /* Read the message digest */
    case 16:  /* MD5 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 8006536:	4b29      	ldr	r3, [pc, #164]	; (80065dc <HASH_GetDigest+0xbc>)
 8006538:	68da      	ldr	r2, [r3, #12]
  return __builtin_bswap32(value);
 800653a:	ba12      	rev	r2, r2
 800653c:	6002      	str	r2, [r0, #0]
      msgdigest+=4;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	ba12      	rev	r2, r2
 8006542:	6042      	str	r2, [r0, #4]
      msgdigest+=4;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 8006544:	695a      	ldr	r2, [r3, #20]
 8006546:	ba12      	rev	r2, r2
 8006548:	6082      	str	r2, [r0, #8]
      msgdigest+=4;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	ba1b      	rev	r3, r3
 800654e:	60c3      	str	r3, [r0, #12]
    break;
 8006550:	4770      	bx	lr
    case 20:  /* SHA1 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 8006552:	4b22      	ldr	r3, [pc, #136]	; (80065dc <HASH_GetDigest+0xbc>)
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	ba12      	rev	r2, r2
 8006558:	6002      	str	r2, [r0, #0]
      msgdigest+=4;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	ba12      	rev	r2, r2
 800655e:	6042      	str	r2, [r0, #4]
      msgdigest+=4;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 8006560:	695a      	ldr	r2, [r3, #20]
 8006562:	ba12      	rev	r2, r2
 8006564:	6082      	str	r2, [r0, #8]
      msgdigest+=4;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 8006566:	699a      	ldr	r2, [r3, #24]
 8006568:	ba12      	rev	r2, r2
 800656a:	60c2      	str	r2, [r0, #12]
      msgdigest+=4;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	ba1b      	rev	r3, r3
 8006570:	6103      	str	r3, [r0, #16]
    break;
 8006572:	4770      	bx	lr
  case 28:  /* SHA224 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 8006574:	4b19      	ldr	r3, [pc, #100]	; (80065dc <HASH_GetDigest+0xbc>)
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	ba12      	rev	r2, r2
 800657a:	6002      	str	r2, [r0, #0]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	ba12      	rev	r2, r2
 8006580:	6042      	str	r2, [r0, #4]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	ba12      	rev	r2, r2
 8006586:	6082      	str	r2, [r0, #8]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	ba12      	rev	r2, r2
 800658c:	60c2      	str	r2, [r0, #12]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 800658e:	69db      	ldr	r3, [r3, #28]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8006590:	4a13      	ldr	r2, [pc, #76]	; (80065e0 <HASH_GetDigest+0xc0>)
 8006592:	ba1b      	rev	r3, r3
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 8006594:	6103      	str	r3, [r0, #16]
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8006596:	6953      	ldr	r3, [r2, #20]
 8006598:	ba1b      	rev	r3, r3
 800659a:	6143      	str	r3, [r0, #20]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800659c:	6993      	ldr	r3, [r2, #24]
 800659e:	ba1b      	rev	r3, r3
 80065a0:	6183      	str	r3, [r0, #24]
    break;
 80065a2:	4770      	bx	lr
  case 32:   /* SHA256 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 80065a4:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <HASH_GetDigest+0xbc>)
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	ba12      	rev	r2, r2
 80065aa:	6002      	str	r2, [r0, #0]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	ba12      	rev	r2, r2
 80065b0:	6042      	str	r2, [r0, #4]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 80065b2:	695a      	ldr	r2, [r3, #20]
 80065b4:	ba12      	rev	r2, r2
 80065b6:	6082      	str	r2, [r0, #8]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	ba12      	rev	r2, r2
 80065bc:	60c2      	str	r2, [r0, #12]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	ba1b      	rev	r3, r3
 80065c2:	6103      	str	r3, [r0, #16]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <HASH_GetDigest+0xc0>)
 80065c6:	695a      	ldr	r2, [r3, #20]
 80065c8:	ba12      	rev	r2, r2
 80065ca:	6142      	str	r2, [r0, #20]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 80065cc:	699a      	ldr	r2, [r3, #24]
 80065ce:	ba12      	rev	r2, r2
 80065d0:	6182      	str	r2, [r0, #24]
    msgdigest+=4;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	ba1b      	rev	r3, r3
 80065d6:	61c3      	str	r3, [r0, #28]
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	48021400 	.word	0x48021400
 80065e0:	48021710 	.word	0x48021710

080065e4 <HASH_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */  
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80065e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e8:	4690      	mov	r8, r2
 80065ea:	4604      	mov	r4, r0
 80065ec:	460d      	mov	r5, r1
 80065ee:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 80065f0:	f7fd f9ac 	bl	800394c <HAL_GetTick>
 80065f4:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 80065f6:	f1b8 0f00 	cmp.w	r8, #0
 80065fa:	d10e      	bne.n	800661a <HASH_WaitOnFlagUntilTimeout+0x36>
 80065fc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800667c <HASH_WaitOnFlagUntilTimeout+0x98>
  {
    while(__HAL_HASH_GET_FLAG(Flag) == RESET)
 8006600:	2d08      	cmp	r5, #8
 8006602:	d934      	bls.n	800666e <HASH_WaitOnFlagUntilTimeout+0x8a>
 8006604:	f8d8 3000 	ldr.w	r3, [r8]
 8006608:	ea35 0303 	bics.w	r3, r5, r3
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b9c3      	cbnz	r3, 8006646 <HASH_WaitOnFlagUntilTimeout+0x62>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8006614:	2000      	movs	r0, #0
 8006616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800667c <HASH_WaitOnFlagUntilTimeout+0x98>
    while(__HAL_HASH_GET_FLAG(Flag) != RESET)
 800661e:	2d08      	cmp	r5, #8
 8006620:	d928      	bls.n	8006674 <HASH_WaitOnFlagUntilTimeout+0x90>
 8006622:	f8d8 3000 	ldr.w	r3, [r8]
 8006626:	ea35 0303 	bics.w	r3, r5, r3
 800662a:	bf0c      	ite	eq
 800662c:	2301      	moveq	r3, #1
 800662e:	2300      	movne	r3, #0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0ef      	beq.n	8006614 <HASH_WaitOnFlagUntilTimeout+0x30>
      if(Timeout != HAL_MAX_DELAY)
 8006634:	1c73      	adds	r3, r6, #1
 8006636:	d0f2      	beq.n	800661e <HASH_WaitOnFlagUntilTimeout+0x3a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006638:	b146      	cbz	r6, 800664c <HASH_WaitOnFlagUntilTimeout+0x68>
 800663a:	f7fd f987 	bl	800394c <HAL_GetTick>
 800663e:	1bc0      	subs	r0, r0, r7
 8006640:	4286      	cmp	r6, r0
 8006642:	d2ec      	bcs.n	800661e <HASH_WaitOnFlagUntilTimeout+0x3a>
 8006644:	e002      	b.n	800664c <HASH_WaitOnFlagUntilTimeout+0x68>
      if(Timeout != HAL_MAX_DELAY)
 8006646:	1c72      	adds	r2, r6, #1
 8006648:	d0da      	beq.n	8006600 <HASH_WaitOnFlagUntilTimeout+0x1c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800664a:	b956      	cbnz	r6, 8006662 <HASH_WaitOnFlagUntilTimeout+0x7e>
          hhash->State  = HAL_HASH_STATE_READY;
 800664c:	2301      	movs	r3, #1
          hhash->Status = HAL_TIMEOUT;
 800664e:	2003      	movs	r0, #3
          hhash->State  = HAL_HASH_STATE_READY;
 8006650:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hhash);
 8006654:	2300      	movs	r3, #0
          hhash->Status = HAL_TIMEOUT;
 8006656:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hhash);
 800665a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006662:	f7fd f973 	bl	800394c <HAL_GetTick>
 8006666:	1bc0      	subs	r0, r0, r7
 8006668:	4286      	cmp	r6, r0
 800666a:	d2c9      	bcs.n	8006600 <HASH_WaitOnFlagUntilTimeout+0x1c>
 800666c:	e7ee      	b.n	800664c <HASH_WaitOnFlagUntilTimeout+0x68>
    while(__HAL_HASH_GET_FLAG(Flag) == RESET)
 800666e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8006672:	e7c9      	b.n	8006608 <HASH_WaitOnFlagUntilTimeout+0x24>
    while(__HAL_HASH_GET_FLAG(Flag) != RESET)
 8006674:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8006678:	e7d5      	b.n	8006626 <HASH_WaitOnFlagUntilTimeout+0x42>
 800667a:	bf00      	nop
 800667c:	48021400 	.word	0x48021400

08006680 <HAL_HASH_InCpltCallback>:
 8006680:	4770      	bx	lr

08006682 <HAL_HASH_DgstCpltCallback>:
 8006682:	4770      	bx	lr

08006684 <HAL_HASH_ErrorCallback>:
{
 8006684:	4770      	bx	lr
	...

08006688 <HAL_HASH_IRQHandler>:
  *         suspension time is stored in the handle for resumption later on.  
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_IT(HASH_HandleTypeDef *hhash)
{
  if (hhash->State == HAL_HASH_STATE_BUSY)
 8006688:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	2a02      	cmp	r2, #2
{
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	4604      	mov	r4, r0
  if (hhash->State == HAL_HASH_STATE_BUSY)
 8006694:	f040 80d1 	bne.w	800683a <HAL_HASH_IRQHandler+0x1b2>
  {  
    /* ITCounter must not be equal to 0 at this point. Report an error if this is the case. */
    if(hhash->HashITCounter == 0)
 8006698:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800669a:	4b69      	ldr	r3, [pc, #420]	; (8006840 <HAL_HASH_IRQHandler+0x1b8>)
 800669c:	b981      	cbnz	r1, 80066c0 <HAL_HASH_IRQHandler+0x38>
    {
      /* Disable Interrupts */
      __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 800669e:	6a1a      	ldr	r2, [r3, #32]
      /* HASH state set back to Ready to prevent any issue in user code
         present in HAL_HASH_ErrorCallback() */
      hhash->State = HAL_HASH_STATE_READY;        
 80066a0:	2001      	movs	r0, #1
      __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 80066a2:	f022 0203 	bic.w	r2, r2, #3
 80066a6:	621a      	str	r2, [r3, #32]
      hhash->State = HAL_HASH_STATE_READY;        
 80066a8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  hhash->Status = HASH_IT(hhash);
 80066ac:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  if (hhash->Status != HAL_OK)
 80066b0:	b128      	cbz	r0, 80066be <HAL_HASH_IRQHandler+0x36>
    HAL_HASH_ErrorCallback(hhash); 
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff ffe6 	bl	8006684 <HAL_HASH_ErrorCallback>
    hhash->Status = HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80066be:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
    }
    else if (hhash->HashITCounter == 1)
 80066c0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80066c2:	2901      	cmp	r1, #1
    }
    else
    {
      /* Cruise speed reached, HashITCounter remains equal to 3 until the end of
        the HASH processing or the end of the current step for HMAC processing. */ 
      hhash->HashITCounter = 3;
 80066c4:	bf18      	it	ne
 80066c6:	2203      	movne	r2, #3
 80066c8:	6242      	str	r2, [r0, #36]	; 0x24
    }
    
    /* If digest is ready */
    if (__HAL_HASH_GET_FLAG(HASH_FLAG_DCIS))
 80066ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80066cc:	f010 0002 	ands.w	r0, r0, #2
 80066d0:	d022      	beq.n	8006718 <HAL_HASH_IRQHandler+0x90>
    {
      /* Read the digest */
      HASH_GetDigest(hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH());
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	4a5b      	ldr	r2, [pc, #364]	; (8006844 <HAL_HASH_IRQHandler+0x1bc>)
 80066d6:	6920      	ldr	r0, [r4, #16]
 80066d8:	4211      	tst	r1, r2
 80066da:	d019      	beq.n	8006710 <HAL_HASH_IRQHandler+0x88>
 80066dc:	6819      	ldr	r1, [r3, #0]
 80066de:	4011      	ands	r1, r2
 80066e0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80066e4:	d016      	beq.n	8006714 <HAL_HASH_IRQHandler+0x8c>
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	ea32 0303 	bics.w	r3, r2, r3
 80066ec:	bf0c      	ite	eq
 80066ee:	2120      	moveq	r1, #32
 80066f0:	2110      	movne	r1, #16
 80066f2:	f7ff ff15 	bl	8006520 <HASH_GetDigest>
      
      /* Disable Interrupts */
      __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 80066f6:	4a52      	ldr	r2, [pc, #328]	; (8006840 <HAL_HASH_IRQHandler+0x1b8>)
      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_READY;
      /* Call digest computation complete call back */
      HAL_HASH_DgstCpltCallback(hhash);
 80066f8:	4620      	mov	r0, r4
      __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 80066fa:	6a13      	ldr	r3, [r2, #32]
 80066fc:	f023 0303 	bic.w	r3, r3, #3
 8006700:	6213      	str	r3, [r2, #32]
      hhash->State = HAL_HASH_STATE_READY;
 8006702:	2301      	movs	r3, #1
 8006704:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      HAL_HASH_DgstCpltCallback(hhash);
 8006708:	f7ff ffbb 	bl	8006682 <HAL_HASH_DgstCpltCallback>
        }
      } /* if (HASH_Write_Block_Data(hhash) == HASH_DIGEST_CALCULATION_STARTED) */
    }  /* if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))*/

    /* Return function status */
    return HAL_OK;  
 800670c:	2000      	movs	r0, #0
 800670e:	e7cd      	b.n	80066ac <HAL_HASH_IRQHandler+0x24>
      HASH_GetDigest(hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH());
 8006710:	2114      	movs	r1, #20
 8006712:	e7ee      	b.n	80066f2 <HAL_HASH_IRQHandler+0x6a>
 8006714:	211c      	movs	r1, #28
 8006716:	e7ec      	b.n	80066f2 <HAL_HASH_IRQHandler+0x6a>
    if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 8006718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800671a:	07d2      	lsls	r2, r2, #31
 800671c:	d5f6      	bpl.n	800670c <HAL_HASH_IRQHandler+0x84>
      if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && (hhash->HashInCount != 0))
 800671e:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8006722:	2a01      	cmp	r2, #1
 8006724:	d10b      	bne.n	800673e <HAL_HASH_IRQHandler+0xb6>
 8006726:	6a22      	ldr	r2, [r4, #32]
 8006728:	b14a      	cbz	r2, 800673e <HAL_HASH_IRQHandler+0xb6>
        __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	f022 0203 	bic.w	r2, r2, #3
 8006730:	621a      	str	r2, [r3, #32]
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 8006732:	2308      	movs	r3, #8
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;         
 8006734:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 8006738:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800673c:	e7b6      	b.n	80066ac <HAL_HASH_IRQHandler+0x24>
  uint32_t buffercounter;
  uint32_t inputcounter;    
  uint32_t ret = HASH_DIGEST_CALCULATION_NOT_STARTED;
  
  /* If there are more than 64 bytes remaining to be entered */
  if(hhash->HashInCount > 64)
 800673e:	6a23      	ldr	r3, [r4, #32]
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	d91e      	bls.n	8006784 <HAL_HASH_IRQHandler+0xfc>
 8006746:	f103 0040 	add.w	r0, r3, #64	; 0x40
  {
    inputaddr = (uint32_t)hhash->pHashInBuffPtr;
 800674a:	461a      	mov	r2, r3
    /* Write the Input block in the Data IN register
      (16 32-bit words, or 64 bytes are entered) */
    for(buffercounter = 0; buffercounter < 64; buffercounter+=4)
    {
      HASH->DIN = *(uint32_t*)inputaddr;
 800674c:	493c      	ldr	r1, [pc, #240]	; (8006840 <HAL_HASH_IRQHandler+0x1b8>)
 800674e:	f852 5b04 	ldr.w	r5, [r2], #4
    for(buffercounter = 0; buffercounter < 64; buffercounter+=4)
 8006752:	4282      	cmp	r2, r0
      HASH->DIN = *(uint32_t*)inputaddr;
 8006754:	604d      	str	r5, [r1, #4]
    for(buffercounter = 0; buffercounter < 64; buffercounter+=4)
 8006756:	d1fa      	bne.n	800674e <HAL_HASH_IRQHandler+0xc6>
      inputaddr+=4;
    }
    /* If this is the start of input data entering, an additional word
      must be entered to start up the HASH processing */
    if(hhash->HashITCounter == 2)
 8006758:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800675a:	2802      	cmp	r0, #2
 800675c:	d10d      	bne.n	800677a <HAL_HASH_IRQHandler+0xf2>
    {
      HASH->DIN = *(uint32_t*)inputaddr;
 800675e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006760:	604a      	str	r2, [r1, #4]
      inputaddr+=4;
      if(hhash->HashInCount >= 68)
 8006762:	6a22      	ldr	r2, [r4, #32]
 8006764:	2a43      	cmp	r2, #67	; 0x43
 8006766:	d905      	bls.n	8006774 <HAL_HASH_IRQHandler+0xec>
      {
        /* There are still data waiting to be entered in the IP.
           Decrement buffer counter and set pointer to the proper
           memory location for the next data entering round. */
        hhash->HashInCount -= 68;
 8006768:	6a22      	ldr	r2, [r4, #32]
        hhash->pHashInBuffPtr+= 68;
 800676a:	3344      	adds	r3, #68	; 0x44
        hhash->HashInCount -= 68;
 800676c:	3a44      	subs	r2, #68	; 0x44
        hhash->pHashInBuffPtr+= 68;
 800676e:	60e3      	str	r3, [r4, #12]
        hhash->HashInCount -= 68;
 8006770:	6222      	str	r2, [r4, #32]
 8006772:	e7cb      	b.n	800670c <HAL_HASH_IRQHandler+0x84>
      }
      else
      {
        /* All the input buffer has been fed to the HW. */
        hhash->HashInCount = 0;
 8006774:	2000      	movs	r0, #0
 8006776:	6220      	str	r0, [r4, #32]
 8006778:	e798      	b.n	80066ac <HAL_HASH_IRQHandler+0x24>
    else
    {
      /* 64 bytes have been entered and there are still some remaining:
         Decrement buffer counter and set pointer to the proper
        memory location for the next data entering round.*/
      hhash->HashInCount -= 64;
 800677a:	6a23      	ldr	r3, [r4, #32]
      hhash->pHashInBuffPtr+= 64;
 800677c:	60e2      	str	r2, [r4, #12]
      hhash->HashInCount -= 64;
 800677e:	3b40      	subs	r3, #64	; 0x40
 8006780:	6223      	str	r3, [r4, #32]
 8006782:	e7c3      	b.n	800670c <HAL_HASH_IRQHandler+0x84>
      data entering round. */ 
  
    /* Get the buffer address */
    inputaddr = (uint32_t)hhash->pHashInBuffPtr;
    /* Get the buffer counter */
    inputcounter = hhash->HashInCount;
 8006784:	6a22      	ldr	r2, [r4, #32]
    /* Disable Interrupts */
    __HAL_HASH_DISABLE_IT(HASH_IT_DINI);
 8006786:	4d2e      	ldr	r5, [pc, #184]	; (8006840 <HAL_HASH_IRQHandler+0x1b8>)

    /* Write the Input block in the Data IN register */
    for(buffercounter = 0; buffercounter < (inputcounter+3)/4; buffercounter++)
 8006788:	3203      	adds	r2, #3
    __HAL_HASH_DISABLE_IT(HASH_IT_DINI);
 800678a:	6a29      	ldr	r1, [r5, #32]
 800678c:	f022 0203 	bic.w	r2, r2, #3
 8006790:	f021 0101 	bic.w	r1, r1, #1
 8006794:	441a      	add	r2, r3
 8006796:	6229      	str	r1, [r5, #32]
    for(buffercounter = 0; buffercounter < (inputcounter+3)/4; buffercounter++)
 8006798:	4293      	cmp	r3, r2
 800679a:	d11a      	bne.n	80067d2 <HAL_HASH_IRQHandler+0x14a>
    {
      HASH->DIN = *(uint32_t*)inputaddr;
      inputaddr+=4;
    }
    /* Start the Digest calculation */
    __HAL_HASH_START_DIGEST();
 800679c:	68ab      	ldr	r3, [r5, #8]
        HAL_HASH_InCpltCallback(hhash);            
 800679e:	4620      	mov	r0, r4
    __HAL_HASH_START_DIGEST();
 80067a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a4:	60ab      	str	r3, [r5, #8]
       this return value triggers the call to Input data transfer 
       complete call back as well as the proper transition from
       one step to another in HMAC mode. */          
    ret = HASH_DIGEST_CALCULATION_STARTED;          
    /* Reset buffer counter */
    hhash->HashInCount = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	6223      	str	r3, [r4, #32]
        HAL_HASH_InCpltCallback(hhash);            
 80067aa:	f7ff ff69 	bl	8006680 <HAL_HASH_InCpltCallback>
        if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1)
 80067ae:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80067b2:	2e03      	cmp	r6, #3
 80067b4:	d127      	bne.n	8006806 <HAL_HASH_IRQHandler+0x17e>
          if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, HASH_TIMEOUTVALUE) != HAL_OK)
 80067b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067ba:	2201      	movs	r2, #1
 80067bc:	2108      	movs	r1, #8
 80067be:	4620      	mov	r0, r4
 80067c0:	f7ff ff10 	bl	80065e4 <HASH_WaitOnFlagUntilTimeout>
 80067c4:	b148      	cbz	r0, 80067da <HAL_HASH_IRQHandler+0x152>
            __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);                                 
 80067c6:	6a2b      	ldr	r3, [r5, #32]
            return HAL_TIMEOUT;
 80067c8:	2003      	movs	r0, #3
            __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);                                 
 80067ca:	f023 0303 	bic.w	r3, r3, #3
 80067ce:	622b      	str	r3, [r5, #32]
 80067d0:	e76c      	b.n	80066ac <HAL_HASH_IRQHandler+0x24>
      HASH->DIN = *(uint32_t*)inputaddr;
 80067d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80067d6:	6069      	str	r1, [r5, #4]
 80067d8:	e7de      	b.n	8006798 <HAL_HASH_IRQHandler+0x110>
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;        /* Move phase from Step 1 to Step 2 */
 80067da:	2304      	movs	r3, #4
          __HAL_HASH_SET_NBVALIDBITS(hhash->HashBuffSize);  /* Set NBLW for the input message */
 80067dc:	69e2      	ldr	r2, [r4, #28]
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;        /* Move phase from Step 1 to Step 2 */
 80067de:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
          __HAL_HASH_SET_NBVALIDBITS(hhash->HashBuffSize);  /* Set NBLW for the input message */
 80067e2:	f002 0103 	and.w	r1, r2, #3
 80067e6:	68ab      	ldr	r3, [r5, #8]
 80067e8:	f023 031f 	bic.w	r3, r3, #31
 80067ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80067f0:	60ab      	str	r3, [r5, #8]
          hhash->pHashInBuffPtr = hhash->pHashMsgBuffPtr;   /* Set the input data address */
 80067f2:	69a3      	ldr	r3, [r4, #24]
          hhash->HashInCount = hhash->HashBuffSize;         /* Set the input data size (in bytes) */
 80067f4:	6222      	str	r2, [r4, #32]
          hhash->pHashInBuffPtr = hhash->Init.pKey;          /* Set the key address */                             
 80067f6:	60e3      	str	r3, [r4, #12]
          hhash->HashITCounter = 1;                          /* Set ITCounter to 1 to indicate the start of a new phase */
 80067f8:	2301      	movs	r3, #1
 80067fa:	6263      	str	r3, [r4, #36]	; 0x24
          __HAL_HASH_ENABLE_IT(HASH_IT_DINI);                /* Enable IT (was disabled in HASH_Write_Block_Data) */      
 80067fc:	6a2b      	ldr	r3, [r5, #32]
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	622b      	str	r3, [r5, #32]
 8006804:	e752      	b.n	80066ac <HAL_HASH_IRQHandler+0x24>
        else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2)
 8006806:	2e04      	cmp	r6, #4
 8006808:	d180      	bne.n	800670c <HAL_HASH_IRQHandler+0x84>
          if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, HASH_TIMEOUTVALUE) != HAL_OK)
 800680a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800680e:	2201      	movs	r2, #1
 8006810:	2108      	movs	r1, #8
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff fee6 	bl	80065e4 <HASH_WaitOnFlagUntilTimeout>
 8006818:	2800      	cmp	r0, #0
 800681a:	d1d4      	bne.n	80067c6 <HAL_HASH_IRQHandler+0x13e>
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;         /* Move phase from Step 2 to Step 3 */                       
 800681c:	2305      	movs	r3, #5
          __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);   /* Set NBLW for the key */                         
 800681e:	6862      	ldr	r2, [r4, #4]
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;         /* Move phase from Step 2 to Step 3 */                       
 8006820:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
          __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);   /* Set NBLW for the key */                         
 8006824:	f002 0103 	and.w	r1, r2, #3
 8006828:	68ab      	ldr	r3, [r5, #8]
 800682a:	f023 031f 	bic.w	r3, r3, #31
 800682e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006832:	60ab      	str	r3, [r5, #8]
          hhash->HashInCount = hhash->Init.KeySize;          /* Set the key size (in bytes) */                     
 8006834:	6222      	str	r2, [r4, #32]
          hhash->pHashInBuffPtr = hhash->Init.pKey;          /* Set the key address */                             
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	e7dd      	b.n	80067f6 <HAL_HASH_IRQHandler+0x16e>
    return HAL_BUSY;
 800683a:	2002      	movs	r0, #2
 800683c:	e736      	b.n	80066ac <HAL_HASH_IRQHandler+0x24>
 800683e:	bf00      	nop
 8006840:	48021400 	.word	0x48021400
 8006844:	00040080 	.word	0x00040080

08006848 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800684c:	6806      	ldr	r6, [r0, #0]
{
 800684e:	b087      	sub	sp, #28
 8006850:	4604      	mov	r4, r0
  uint32_t i = 0 , interrupt = 0;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006852:	4630      	mov	r0, r6
 8006854:	f006 fcd0 	bl	800d1f8 <USB_GetMode>
 8006858:	2801      	cmp	r0, #1
 800685a:	f040 80ef 	bne.w	8006a3c <HAL_HCD_IRQHandler+0x1f4>
  {
    /* avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	f006 fcc6 	bl	800d1f0 <USB_ReadInterrupts>
 8006864:	2800      	cmp	r0, #0
 8006866:	f000 80e9 	beq.w	8006a3c <HAL_HCD_IRQHandler+0x1f4>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	f006 fcc0 	bl	800d1f0 <USB_ReadInterrupts>
 8006870:	0280      	lsls	r0, r0, #10
 8006872:	d503      	bpl.n	800687c <HAL_HCD_IRQHandler+0x34>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800687a:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	f006 fcb7 	bl	800d1f0 <USB_ReadInterrupts>
 8006882:	02c1      	lsls	r1, r0, #11
 8006884:	d503      	bpl.n	800688e <HAL_HCD_IRQHandler+0x46>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800688c:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800688e:	6820      	ldr	r0, [r4, #0]
 8006890:	f006 fcae 	bl	800d1f0 <USB_ReadInterrupts>
 8006894:	0142      	lsls	r2, r0, #5
 8006896:	d503      	bpl.n	80068a0 <HAL_HCD_IRQHandler+0x58>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800689e:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	f006 fca5 	bl	800d1f0 <USB_ReadInterrupts>
 80068a6:	0783      	lsls	r3, r0, #30
 80068a8:	d502      	bpl.n	80068b0 <HAL_HCD_IRQHandler+0x68>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	2202      	movs	r2, #2
 80068ae:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	f006 fc9d 	bl	800d1f0 <USB_ReadInterrupts>
 80068b6:	0087      	lsls	r7, r0, #2
 80068b8:	d510      	bpl.n	80068dc <HAL_HCD_IRQHandler+0x94>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80068ba:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
       
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 80068be:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80068c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068c4:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 80068c8:	f7fc fa34 	bl	8002d34 <HAL_HCD_Disconnect_Callback>
       USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 80068cc:	2101      	movs	r1, #1
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	f006 fc96 	bl	800d200 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80068da:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	f006 fc87 	bl	800d1f0 <USB_ReadInterrupts>
 80068e2:	01c5      	lsls	r5, r0, #7
 80068e4:	d548      	bpl.n	8006978 <HAL_HCD_IRQHandler+0x130>
  * @param  hhcd: HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 80068e6:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80068e8:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80068ec:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 80068ee:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80068f2:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80068f4:	9b05      	ldr	r3, [sp, #20]
 80068f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068fa:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80068fc:	9b04      	ldr	r3, [sp, #16]
 80068fe:	0798      	lsls	r0, r3, #30
 8006900:	d50d      	bpl.n	800691e <HAL_HCD_IRQHandler+0xd6>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	07d9      	lsls	r1, r3, #31
 8006906:	d506      	bpl.n	8006916 <HAL_HCD_IRQHandler+0xce>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8006908:	69ab      	ldr	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 800690a:	4620      	mov	r0, r4
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800690c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006910:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8006912:	f7fc fa0b 	bl	8002d2c <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006916:	9b05      	ldr	r3, [sp, #20]
 8006918:	f043 0302 	orr.w	r3, r3, #2
 800691c:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800691e:	9b04      	ldr	r3, [sp, #16]
 8006920:	071a      	lsls	r2, r3, #28
 8006922:	d51f      	bpl.n	8006964 <HAL_HCD_IRQHandler+0x11c>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006924:	9b05      	ldr	r3, [sp, #20]
 8006926:	f043 0308 	orr.w	r3, r3, #8
 800692a:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	075b      	lsls	r3, r3, #29
 8006930:	f140 808f 	bpl.w	8006a52 <HAL_HCD_IRQHandler+0x20a>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006934:	69a1      	ldr	r1, [r4, #24]
 8006936:	2902      	cmp	r1, #2
 8006938:	f040 8083 	bne.w	8006a42 <HAL_HCD_IRQHandler+0x1fa>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800693c:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 800693e:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006940:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006944:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8006948:	bf18      	it	ne
 800694a:	2101      	movne	r1, #1
 800694c:	f006 fc58 	bl	800d200 <USB_InitFSLSPClkSel>
        if(hhcd->Init.speed == HCD_SPEED_FULL)
        {
          USBx_HOST->HFIR = (uint32_t)60000;
        }
      }
      HAL_HCD_Connect_Callback(hhcd);
 8006950:	4620      	mov	r0, r4
 8006952:	f7fc f9eb 	bl	8002d2c <HAL_HCD_Connect_Callback>
      
      if(hhcd->Init.speed == HCD_SPEED_HIGH)
 8006956:	68e3      	ldr	r3, [r4, #12]
 8006958:	b923      	cbnz	r3, 8006964 <HAL_HCD_IRQHandler+0x11c>
    {
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 800695a:	6822      	ldr	r2, [r4, #0]
 800695c:	6993      	ldr	r3, [r2, #24]
 800695e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006962:	6193      	str	r3, [r2, #24]
    }    
  }
  
  /* Check For an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	069f      	lsls	r7, r3, #26
 8006968:	d503      	bpl.n	8006972 <HAL_HCD_IRQHandler+0x12a>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800696a:	9b05      	ldr	r3, [sp, #20]
 800696c:	f043 0320 	orr.w	r3, r3, #32
 8006970:	9305      	str	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006972:	9b05      	ldr	r3, [sp, #20]
 8006974:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	f006 fc39 	bl	800d1f0 <USB_ReadInterrupts>
 800697e:	0705      	lsls	r5, r0, #28
 8006980:	d505      	bpl.n	800698e <HAL_HCD_IRQHandler+0x146>
      HAL_HCD_SOF_Callback(hhcd);
 8006982:	4620      	mov	r0, r4
 8006984:	f7fc f9ce 	bl	8002d24 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	2208      	movs	r2, #8
 800698c:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800698e:	6820      	ldr	r0, [r4, #0]
 8006990:	f006 fc2e 	bl	800d1f0 <USB_ReadInterrupts>
 8006994:	0180      	lsls	r0, r0, #6
 8006996:	d513      	bpl.n	80069c0 <HAL_HCD_IRQHandler+0x178>
 8006998:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 800699c:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1 << i))
 80069a0:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 80069a4:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80069a6:	f04f 0902 	mov.w	r9, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80069aa:	6820      	ldr	r0, [r4, #0]
 80069ac:	f006 fc64 	bl	800d278 <USB_HC_ReadInterrupt>
 80069b0:	9001      	str	r0, [sp, #4]
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	459b      	cmp	fp, r3
 80069b6:	d353      	bcc.n	8006a60 <HAL_HCD_IRQHandler+0x218>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069be:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	f006 fc15 	bl	800d1f0 <USB_ReadInterrupts>
 80069c6:	06c3      	lsls	r3, r0, #27
 80069c8:	d538      	bpl.n	8006a3c <HAL_HCD_IRQHandler+0x1f4>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069ca:	6825      	ldr	r5, [r4, #0]
 80069cc:	69ab      	ldr	r3, [r5, #24]
 80069ce:	f023 0310 	bic.w	r3, r3, #16
 80069d2:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP ;
 80069d4:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80069d6:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d129      	bne.n	8006a32 <HAL_HCD_IRQHandler+0x1ea>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4;
 80069de:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80069e2:	f1b8 0f00 	cmp.w	r8, #0
 80069e6:	d024      	beq.n	8006a32 <HAL_HCD_IRQHandler+0x1ea>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 80069e8:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80069ec:	2628      	movs	r6, #40	; 0x28
 80069ee:	fb06 4607 	mla	r6, r6, r7, r4
 80069f2:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80069f4:	b1e9      	cbz	r1, 8006a32 <HAL_HCD_IRQHandler+0x1ea>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 80069f6:	4642      	mov	r2, r8
 80069f8:	4628      	mov	r0, r5
 80069fa:	f006 fbe9 	bl	800d1d0 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 80069fe:	6c73      	ldr	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8006a00:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8006a04:	4443      	add	r3, r8
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8006a06:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8006a0a:	6473      	str	r3, [r6, #68]	; 0x44
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8006a0c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8006a0e:	692a      	ldr	r2, [r5, #16]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8006a10:	4443      	add	r3, r8
 8006a12:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8006a14:	4bb2      	ldr	r3, [pc, #712]	; (8006ce0 <HAL_HCD_IRQHandler+0x498>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	b15b      	cbz	r3, 8006a32 <HAL_HCD_IRQHandler+0x1ea>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8006a1a:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8006a24:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8006a26:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8006a2a:	f083 0301 	eor.w	r3, r3, #1
 8006a2e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	6993      	ldr	r3, [r2, #24]
 8006a36:	f043 0310 	orr.w	r3, r3, #16
 8006a3a:	6193      	str	r3, [r2, #24]
}
 8006a3c:	b007      	add	sp, #28
 8006a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8006a42:	68e3      	ldr	r3, [r4, #12]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d183      	bne.n	8006950 <HAL_HCD_IRQHandler+0x108>
          USBx_HOST->HFIR = (uint32_t)60000;
 8006a48:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006a4c:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8006a50:	e77e      	b.n	8006950 <HAL_HCD_IRQHandler+0x108>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8006a52:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8006a56:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a5a:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
 8006a5e:	e77c      	b.n	800695a <HAL_HCD_IRQHandler+0x112>
        if (interrupt & (1 << i))
 8006a60:	fa0a f30b 	lsl.w	r3, sl, fp
 8006a64:	9a01      	ldr	r2, [sp, #4]
 8006a66:	4213      	tst	r3, r2
 8006a68:	f000 808a 	beq.w	8006b80 <HAL_HCD_IRQHandler+0x338>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8006a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a70:	fa5f f58b 	uxtb.w	r5, fp
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006a7a:	f000 8104 	beq.w	8006c86 <HAL_HCD_IRQHandler+0x43e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8006a7e:	016a      	lsls	r2, r5, #5
 8006a80:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8006a84:	18d6      	adds	r6, r2, r3
 8006a86:	68b1      	ldr	r1, [r6, #8]
 8006a88:	0749      	lsls	r1, r1, #29
 8006a8a:	d513      	bpl.n	8006ab4 <HAL_HCD_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006a8c:	2104      	movs	r1, #4
 8006a8e:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8006a90:	68f1      	ldr	r1, [r6, #12]
 8006a92:	f041 0102 	orr.w	r1, r1, #2
 8006a96:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8006a98:	68b1      	ldr	r1, [r6, #8]
 8006a9a:	0589      	lsls	r1, r1, #22
 8006a9c:	d542      	bpl.n	8006b24 <HAL_HCD_IRQHandler+0x2dc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006a9e:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8006aaa:	f006 fbf4 	bl	800d296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab2:	e0c4      	b.n	8006c3e <HAL_HCD_IRQHandler+0x3f6>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8006ab4:	68b1      	ldr	r1, [r6, #8]
 8006ab6:	0689      	lsls	r1, r1, #26
 8006ab8:	d502      	bpl.n	8006ac0 <HAL_HCD_IRQHandler+0x278>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006aba:	2120      	movs	r1, #32
 8006abc:	60b1      	str	r1, [r6, #8]
 8006abe:	e7eb      	b.n	8006a98 <HAL_HCD_IRQHandler+0x250>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8006ac0:	68b1      	ldr	r1, [r6, #8]
 8006ac2:	0709      	lsls	r1, r1, #28
 8006ac4:	d515      	bpl.n	8006af2 <HAL_HCD_IRQHandler+0x2aa>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8006ac6:	68f1      	ldr	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8006ac8:	f04f 0e05 	mov.w	lr, #5
 8006acc:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8006ace:	f041 0102 	orr.w	r1, r1, #2
 8006ad2:	9202      	str	r2, [sp, #8]
 8006ad4:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8006ad6:	fb07 4105 	mla	r1, r7, r5, r4
 8006ada:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006ade:	2110      	movs	r1, #16
 8006ae0:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8006ae2:	2108      	movs	r1, #8
 8006ae4:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	f006 fbd5 	bl	800d296 <USB_HC_Halt>
 8006aec:	9a02      	ldr	r2, [sp, #8]
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	e7d2      	b.n	8006a98 <HAL_HCD_IRQHandler+0x250>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8006af2:	68b1      	ldr	r1, [r6, #8]
 8006af4:	0549      	lsls	r1, r1, #21
 8006af6:	d5cf      	bpl.n	8006a98 <HAL_HCD_IRQHandler+0x250>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8006af8:	68f1      	ldr	r1, [r6, #12]
 8006afa:	9303      	str	r3, [sp, #12]
 8006afc:	f041 0102 	orr.w	r1, r1, #2
 8006b00:	9202      	str	r2, [sp, #8]
 8006b02:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8006b04:	4629      	mov	r1, r5
 8006b06:	f006 fbc6 	bl	800d296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8006b0a:	2110      	movs	r1, #16
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006b0c:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006b0e:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8006b10:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006b12:	fb07 4105 	mla	r1, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006b16:	9a02      	ldr	r2, [sp, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006b18:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b20:	60b1      	str	r1, [r6, #8]
 8006b22:	e7b9      	b.n	8006a98 <HAL_HCD_IRQHandler+0x250>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8006b24:	68b1      	ldr	r1, [r6, #8]
 8006b26:	07c8      	lsls	r0, r1, #31
 8006b28:	d53d      	bpl.n	8006ba6 <HAL_HCD_IRQHandler+0x35e>
    if (hhcd->Init.dma_enable)
 8006b2a:	6921      	ldr	r1, [r4, #16]
 8006b2c:	b149      	cbz	r1, 8006b42 <HAL_HCD_IRQHandler+0x2fa>
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006b2e:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8006b30:	fb07 4e05 	mla	lr, r7, r5, r4
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006b34:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8006b38:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
 8006b3c:	1a09      	subs	r1, r1, r0
 8006b3e:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8006b42:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0;
 8006b46:	2000      	movs	r0, #0
    hhcd->hc[chnum].state = HC_XFRC;
 8006b48:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    hhcd->hc[chnum].ErrCnt = 0;
 8006b4c:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006b4e:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8006b52:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8006b56:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8006b5a:	d116      	bne.n	8006b8a <HAL_HCD_IRQHandler+0x342>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006b5c:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8006b5e:	4629      	mov	r1, r5
 8006b60:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006b62:	f043 0302 	orr.w	r3, r3, #2
 8006b66:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8006b68:	f006 fb95 	bl	800d296 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1;
 8006b70:	fb07 4505 	mla	r5, r7, r5, r4
 8006b74:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8006b78:	f083 0301 	eor.w	r3, r3, #1
 8006b7c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8006b80:	f10b 0b01 	add.w	fp, fp, #1
 8006b84:	f108 0820 	add.w	r8, r8, #32
 8006b88:	e713      	b.n	80069b2 <HAL_HCD_IRQHandler+0x16a>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006b8a:	2803      	cmp	r0, #3
 8006b8c:	d1f0      	bne.n	8006b70 <HAL_HCD_IRQHandler+0x328>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006b8e:	58d0      	ldr	r0, [r2, r3]
 8006b90:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8006b94:	50d0      	str	r0, [r2, r3]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006b96:	2201      	movs	r2, #1
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8006b98:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	f7fc f8cc 	bl	8002d3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006ba4:	e7e4      	b.n	8006b70 <HAL_HCD_IRQHandler+0x328>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8006ba6:	68b1      	ldr	r1, [r6, #8]
 8006ba8:	0789      	lsls	r1, r1, #30
 8006baa:	d534      	bpl.n	8006c16 <HAL_HCD_IRQHandler+0x3ce>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8006bac:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8006bae:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8006bb2:	f021 0102 	bic.w	r1, r1, #2
 8006bb6:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8006bb8:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8006bbc:	2901      	cmp	r1, #1
 8006bbe:	d10c      	bne.n	8006bda <HAL_HCD_IRQHandler+0x392>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006bc0:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8006bc4:	fb07 4305 	mla	r3, r7, r5, r4
 8006bc8:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006bca:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8006bd4:	f7fc f8b2 	bl	8002d3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006bd8:	e7d2      	b.n	8006b80 <HAL_HCD_IRQHandler+0x338>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8006bda:	2905      	cmp	r1, #5
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_HCD_IRQHandler+0x378>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006bde:	2906      	cmp	r1, #6
 8006be0:	d001      	beq.n	8006be6 <HAL_HCD_IRQHandler+0x39e>
 8006be2:	2908      	cmp	r1, #8
 8006be4:	d1ee      	bne.n	8006bc4 <HAL_HCD_IRQHandler+0x37c>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8006be6:	fb07 4105 	mla	r1, r7, r5, r4
 8006bea:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8006bec:	2803      	cmp	r0, #3
 8006bee:	f100 0e01 	add.w	lr, r0, #1
        hhcd->hc[chnum].ErrCnt = 0;
 8006bf2:	bf88      	it	hi
 8006bf4:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8006bf6:	f8c1 e058 	str.w	lr, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006bfa:	bf91      	iteee	ls
 8006bfc:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
        hhcd->hc[chnum].ErrCnt = 0;
 8006c00:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006c02:	2004      	movhi	r0, #4
 8006c04:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c08:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c0a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c0e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;     
 8006c12:	50d1      	str	r1, [r2, r3]
 8006c14:	e7d6      	b.n	8006bc4 <HAL_HCD_IRQHandler+0x37c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8006c16:	68b1      	ldr	r1, [r6, #8]
 8006c18:	0608      	lsls	r0, r1, #24
 8006c1a:	d512      	bpl.n	8006c42 <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006c1c:	68f3      	ldr	r3, [r6, #12]
     USB_HC_Halt(hhcd->Instance, chnum);     
 8006c1e:	4629      	mov	r1, r5
 8006c20:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006c22:	f043 0302 	orr.w	r3, r3, #2
 8006c26:	60f3      	str	r3, [r6, #12]
     hhcd->hc[chnum].ErrCnt++;
 8006c28:	fb07 4305 	mla	r3, r7, r5, r4
 8006c2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c2e:	3201      	adds	r2, #1
 8006c30:	659a      	str	r2, [r3, #88]	; 0x58
     hhcd->hc[chnum].state = HC_XACTERR;
 8006c32:	2206      	movs	r2, #6
 8006c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
     USB_HC_Halt(hhcd->Instance, chnum);     
 8006c38:	f006 fb2d 	bl	800d296 <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006c3c:	2380      	movs	r3, #128	; 0x80
 8006c3e:	60b3      	str	r3, [r6, #8]
 8006c40:	e79e      	b.n	8006b80 <HAL_HCD_IRQHandler+0x338>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8006c42:	68b1      	ldr	r1, [r6, #8]
 8006c44:	06c9      	lsls	r1, r1, #27
 8006c46:	d59b      	bpl.n	8006b80 <HAL_HCD_IRQHandler+0x338>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006c48:	fb07 4105 	mla	r1, r7, r5, r4
 8006c4c:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8006c50:	2903      	cmp	r1, #3
 8006c52:	d10e      	bne.n	8006c72 <HAL_HCD_IRQHandler+0x42a>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006c54:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8006c56:	4629      	mov	r1, r5
 8006c58:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006c5a:	f043 0302 	orr.w	r3, r3, #2
 8006c5e:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8006c60:	f006 fb19 	bl	800d296 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8006c64:	fb07 4505 	mla	r5, r7, r5, r4
 8006c68:	2303      	movs	r3, #3
 8006c6a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006c6e:	2310      	movs	r3, #16
 8006c70:	e7e5      	b.n	8006c3e <HAL_HCD_IRQHandler+0x3f6>
    else if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8006c72:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8006c76:	d1f5      	bne.n	8006c64 <HAL_HCD_IRQHandler+0x41c>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c78:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c7a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c7e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c82:	50d1      	str	r1, [r2, r3]
 8006c84:	e7ee      	b.n	8006c64 <HAL_HCD_IRQHandler+0x41c>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8006c86:	ea4f 1e45 	mov.w	lr, r5, lsl #5
 8006c8a:	f500 61a0 	add.w	r1, r0, #1280	; 0x500
 8006c8e:	eb0e 0601 	add.w	r6, lr, r1
 8006c92:	68b3      	ldr	r3, [r6, #8]
 8006c94:	075a      	lsls	r2, r3, #29
 8006c96:	d506      	bpl.n	8006ca6 <HAL_HCD_IRQHandler+0x45e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006c98:	2304      	movs	r3, #4
 8006c9a:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8006c9c:	68f3      	ldr	r3, [r6, #12]
 8006c9e:	f043 0302 	orr.w	r3, r3, #2
 8006ca2:	60f3      	str	r3, [r6, #12]
 8006ca4:	e76c      	b.n	8006b80 <HAL_HCD_IRQHandler+0x338>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8006ca6:	68b2      	ldr	r2, [r6, #8]
 8006ca8:	f012 0220 	ands.w	r2, r2, #32
 8006cac:	d01a      	beq.n	8006ce4 <HAL_HCD_IRQHandler+0x49c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006cae:	2320      	movs	r3, #32
 8006cb0:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1)
 8006cb2:	fb07 4305 	mla	r3, r7, r5, r4
 8006cb6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8006cba:	2a01      	cmp	r2, #1
 8006cbc:	f47f af60 	bne.w	8006b80 <HAL_HCD_IRQHandler+0x338>
      hhcd->hc[chnum].state = HC_NYET;     
 8006cc0:	2204      	movs	r2, #4
      USB_HC_Halt(hhcd->Instance, chnum); 
 8006cc2:	4629      	mov	r1, r5
      hhcd->hc[chnum].state = HC_NYET;     
 8006cc4:	9302      	str	r3, [sp, #8]
 8006cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006cca:	68f2      	ldr	r2, [r6, #12]
 8006ccc:	f042 0202 	orr.w	r2, r2, #2
 8006cd0:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8006cd2:	f006 fae0 	bl	800d296 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006cd6:	9b02      	ldr	r3, [sp, #8]
 8006cd8:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8006cdc:	e750      	b.n	8006b80 <HAL_HCD_IRQHandler+0x338>
 8006cde:	bf00      	nop
 8006ce0:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8006ce4:	68b3      	ldr	r3, [r6, #8]
 8006ce6:	065b      	lsls	r3, r3, #25
 8006ce8:	d50e      	bpl.n	8006d08 <HAL_HCD_IRQHandler+0x4c0>
    hhcd->hc[chnum].state = HC_NYET;
 8006cea:	fb07 4305 	mla	r3, r7, r5, r4
 8006cee:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0;    
 8006cf0:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_NYET;
 8006cf2:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);      
 8006cf6:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006cf8:	68f3      	ldr	r3, [r6, #12]
 8006cfa:	f043 0302 	orr.w	r3, r3, #2
 8006cfe:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8006d00:	f006 fac9 	bl	800d296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	e79a      	b.n	8006c3e <HAL_HCD_IRQHandler+0x3f6>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8006d08:	68b2      	ldr	r2, [r6, #8]
 8006d0a:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8006d0e:	d005      	beq.n	8006d1c <HAL_HCD_IRQHandler+0x4d4>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006d10:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8006d12:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006d14:	f043 0302 	orr.w	r3, r3, #2
 8006d18:	60f3      	str	r3, [r6, #12]
 8006d1a:	e6c6      	b.n	8006aaa <HAL_HCD_IRQHandler+0x262>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8006d1c:	68b3      	ldr	r3, [r6, #8]
 8006d1e:	07db      	lsls	r3, r3, #31
 8006d20:	d510      	bpl.n	8006d44 <HAL_HCD_IRQHandler+0x4fc>
      hhcd->hc[chnum].ErrCnt = 0;  
 8006d22:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 8006d26:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0;  
 8006d28:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8006d2a:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0;  
 8006d2c:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8006d2e:	f042 0202 	orr.w	r2, r2, #2
 8006d32:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8006d34:	f006 faaf 	bl	800d296 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8006d38:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006d3a:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006d3e:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 8006d42:	e71d      	b.n	8006b80 <HAL_HCD_IRQHandler+0x338>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8006d44:	68b3      	ldr	r3, [r6, #8]
 8006d46:	071b      	lsls	r3, r3, #28
 8006d48:	d50e      	bpl.n	8006d68 <HAL_HCD_IRQHandler+0x520>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8006d4a:	2308      	movs	r3, #8
    USB_HC_Halt(hhcd->Instance, chnum);   
 8006d4c:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_STALL;    
 8006d4e:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8006d52:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8006d54:	68f3      	ldr	r3, [r6, #12]
 8006d56:	f043 0302 	orr.w	r3, r3, #2
 8006d5a:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8006d5c:	f006 fa9b 	bl	800d296 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8006d60:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006d62:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8006d66:	e70b      	b.n	8006b80 <HAL_HCD_IRQHandler+0x338>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8006d68:	68b3      	ldr	r3, [r6, #8]
 8006d6a:	06da      	lsls	r2, r3, #27
 8006d6c:	d510      	bpl.n	8006d90 <HAL_HCD_IRQHandler+0x548>
    hhcd->hc[chnum].ErrCnt = 0;  
 8006d6e:	fb07 4305 	mla	r3, r7, r5, r4
 8006d72:	2200      	movs	r2, #0
    USB_HC_Halt(hhcd->Instance, chnum);   
 8006d74:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt = 0;  
 8006d76:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006d78:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0;  
 8006d7a:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006d7c:	f042 0202 	orr.w	r2, r2, #2
 8006d80:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8006d82:	f006 fa88 	bl	800d296 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8006d86:	2203      	movs	r2, #3
 8006d88:	9b02      	ldr	r3, [sp, #8]
 8006d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006d8e:	e76e      	b.n	8006c6e <HAL_HCD_IRQHandler+0x426>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8006d90:	68b3      	ldr	r3, [r6, #8]
 8006d92:	061b      	lsls	r3, r3, #24
 8006d94:	d50c      	bpl.n	8006db0 <HAL_HCD_IRQHandler+0x568>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006d96:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8006d98:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 8006d9a:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006d9e:	f043 0302 	orr.w	r3, r3, #2
 8006da2:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8006da4:	f006 fa77 	bl	800d296 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8006da8:	2306      	movs	r3, #6
 8006daa:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8006dae:	e745      	b.n	8006c3c <HAL_HCD_IRQHandler+0x3f4>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8006db0:	68b2      	ldr	r2, [r6, #8]
 8006db2:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8006db6:	d00f      	beq.n	8006dd8 <HAL_HCD_IRQHandler+0x590>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006db8:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8006dba:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006dbc:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8006dc0:	f043 0302 	orr.w	r3, r3, #2
 8006dc4:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8006dc6:	f006 fa66 	bl	800d296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006dca:	2310      	movs	r3, #16
 8006dcc:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8006dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dd2:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	e7c4      	b.n	8006d62 <HAL_HCD_IRQHandler+0x51a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8006dd8:	68b3      	ldr	r3, [r6, #8]
 8006dda:	0798      	lsls	r0, r3, #30
 8006ddc:	f57f aed0 	bpl.w	8006b80 <HAL_HCD_IRQHandler+0x338>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8006de0:	68f3      	ldr	r3, [r6, #12]
 8006de2:	f023 0302 	bic.w	r3, r3, #2
 8006de6:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8006de8:	fb07 4305 	mla	r3, r7, r5, r4
 8006dec:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8006df0:	2801      	cmp	r0, #1
 8006df2:	d10d      	bne.n	8006e10 <HAL_HCD_IRQHandler+0x5c8>
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8006df4:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8006df8:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8006dfc:	2a02      	cmp	r2, #2
 8006dfe:	f47f aee1 	bne.w	8006bc4 <HAL_HCD_IRQHandler+0x37c>
        hhcd->hc[chnum].toggle_out ^= 1; 
 8006e02:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8006e06:	f082 0201 	eor.w	r2, r2, #1
 8006e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006e0e:	e6d9      	b.n	8006bc4 <HAL_HCD_IRQHandler+0x37c>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8006e10:	2803      	cmp	r0, #3
 8006e12:	d102      	bne.n	8006e1a <HAL_HCD_IRQHandler+0x5d2>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006e14:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8006e18:	e6d4      	b.n	8006bc4 <HAL_HCD_IRQHandler+0x37c>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8006e1a:	2804      	cmp	r0, #4
 8006e1c:	d104      	bne.n	8006e28 <HAL_HCD_IRQHandler+0x5e0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006e1e:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0;
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e26:	e6cd      	b.n	8006bc4 <HAL_HCD_IRQHandler+0x37c>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8006e28:	2805      	cmp	r0, #5
 8006e2a:	d102      	bne.n	8006e32 <HAL_HCD_IRQHandler+0x5ea>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006e2c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
 8006e30:	e6c8      	b.n	8006bc4 <HAL_HCD_IRQHandler+0x37c>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006e32:	2806      	cmp	r0, #6
 8006e34:	d002      	beq.n	8006e3c <HAL_HCD_IRQHandler+0x5f4>
 8006e36:	2808      	cmp	r0, #8
 8006e38:	f47f aec4 	bne.w	8006bc4 <HAL_HCD_IRQHandler+0x37c>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8006e3c:	fb07 4305 	mla	r3, r7, r5, r4
 8006e40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e42:	2a03      	cmp	r2, #3
 8006e44:	f102 0001 	add.w	r0, r2, #1
        hhcd->hc[chnum].ErrCnt = 0;
 8006e48:	bf88      	it	hi
 8006e4a:	2200      	movhi	r2, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8006e4c:	6598      	str	r0, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e4e:	bf91      	iteee	ls
 8006e50:	f883 905c 	strbls.w	r9, [r3, #92]	; 0x5c
        hhcd->hc[chnum].ErrCnt = 0;
 8006e54:	659a      	strhi	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006e56:	2204      	movhi	r2, #4
 8006e58:	f883 205c 	strbhi.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e5c:	f85e 3001 	ldr.w	r3, [lr, r1]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;    
 8006e68:	f84e 3001 	str.w	r3, [lr, r1]
 8006e6c:	e6aa      	b.n	8006bc4 <HAL_HCD_IRQHandler+0x37c>
 8006e6e:	bf00      	nop

08006e70 <HAL_HCD_Start>:
{ 
 8006e70:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 8006e72:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
{ 
 8006e76:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d00d      	beq.n	8006e98 <HAL_HCD_Start+0x28>
 8006e7c:	2501      	movs	r5, #1
 8006e7e:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	f006 f976 	bl	800d174 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1);  
 8006e88:	4629      	mov	r1, r5
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	f006 f9d6 	bl	800d23c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8006e90:	2000      	movs	r0, #0
 8006e92:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 8006e98:	2002      	movs	r0, #2
}
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}

08006e9c <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 8006e9c:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8006ea0:	2b01      	cmp	r3, #1
{ 
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8006ea6:	d009      	beq.n	8006ebc <HAL_HCD_Stop+0x20>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8006eae:	6800      	ldr	r0, [r0, #0]
 8006eb0:	f006 faf5 	bl	800d49e <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8006eba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 8006ebc:	2002      	movs	r0, #2
}
 8006ebe:	bd10      	pop	{r4, pc}

08006ec0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_HSEM_IRQHandler>:
{
 8006ec4:	b508      	push	{r3, lr}
  statusreg = HSEM->MISR;
 8006ec6:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <HAL_HSEM_IRQHandler+0x24>)
 8006ec8:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
  HSEM->IER &= ~((uint32_t)statusreg);
 8006ecc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006ed0:	ea22 0200 	bic.w	r2, r2, r0
 8006ed4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  HSEM->ICR |=  ((uint32_t)statusreg); 
 8006ed8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006edc:	4302      	orrs	r2, r0
 8006ede:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  HAL_HSEM_FreeCallback(statusreg);  
 8006ee2:	f7ff ffed 	bl	8006ec0 <HAL_HSEM_FreeCallback>
 8006ee6:	bd08      	pop	{r3, pc}
 8006ee8:	58026400 	.word	0x58026400

08006eec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006eec:	6803      	ldr	r3, [r0, #0]
 8006eee:	699a      	ldr	r2, [r3, #24]
 8006ef0:	0791      	lsls	r1, r2, #30
 8006ef2:	d501      	bpl.n	8006ef8 <I2C_Flush_TXDR+0xc>
  {
     hi2c->Instance->TXDR = 0x00U;
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	07d2      	lsls	r2, r2, #31
 8006efc:	d403      	bmi.n	8006f06 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006efe:	699a      	ldr	r2, [r3, #24]
 8006f00:	f042 0201 	orr.w	r2, r2, #1
 8006f04:	619a      	str	r2, [r3, #24]
 8006f06:	4770      	bx	lr

08006f08 <I2C_Disable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006f08:	f011 0301 	ands.w	r3, r1, #1
 8006f0c:	d007      	beq.n	8006f1e <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8006f0e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006f12:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f16:	2b28      	cmp	r3, #40	; 0x28
 8006f18:	bf0c      	ite	eq
 8006f1a:	2342      	moveq	r3, #66	; 0x42
 8006f1c:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006f1e:	078a      	lsls	r2, r1, #30
 8006f20:	d509      	bpl.n	8006f36 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8006f22:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006f26:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8006f2a:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006f2c:	bf0c      	ite	eq
 8006f2e:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f32:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006f36:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8006f38:	f001 0211 	and.w	r2, r1, #17
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8006f3c:	f001 0112 	and.w	r1, r1, #18
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f40:	bf48      	it	mi
 8006f42:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  if((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8006f46:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006f48:	bf08      	it	eq
 8006f4a:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8006f4e:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f50:	6801      	ldr	r1, [r0, #0]

  return HAL_OK;
}
 8006f52:	f04f 0000 	mov.w	r0, #0
    tmpisr |= I2C_IT_TCI;
 8006f56:	bf08      	it	eq
 8006f58:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f5c:	680a      	ldr	r2, [r1, #0]
 8006f5e:	ea22 0303 	bic.w	r3, r2, r3
 8006f62:	600b      	str	r3, [r1, #0]
}
 8006f64:	4770      	bx	lr
	...

08006f68 <I2C_TransferConfig>:
{
 8006f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6c:	4616      	mov	r6, r2
 8006f6e:	461f      	mov	r7, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006f70:	4a25      	ldr	r2, [pc, #148]	; (8007008 <I2C_TransferConfig+0xa0>)
{
 8006f72:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006f74:	6803      	ldr	r3, [r0, #0]
{
 8006f76:	460c      	mov	r4, r1
 8006f78:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00f      	beq.n	8006f9e <I2C_TransferConfig+0x36>
 8006f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00b      	beq.n	8006f9e <I2C_TransferConfig+0x36>
 8006f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d007      	beq.n	8006f9e <I2C_TransferConfig+0x36>
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	; (800700c <I2C_TransferConfig+0xa4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d004      	beq.n	8006f9e <I2C_TransferConfig+0x36>
 8006f94:	f241 2143 	movw	r1, #4675	; 0x1243
 8006f98:	481d      	ldr	r0, [pc, #116]	; (8007010 <I2C_TransferConfig+0xa8>)
 8006f9a:	f7fb f8ce 	bl	800213a <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8006f9e:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8006fa2:	d007      	beq.n	8006fb4 <I2C_TransferConfig+0x4c>
 8006fa4:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8006fa8:	d004      	beq.n	8006fb4 <I2C_TransferConfig+0x4c>
 8006faa:	f241 2144 	movw	r1, #4676	; 0x1244
 8006fae:	4818      	ldr	r0, [pc, #96]	; (8007010 <I2C_TransferConfig+0xa8>)
 8006fb0:	f7fb f8c3 	bl	800213a <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8006fb4:	4b17      	ldr	r3, [pc, #92]	; (8007014 <I2C_TransferConfig+0xac>)
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	d00b      	beq.n	8006fd2 <I2C_TransferConfig+0x6a>
 8006fba:	f425 6280 	bic.w	r2, r5, #1024	; 0x400
 8006fbe:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d005      	beq.n	8006fd2 <I2C_TransferConfig+0x6a>
 8006fc6:	b125      	cbz	r5, 8006fd2 <I2C_TransferConfig+0x6a>
 8006fc8:	f241 2145 	movw	r1, #4677	; 0x1245
 8006fcc:	4810      	ldr	r0, [pc, #64]	; (8007010 <I2C_TransferConfig+0xa8>)
 8006fce:	f7fb f8b4 	bl	800213a <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006fd2:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8006fd6:	f8d8 1000 	ldr.w	r1, [r8]
 8006fda:	433b      	orrs	r3, r7
 8006fdc:	684a      	ldr	r2, [r1, #4]
 8006fde:	432b      	orrs	r3, r5
 8006fe0:	0d6d      	lsrs	r5, r5, #21
 8006fe2:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8006fe6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006fea:	f045 757f 	orr.w	r5, r5, #66846720	; 0x3fc0000
 8006fee:	f445 3558 	orr.w	r5, r5, #221184	; 0x36000
 8006ff2:	f445 757f 	orr.w	r5, r5, #1020	; 0x3fc
 8006ff6:	f045 0503 	orr.w	r5, r5, #3
 8006ffa:	ea22 0505 	bic.w	r5, r2, r5
 8006ffe:	432b      	orrs	r3, r5
 8007000:	604b      	str	r3, [r1, #4]
 8007002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007006:	bf00      	nop
 8007008:	40005400 	.word	0x40005400
 800700c:	58001c00 	.word	0x58001c00
 8007010:	08013868 	.word	0x08013868
 8007014:	80004000 	.word	0x80004000

08007018 <I2C_WaitOnFlagUntilTimeout>:
{
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	9f06      	ldr	r7, [sp, #24]
 800701e:	4604      	mov	r4, r0
 8007020:	4688      	mov	r8, r1
 8007022:	4616      	mov	r6, r2
 8007024:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007026:	6822      	ldr	r2, [r4, #0]
 8007028:	6993      	ldr	r3, [r2, #24]
 800702a:	ea38 0303 	bics.w	r3, r8, r3
 800702e:	bf0c      	ite	eq
 8007030:	2301      	moveq	r3, #1
 8007032:	2300      	movne	r3, #0
 8007034:	42b3      	cmp	r3, r6
 8007036:	d002      	beq.n	800703e <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007038:	2000      	movs	r0, #0
}
 800703a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800703e:	1c6b      	adds	r3, r5, #1
 8007040:	d0f2      	beq.n	8007028 <I2C_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007042:	b955      	cbnz	r5, 800705a <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State= HAL_I2C_STATE_READY;
 8007044:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8007046:	2003      	movs	r0, #3
        hi2c->State= HAL_I2C_STATE_READY;
 8007048:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800704c:	2300      	movs	r3, #0
 800704e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8007052:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8007056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800705a:	f7fc fc77 	bl	800394c <HAL_GetTick>
 800705e:	1bc0      	subs	r0, r0, r7
 8007060:	4285      	cmp	r5, r0
 8007062:	d2e0      	bcs.n	8007026 <I2C_WaitOnFlagUntilTimeout+0xe>
 8007064:	e7ee      	b.n	8007044 <I2C_WaitOnFlagUntilTimeout+0x2c>

08007066 <I2C_IsAcknowledgeFailed>:
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007066:	6803      	ldr	r3, [r0, #0]
{
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	4604      	mov	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800706c:	6998      	ldr	r0, [r3, #24]
{
 800706e:	460d      	mov	r5, r1
 8007070:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007072:	f010 0010 	ands.w	r0, r0, #16
 8007076:	d112      	bne.n	800709e <I2C_IsAcknowledgeFailed+0x38>
 8007078:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 800707a:	1c69      	adds	r1, r5, #1
 800707c:	d010      	beq.n	80070a0 <I2C_IsAcknowledgeFailed+0x3a>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800707e:	b94d      	cbnz	r5, 8007094 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State= HAL_I2C_STATE_READY;
 8007080:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8007082:	2003      	movs	r0, #3
          hi2c->State= HAL_I2C_STATE_READY;
 8007084:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007088:	2300      	movs	r3, #0
 800708a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800708e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007092:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8007094:	f7fc fc5a 	bl	800394c <HAL_GetTick>
 8007098:	1b80      	subs	r0, r0, r6
 800709a:	4285      	cmp	r5, r0
 800709c:	d3f0      	bcc.n	8007080 <I2C_IsAcknowledgeFailed+0x1a>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	6999      	ldr	r1, [r3, #24]
 80070a2:	068a      	lsls	r2, r1, #26
 80070a4:	d5e9      	bpl.n	800707a <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070a6:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070a8:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80070aa:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ac:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070ae:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80070b0:	f7ff ff1c 	bl	8006eec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80070b4:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 80070b6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80070b8:	6853      	ldr	r3, [r2, #4]
 80070ba:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80070be:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80070c2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80070cc:	2304      	movs	r3, #4
 80070ce:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d0:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 80070d2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80070d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80070de:	bd70      	pop	{r4, r5, r6, pc}

080070e0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	4604      	mov	r4, r0
 80070e4:	460d      	mov	r5, r1
 80070e6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	079b      	lsls	r3, r3, #30
 80070ee:	d501      	bpl.n	80070f4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80070f0:	2000      	movs	r0, #0
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80070f4:	4632      	mov	r2, r6
 80070f6:	4629      	mov	r1, r5
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7ff ffb4 	bl	8007066 <I2C_IsAcknowledgeFailed>
 80070fe:	b9b0      	cbnz	r0, 800712e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 8007100:	1c6a      	adds	r2, r5, #1
 8007102:	d0f1      	beq.n	80070e8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8007104:	b96d      	cbnz	r5, 8007122 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007106:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007108:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800710a:	f043 0320 	orr.w	r3, r3, #32
 800710e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8007110:	2320      	movs	r3, #32
 8007112:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007116:	2300      	movs	r3, #0
 8007118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800711c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007120:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8007122:	f7fc fc13 	bl	800394c <HAL_GetTick>
 8007126:	1b80      	subs	r0, r0, r6
 8007128:	4285      	cmp	r5, r0
 800712a:	d2dd      	bcs.n	80070e8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 800712c:	e7eb      	b.n	8007106 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 800712e:	2001      	movs	r0, #1
}
 8007130:	bd70      	pop	{r4, r5, r6, pc}
	...

08007134 <I2C_RequestMemoryWrite>:
{
 8007134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007136:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007138:	4b18      	ldr	r3, [pc, #96]	; (800719c <I2C_RequestMemoryWrite+0x68>)
{
 800713a:	4604      	mov	r4, r0
 800713c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800713e:	9300      	str	r3, [sp, #0]
{
 8007140:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007146:	b2fa      	uxtb	r2, r7
 8007148:	f7ff ff0e 	bl	8006f68 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800714c:	4632      	mov	r2, r6
 800714e:	9908      	ldr	r1, [sp, #32]
 8007150:	4620      	mov	r0, r4
 8007152:	f7ff ffc5 	bl	80070e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007156:	b128      	cbz	r0, 8007164 <I2C_RequestMemoryWrite+0x30>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007158:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800715a:	2b04      	cmp	r3, #4
 800715c:	d110      	bne.n	8007180 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 800715e:	2001      	movs	r0, #1
}
 8007160:	b003      	add	sp, #12
 8007162:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007164:	2f01      	cmp	r7, #1
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	d10c      	bne.n	8007184 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800716a:	b2ed      	uxtb	r5, r5
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800716c:	2200      	movs	r2, #0
 800716e:	2180      	movs	r1, #128	; 0x80
 8007170:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007172:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007174:	9b08      	ldr	r3, [sp, #32]
 8007176:	9600      	str	r6, [sp, #0]
 8007178:	f7ff ff4e 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 800717c:	2800      	cmp	r0, #0
 800717e:	d0ef      	beq.n	8007160 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8007180:	2003      	movs	r0, #3
 8007182:	e7ed      	b.n	8007160 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007184:	0a2a      	lsrs	r2, r5, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007186:	9908      	ldr	r1, [sp, #32]
 8007188:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800718a:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800718c:	4632      	mov	r2, r6
 800718e:	f7ff ffa7 	bl	80070e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007192:	2800      	cmp	r0, #0
 8007194:	d1e0      	bne.n	8007158 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	e7e7      	b.n	800716a <I2C_RequestMemoryWrite+0x36>
 800719a:	bf00      	nop
 800719c:	80002000 	.word	0x80002000

080071a0 <I2C_RequestMemoryRead>:
{
 80071a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071a2:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80071a4:	4b17      	ldr	r3, [pc, #92]	; (8007204 <I2C_RequestMemoryRead+0x64>)
{
 80071a6:	4604      	mov	r4, r0
 80071a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80071aa:	9300      	str	r3, [sp, #0]
{
 80071ac:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80071ae:	2300      	movs	r3, #0
 80071b0:	b2fa      	uxtb	r2, r7
 80071b2:	f7ff fed9 	bl	8006f68 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071b6:	4632      	mov	r2, r6
 80071b8:	9908      	ldr	r1, [sp, #32]
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7ff ff90 	bl	80070e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80071c0:	b128      	cbz	r0, 80071ce <I2C_RequestMemoryRead+0x2e>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d110      	bne.n	80071ea <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 80071c8:	2001      	movs	r0, #1
}
 80071ca:	b003      	add	sp, #12
 80071cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ce:	2f01      	cmp	r7, #1
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	d10c      	bne.n	80071ee <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071d4:	b2ed      	uxtb	r5, r5
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80071d6:	2200      	movs	r2, #0
 80071d8:	2140      	movs	r1, #64	; 0x40
 80071da:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071dc:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80071de:	9b08      	ldr	r3, [sp, #32]
 80071e0:	9600      	str	r6, [sp, #0]
 80071e2:	f7ff ff19 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d0ef      	beq.n	80071ca <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 80071ea:	2003      	movs	r0, #3
 80071ec:	e7ed      	b.n	80071ca <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071ee:	0a2a      	lsrs	r2, r5, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f0:	9908      	ldr	r1, [sp, #32]
 80071f2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071f4:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f6:	4632      	mov	r2, r6
 80071f8:	f7ff ff72 	bl	80070e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d1e0      	bne.n	80071c2 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	e7e7      	b.n	80071d4 <I2C_RequestMemoryRead+0x34>
 8007204:	80002000 	.word	0x80002000

08007208 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	4604      	mov	r4, r0
 800720c:	460d      	mov	r5, r1
 800720e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	069b      	lsls	r3, r3, #26
 8007216:	d501      	bpl.n	800721c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8007218:	2000      	movs	r0, #0
 800721a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800721c:	4632      	mov	r2, r6
 800721e:	4629      	mov	r1, r5
 8007220:	4620      	mov	r0, r4
 8007222:	f7ff ff20 	bl	8007066 <I2C_IsAcknowledgeFailed>
 8007226:	b9a0      	cbnz	r0, 8007252 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8007228:	b96d      	cbnz	r5, 8007246 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800722a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800722c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800722e:	f043 0320 	orr.w	r3, r3, #32
 8007232:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8007234:	2320      	movs	r3, #32
 8007236:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800723a:	2300      	movs	r3, #0
 800723c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007240:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007244:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8007246:	f7fc fb81 	bl	800394c <HAL_GetTick>
 800724a:	1b80      	subs	r0, r0, r6
 800724c:	4285      	cmp	r5, r0
 800724e:	d2df      	bcs.n	8007210 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8007250:	e7eb      	b.n	800722a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8007252:	2001      	movs	r0, #1
}
 8007254:	bd70      	pop	{r4, r5, r6, pc}
	...

08007258 <HAL_I2C_Init>:
{
 8007258:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800725a:	4604      	mov	r4, r0
 800725c:	2800      	cmp	r0, #0
 800725e:	f000 809d 	beq.w	800739c <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007262:	6803      	ldr	r3, [r0, #0]
 8007264:	4a4e      	ldr	r2, [pc, #312]	; (80073a0 <HAL_I2C_Init+0x148>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00f      	beq.n	800728a <HAL_I2C_Init+0x32>
 800726a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800726e:	4293      	cmp	r3, r2
 8007270:	d00b      	beq.n	800728a <HAL_I2C_Init+0x32>
 8007272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <HAL_I2C_Init+0x32>
 800727a:	4a4a      	ldr	r2, [pc, #296]	; (80073a4 <HAL_I2C_Init+0x14c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d004      	beq.n	800728a <HAL_I2C_Init+0x32>
 8007280:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8007284:	4848      	ldr	r0, [pc, #288]	; (80073a8 <HAL_I2C_Init+0x150>)
 8007286:	f7fa ff58 	bl	800213a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800728a:	68a3      	ldr	r3, [r4, #8]
 800728c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007290:	d304      	bcc.n	800729c <HAL_I2C_Init+0x44>
 8007292:	f240 119f 	movw	r1, #415	; 0x19f
 8007296:	4844      	ldr	r0, [pc, #272]	; (80073a8 <HAL_I2C_Init+0x150>)
 8007298:	f7fa ff4f 	bl	800213a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800729c:	68e3      	ldr	r3, [r4, #12]
 800729e:	3b01      	subs	r3, #1
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d904      	bls.n	80072ae <HAL_I2C_Init+0x56>
 80072a4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80072a8:	483f      	ldr	r0, [pc, #252]	; (80073a8 <HAL_I2C_Init+0x150>)
 80072aa:	f7fa ff46 	bl	800213a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80072b4:	d004      	beq.n	80072c0 <HAL_I2C_Init+0x68>
 80072b6:	f240 11a1 	movw	r1, #417	; 0x1a1
 80072ba:	483b      	ldr	r0, [pc, #236]	; (80073a8 <HAL_I2C_Init+0x150>)
 80072bc:	f7fa ff3d 	bl	800213a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80072c0:	6963      	ldr	r3, [r4, #20]
 80072c2:	2bff      	cmp	r3, #255	; 0xff
 80072c4:	d904      	bls.n	80072d0 <HAL_I2C_Init+0x78>
 80072c6:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80072ca:	4837      	ldr	r0, [pc, #220]	; (80073a8 <HAL_I2C_Init+0x150>)
 80072cc:	f7fa ff35 	bl	800213a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80072d0:	69a3      	ldr	r3, [r4, #24]
 80072d2:	2b07      	cmp	r3, #7
 80072d4:	d904      	bls.n	80072e0 <HAL_I2C_Init+0x88>
 80072d6:	f240 11a3 	movw	r1, #419	; 0x1a3
 80072da:	4833      	ldr	r0, [pc, #204]	; (80073a8 <HAL_I2C_Init+0x150>)
 80072dc:	f7fa ff2d 	bl	800213a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80072e0:	69e3      	ldr	r3, [r4, #28]
 80072e2:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 80072e6:	d004      	beq.n	80072f2 <HAL_I2C_Init+0x9a>
 80072e8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80072ec:	482e      	ldr	r0, [pc, #184]	; (80073a8 <HAL_I2C_Init+0x150>)
 80072ee:	f7fa ff24 	bl	800213a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80072f2:	6a23      	ldr	r3, [r4, #32]
 80072f4:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 80072f8:	d004      	beq.n	8007304 <HAL_I2C_Init+0xac>
 80072fa:	f240 11a5 	movw	r1, #421	; 0x1a5
 80072fe:	482a      	ldr	r0, [pc, #168]	; (80073a8 <HAL_I2C_Init+0x150>)
 8007300:	f7fa ff1b 	bl	800213a <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8007304:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007308:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800730c:	b923      	cbnz	r3, 8007318 <HAL_I2C_Init+0xc0>
    hi2c->Lock = HAL_UNLOCKED;
 800730e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8007312:	4620      	mov	r0, r4
 8007314:	f7fa facc 	bl	80018b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007318:	2324      	movs	r3, #36	; 0x24
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800731a:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800731c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007320:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	f022 0201 	bic.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800732c:	6862      	ldr	r2, [r4, #4]
 800732e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007332:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800733a:	609a      	str	r2, [r3, #8]
 800733c:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800733e:	d124      	bne.n	800738a <HAL_I2C_Init+0x132>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007340:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007344:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007346:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007348:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800734a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800734c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007354:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800735c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800735e:	6922      	ldr	r2, [r4, #16]
 8007360:	430a      	orrs	r2, r1
 8007362:	69a1      	ldr	r1, [r4, #24]
 8007364:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007368:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800736a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800736c:	69e2      	ldr	r2, [r4, #28]
 800736e:	430a      	orrs	r2, r1
 8007370:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800737a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800737c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800737e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007382:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007384:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8007388:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800738a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800738e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007390:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007392:	d1d8      	bne.n	8007346 <HAL_I2C_Init+0xee>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	e7d4      	b.n	8007346 <HAL_I2C_Init+0xee>
    return HAL_ERROR;
 800739c:	2001      	movs	r0, #1
}
 800739e:	bd10      	pop	{r4, pc}
 80073a0:	40005400 	.word	0x40005400
 80073a4:	58001c00 	.word	0x58001c00
 80073a8:	08013868 	.word	0x08013868

080073ac <HAL_I2C_Master_Transmit>:
{
 80073ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	4698      	mov	r8, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 80073b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80073b6:	4604      	mov	r4, r0
 80073b8:	460e      	mov	r6, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 80073ba:	2b20      	cmp	r3, #32
{
 80073bc:	4691      	mov	r9, r2
  if(hi2c->State == HAL_I2C_STATE_READY)
 80073be:	f040 8089 	bne.w	80074d4 <HAL_I2C_Master_Transmit+0x128>
    __HAL_LOCK(hi2c);
 80073c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	f000 8084 	beq.w	80074d4 <HAL_I2C_Master_Transmit+0x128>
 80073cc:	2701      	movs	r7, #1
 80073ce:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80073d2:	f7fc fabb 	bl	800394c <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073d6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80073d8:	4605      	mov	r5, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073da:	9000      	str	r0, [sp, #0]
 80073dc:	463a      	mov	r2, r7
 80073de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073e2:	4620      	mov	r0, r4
 80073e4:	f7ff fe18 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d148      	bne.n	800747e <HAL_I2C_Master_Transmit+0xd2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073ec:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 80073ee:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80073f2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80073f8:	2310      	movs	r3, #16
 80073fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073fe:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8007400:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007404:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007406:	b29b      	uxth	r3, r3
 8007408:	2bff      	cmp	r3, #255	; 0xff
 800740a:	4b33      	ldr	r3, [pc, #204]	; (80074d8 <HAL_I2C_Master_Transmit+0x12c>)
 800740c:	d925      	bls.n	800745a <HAL_I2C_Master_Transmit+0xae>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800740e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007410:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007412:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007418:	4631      	mov	r1, r6
 800741a:	4620      	mov	r0, r4
 800741c:	f7ff fda4 	bl	8006f68 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8007420:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007422:	462a      	mov	r2, r5
 8007424:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007426:	4620      	mov	r0, r4
    while(hi2c->XferCount > 0U)
 8007428:	b29b      	uxth	r3, r3
 800742a:	b9f3      	cbnz	r3, 800746a <HAL_I2C_Master_Transmit+0xbe>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742c:	f7ff feec 	bl	8007208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007430:	b9f0      	cbnz	r0, 8007470 <HAL_I2C_Master_Transmit+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	2120      	movs	r1, #32
 8007436:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800743e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007442:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007446:	f022 0201 	bic.w	r2, r2, #1
 800744a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800744c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007450:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007454:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007458:	e00e      	b.n	8007478 <HAL_I2C_Master_Transmit+0xcc>
      hi2c->XferSize = hi2c->XferCount;
 800745a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800745c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800745e:	b292      	uxth	r2, r2
 8007460:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	e7d6      	b.n	8007418 <HAL_I2C_Master_Transmit+0x6c>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800746a:	f7ff fe39 	bl	80070e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800746e:	b140      	cbz	r0, 8007482 <HAL_I2C_Master_Transmit+0xd6>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007470:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007472:	2b04      	cmp	r3, #4
 8007474:	d103      	bne.n	800747e <HAL_I2C_Master_Transmit+0xd2>
          return HAL_ERROR;
 8007476:	2001      	movs	r0, #1
}
 8007478:	b003      	add	sp, #12
 800747a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 800747e:	2003      	movs	r0, #3
 8007480:	e7fa      	b.n	8007478 <HAL_I2C_Master_Transmit+0xcc>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8007482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007484:	6822      	ldr	r2, [r4, #0]
 8007486:	1c59      	adds	r1, r3, #1
 8007488:	6261      	str	r1, [r4, #36]	; 0x24
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 800748e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007490:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007492:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007494:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007496:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007498:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800749a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800749c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 800749e:	2a00      	cmp	r2, #0
 80074a0:	d1be      	bne.n	8007420 <HAL_I2C_Master_Transmit+0x74>
 80074a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0ba      	beq.n	8007420 <HAL_I2C_Master_Transmit+0x74>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074aa:	9500      	str	r5, [sp, #0]
 80074ac:	2180      	movs	r1, #128	; 0x80
 80074ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b0:	4620      	mov	r0, r4
 80074b2:	f7ff fdb1 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d1e1      	bne.n	800747e <HAL_I2C_Master_Transmit+0xd2>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80074ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2bff      	cmp	r3, #255	; 0xff
 80074c0:	d903      	bls.n	80074ca <HAL_I2C_Master_Transmit+0x11e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074c2:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074c4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074c6:	8522      	strh	r2, [r4, #40]	; 0x28
 80074c8:	e7a4      	b.n	8007414 <HAL_I2C_Master_Transmit+0x68>
          hi2c->XferSize = hi2c->XferCount;
 80074ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074cc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80074ce:	b292      	uxth	r2, r2
 80074d0:	8522      	strh	r2, [r4, #40]	; 0x28
 80074d2:	e7c6      	b.n	8007462 <HAL_I2C_Master_Transmit+0xb6>
    return HAL_BUSY;
 80074d4:	2002      	movs	r0, #2
 80074d6:	e7cf      	b.n	8007478 <HAL_I2C_Master_Transmit+0xcc>
 80074d8:	80002000 	.word	0x80002000

080074dc <HAL_I2C_Mem_Write>:
{
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	469a      	mov	sl, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80074e2:	3b01      	subs	r3, #1
{
 80074e4:	b085      	sub	sp, #20
 80074e6:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80074e8:	2b01      	cmp	r3, #1
{
 80074ea:	460f      	mov	r7, r1
 80074ec:	9203      	str	r2, [sp, #12]
 80074ee:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 80074f2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80074f6:	d904      	bls.n	8007502 <HAL_I2C_Mem_Write+0x26>
 80074f8:	f240 61c2 	movw	r1, #1730	; 0x6c2
 80074fc:	4857      	ldr	r0, [pc, #348]	; (800765c <HAL_I2C_Mem_Write+0x180>)
 80074fe:	f7fa fe1c 	bl	800213a <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8007502:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007506:	2b20      	cmp	r3, #32
 8007508:	f040 80a6 	bne.w	8007658 <HAL_I2C_Mem_Write+0x17c>
    if((pData == NULL) || (Size == 0U))
 800750c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800750e:	b91b      	cbnz	r3, 8007518 <HAL_I2C_Mem_Write+0x3c>
      return  HAL_ERROR;
 8007510:	2001      	movs	r0, #1
}
 8007512:	b005      	add	sp, #20
 8007514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((pData == NULL) || (Size == 0U))
 8007518:	f1bb 0f00 	cmp.w	fp, #0
 800751c:	d0f8      	beq.n	8007510 <HAL_I2C_Mem_Write+0x34>
    __HAL_LOCK(hi2c);
 800751e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007522:	2b01      	cmp	r3, #1
 8007524:	f000 8098 	beq.w	8007658 <HAL_I2C_Mem_Write+0x17c>
 8007528:	2501      	movs	r5, #1
 800752a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800752e:	f7fc fa0d 	bl	800394c <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007532:	2319      	movs	r3, #25
 8007534:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007536:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007538:	462a      	mov	r2, r5
 800753a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800753e:	4620      	mov	r0, r4
 8007540:	f7ff fd6a 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 8007544:	4680      	mov	r8, r0
 8007546:	b9d0      	cbnz	r0, 800757e <HAL_I2C_Mem_Write+0xa2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007548:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 800754a:	6360      	str	r0, [r4, #52]	; 0x34
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800754c:	9601      	str	r6, [sp, #4]
 800754e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007550:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007554:	2340      	movs	r3, #64	; 0x40
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007556:	f8cd 9000 	str.w	r9, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800755a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800755e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007560:	6460      	str	r0, [r4, #68]	; 0x44
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007562:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007564:	6263      	str	r3, [r4, #36]	; 0x24
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007566:	4653      	mov	r3, sl
    hi2c->XferCount = Size;
 8007568:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800756c:	9a03      	ldr	r2, [sp, #12]
 800756e:	f7ff fde1 	bl	8007134 <I2C_RequestMemoryWrite>
 8007572:	b130      	cbz	r0, 8007582 <HAL_I2C_Mem_Write+0xa6>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007574:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007576:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800757a:	2b04      	cmp	r3, #4
 800757c:	d0c8      	beq.n	8007510 <HAL_I2C_Mem_Write+0x34>
          return HAL_TIMEOUT;
 800757e:	2003      	movs	r0, #3
 8007580:	e7c7      	b.n	8007512 <HAL_I2C_Mem_Write+0x36>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007582:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	2bff      	cmp	r3, #255	; 0xff
 8007588:	d910      	bls.n	80075ac <HAL_I2C_Mem_Write+0xd0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800758a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800758c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007590:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007592:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007594:	4639      	mov	r1, r7
 8007596:	4620      	mov	r0, r4
 8007598:	f7ff fce6 	bl	8006f68 <I2C_TransferConfig>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800759c:	4632      	mov	r2, r6
 800759e:	4649      	mov	r1, r9
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff fd9d 	bl	80070e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80075a6:	b148      	cbz	r0, 80075bc <HAL_I2C_Mem_Write+0xe0>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80075aa:	e7e6      	b.n	800757a <HAL_I2C_Mem_Write+0x9e>
      hi2c->XferSize = hi2c->XferCount;
 80075ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075b2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80075b4:	b292      	uxth	r2, r2
 80075b6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	e7eb      	b.n	8007594 <HAL_I2C_Mem_Write+0xb8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80075bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	1c59      	adds	r1, r3, #1
 80075c2:	6261      	str	r1, [r4, #36]	; 0x24
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 80075c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80075ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80075cc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80075ce:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80075d0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80075d2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80075d4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80075d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80075d8:	b9ba      	cbnz	r2, 800760a <HAL_I2C_Mem_Write+0x12e>
 80075da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	b1a3      	cbz	r3, 800760a <HAL_I2C_Mem_Write+0x12e>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075e0:	9600      	str	r6, [sp, #0]
 80075e2:	464b      	mov	r3, r9
 80075e4:	2180      	movs	r1, #128	; 0x80
 80075e6:	4620      	mov	r0, r4
 80075e8:	f7ff fd16 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d1c6      	bne.n	800757e <HAL_I2C_Mem_Write+0xa2>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80075f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	2bff      	cmp	r3, #255	; 0xff
 80075f6:	d927      	bls.n	8007648 <HAL_I2C_Mem_Write+0x16c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075f8:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075fe:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007600:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007602:	4639      	mov	r1, r7
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff fcaf 	bl	8006f68 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 800760a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1c4      	bne.n	800759c <HAL_I2C_Mem_Write+0xc0>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007612:	4632      	mov	r2, r6
 8007614:	4649      	mov	r1, r9
 8007616:	4620      	mov	r0, r4
 8007618:	f7ff fdf6 	bl	8007208 <I2C_WaitOnSTOPFlagUntilTimeout>
 800761c:	2800      	cmp	r0, #0
 800761e:	d1c3      	bne.n	80075a8 <HAL_I2C_Mem_Write+0xcc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	2120      	movs	r1, #32
 8007624:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800762c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007630:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007634:	f022 0201 	bic.w	r2, r2, #1
 8007638:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800763a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800763e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007642:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007646:	e764      	b.n	8007512 <HAL_I2C_Mem_Write+0x36>
          hi2c->XferSize = hi2c->XferCount;
 8007648:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800764a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800764e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007650:	b292      	uxth	r2, r2
 8007652:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	e7d4      	b.n	8007602 <HAL_I2C_Mem_Write+0x126>
    return HAL_BUSY;
 8007658:	2002      	movs	r0, #2
 800765a:	e75a      	b.n	8007512 <HAL_I2C_Mem_Write+0x36>
 800765c:	08013868 	.word	0x08013868

08007660 <HAL_I2C_Mem_Read>:
{
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	469a      	mov	sl, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007666:	3b01      	subs	r3, #1
{
 8007668:	b085      	sub	sp, #20
 800766a:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800766c:	2b01      	cmp	r3, #1
{
 800766e:	460f      	mov	r7, r1
 8007670:	9203      	str	r2, [sp, #12]
 8007672:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8007676:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800767a:	d904      	bls.n	8007686 <HAL_I2C_Mem_Read+0x26>
 800767c:	f240 7159 	movw	r1, #1881	; 0x759
 8007680:	4859      	ldr	r0, [pc, #356]	; (80077e8 <HAL_I2C_Mem_Read+0x188>)
 8007682:	f7fa fd5a 	bl	800213a <assert_failed>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8007686:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800768a:	2b20      	cmp	r3, #32
 800768c:	f040 80a9 	bne.w	80077e2 <HAL_I2C_Mem_Read+0x182>
    if((pData == NULL) || (Size == 0U))
 8007690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007692:	b91b      	cbnz	r3, 800769c <HAL_I2C_Mem_Read+0x3c>
      return  HAL_ERROR;
 8007694:	2001      	movs	r0, #1
}
 8007696:	b005      	add	sp, #20
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((pData == NULL) || (Size == 0U))
 800769c:	f1bb 0f00 	cmp.w	fp, #0
 80076a0:	d0f8      	beq.n	8007694 <HAL_I2C_Mem_Read+0x34>
    __HAL_LOCK(hi2c);
 80076a2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	f000 809b 	beq.w	80077e2 <HAL_I2C_Mem_Read+0x182>
 80076ac:	2501      	movs	r5, #1
 80076ae:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 80076b2:	f7fc f94b 	bl	800394c <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076b6:	2319      	movs	r3, #25
 80076b8:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80076ba:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076bc:	462a      	mov	r2, r5
 80076be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076c2:	4620      	mov	r0, r4
 80076c4:	f7ff fca8 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 80076c8:	4680      	mov	r8, r0
 80076ca:	b9d0      	cbnz	r0, 8007702 <HAL_I2C_Mem_Read+0xa2>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076cc:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80076ce:	6360      	str	r0, [r4, #52]	; 0x34
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076d0:	9601      	str	r6, [sp, #4]
 80076d2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076d8:	2340      	movs	r3, #64	; 0x40
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076da:	f8cd 9000 	str.w	r9, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80076e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e4:	6460      	str	r0, [r4, #68]	; 0x44
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076e6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80076e8:	6263      	str	r3, [r4, #36]	; 0x24
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076ea:	4653      	mov	r3, sl
    hi2c->XferCount = Size;
 80076ec:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076f0:	9a03      	ldr	r2, [sp, #12]
 80076f2:	f7ff fd55 	bl	80071a0 <I2C_RequestMemoryRead>
 80076f6:	b130      	cbz	r0, 8007706 <HAL_I2C_Mem_Read+0xa6>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80076fa:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d0c8      	beq.n	8007694 <HAL_I2C_Mem_Read+0x34>
        return HAL_TIMEOUT;
 8007702:	2003      	movs	r0, #3
 8007704:	e7c7      	b.n	8007696 <HAL_I2C_Mem_Read+0x36>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007706:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	2bff      	cmp	r3, #255	; 0xff
 800770c:	4b37      	ldr	r3, [pc, #220]	; (80077ec <HAL_I2C_Mem_Read+0x18c>)
 800770e:	d944      	bls.n	800779a <HAL_I2C_Mem_Read+0x13a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007710:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007718:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800771a:	4639      	mov	r1, r7
 800771c:	4620      	mov	r0, r4
 800771e:	f7ff fc23 	bl	8006f68 <I2C_TransferConfig>
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007722:	9600      	str	r6, [sp, #0]
 8007724:	464b      	mov	r3, r9
 8007726:	2200      	movs	r2, #0
 8007728:	2104      	movs	r1, #4
 800772a:	4620      	mov	r0, r4
 800772c:	f7ff fc74 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 8007730:	2800      	cmp	r0, #0
 8007732:	d1e6      	bne.n	8007702 <HAL_I2C_Mem_Read+0xa2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8007734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	6262      	str	r2, [r4, #36]	; 0x24
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800773e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8007740:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007742:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007744:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007746:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007748:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800774a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800774c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800774e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8007750:	b9ba      	cbnz	r2, 8007782 <HAL_I2C_Mem_Read+0x122>
 8007752:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007754:	b29b      	uxth	r3, r3
 8007756:	b1a3      	cbz	r3, 8007782 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007758:	9600      	str	r6, [sp, #0]
 800775a:	464b      	mov	r3, r9
 800775c:	2180      	movs	r1, #128	; 0x80
 800775e:	4620      	mov	r0, r4
 8007760:	f7ff fc5a 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 8007764:	2800      	cmp	r0, #0
 8007766:	d1cc      	bne.n	8007702 <HAL_I2C_Mem_Read+0xa2>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007768:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800776a:	b29b      	uxth	r3, r3
 800776c:	2bff      	cmp	r3, #255	; 0xff
 800776e:	d91c      	bls.n	80077aa <HAL_I2C_Mem_Read+0x14a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007770:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007772:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007776:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007778:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800777a:	4639      	mov	r1, r7
 800777c:	4620      	mov	r0, r4
 800777e:	f7ff fbf3 	bl	8006f68 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8007782:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1cb      	bne.n	8007722 <HAL_I2C_Mem_Read+0xc2>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800778a:	4632      	mov	r2, r6
 800778c:	4649      	mov	r1, r9
 800778e:	4620      	mov	r0, r4
 8007790:	f7ff fd3a 	bl	8007208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007794:	b188      	cbz	r0, 80077ba <HAL_I2C_Mem_Read+0x15a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007796:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007798:	e7b1      	b.n	80076fe <HAL_I2C_Mem_Read+0x9e>
      hi2c->XferSize = hi2c->XferCount;
 800779a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80077a2:	b292      	uxth	r2, r2
 80077a4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	e7b7      	b.n	800771a <HAL_I2C_Mem_Read+0xba>
          hi2c->XferSize = hi2c->XferCount;
 80077aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80077ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077b0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80077b2:	b292      	uxth	r2, r2
 80077b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	e7df      	b.n	800777a <HAL_I2C_Mem_Read+0x11a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	2120      	movs	r1, #32
 80077be:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80077c6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80077ca:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80077d4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80077d8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077dc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80077e0:	e759      	b.n	8007696 <HAL_I2C_Mem_Read+0x36>
    return HAL_BUSY;
 80077e2:	2002      	movs	r0, #2
 80077e4:	e757      	b.n	8007696 <HAL_I2C_Mem_Read+0x36>
 80077e6:	bf00      	nop
 80077e8:	08013868 	.word	0x08013868
 80077ec:	80002400 	.word	0x80002400

080077f0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80077f0:	6802      	ldr	r2, [r0, #0]
  if(hi2c->XferISR != NULL)
 80077f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80077f4:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80077f6:	6812      	ldr	r2, [r2, #0]
  if(hi2c->XferISR != NULL)
 80077f8:	b103      	cbz	r3, 80077fc <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80077fa:	4718      	bx	r3
 80077fc:	4770      	bx	lr

080077fe <HAL_I2C_SlaveTxCpltCallback>:
 80077fe:	4770      	bx	lr

08007800 <HAL_I2C_SlaveRxCpltCallback>:
 8007800:	4770      	bx	lr

08007802 <I2C_ITSlaveSequentialCplt>:
{
 8007802:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007804:	2500      	movs	r5, #0
{
 8007806:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007808:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800780c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007810:	2b29      	cmp	r3, #41	; 0x29
 8007812:	d10d      	bne.n	8007830 <I2C_ITSlaveSequentialCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007814:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007816:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007818:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800781c:	2321      	movs	r3, #33	; 0x21
 800781e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007820:	f7ff fb72 	bl	8006f08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007824:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007828:	4620      	mov	r0, r4
 800782a:	f7ff ffe8 	bl	80077fe <HAL_I2C_SlaveTxCpltCallback>
 800782e:	bd38      	pop	{r3, r4, r5, pc}
  else if(hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007830:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007834:	2b2a      	cmp	r3, #42	; 0x2a
 8007836:	d10c      	bne.n	8007852 <I2C_ITSlaveSequentialCplt+0x50>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007838:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800783a:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800783c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007840:	2322      	movs	r3, #34	; 0x22
 8007842:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007844:	f7ff fb60 	bl	8006f08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007848:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800784c:	4620      	mov	r0, r4
 800784e:	f7ff ffd7 	bl	8007800 <HAL_I2C_SlaveRxCpltCallback>
 8007852:	bd38      	pop	{r3, r4, r5, pc}

08007854 <HAL_I2C_AddrCallback>:
{
 8007854:	4770      	bx	lr

08007856 <HAL_I2C_ListenCpltCallback>:
 8007856:	4770      	bx	lr

08007858 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007858:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <I2C_ITListenCplt+0x5c>)
  hi2c->State = HAL_I2C_STATE_READY;
 800785a:	2220      	movs	r2, #32
{
 800785c:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800785e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007860:	2300      	movs	r3, #0
{
 8007862:	4604      	mov	r4, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8007864:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8007866:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8007868:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800786c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if(((ITFlags & I2C_FLAG_RXNE) != RESET))
 8007870:	074b      	lsls	r3, r1, #29
 8007872:	d511      	bpl.n	8007898 <I2C_ITListenCplt+0x40>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8007874:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	6242      	str	r2, [r0, #36]	; 0x24
 800787a:	6802      	ldr	r2, [r0, #0]
 800787c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800787e:	701a      	strb	r2, [r3, #0]
    if((hi2c->XferSize > 0U))
 8007880:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8007882:	b14b      	cbz	r3, 8007898 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8007884:	3b01      	subs	r3, #1
 8007886:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8007888:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800788a:	3b01      	subs	r3, #1
 800788c:	b29b      	uxth	r3, r3
 800788e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007890:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007892:	f043 0304 	orr.w	r3, r3, #4
 8007896:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007898:	2107      	movs	r1, #7
 800789a:	4620      	mov	r0, r4
 800789c:	f7ff fb34 	bl	8006f08 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	2210      	movs	r2, #16
  HAL_I2C_ListenCpltCallback(hi2c);
 80078a4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078a6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80078a8:	2300      	movs	r3, #0
 80078aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80078ae:	f7ff ffd2 	bl	8007856 <HAL_I2C_ListenCpltCallback>
 80078b2:	bd10      	pop	{r4, pc}
 80078b4:	ffff0000 	.word	0xffff0000

080078b8 <HAL_I2C_ErrorCallback>:
 80078b8:	4770      	bx	lr

080078ba <HAL_I2C_AbortCpltCallback>:
{
 80078ba:	4770      	bx	lr

080078bc <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078bc:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80078be:	4a34      	ldr	r2, [pc, #208]	; (8007990 <I2C_ITError+0xd4>)
{
 80078c0:	b510      	push	{r4, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078c2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
{
 80078c6:	4604      	mov	r4, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80078c8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80078ca:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80078cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80078ce:	4319      	orrs	r1, r3
 80078d0:	6441      	str	r1, [r0, #68]	; 0x44
  if((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80078d2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80078d6:	2b28      	cmp	r3, #40	; 0x28
 80078d8:	d007      	beq.n	80078ea <I2C_ITError+0x2e>
     (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80078da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80078de:	2b29      	cmp	r3, #41	; 0x29
 80078e0:	d003      	beq.n	80078ea <I2C_ITError+0x2e>
     (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
     (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80078e6:	2b2a      	cmp	r3, #42	; 0x2a
 80078e8:	d121      	bne.n	800792e <I2C_ITError+0x72>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80078ea:	2103      	movs	r1, #3
 80078ec:	4620      	mov	r0, r4
 80078ee:	f7ff fb0b 	bl	8006f08 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80078f2:	2328      	movs	r3, #40	; 0x28
 80078f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80078fc:	4b25      	ldr	r3, [pc, #148]	; (8007994 <I2C_ITError+0xd8>)
    hi2c->XferISR       = NULL;
 80078fe:	6363      	str	r3, [r4, #52]	; 0x34
  if((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007904:	681a      	ldr	r2, [r3, #0]
  if((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007906:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 800790a:	d01d      	beq.n	8007948 <I2C_ITError+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800790c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007910:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007912:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007914:	4b20      	ldr	r3, [pc, #128]	; (8007998 <I2C_ITError+0xdc>)
 8007916:	6503      	str	r3, [r0, #80]	; 0x50
    __HAL_UNLOCK(hi2c);
 8007918:	2300      	movs	r3, #0
 800791a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800791e:	f7fc fd71 	bl	8004404 <HAL_DMA_Abort_IT>
 8007922:	b3a0      	cbz	r0, 800798e <I2C_ITError+0xd2>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007924:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007926:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8007928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800792c:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800792e:	2107      	movs	r1, #7
 8007930:	f7ff faea 	bl	8006f08 <I2C_Disable_IRQ>
    if(hi2c->State != HAL_I2C_STATE_ABORT)
 8007934:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007938:	2b60      	cmp	r3, #96	; 0x60
 800793a:	d002      	beq.n	8007942 <I2C_ITError+0x86>
      hi2c->State         = HAL_I2C_STATE_READY;
 800793c:	2320      	movs	r3, #32
 800793e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007942:	2300      	movs	r3, #0
 8007944:	6323      	str	r3, [r4, #48]	; 0x30
 8007946:	e7da      	b.n	80078fe <I2C_ITError+0x42>
  else if((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007948:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 800794c:	d00d      	beq.n	800796a <I2C_ITError+0xae>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800794e:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007950:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007956:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007958:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <I2C_ITError+0xdc>)
 800795a:	6503      	str	r3, [r0, #80]	; 0x50
    __HAL_UNLOCK(hi2c);
 800795c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007960:	f7fc fd50 	bl	8004404 <HAL_DMA_Abort_IT>
 8007964:	b198      	cbz	r0, 800798e <I2C_ITError+0xd2>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007966:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007968:	e7dd      	b.n	8007926 <I2C_ITError+0x6a>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 800796a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800796e:	2b60      	cmp	r3, #96	; 0x60
 8007970:	d108      	bne.n	8007984 <I2C_ITError+0xc8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007972:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8007974:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8007978:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800797a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 800797e:	f7ff ff9c 	bl	80078ba <HAL_I2C_AbortCpltCallback>
 8007982:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hi2c);
 8007984:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007988:	4620      	mov	r0, r4
 800798a:	f7ff ff95 	bl	80078b8 <HAL_I2C_ErrorCallback>
 800798e:	bd10      	pop	{r4, pc}
 8007990:	ffff0000 	.word	0xffff0000
 8007994:	08007a9d 	.word	0x08007a9d
 8007998:	08007caf 	.word	0x08007caf

0800799c <I2C_ITSlaveCplt>:
{
 800799c:	b538      	push	{r3, r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800799e:	2220      	movs	r2, #32
 80079a0:	6803      	ldr	r3, [r0, #0]
{
 80079a2:	4604      	mov	r4, r0
 80079a4:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079a6:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c,I2C_FLAG_ADDR);
 80079a8:	2208      	movs	r2, #8
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80079aa:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c,I2C_FLAG_ADDR);
 80079ac:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80079ae:	f7ff faab 	bl	8006f08 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80079b2:	6823      	ldr	r3, [r4, #0]
  I2C_Flush_TXDR(hi2c);
 80079b4:	4620      	mov	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079bc:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80079c4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80079c8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80079cc:	f022 0201 	bic.w	r2, r2, #1
 80079d0:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80079d2:	f7ff fa8b 	bl	8006eec <I2C_Flush_TXDR>
  if(((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	6813      	ldr	r3, [r2, #0]
 80079da:	0458      	lsls	r0, r3, #17
 80079dc:	d402      	bmi.n	80079e4 <I2C_ITSlaveCplt+0x48>
     ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 80079de:	6813      	ldr	r3, [r2, #0]
  if(((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 80079e0:	0419      	lsls	r1, r3, #16
 80079e2:	d509      	bpl.n	80079f8 <I2C_ITSlaveCplt+0x5c>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 80079e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80079e8:	2b21      	cmp	r3, #33	; 0x21
 80079ea:	bf0c      	ite	eq
 80079ec:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 80079ee:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 80079f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	b11b      	cbz	r3, 8007a06 <I2C_ITSlaveCplt+0x6a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a00:	f043 0304 	orr.w	r3, r3, #4
 8007a04:	6463      	str	r3, [r4, #68]	; 0x44
  if(((ITFlags & I2C_FLAG_RXNE) != RESET))
 8007a06:	076b      	lsls	r3, r5, #29
 8007a08:	d510      	bpl.n	8007a2c <I2C_ITSlaveCplt+0x90>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8007a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a0e:	1c59      	adds	r1, r3, #1
 8007a10:	6261      	str	r1, [r4, #36]	; 0x24
 8007a12:	701a      	strb	r2, [r3, #0]
    if((hi2c->XferSize > 0U))
 8007a14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007a16:	b14b      	cbz	r3, 8007a2c <I2C_ITSlaveCplt+0x90>
      hi2c->XferSize--;
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007a1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a26:	f043 0304 	orr.w	r3, r3, #4
 8007a2a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8007a30:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a38:	b16b      	cbz	r3, 8007a56 <I2C_ITSlaveCplt+0xba>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007a3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f7ff ff3d 	bl	80078bc <I2C_ITError>
    if(hi2c->State == HAL_I2C_STATE_LISTEN)
 8007a42:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007a46:	2b28      	cmp	r3, #40	; 0x28
 8007a48:	d124      	bne.n	8007a94 <I2C_ITSlaveCplt+0xf8>
      I2C_ITListenCplt(hi2c, ITFlags);
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4620      	mov	r0, r4
}
 8007a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8007a52:	f7ff bf01 	b.w	8007858 <I2C_ITListenCplt>
  else if(hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007a56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a58:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8007a5c:	d00a      	beq.n	8007a74 <I2C_ITSlaveCplt+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a5e:	4a0e      	ldr	r2, [pc, #56]	; (8007a98 <I2C_ITSlaveCplt+0xfc>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8007a60:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8007a62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a66:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 8007a6e:	f7ff fef2 	bl	8007856 <HAL_I2C_ListenCpltCallback>
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
  else if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a74:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a78:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8007a7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a7e:	2a22      	cmp	r2, #34	; 0x22
 8007a80:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8007a84:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  else if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a88:	d102      	bne.n	8007a90 <I2C_ITSlaveCplt+0xf4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a8a:	f7ff feb9 	bl	8007800 <HAL_I2C_SlaveRxCpltCallback>
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a90:	f7ff feb5 	bl	80077fe <HAL_I2C_SlaveTxCpltCallback>
 8007a94:	bd38      	pop	{r3, r4, r5, pc}
 8007a96:	bf00      	nop
 8007a98:	ffff0000 	.word	0xffff0000

08007a9c <I2C_Slave_ISR_IT>:
{
 8007a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hi2c);
 8007aa0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
{
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	460e      	mov	r6, r1
 8007aa8:	4617      	mov	r7, r2
  __HAL_LOCK(hi2c);
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	f000 80cb 	beq.w	8007c46 <I2C_Slave_ISR_IT+0x1aa>
 8007ab0:	2301      	movs	r3, #1
  if(((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8007ab2:	06cd      	lsls	r5, r1, #27
  __HAL_LOCK(hi2c);
 8007ab4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if(((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8007ab8:	d53e      	bpl.n	8007b38 <I2C_Slave_ISR_IT+0x9c>
 8007aba:	06d0      	lsls	r0, r2, #27
 8007abc:	d53c      	bpl.n	8007b38 <I2C_Slave_ISR_IT+0x9c>
    if(hi2c->XferCount == 0U)
 8007abe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	bb8b      	cbnz	r3, 8007b28 <I2C_Slave_ISR_IT+0x8c>
      if(((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8007ac4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007aca:	d003      	beq.n	8007ad4 <I2C_Slave_ISR_IT+0x38>
 8007acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ad2:	d114      	bne.n	8007afe <I2C_Slave_ISR_IT+0x62>
        (hi2c->State == HAL_I2C_STATE_LISTEN))
 8007ad4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if(((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8007ad8:	2b28      	cmp	r3, #40	; 0x28
 8007ada:	d110      	bne.n	8007afe <I2C_Slave_ISR_IT+0x62>
        I2C_ITListenCplt(hi2c, ITFlags);
 8007adc:	4631      	mov	r1, r6
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff feba 	bl	8007858 <I2C_ITListenCplt>
  if(((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8007ae4:	06b2      	lsls	r2, r6, #26
 8007ae6:	d505      	bpl.n	8007af4 <I2C_Slave_ISR_IT+0x58>
 8007ae8:	06bb      	lsls	r3, r7, #26
 8007aea:	d503      	bpl.n	8007af4 <I2C_Slave_ISR_IT+0x58>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007aec:	4631      	mov	r1, r6
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff ff54 	bl	800799c <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8007af4:	2000      	movs	r0, #0
 8007af6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8007afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      else if((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007afe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	d00c      	beq.n	8007b22 <I2C_Slave_ISR_IT+0x86>
 8007b08:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007b0c:	2a29      	cmp	r2, #41	; 0x29
 8007b0e:	d108      	bne.n	8007b22 <I2C_Slave_ISR_IT+0x86>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b10:	2210      	movs	r2, #16
        I2C_Flush_TXDR(hi2c);
 8007b12:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b14:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8007b16:	f7ff f9e9 	bl	8006eec <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7ff fe71 	bl	8007802 <I2C_ITSlaveSequentialCplt>
 8007b20:	e7e0      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b22:	2210      	movs	r2, #16
 8007b24:	61da      	str	r2, [r3, #28]
 8007b26:	e7dd      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	2210      	movs	r2, #16
 8007b2c:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b30:	f043 0304 	orr.w	r3, r3, #4
 8007b34:	6463      	str	r3, [r4, #68]	; 0x44
 8007b36:	e7d5      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
  else if(((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8007b38:	0771      	lsls	r1, r6, #29
 8007b3a:	d51a      	bpl.n	8007b72 <I2C_Slave_ISR_IT+0xd6>
 8007b3c:	077a      	lsls	r2, r7, #29
 8007b3e:	d518      	bpl.n	8007b72 <I2C_Slave_ISR_IT+0xd6>
    if(hi2c->XferCount > 0U)
 8007b40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	b163      	cbz	r3, 8007b60 <I2C_Slave_ISR_IT+0xc4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8007b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	6262      	str	r2, [r4, #36]	; 0x24
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b50:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8007b52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007b54:	3b01      	subs	r3, #1
 8007b56:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007b58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && \
 8007b60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1bd      	bne.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
       (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8007b68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if((hi2c->XferCount == 0U) && \
 8007b6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b6e:	d1d4      	bne.n	8007b1a <I2C_Slave_ISR_IT+0x7e>
 8007b70:	e7b8      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
  else if(((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8007b72:	0733      	lsls	r3, r6, #28
 8007b74:	d546      	bpl.n	8007c04 <I2C_Slave_ISR_IT+0x168>
 8007b76:	073d      	lsls	r5, r7, #28
 8007b78:	d544      	bpl.n	8007c04 <I2C_Slave_ISR_IT+0x168>
  if((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8007b7a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007b7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b82:	2b28      	cmp	r3, #40	; 0x28
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	d137      	bne.n	8007bf8 <I2C_Slave_ISR_IT+0x15c>
    transferdirection = I2C_GET_DIR(hi2c);
 8007b88:	699a      	ldr	r2, [r3, #24]
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b8a:	68e1      	ldr	r1, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007b8c:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 8007b8e:	f3c2 4800 	ubfx	r8, r2, #16, #1
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b92:	2902      	cmp	r1, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007b94:	689a      	ldr	r2, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007b96:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007b9a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007b9e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ba2:	d120      	bne.n	8007be6 <I2C_Slave_ISR_IT+0x14a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007ba4:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8007ba8:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8007bac:	f015 0506 	ands.w	r5, r5, #6
 8007bb0:	d10f      	bne.n	8007bd2 <I2C_Slave_ISR_IT+0x136>
        hi2c->AddrEventCount++;
 8007bb2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007bb4:	3101      	adds	r1, #1
 8007bb6:	64a1      	str	r1, [r4, #72]	; 0x48
        if(hi2c->AddrEventCount == 2U)
 8007bb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007bba:	2902      	cmp	r1, #2
 8007bbc:	d192      	bne.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
          __HAL_I2C_CLEAR_FLAG(hi2c,I2C_FLAG_ADDR);
 8007bbe:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8007bc0:	64a5      	str	r5, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c,I2C_FLAG_ADDR);
 8007bc2:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8007bc4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007bc8:	4641      	mov	r1, r8
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f7ff fe42 	bl	8007854 <HAL_I2C_AddrCallback>
 8007bd0:	e788      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007bd2:	2104      	movs	r1, #4
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f7ff f997 	bl	8006f08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007bda:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007bdc:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8007be0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007be4:	e7f0      	b.n	8007bc8 <I2C_Slave_ISR_IT+0x12c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007be6:	2104      	movs	r1, #4
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7ff f98d 	bl	8006f08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007bee:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007bf0:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 8007bf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007bf6:	e7e7      	b.n	8007bc8 <I2C_Slave_ISR_IT+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007bf8:	2208      	movs	r2, #8
 8007bfa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007c02:	e76f      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
  else if(((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8007c04:	07b0      	lsls	r0, r6, #30
 8007c06:	f57f af6d 	bpl.w	8007ae4 <I2C_Slave_ISR_IT+0x48>
 8007c0a:	07b9      	lsls	r1, r7, #30
 8007c0c:	f57f af6a 	bpl.w	8007ae4 <I2C_Slave_ISR_IT+0x48>
    if(hi2c->XferCount > 0U)
 8007c10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	b16b      	cbz	r3, 8007c32 <I2C_Slave_ISR_IT+0x196>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8007c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c18:	6822      	ldr	r2, [r4, #0]
 8007c1a:	1c59      	adds	r1, r3, #1
 8007c1c:	6261      	str	r1, [r4, #36]	; 0x24
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8007c22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c24:	3b01      	subs	r3, #1
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007c2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	8523      	strh	r3, [r4, #40]	; 0x28
 8007c30:	e758      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
      if((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8007c32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c38:	f43f af6f 	beq.w	8007b1a <I2C_Slave_ISR_IT+0x7e>
 8007c3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f43f af6b 	beq.w	8007b1a <I2C_Slave_ISR_IT+0x7e>
 8007c44:	e74e      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 8007c46:	2002      	movs	r0, #2
}
 8007c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007c4c <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c4c:	6803      	ldr	r3, [r0, #0]
 8007c4e:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c50:	681a      	ldr	r2, [r3, #0]
{
 8007c52:	b410      	push	{r4}
  if(((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8007c54:	05cc      	lsls	r4, r1, #23
 8007c56:	d508      	bpl.n	8007c6a <HAL_I2C_ER_IRQHandler+0x1e>
 8007c58:	0614      	lsls	r4, r2, #24
 8007c5a:	d506      	bpl.n	8007c6a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007c5c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007c5e:	f044 0401 	orr.w	r4, r4, #1
 8007c62:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c64:	f44f 7480 	mov.w	r4, #256	; 0x100
 8007c68:	61dc      	str	r4, [r3, #28]
  if(((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8007c6a:	054c      	lsls	r4, r1, #21
 8007c6c:	d508      	bpl.n	8007c80 <HAL_I2C_ER_IRQHandler+0x34>
 8007c6e:	0614      	lsls	r4, r2, #24
 8007c70:	d506      	bpl.n	8007c80 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007c72:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007c74:	f044 0408 	orr.w	r4, r4, #8
 8007c78:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007c7e:	61dc      	str	r4, [r3, #28]
  if(((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8007c80:	0589      	lsls	r1, r1, #22
 8007c82:	d508      	bpl.n	8007c96 <HAL_I2C_ER_IRQHandler+0x4a>
 8007c84:	0612      	lsls	r2, r2, #24
 8007c86:	d506      	bpl.n	8007c96 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007c88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c8a:	f042 0202 	orr.w	r2, r2, #2
 8007c8e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c94:	61da      	str	r2, [r3, #28]
  if((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007c96:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007c98:	f013 0f0b 	tst.w	r3, #11
 8007c9c:	d004      	beq.n	8007ca8 <HAL_I2C_ER_IRQHandler+0x5c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c9e:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 8007ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ca4:	f7ff be0a 	b.w	80078bc <I2C_ITError>
}
 8007ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007cae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007cb0:	6802      	ldr	r2, [r0, #0]
{
 8007cb2:	b508      	push	{r3, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007cb4:	6853      	ldr	r3, [r2, #4]
 8007cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cba:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007cc0:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8007cc2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007cc4:	6513      	str	r3, [r2, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8007cc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007cca:	2b60      	cmp	r3, #96	; 0x60
 8007ccc:	d105      	bne.n	8007cda <I2C_DMAAbort+0x2c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007cce:	2320      	movs	r3, #32
 8007cd0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8007cd4:	f7ff fdf1 	bl	80078ba <HAL_I2C_AbortCpltCallback>
 8007cd8:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8007cda:	f7ff fded 	bl	80078b8 <HAL_I2C_ErrorCallback>
 8007cde:	bd08      	pop	{r3, pc}

08007ce0 <HAL_I2CEx_ConfigAnalogFilter>:
  *               the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter: New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ce0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007ce2:	4a20      	ldr	r2, [pc, #128]	; (8007d64 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
{
 8007ce4:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007ce6:	6803      	ldr	r3, [r0, #0]
{
 8007ce8:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00e      	beq.n	8007d0c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8007cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00a      	beq.n	8007d0c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8007cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d006      	beq.n	8007d0c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8007cfe:	4a1a      	ldr	r2, [pc, #104]	; (8007d68 <HAL_I2CEx_ConfigAnalogFilter+0x88>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d003      	beq.n	8007d0c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8007d04:	2174      	movs	r1, #116	; 0x74
 8007d06:	4819      	ldr	r0, [pc, #100]	; (8007d6c <HAL_I2CEx_ConfigAnalogFilter+0x8c>)
 8007d08:	f7fa fa17 	bl	800213a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8007d0c:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 8007d10:	d003      	beq.n	8007d1a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8007d12:	2175      	movs	r1, #117	; 0x75
 8007d14:	4815      	ldr	r0, [pc, #84]	; (8007d6c <HAL_I2CEx_ConfigAnalogFilter+0x8c>)
 8007d16:	f7fa fa10 	bl	800213a <assert_failed>

  if(hi2c->State == HAL_I2C_STATE_READY)
 8007d1a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	2a20      	cmp	r2, #32
 8007d22:	d11c      	bne.n	8007d5e <HAL_I2CEx_ConfigAnalogFilter+0x7e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d24:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d018      	beq.n	8007d5e <HAL_I2CEx_ConfigAnalogFilter+0x7e>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d2c:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d2e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	6819      	ldr	r1, [r3, #0]
 8007d38:	f021 0101 	bic.w	r1, r1, #1
 8007d3c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d3e:	6819      	ldr	r1, [r3, #0]
 8007d40:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8007d44:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d46:	6819      	ldr	r1, [r3, #0]
 8007d48:	430d      	orrs	r5, r1
 8007d4a:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007d4c:	6819      	ldr	r1, [r3, #0]
 8007d4e:	f041 0101 	orr.w	r1, r1, #1
 8007d52:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d54:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007d58:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 8007d5c:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8007d5e:	2002      	movs	r0, #2
  }
}
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
 8007d62:	bf00      	nop
 8007d64:	40005400 	.word	0x40005400
 8007d68:	58001c00 	.word	0x58001c00
 8007d6c:	080138a6 	.word	0x080138a6

08007d70 <HAL_I2CEx_ConfigDigitalFilter>:
  *               the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter: Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d70:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007d72:	4a1f      	ldr	r2, [pc, #124]	; (8007df0 <HAL_I2CEx_ConfigDigitalFilter+0x80>)
{
 8007d74:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007d76:	6803      	ldr	r3, [r0, #0]
{
 8007d78:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00e      	beq.n	8007d9c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8007d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00a      	beq.n	8007d9c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8007d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d006      	beq.n	8007d9c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8007d8e:	4a19      	ldr	r2, [pc, #100]	; (8007df4 <HAL_I2CEx_ConfigDigitalFilter+0x84>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8007d94:	21a2      	movs	r1, #162	; 0xa2
 8007d96:	4818      	ldr	r0, [pc, #96]	; (8007df8 <HAL_I2CEx_ConfigDigitalFilter+0x88>)
 8007d98:	f7fa f9cf 	bl	800213a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8007d9c:	2d0f      	cmp	r5, #15
 8007d9e:	d903      	bls.n	8007da8 <HAL_I2CEx_ConfigDigitalFilter+0x38>
 8007da0:	21a3      	movs	r1, #163	; 0xa3
 8007da2:	4815      	ldr	r0, [pc, #84]	; (8007df8 <HAL_I2CEx_ConfigDigitalFilter+0x88>)
 8007da4:	f7fa f9c9 	bl	800213a <assert_failed>

  if(hi2c->State == HAL_I2C_STATE_READY)
 8007da8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	2a20      	cmp	r2, #32
 8007db0:	d11b      	bne.n	8007dea <HAL_I2CEx_ConfigDigitalFilter+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007db2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d017      	beq.n	8007dea <HAL_I2CEx_ConfigDigitalFilter+0x7a>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dba:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dbc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	6819      	ldr	r1, [r3, #0]
 8007dc6:	f021 0101 	bic.w	r1, r1, #1
 8007dca:	6019      	str	r1, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8007dcc:	6819      	ldr	r1, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8007dce:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8007dd2:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8007dd6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007dd8:	6819      	ldr	r1, [r3, #0]
 8007dda:	f041 0101 	orr.w	r1, r1, #1
 8007dde:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007de0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007de4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 8007de8:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8007dea:	2002      	movs	r0, #2
  }
}
 8007dec:	bd38      	pop	{r3, r4, r5, pc}
 8007dee:	bf00      	nop
 8007df0:	40005400 	.word	0x40005400
 8007df4:	58001c00 	.word	0x58001c00
 8007df8:	080138a6 	.word	0x080138a6

08007dfc <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007dfc:	6803      	ldr	r3, [r0, #0]
 8007dfe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 8007e02:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007e04:	601a      	str	r2, [r3, #0]
}
 8007e06:	4770      	bx	lr

08007e08 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007e08:	b128      	cbz	r0, 8007e16 <HAL_MDMA_Abort_IT+0xe>
  {
    return HAL_ERROR;
  }
  
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8007e0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d003      	beq.n	8007e1a <HAL_MDMA_Abort_IT+0x12>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8007e12:	2380      	movs	r3, #128	; 0x80
 8007e14:	6683      	str	r3, [r0, #104]	; 0x68
    return HAL_ERROR;
 8007e16:	2001      	movs	r0, #1
    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
  }
  
  return HAL_OK;
}
 8007e18:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8007e1a:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  return HAL_OK;
 8007e22:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8007e24:	68d3      	ldr	r3, [r2, #12]
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8007e2c:	4770      	bx	lr

08007e2e <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007e2e:	4770      	bx	lr

08007e30 <HAL_PWREx_AVDCallback>:
/**
  * @brief  PWR AVD interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_AVDCallback(void)
{
 8007e30:	4770      	bx	lr
	...

08007e34 <HAL_PWREx_PVD_AVD_IRQHandler>:
{
 8007e34:	b538      	push	{r3, r4, r5, lr}
  if(READ_BIT(PWR->CR1, PWR_CR1_PVDEN) != RESET)
 8007e36:	4c0e      	ldr	r4, [pc, #56]	; (8007e70 <HAL_PWREx_PVD_AVD_IRQHandler+0x3c>)
 8007e38:	6822      	ldr	r2, [r4, #0]
 8007e3a:	06d0      	lsls	r0, r2, #27
 8007e3c:	d509      	bpl.n	8007e52 <HAL_PWREx_PVD_AVD_IRQHandler+0x1e>
    if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007e3e:	4d0d      	ldr	r5, [pc, #52]	; (8007e74 <HAL_PWREx_PVD_AVD_IRQHandler+0x40>)
 8007e40:	68ab      	ldr	r3, [r5, #8]
 8007e42:	03d9      	lsls	r1, r3, #15
 8007e44:	d505      	bpl.n	8007e52 <HAL_PWREx_PVD_AVD_IRQHandler+0x1e>
      HAL_PWR_PVDCallback();
 8007e46:	f7ff fff2 	bl	8007e2e <HAL_PWR_PVDCallback>
      __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007e4a:	68ab      	ldr	r3, [r5, #8]
 8007e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e50:	60ab      	str	r3, [r5, #8]
  if(READ_BIT(PWR->CR1, PWR_CR1_AVDEN) != RESET)
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	03da      	lsls	r2, r3, #15
 8007e56:	d509      	bpl.n	8007e6c <HAL_PWREx_PVD_AVD_IRQHandler+0x38>
    if(__HAL_PWR_AVD_EXTI_GET_FLAG() != RESET)
 8007e58:	4c06      	ldr	r4, [pc, #24]	; (8007e74 <HAL_PWREx_PVD_AVD_IRQHandler+0x40>)
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	03db      	lsls	r3, r3, #15
 8007e5e:	d505      	bpl.n	8007e6c <HAL_PWREx_PVD_AVD_IRQHandler+0x38>
      HAL_PWREx_AVDCallback();
 8007e60:	f7ff ffe6 	bl	8007e30 <HAL_PWREx_AVDCallback>
      __HAL_PWR_AVD_EXTI_CLEAR_FLAG();
 8007e64:	68a3      	ldr	r3, [r4, #8]
 8007e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e6a:	60a3      	str	r3, [r4, #8]
 8007e6c:	bd38      	pop	{r3, r4, r5, pc}
 8007e6e:	bf00      	nop
 8007e70:	58024800 	.word	0x58024800
 8007e74:	58000080 	.word	0x58000080

08007e78 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout: Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8007e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7c:	9d06      	ldr	r5, [sp, #24]
 8007e7e:	4604      	mov	r4, r0
 8007e80:	460f      	mov	r7, r1
 8007e82:	4616      	mov	r6, r2
 8007e84:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e86:	6821      	ldr	r1, [r4, #0]
 8007e88:	688a      	ldr	r2, [r1, #8]
 8007e8a:	423a      	tst	r2, r7
 8007e8c:	bf14      	ite	ne
 8007e8e:	2201      	movne	r2, #1
 8007e90:	2200      	moveq	r2, #0
 8007e92:	42b2      	cmp	r2, r6
 8007e94:	d102      	bne.n	8007e9c <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007e96:	2000      	movs	r0, #0
}
 8007e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8007e9c:	1c6b      	adds	r3, r5, #1
 8007e9e:	d0f3      	beq.n	8007e88 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8007ea0:	b94d      	cbnz	r5, 8007eb6 <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007ea2:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007ea4:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007ea6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007eaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007eac:	f043 0301 	orr.w	r3, r3, #1
 8007eb0:	6463      	str	r3, [r4, #68]	; 0x44
 8007eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8007eb6:	f7fb fd49 	bl	800394c <HAL_GetTick>
 8007eba:	eba0 0008 	sub.w	r0, r0, r8
 8007ebe:	4285      	cmp	r5, r0
 8007ec0:	d2e1      	bcs.n	8007e86 <QSPI_WaitFlagStateUntilTimeout+0xe>
 8007ec2:	e7ee      	b.n	8007ea2 <QSPI_WaitFlagStateUntilTimeout+0x2a>

08007ec4 <HAL_QSPI_Init>:
{
 8007ec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ec6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007ec8:	f7fb fd40 	bl	800394c <HAL_GetTick>
 8007ecc:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8007ece:	2c00      	cmp	r4, #0
 8007ed0:	f000 80b6 	beq.w	8008040 <HAL_QSPI_Init+0x17c>
  assert_param(IS_QSPI_ALL_INSTANCE(hqspi->Instance));
 8007ed4:	6822      	ldr	r2, [r4, #0]
 8007ed6:	4b5c      	ldr	r3, [pc, #368]	; (8008048 <HAL_QSPI_Init+0x184>)
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d003      	beq.n	8007ee4 <HAL_QSPI_Init+0x20>
 8007edc:	21ff      	movs	r1, #255	; 0xff
 8007ede:	485b      	ldr	r0, [pc, #364]	; (800804c <HAL_QSPI_Init+0x188>)
 8007ee0:	f7fa f92b 	bl	800213a <assert_failed>
  assert_param(IS_QSPI_CLOCK_PRESCALER(hqspi->Init.ClockPrescaler));
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	2bff      	cmp	r3, #255	; 0xff
 8007ee8:	d904      	bls.n	8007ef4 <HAL_QSPI_Init+0x30>
 8007eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007eee:	4857      	ldr	r0, [pc, #348]	; (800804c <HAL_QSPI_Init+0x188>)
 8007ef0:	f7fa f923 	bl	800213a <assert_failed>
  assert_param(IS_QSPI_FIFO_THRESHOLD(hqspi->Init.FifoThreshold));
 8007ef4:	68a3      	ldr	r3, [r4, #8]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	2b1f      	cmp	r3, #31
 8007efa:	d904      	bls.n	8007f06 <HAL_QSPI_Init+0x42>
 8007efc:	f240 1101 	movw	r1, #257	; 0x101
 8007f00:	4852      	ldr	r0, [pc, #328]	; (800804c <HAL_QSPI_Init+0x188>)
 8007f02:	f7fa f91a 	bl	800213a <assert_failed>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	f033 0310 	bics.w	r3, r3, #16
 8007f0c:	d004      	beq.n	8007f18 <HAL_QSPI_Init+0x54>
 8007f0e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007f12:	484e      	ldr	r0, [pc, #312]	; (800804c <HAL_QSPI_Init+0x188>)
 8007f14:	f7fa f911 	bl	800213a <assert_failed>
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
 8007f18:	6923      	ldr	r3, [r4, #16]
 8007f1a:	2b1f      	cmp	r3, #31
 8007f1c:	d904      	bls.n	8007f28 <HAL_QSPI_Init+0x64>
 8007f1e:	f240 1103 	movw	r1, #259	; 0x103
 8007f22:	484a      	ldr	r0, [pc, #296]	; (800804c <HAL_QSPI_Init+0x188>)
 8007f24:	f7fa f909 	bl	800213a <assert_failed>
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
 8007f28:	6963      	ldr	r3, [r4, #20]
 8007f2a:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8007f2e:	d007      	beq.n	8007f40 <HAL_QSPI_Init+0x7c>
 8007f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f34:	d004      	beq.n	8007f40 <HAL_QSPI_Init+0x7c>
 8007f36:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007f3a:	4844      	ldr	r0, [pc, #272]	; (800804c <HAL_QSPI_Init+0x188>)
 8007f3c:	f7fa f8fd 	bl	800213a <assert_failed>
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));
 8007f40:	69a3      	ldr	r3, [r4, #24]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d904      	bls.n	8007f50 <HAL_QSPI_Init+0x8c>
 8007f46:	f240 1105 	movw	r1, #261	; 0x105
 8007f4a:	4840      	ldr	r0, [pc, #256]	; (800804c <HAL_QSPI_Init+0x188>)
 8007f4c:	f7fa f8f5 	bl	800213a <assert_failed>
  assert_param(IS_QSPI_DUAL_FLASH_MODE(hqspi->Init.DualFlash));
 8007f50:	6a23      	ldr	r3, [r4, #32]
 8007f52:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8007f56:	d004      	beq.n	8007f62 <HAL_QSPI_Init+0x9e>
 8007f58:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007f5c:	483b      	ldr	r0, [pc, #236]	; (800804c <HAL_QSPI_Init+0x188>)
 8007f5e:	f7fa f8ec 	bl	800213a <assert_failed>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
 8007f62:	6a23      	ldr	r3, [r4, #32]
 8007f64:	2b40      	cmp	r3, #64	; 0x40
 8007f66:	d008      	beq.n	8007f7a <HAL_QSPI_Init+0xb6>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
 8007f68:	69e3      	ldr	r3, [r4, #28]
 8007f6a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007f6e:	d004      	beq.n	8007f7a <HAL_QSPI_Init+0xb6>
 8007f70:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007f74:	4835      	ldr	r0, [pc, #212]	; (800804c <HAL_QSPI_Init+0x188>)
 8007f76:	f7fa f8e0 	bl	800213a <assert_failed>
  __HAL_LOCK(hqspi);
 8007f7a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d060      	beq.n	8008044 <HAL_QSPI_Init+0x180>
 8007f82:	2301      	movs	r3, #1
 8007f84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007f88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007f8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007f90:	b93b      	cbnz	r3, 8007fa2 <HAL_QSPI_Init+0xde>
    hqspi->Lock = HAL_UNLOCKED;
 8007f92:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8007f96:	4620      	mov	r0, r4
 8007f98:	f7fa f8ec 	bl	8002174 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8007f9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fa0:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, 
 8007fa2:	6820      	ldr	r0, [r4, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007fa8:	6801      	ldr	r1, [r0, #0]
 8007faa:	fa93 f3a3 	rbit	r3, r3
 8007fae:	fab3 f283 	clz	r2, r3
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	4093      	lsls	r3, r2
 8007fb8:	f421 6270 	bic.w	r2, r1, #3840	; 0xf00
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007fbc:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, 
 8007fbe:	4313      	orrs	r3, r2
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007fc0:	2200      	movs	r2, #0
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, 
 8007fc2:	6003      	str	r3, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	462b      	mov	r3, r5
 8007fcc:	f7ff ff54 	bl	8007e78 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d130      	bne.n	8008036 <HAL_QSPI_Init+0x172>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007fd4:	6822      	ldr	r2, [r4, #0]
 8007fd6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8007fda:	6815      	ldr	r5, [r2, #0]
 8007fdc:	fa91 f1a1 	rbit	r1, r1
 8007fe0:	69e6      	ldr	r6, [r4, #28]
 8007fe2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8007fe6:	68e3      	ldr	r3, [r4, #12]
 8007fe8:	fab1 f181 	clz	r1, r1
 8007fec:	f025 05d0 	bic.w	r5, r5, #208	; 0xd0
 8007ff0:	4333      	orrs	r3, r6
 8007ff2:	6a26      	ldr	r6, [r4, #32]
 8007ff4:	4333      	orrs	r3, r6
 8007ff6:	432b      	orrs	r3, r5
 8007ff8:	6865      	ldr	r5, [r4, #4]
 8007ffa:	fa05 f101 	lsl.w	r1, r5, r1
 8007ffe:	430b      	orrs	r3, r1
 8008000:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8008004:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008006:	6856      	ldr	r6, [r2, #4]
 8008008:	fa91 f1a1 	rbit	r1, r1
 800800c:	69a5      	ldr	r5, [r4, #24]
 800800e:	fab1 f181 	clz	r1, r1
 8008012:	6963      	ldr	r3, [r4, #20]
 8008014:	432b      	orrs	r3, r5
 8008016:	4d0e      	ldr	r5, [pc, #56]	; (8008050 <HAL_QSPI_Init+0x18c>)
 8008018:	4035      	ands	r5, r6
 800801a:	432b      	orrs	r3, r5
 800801c:	6925      	ldr	r5, [r4, #16]
 800801e:	fa05 f101 	lsl.w	r1, r5, r1
 8008022:	430b      	orrs	r3, r1
 8008024:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8008026:	6813      	ldr	r3, [r2, #0]
 8008028:	f043 0301 	orr.w	r3, r3, #1
 800802c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800802e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008030:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8008032:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008036:	2300      	movs	r3, #0
 8008038:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800803c:	b002      	add	sp, #8
 800803e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008040:	2001      	movs	r0, #1
 8008042:	e7fb      	b.n	800803c <HAL_QSPI_Init+0x178>
  __HAL_LOCK(hqspi);
 8008044:	2002      	movs	r0, #2
 8008046:	e7f9      	b.n	800803c <HAL_QSPI_Init+0x178>
 8008048:	52005000 	.word	0x52005000
 800804c:	080138e7 	.word	0x080138e7
 8008050:	ffe0f8fe 	.word	0xffe0f8fe

08008054 <HAL_QSPI_ErrorCallback>:
 8008054:	4770      	bx	lr

08008056 <QSPI_DMAAbortCplt>:
{
 8008056:	b508      	push	{r3, lr}
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((MDMA_HandleTypeDef* )hmdma)->Parent;
 8008058:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hqspi->RxXferCount = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	6383      	str	r3, [r0, #56]	; 0x38
  hqspi->TxXferCount = 0;
 800805e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8008060:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008064:	2b08      	cmp	r3, #8
 8008066:	d10b      	bne.n	8008080 <QSPI_DMAAbortCplt+0x2a>
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008068:	6803      	ldr	r3, [r0, #0]
 800806a:	2202      	movs	r2, #2
 800806c:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008074:	601a      	str	r2, [r3, #0]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	f042 0202 	orr.w	r2, r2, #2
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	bd08      	pop	{r3, pc}
    hqspi->State = HAL_QSPI_STATE_READY;
 8008080:	2301      	movs	r3, #1
 8008082:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8008086:	f7ff ffe5 	bl	8008054 <HAL_QSPI_ErrorCallback>
 800808a:	bd08      	pop	{r3, pc}

0800808c <HAL_QSPI_AbortCpltCallback>:
 800808c:	4770      	bx	lr

0800808e <HAL_QSPI_CmdCpltCallback>:
 800808e:	4770      	bx	lr

08008090 <HAL_QSPI_RxCpltCallback>:
 8008090:	4770      	bx	lr

08008092 <HAL_QSPI_TxCpltCallback>:
 8008092:	4770      	bx	lr

08008094 <HAL_QSPI_FifoThresholdCallback>:
 8008094:	4770      	bx	lr

08008096 <HAL_QSPI_StatusMatchCallback>:
 8008096:	4770      	bx	lr

08008098 <HAL_QSPI_TimeOutCallback>:
{
 8008098:	4770      	bx	lr
	...

0800809c <HAL_QSPI_IRQHandler>:
{
 800809c:	b508      	push	{r3, lr}
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800809e:	6803      	ldr	r3, [r0, #0]
 80080a0:	6899      	ldr	r1, [r3, #8]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80080a2:	681a      	ldr	r2, [r3, #0]
  if((flag & QSPI_FLAG_FT) && (itsource & QSPI_IT_FT))
 80080a4:	f011 0f04 	tst.w	r1, #4
 80080a8:	d032      	beq.n	8008110 <HAL_QSPI_IRQHandler+0x74>
 80080aa:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80080ae:	d02f      	beq.n	8008110 <HAL_QSPI_IRQHandler+0x74>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80080b0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80080b4:	2a12      	cmp	r2, #18
 80080b6:	d112      	bne.n	80080de <HAL_QSPI_IRQHandler+0x42>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
 80080b8:	6802      	ldr	r2, [r0, #0]
 80080ba:	6891      	ldr	r1, [r2, #8]
 80080bc:	0749      	lsls	r1, r1, #29
 80080be:	d402      	bmi.n	80080c6 <HAL_QSPI_IRQHandler+0x2a>
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80080c0:	f7ff ffe8 	bl	8008094 <HAL_QSPI_FifoThresholdCallback>
 80080c4:	bd08      	pop	{r3, pc}
        if (hqspi->TxXferCount > 0)
 80080c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80080c8:	b1e9      	cbz	r1, 8008106 <HAL_QSPI_IRQHandler+0x6a>
          *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 80080ca:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80080cc:	1c51      	adds	r1, r2, #1
 80080ce:	6241      	str	r1, [r0, #36]	; 0x24
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	f883 2020 	strb.w	r2, [r3, #32]
          hqspi->TxXferCount--;
 80080d6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80080d8:	3a01      	subs	r2, #1
 80080da:	62c2      	str	r2, [r0, #44]	; 0x2c
 80080dc:	e7ec      	b.n	80080b8 <HAL_QSPI_IRQHandler+0x1c>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80080de:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80080e2:	2a22      	cmp	r2, #34	; 0x22
 80080e4:	d1ec      	bne.n	80080c0 <HAL_QSPI_IRQHandler+0x24>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
 80080e6:	6802      	ldr	r2, [r0, #0]
 80080e8:	6891      	ldr	r1, [r2, #8]
 80080ea:	0749      	lsls	r1, r1, #29
 80080ec:	d5e8      	bpl.n	80080c0 <HAL_QSPI_IRQHandler+0x24>
        if (hqspi->RxXferCount > 0)
 80080ee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80080f0:	b149      	cbz	r1, 8008106 <HAL_QSPI_IRQHandler+0x6a>
          *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 80080f2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80080f4:	1c51      	adds	r1, r2, #1
 80080f6:	6301      	str	r1, [r0, #48]	; 0x30
 80080f8:	f893 1020 	ldrb.w	r1, [r3, #32]
 80080fc:	7011      	strb	r1, [r2, #0]
          hqspi->RxXferCount--;
 80080fe:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008100:	3a01      	subs	r2, #1
 8008102:	6382      	str	r2, [r0, #56]	; 0x38
 8008104:	e7ef      	b.n	80080e6 <HAL_QSPI_IRQHandler+0x4a>
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008106:	6813      	ldr	r3, [r2, #0]
 8008108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800810c:	6013      	str	r3, [r2, #0]
          break;
 800810e:	e7d7      	b.n	80080c0 <HAL_QSPI_IRQHandler+0x24>
  else if((flag & QSPI_FLAG_TC) && (itsource & QSPI_IT_TC))
 8008110:	f011 0f02 	tst.w	r1, #2
 8008114:	d05f      	beq.n	80081d6 <HAL_QSPI_IRQHandler+0x13a>
 8008116:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800811a:	d05c      	beq.n	80081d6 <HAL_QSPI_IRQHandler+0x13a>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800811c:	2202      	movs	r2, #2
 800811e:	60da      	str	r2, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008126:	601a      	str	r2, [r3, #0]
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008128:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800812c:	2a12      	cmp	r2, #18
 800812e:	d112      	bne.n	8008156 <HAL_QSPI_IRQHandler+0xba>
      if (hqspi->Instance->CR & QUADSPI_CR_DMAEN)
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	0751      	lsls	r1, r2, #29
 8008134:	d509      	bpl.n	800814a <HAL_QSPI_IRQHandler+0xae>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	f022 0204 	bic.w	r2, r2, #4
 800813c:	601a      	str	r2, [r3, #0]
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800813e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68d3      	ldr	r3, [r2, #12]
 8008144:	f023 0301 	bic.w	r3, r3, #1
 8008148:	60d3      	str	r3, [r2, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800814a:	2301      	movs	r3, #1
 800814c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_QSPI_TxCpltCallback(hqspi);
 8008150:	f7ff ff9f 	bl	8008092 <HAL_QSPI_TxCpltCallback>
 8008154:	bd08      	pop	{r3, pc}
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008156:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800815a:	2a22      	cmp	r2, #34	; 0x22
 800815c:	d124      	bne.n	80081a8 <HAL_QSPI_IRQHandler+0x10c>
      if (hqspi->Instance->CR & QUADSPI_CR_DMAEN)
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	0752      	lsls	r2, r2, #29
 8008162:	d51b      	bpl.n	800819c <HAL_QSPI_IRQHandler+0x100>
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	f022 0204 	bic.w	r2, r2, #4
 800816a:	601a      	str	r2, [r3, #0]
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800816c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68d3      	ldr	r3, [r2, #12]
 8008172:	f023 0301 	bic.w	r3, r3, #1
 8008176:	60d3      	str	r3, [r2, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8008178:	2301      	movs	r3, #1
 800817a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_QSPI_RxCpltCallback(hqspi);
 800817e:	f7ff ff87 	bl	8008090 <HAL_QSPI_RxCpltCallback>
 8008182:	bd08      	pop	{r3, pc}
          if (hqspi->RxXferCount > 0)
 8008184:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008186:	2a00      	cmp	r2, #0
 8008188:	d0f6      	beq.n	8008178 <HAL_QSPI_IRQHandler+0xdc>
            *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 800818a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800818c:	1c51      	adds	r1, r2, #1
 800818e:	6301      	str	r1, [r0, #48]	; 0x30
 8008190:	f893 1020 	ldrb.w	r1, [r3, #32]
 8008194:	7011      	strb	r1, [r2, #0]
            hqspi->RxXferCount--;
 8008196:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008198:	3a01      	subs	r2, #1
 800819a:	6382      	str	r2, [r0, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0)
 800819c:	6802      	ldr	r2, [r0, #0]
 800819e:	6892      	ldr	r2, [r2, #8]
 80081a0:	f412 5ff8 	tst.w	r2, #7936	; 0x1f00
 80081a4:	d1ee      	bne.n	8008184 <HAL_QSPI_IRQHandler+0xe8>
 80081a6:	e7e7      	b.n	8008178 <HAL_QSPI_IRQHandler+0xdc>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80081a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d105      	bne.n	80081bc <HAL_QSPI_IRQHandler+0x120>
      hqspi->State = HAL_QSPI_STATE_READY;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_QSPI_CmdCpltCallback(hqspi);
 80081b6:	f7ff ff6a 	bl	800808e <HAL_QSPI_CmdCpltCallback>
 80081ba:	bd08      	pop	{r3, pc}
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80081bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80081c0:	2b08      	cmp	r3, #8
 80081c2:	d148      	bne.n	8008256 <HAL_QSPI_IRQHandler+0x1ba>
      hqspi->State = HAL_QSPI_STATE_READY;
 80081c4:	2301      	movs	r3, #1
 80081c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80081ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d137      	bne.n	8008240 <HAL_QSPI_IRQHandler+0x1a4>
        HAL_QSPI_AbortCpltCallback(hqspi);
 80081d0:	f7ff ff5c 	bl	800808c <HAL_QSPI_AbortCpltCallback>
 80081d4:	bd08      	pop	{r3, pc}
  else if((flag & QSPI_FLAG_SM) && (itsource & QSPI_IT_SM))
 80081d6:	f011 0f08 	tst.w	r1, #8
 80081da:	d011      	beq.n	8008200 <HAL_QSPI_IRQHandler+0x164>
 80081dc:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 80081e0:	d00e      	beq.n	8008200 <HAL_QSPI_IRQHandler+0x164>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80081e2:	2208      	movs	r2, #8
 80081e4:	60da      	str	r2, [r3, #12]
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	0252      	lsls	r2, r2, #9
 80081ea:	d506      	bpl.n	80081fa <HAL_QSPI_IRQHandler+0x15e>
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80081f2:	601a      	str	r2, [r3, #0]
      hqspi->State = HAL_QSPI_STATE_READY;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_QSPI_StatusMatchCallback(hqspi);
 80081fa:	f7ff ff4c 	bl	8008096 <HAL_QSPI_StatusMatchCallback>
 80081fe:	bd08      	pop	{r3, pc}
  else if((flag & QSPI_FLAG_TE) && (itsource & QSPI_IT_TE))
 8008200:	f011 0f01 	tst.w	r1, #1
 8008204:	d01f      	beq.n	8008246 <HAL_QSPI_IRQHandler+0x1aa>
 8008206:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800820a:	d01c      	beq.n	8008246 <HAL_QSPI_IRQHandler+0x1aa>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800820c:	2101      	movs	r1, #1
 800820e:	60d9      	str	r1, [r3, #12]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8008216:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8008218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800821a:	f042 0202 	orr.w	r2, r2, #2
 800821e:	6442      	str	r2, [r0, #68]	; 0x44
    if (hqspi->Instance->CR & QUADSPI_CR_DMAEN)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	0752      	lsls	r2, r2, #29
 8008224:	d50a      	bpl.n	800823c <HAL_QSPI_IRQHandler+0x1a0>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008226:	681a      	ldr	r2, [r3, #0]
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008228:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800822a:	f022 0204 	bic.w	r2, r2, #4
 800822e:	601a      	str	r2, [r3, #0]
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <HAL_QSPI_IRQHandler+0x1bc>)
 8008232:	6583      	str	r3, [r0, #88]	; 0x58
}
 8008234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_MDMA_Abort_IT(hqspi->hmdma);
 8008238:	f7ff bde6 	b.w	8007e08 <HAL_MDMA_Abort_IT>
      hqspi->State = HAL_QSPI_STATE_READY;
 800823c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
      HAL_QSPI_ErrorCallback(hqspi);
 8008240:	f7ff ff08 	bl	8008054 <HAL_QSPI_ErrorCallback>
 8008244:	bd08      	pop	{r3, pc}
  else if((flag & QSPI_FLAG_TO) && (itsource & QSPI_IT_TO))
 8008246:	06c9      	lsls	r1, r1, #27
 8008248:	d505      	bpl.n	8008256 <HAL_QSPI_IRQHandler+0x1ba>
 800824a:	02d2      	lsls	r2, r2, #11
 800824c:	d503      	bpl.n	8008256 <HAL_QSPI_IRQHandler+0x1ba>
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800824e:	2210      	movs	r2, #16
 8008250:	60da      	str	r2, [r3, #12]
    HAL_QSPI_TimeOutCallback(hqspi);
 8008252:	f7ff ff21 	bl	8008098 <HAL_QSPI_TimeOutCallback>
 8008256:	bd08      	pop	{r3, pc}
 8008258:	08008057 	.word	0x08008057

0800825c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800825e:	6803      	ldr	r3, [r0, #0]
{
 8008260:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008262:	b133      	cbz	r3, 8008272 <HAL_RCC_OscConfig+0x16>
 8008264:	069d      	lsls	r5, r3, #26
 8008266:	d104      	bne.n	8008272 <HAL_RCC_OscConfig+0x16>
 8008268:	f240 1113 	movw	r1, #275	; 0x113
 800826c:	48a6      	ldr	r0, [pc, #664]	; (8008508 <HAL_RCC_OscConfig+0x2ac>)
 800826e:	f7f9 ff64 	bl	800213a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	07d8      	lsls	r0, r3, #31
 8008276:	d458      	bmi.n	800832a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	0799      	lsls	r1, r3, #30
 800827c:	f100 80b7 	bmi.w	80083ee <HAL_RCC_OscConfig+0x192>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	06d9      	lsls	r1, r3, #27
 8008284:	d537      	bpl.n	80082f6 <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8008286:	69e3      	ldr	r3, [r4, #28]
 8008288:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800828c:	d004      	beq.n	8008298 <HAL_RCC_OscConfig+0x3c>
 800828e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8008292:	489d      	ldr	r0, [pc, #628]	; (8008508 <HAL_RCC_OscConfig+0x2ac>)
 8008294:	f7f9 ff51 	bl	800213a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8008298:	6a23      	ldr	r3, [r4, #32]
 800829a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829e:	d304      	bcc.n	80082aa <HAL_RCC_OscConfig+0x4e>
 80082a0:	f240 1199 	movw	r1, #409	; 0x199
 80082a4:	4898      	ldr	r0, [pc, #608]	; (8008508 <HAL_RCC_OscConfig+0x2ac>)
 80082a6:	f7f9 ff48 	bl	800213a <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082aa:	4b98      	ldr	r3, [pc, #608]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
 80082ac:	691a      	ldr	r2, [r3, #16]
 80082ae:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80082b2:	2a08      	cmp	r2, #8
 80082b4:	d00b      	beq.n	80082ce <HAL_RCC_OscConfig+0x72>
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80082bc:	2a18      	cmp	r2, #24
 80082be:	f040 8102 	bne.w	80084c6 <HAL_RCC_OscConfig+0x26a>
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	f040 80fc 	bne.w	80084c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082ce:	4b8f      	ldr	r3, [pc, #572]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	05d2      	lsls	r2, r2, #23
 80082d4:	d502      	bpl.n	80082dc <HAL_RCC_OscConfig+0x80>
 80082d6:	69e2      	ldr	r2, [r4, #28]
 80082d8:	2a80      	cmp	r2, #128	; 0x80
 80082da:	d149      	bne.n	8008370 <HAL_RCC_OscConfig+0x114>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082dc:	6858      	ldr	r0, [r3, #4]
 80082de:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 80082e2:	fa92 f2a2 	rbit	r2, r2
 80082e6:	fab2 f182 	clz	r1, r2
 80082ea:	6a22      	ldr	r2, [r4, #32]
 80082ec:	408a      	lsls	r2, r1
 80082ee:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 80082f2:	430a      	orrs	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	0719      	lsls	r1, r3, #28
 80082fa:	f100 811c 	bmi.w	8008536 <HAL_RCC_OscConfig+0x2da>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	069a      	lsls	r2, r3, #26
 8008302:	f100 8145 	bmi.w	8008590 <HAL_RCC_OscConfig+0x334>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	075d      	lsls	r5, r3, #29
 800830a:	f100 816e 	bmi.w	80085ea <HAL_RCC_OscConfig+0x38e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800830e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008310:	2b02      	cmp	r3, #2
 8008312:	d904      	bls.n	800831e <HAL_RCC_OscConfig+0xc2>
 8008314:	f240 215f 	movw	r1, #607	; 0x25f
 8008318:	487b      	ldr	r0, [pc, #492]	; (8008508 <HAL_RCC_OscConfig+0x2ac>)
 800831a:	f7f9 ff0e 	bl	800213a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800831e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008320:	2a00      	cmp	r2, #0
 8008322:	f040 81bb 	bne.w	800869c <HAL_RCC_OscConfig+0x440>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8008326:	2000      	movs	r0, #0
 8008328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800832a:	6863      	ldr	r3, [r4, #4]
 800832c:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8008330:	d007      	beq.n	8008342 <HAL_RCC_OscConfig+0xe6>
 8008332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008336:	d004      	beq.n	8008342 <HAL_RCC_OscConfig+0xe6>
 8008338:	f44f 718c 	mov.w	r1, #280	; 0x118
 800833c:	4872      	ldr	r0, [pc, #456]	; (8008508 <HAL_RCC_OscConfig+0x2ac>)
 800833e:	f7f9 fefc 	bl	800213a <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008342:	4b72      	ldr	r3, [pc, #456]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800834a:	2a10      	cmp	r2, #16
 800834c:	d009      	beq.n	8008362 <HAL_RCC_OscConfig+0x106>
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008354:	2a18      	cmp	r2, #24
 8008356:	d10d      	bne.n	8008374 <HAL_RCC_OscConfig+0x118>
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d108      	bne.n	8008374 <HAL_RCC_OscConfig+0x118>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008362:	4b6a      	ldr	r3, [pc, #424]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	039a      	lsls	r2, r3, #14
 8008368:	d586      	bpl.n	8008278 <HAL_RCC_OscConfig+0x1c>
 800836a:	6863      	ldr	r3, [r4, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d183      	bne.n	8008278 <HAL_RCC_OscConfig+0x1c>
      return HAL_ERROR;
 8008370:	2001      	movs	r0, #1
 8008372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008374:	6863      	ldr	r3, [r4, #4]
 8008376:	4d65      	ldr	r5, [pc, #404]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
 8008378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800837c:	d112      	bne.n	80083a4 <HAL_RCC_OscConfig+0x148>
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008384:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008386:	f7fb fae1 	bl	800394c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838a:	4d60      	ldr	r5, [pc, #384]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800838c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	039b      	lsls	r3, r3, #14
 8008392:	f53f af71 	bmi.w	8008278 <HAL_RCC_OscConfig+0x1c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008396:	f7fb fad9 	bl	800394c <HAL_GetTick>
 800839a:	1b80      	subs	r0, r0, r6
 800839c:	2864      	cmp	r0, #100	; 0x64
 800839e:	d9f6      	bls.n	800838e <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 80083a0:	2003      	movs	r0, #3
 80083a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083a4:	b9a3      	cbnz	r3, 80083d0 <HAL_RCC_OscConfig+0x174>
 80083a6:	682b      	ldr	r3, [r5, #0]
 80083a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ac:	602b      	str	r3, [r5, #0]
 80083ae:	682b      	ldr	r3, [r5, #0]
 80083b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80083b6:	f7fb fac9 	bl	800394c <HAL_GetTick>
 80083ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	039f      	lsls	r7, r3, #14
 80083c0:	f57f af5a 	bpl.w	8008278 <HAL_RCC_OscConfig+0x1c>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083c4:	f7fb fac2 	bl	800394c <HAL_GetTick>
 80083c8:	1b80      	subs	r0, r0, r6
 80083ca:	2864      	cmp	r0, #100	; 0x64
 80083cc:	d9f6      	bls.n	80083bc <HAL_RCC_OscConfig+0x160>
 80083ce:	e7e7      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	d103      	bne.n	80083e0 <HAL_RCC_OscConfig+0x184>
 80083d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083dc:	602b      	str	r3, [r5, #0]
 80083de:	e7ce      	b.n	800837e <HAL_RCC_OscConfig+0x122>
 80083e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083ec:	e7ca      	b.n	8008384 <HAL_RCC_OscConfig+0x128>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80083ee:	68e2      	ldr	r2, [r4, #12]
 80083f0:	2a19      	cmp	r2, #25
 80083f2:	d803      	bhi.n	80083fc <HAL_RCC_OscConfig+0x1a0>
 80083f4:	4b46      	ldr	r3, [pc, #280]	; (8008510 <HAL_RCC_OscConfig+0x2b4>)
 80083f6:	40d3      	lsrs	r3, r2
 80083f8:	07de      	lsls	r6, r3, #31
 80083fa:	d404      	bmi.n	8008406 <HAL_RCC_OscConfig+0x1aa>
 80083fc:	f240 1149 	movw	r1, #329	; 0x149
 8008400:	4841      	ldr	r0, [pc, #260]	; (8008508 <HAL_RCC_OscConfig+0x2ac>)
 8008402:	f7f9 fe9a 	bl	800213a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840c:	d304      	bcc.n	8008418 <HAL_RCC_OscConfig+0x1bc>
 800840e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008412:	483d      	ldr	r0, [pc, #244]	; (8008508 <HAL_RCC_OscConfig+0x2ac>)
 8008414:	f7f9 fe91 	bl	800213a <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008418:	4b3c      	ldr	r3, [pc, #240]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
 800841a:	68e1      	ldr	r1, [r4, #12]
 800841c:	691a      	ldr	r2, [r3, #16]
 800841e:	f012 0f38 	tst.w	r2, #56	; 0x38
 8008422:	d007      	beq.n	8008434 <HAL_RCC_OscConfig+0x1d8>
 8008424:	691a      	ldr	r2, [r3, #16]
 8008426:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800842a:	2a18      	cmp	r2, #24
 800842c:	d128      	bne.n	8008480 <HAL_RCC_OscConfig+0x224>
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	079d      	lsls	r5, r3, #30
 8008432:	d125      	bne.n	8008480 <HAL_RCC_OscConfig+0x224>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008434:	4a35      	ldr	r2, [pc, #212]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
 8008436:	6813      	ldr	r3, [r2, #0]
 8008438:	0758      	lsls	r0, r3, #29
 800843a:	d501      	bpl.n	8008440 <HAL_RCC_OscConfig+0x1e4>
 800843c:	2900      	cmp	r1, #0
 800843e:	d097      	beq.n	8008370 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008440:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008442:	4d32      	ldr	r5, [pc, #200]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008444:	f023 0319 	bic.w	r3, r3, #25
 8008448:	430b      	orrs	r3, r1
 800844a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800844c:	f7fb fa7e 	bl	800394c <HAL_GetTick>
 8008450:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008452:	682b      	ldr	r3, [r5, #0]
 8008454:	075b      	lsls	r3, r3, #29
 8008456:	d50d      	bpl.n	8008474 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008458:	6869      	ldr	r1, [r5, #4]
 800845a:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 800845e:	fa93 f3a3 	rbit	r3, r3
 8008462:	fab3 f283 	clz	r2, r3
 8008466:	6923      	ldr	r3, [r4, #16]
 8008468:	4093      	lsls	r3, r2
 800846a:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 800846e:	4313      	orrs	r3, r2
 8008470:	606b      	str	r3, [r5, #4]
 8008472:	e705      	b.n	8008280 <HAL_RCC_OscConfig+0x24>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008474:	f7fb fa6a 	bl	800394c <HAL_GetTick>
 8008478:	1b80      	subs	r0, r0, r6
 800847a:	2802      	cmp	r0, #2
 800847c:	d9e9      	bls.n	8008452 <HAL_RCC_OscConfig+0x1f6>
 800847e:	e78f      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
 8008480:	4d22      	ldr	r5, [pc, #136]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008482:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008484:	b179      	cbz	r1, 80084a6 <HAL_RCC_OscConfig+0x24a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008486:	f023 0319 	bic.w	r3, r3, #25
 800848a:	430b      	orrs	r3, r1
 800848c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800848e:	f7fb fa5d 	bl	800394c <HAL_GetTick>
 8008492:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	075f      	lsls	r7, r3, #29
 8008498:	d4de      	bmi.n	8008458 <HAL_RCC_OscConfig+0x1fc>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800849a:	f7fb fa57 	bl	800394c <HAL_GetTick>
 800849e:	1b80      	subs	r0, r0, r6
 80084a0:	2802      	cmp	r0, #2
 80084a2:	d9f7      	bls.n	8008494 <HAL_RCC_OscConfig+0x238>
 80084a4:	e77c      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 80084a6:	f023 0301 	bic.w	r3, r3, #1
 80084aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80084ac:	f7fb fa4e 	bl	800394c <HAL_GetTick>
 80084b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	0758      	lsls	r0, r3, #29
 80084b6:	f57f aee3 	bpl.w	8008280 <HAL_RCC_OscConfig+0x24>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084ba:	f7fb fa47 	bl	800394c <HAL_GetTick>
 80084be:	1b80      	subs	r0, r0, r6
 80084c0:	2802      	cmp	r0, #2
 80084c2:	d9f6      	bls.n	80084b2 <HAL_RCC_OscConfig+0x256>
 80084c4:	e76c      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80084c6:	69e3      	ldr	r3, [r4, #28]
 80084c8:	4d10      	ldr	r5, [pc, #64]	; (800850c <HAL_RCC_OscConfig+0x2b0>)
 80084ca:	b31b      	cbz	r3, 8008514 <HAL_RCC_OscConfig+0x2b8>
        __HAL_RCC_CSI_ENABLE();
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80084d4:	f7fb fa3a 	bl	800394c <HAL_GetTick>
 80084d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80084da:	682b      	ldr	r3, [r5, #0]
 80084dc:	05df      	lsls	r7, r3, #23
 80084de:	d50d      	bpl.n	80084fc <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084e0:	6869      	ldr	r1, [r5, #4]
 80084e2:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 80084e6:	fa93 f3a3 	rbit	r3, r3
 80084ea:	fab3 f283 	clz	r2, r3
 80084ee:	6a23      	ldr	r3, [r4, #32]
 80084f0:	4093      	lsls	r3, r2
 80084f2:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 80084f6:	4313      	orrs	r3, r2
 80084f8:	606b      	str	r3, [r5, #4]
 80084fa:	e6fc      	b.n	80082f6 <HAL_RCC_OscConfig+0x9a>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80084fc:	f7fb fa26 	bl	800394c <HAL_GetTick>
 8008500:	1b80      	subs	r0, r0, r6
 8008502:	2802      	cmp	r0, #2
 8008504:	d9e9      	bls.n	80084da <HAL_RCC_OscConfig+0x27e>
 8008506:	e74b      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
 8008508:	08013926 	.word	0x08013926
 800850c:	58024400 	.word	0x58024400
 8008510:	02020203 	.word	0x02020203
        __HAL_RCC_CSI_DISABLE();
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800851a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800851c:	f7fb fa16 	bl	800394c <HAL_GetTick>
 8008520:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	05d8      	lsls	r0, r3, #23
 8008526:	f57f aee6 	bpl.w	80082f6 <HAL_RCC_OscConfig+0x9a>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800852a:	f7fb fa0f 	bl	800394c <HAL_GetTick>
 800852e:	1b80      	subs	r0, r0, r6
 8008530:	2802      	cmp	r0, #2
 8008532:	d9f6      	bls.n	8008522 <HAL_RCC_OscConfig+0x2c6>
 8008534:	e734      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008536:	6963      	ldr	r3, [r4, #20]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d904      	bls.n	8008546 <HAL_RCC_OscConfig+0x2ea>
 800853c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8008540:	48ae      	ldr	r0, [pc, #696]	; (80087fc <HAL_RCC_OscConfig+0x5a0>)
 8008542:	f7f9 fdfa 	bl	800213a <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008546:	6963      	ldr	r3, [r4, #20]
 8008548:	4dad      	ldr	r5, [pc, #692]	; (8008800 <HAL_RCC_OscConfig+0x5a4>)
 800854a:	b183      	cbz	r3, 800856e <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800854c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008554:	f7fb f9fa 	bl	800394c <HAL_GetTick>
 8008558:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800855a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800855c:	079b      	lsls	r3, r3, #30
 800855e:	f53f aece 	bmi.w	80082fe <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008562:	f7fb f9f3 	bl	800394c <HAL_GetTick>
 8008566:	1b80      	subs	r0, r0, r6
 8008568:	2802      	cmp	r0, #2
 800856a:	d9f6      	bls.n	800855a <HAL_RCC_OscConfig+0x2fe>
 800856c:	e718      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_LSI_DISABLE();
 800856e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008570:	f023 0301 	bic.w	r3, r3, #1
 8008574:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008576:	f7fb f9e9 	bl	800394c <HAL_GetTick>
 800857a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800857c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800857e:	079f      	lsls	r7, r3, #30
 8008580:	f57f aebd 	bpl.w	80082fe <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008584:	f7fb f9e2 	bl	800394c <HAL_GetTick>
 8008588:	1b80      	subs	r0, r0, r6
 800858a:	2802      	cmp	r0, #2
 800858c:	d9f6      	bls.n	800857c <HAL_RCC_OscConfig+0x320>
 800858e:	e707      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8008590:	69a3      	ldr	r3, [r4, #24]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d904      	bls.n	80085a0 <HAL_RCC_OscConfig+0x344>
 8008596:	f240 2103 	movw	r1, #515	; 0x203
 800859a:	4898      	ldr	r0, [pc, #608]	; (80087fc <HAL_RCC_OscConfig+0x5a0>)
 800859c:	f7f9 fdcd 	bl	800213a <assert_failed>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80085a0:	69a3      	ldr	r3, [r4, #24]
 80085a2:	4d97      	ldr	r5, [pc, #604]	; (8008800 <HAL_RCC_OscConfig+0x5a4>)
 80085a4:	b183      	cbz	r3, 80085c8 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_HSI48_ENABLE();
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085ac:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80085ae:	f7fb f9cd 	bl	800394c <HAL_GetTick>
 80085b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	0498      	lsls	r0, r3, #18
 80085b8:	f53f aea5 	bmi.w	8008306 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80085bc:	f7fb f9c6 	bl	800394c <HAL_GetTick>
 80085c0:	1b80      	subs	r0, r0, r6
 80085c2:	2802      	cmp	r0, #2
 80085c4:	d9f6      	bls.n	80085b4 <HAL_RCC_OscConfig+0x358>
 80085c6:	e6eb      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_HSI48_DISABLE();
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80085d0:	f7fb f9bc 	bl	800394c <HAL_GetTick>
 80085d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80085d6:	682b      	ldr	r3, [r5, #0]
 80085d8:	0499      	lsls	r1, r3, #18
 80085da:	f57f ae94 	bpl.w	8008306 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80085de:	f7fb f9b5 	bl	800394c <HAL_GetTick>
 80085e2:	1b80      	subs	r0, r0, r6
 80085e4:	2802      	cmp	r0, #2
 80085e6:	d9f6      	bls.n	80085d6 <HAL_RCC_OscConfig+0x37a>
 80085e8:	e6da      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d906      	bls.n	80085fe <HAL_RCC_OscConfig+0x3a2>
 80085f0:	2b05      	cmp	r3, #5
 80085f2:	d004      	beq.n	80085fe <HAL_RCC_OscConfig+0x3a2>
 80085f4:	f240 212d 	movw	r1, #557	; 0x22d
 80085f8:	4880      	ldr	r0, [pc, #512]	; (80087fc <HAL_RCC_OscConfig+0x5a0>)
 80085fa:	f7f9 fd9e 	bl	800213a <assert_failed>
    PWR->CR1 |= PWR_CR1_DBP;
 80085fe:	4d81      	ldr	r5, [pc, #516]	; (8008804 <HAL_RCC_OscConfig+0x5a8>)
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008606:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8008608:	f7fb f9a0 	bl	800394c <HAL_GetTick>
 800860c:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800860e:	682b      	ldr	r3, [r5, #0]
 8008610:	05da      	lsls	r2, r3, #23
 8008612:	d517      	bpl.n	8008644 <HAL_RCC_OscConfig+0x3e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008614:	68a3      	ldr	r3, [r4, #8]
 8008616:	4d7a      	ldr	r5, [pc, #488]	; (8008800 <HAL_RCC_OscConfig+0x5a4>)
 8008618:	2b01      	cmp	r3, #1
 800861a:	d119      	bne.n	8008650 <HAL_RCC_OscConfig+0x3f4>
 800861c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800861e:	f043 0301 	orr.w	r3, r3, #1
 8008622:	672b      	str	r3, [r5, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008624:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008628:	f7fb f990 	bl	800394c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800862c:	4e74      	ldr	r6, [pc, #464]	; (8008800 <HAL_RCC_OscConfig+0x5a4>)
      tickstart = HAL_GetTick();
 800862e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008630:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008632:	079b      	lsls	r3, r3, #30
 8008634:	f53f ae6b 	bmi.w	800830e <HAL_RCC_OscConfig+0xb2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008638:	f7fb f988 	bl	800394c <HAL_GetTick>
 800863c:	1bc0      	subs	r0, r0, r7
 800863e:	42a8      	cmp	r0, r5
 8008640:	d9f6      	bls.n	8008630 <HAL_RCC_OscConfig+0x3d4>
 8008642:	e6ad      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008644:	f7fb f982 	bl	800394c <HAL_GetTick>
 8008648:	1b80      	subs	r0, r0, r6
 800864a:	2864      	cmp	r0, #100	; 0x64
 800864c:	d9df      	bls.n	800860e <HAL_RCC_OscConfig+0x3b2>
 800864e:	e6a7      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008650:	b9b3      	cbnz	r3, 8008680 <HAL_RCC_OscConfig+0x424>
 8008652:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008654:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008658:	f023 0301 	bic.w	r3, r3, #1
 800865c:	672b      	str	r3, [r5, #112]	; 0x70
 800865e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008660:	f023 0304 	bic.w	r3, r3, #4
 8008664:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008666:	f7fb f971 	bl	800394c <HAL_GetTick>
 800866a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800866c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800866e:	0798      	lsls	r0, r3, #30
 8008670:	f57f ae4d 	bpl.w	800830e <HAL_RCC_OscConfig+0xb2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008674:	f7fb f96a 	bl	800394c <HAL_GetTick>
 8008678:	1b80      	subs	r0, r0, r6
 800867a:	42b8      	cmp	r0, r7
 800867c:	d9f6      	bls.n	800866c <HAL_RCC_OscConfig+0x410>
 800867e:	e68f      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008680:	2b05      	cmp	r3, #5
 8008682:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008684:	d103      	bne.n	800868e <HAL_RCC_OscConfig+0x432>
 8008686:	f043 0304 	orr.w	r3, r3, #4
 800868a:	672b      	str	r3, [r5, #112]	; 0x70
 800868c:	e7c6      	b.n	800861c <HAL_RCC_OscConfig+0x3c0>
 800868e:	f023 0301 	bic.w	r3, r3, #1
 8008692:	672b      	str	r3, [r5, #112]	; 0x70
 8008694:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008696:	f023 0304 	bic.w	r3, r3, #4
 800869a:	e7c2      	b.n	8008622 <HAL_RCC_OscConfig+0x3c6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800869c:	4d58      	ldr	r5, [pc, #352]	; (8008800 <HAL_RCC_OscConfig+0x5a4>)
 800869e:	692b      	ldr	r3, [r5, #16]
 80086a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086a4:	2b18      	cmp	r3, #24
 80086a6:	f43f ae63 	beq.w	8008370 <HAL_RCC_OscConfig+0x114>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086aa:	2a02      	cmp	r2, #2
 80086ac:	f040 80ac 	bne.w	8008808 <HAL_RCC_OscConfig+0x5ac>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80086b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d904      	bls.n	80086c0 <HAL_RCC_OscConfig+0x464>
 80086b6:	f44f 711a 	mov.w	r1, #616	; 0x268
 80086ba:	4850      	ldr	r0, [pc, #320]	; (80087fc <HAL_RCC_OscConfig+0x5a0>)
 80086bc:	f7f9 fd3d 	bl	800213a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80086c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80086c2:	3b01      	subs	r3, #1
 80086c4:	2b3e      	cmp	r3, #62	; 0x3e
 80086c6:	d904      	bls.n	80086d2 <HAL_RCC_OscConfig+0x476>
 80086c8:	f240 2169 	movw	r1, #617	; 0x269
 80086cc:	484b      	ldr	r0, [pc, #300]	; (80087fc <HAL_RCC_OscConfig+0x5a0>)
 80086ce:	f7f9 fd34 	bl	800213a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80086d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086d4:	3b04      	subs	r3, #4
 80086d6:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80086da:	d904      	bls.n	80086e6 <HAL_RCC_OscConfig+0x48a>
 80086dc:	f240 216a 	movw	r1, #618	; 0x26a
 80086e0:	4846      	ldr	r0, [pc, #280]	; (80087fc <HAL_RCC_OscConfig+0x5a0>)
 80086e2:	f7f9 fd2a 	bl	800213a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80086e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086e8:	3b01      	subs	r3, #1
 80086ea:	2b7f      	cmp	r3, #127	; 0x7f
 80086ec:	d904      	bls.n	80086f8 <HAL_RCC_OscConfig+0x49c>
 80086ee:	f240 216b 	movw	r1, #619	; 0x26b
 80086f2:	4842      	ldr	r0, [pc, #264]	; (80087fc <HAL_RCC_OscConfig+0x5a0>)
 80086f4:	f7f9 fd21 	bl	800213a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80086f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086fa:	3b01      	subs	r3, #1
 80086fc:	2b7f      	cmp	r3, #127	; 0x7f
 80086fe:	d904      	bls.n	800870a <HAL_RCC_OscConfig+0x4ae>
 8008700:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8008704:	483d      	ldr	r0, [pc, #244]	; (80087fc <HAL_RCC_OscConfig+0x5a0>)
 8008706:	f7f9 fd18 	bl	800213a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800870a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800870c:	3b01      	subs	r3, #1
 800870e:	2b7f      	cmp	r3, #127	; 0x7f
 8008710:	d904      	bls.n	800871c <HAL_RCC_OscConfig+0x4c0>
 8008712:	f240 216d 	movw	r1, #621	; 0x26d
 8008716:	4839      	ldr	r0, [pc, #228]	; (80087fc <HAL_RCC_OscConfig+0x5a0>)
 8008718:	f7f9 fd0f 	bl	800213a <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 800871c:	4d38      	ldr	r5, [pc, #224]	; (8008800 <HAL_RCC_OscConfig+0x5a4>)
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008724:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008726:	f7fb f911 	bl	800394c <HAL_GetTick>
 800872a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	0199      	lsls	r1, r3, #6
 8008730:	d45d      	bmi.n	80087ee <HAL_RCC_OscConfig+0x592>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008732:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008734:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008736:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	4313      	orrs	r3, r2
 8008740:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008742:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008746:	62ab      	str	r3, [r5, #40]	; 0x28
 8008748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800874a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800874c:	3b01      	subs	r3, #1
 800874e:	3a01      	subs	r2, #1
 8008750:	025b      	lsls	r3, r3, #9
 8008752:	0412      	lsls	r2, r2, #16
 8008754:	b29b      	uxth	r3, r3
 8008756:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800875a:	4313      	orrs	r3, r2
 800875c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800875e:	3a01      	subs	r2, #1
 8008760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008764:	4313      	orrs	r3, r2
 8008766:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008768:	3a01      	subs	r2, #1
 800876a:	0612      	lsls	r2, r2, #24
 800876c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008770:	4313      	orrs	r3, r2
 8008772:	632b      	str	r3, [r5, #48]	; 0x30
 8008774:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008778:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800877a:	fa93 f3a3 	rbit	r3, r3
 800877e:	fab3 f183 	clz	r1, r3
 8008782:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008786:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008788:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800878c:	408b      	lsls	r3, r1
 800878e:	4313      	orrs	r3, r2
 8008790:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008792:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008794:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008796:	f023 030c 	bic.w	r3, r3, #12
 800879a:	4313      	orrs	r3, r2
 800879c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800879e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80087a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80087a2:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087a6:	4c16      	ldr	r4, [pc, #88]	; (8008800 <HAL_RCC_OscConfig+0x5a4>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80087a8:	4313      	orrs	r3, r2
 80087aa:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80087ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80087ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087b2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80087b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ba:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80087bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80087be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087c2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80087c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80087c6:	f043 0301 	orr.w	r3, r3, #1
 80087ca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80087d4:	f7fb f8ba 	bl	800394c <HAL_GetTick>
 80087d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	019a      	lsls	r2, r3, #6
 80087de:	f53f ada2 	bmi.w	8008326 <HAL_RCC_OscConfig+0xca>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087e2:	f7fb f8b3 	bl	800394c <HAL_GetTick>
 80087e6:	1b40      	subs	r0, r0, r5
 80087e8:	2802      	cmp	r0, #2
 80087ea:	d9f6      	bls.n	80087da <HAL_RCC_OscConfig+0x57e>
 80087ec:	e5d8      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087ee:	f7fb f8ad 	bl	800394c <HAL_GetTick>
 80087f2:	1b80      	subs	r0, r0, r6
 80087f4:	2802      	cmp	r0, #2
 80087f6:	d999      	bls.n	800872c <HAL_RCC_OscConfig+0x4d0>
 80087f8:	e5d2      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
 80087fa:	bf00      	nop
 80087fc:	08013926 	.word	0x08013926
 8008800:	58024400 	.word	0x58024400
 8008804:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800880e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008810:	f7fb f89c 	bl	800394c <HAL_GetTick>
 8008814:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	019b      	lsls	r3, r3, #6
 800881a:	f57f ad84 	bpl.w	8008326 <HAL_RCC_OscConfig+0xca>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800881e:	f7fb f895 	bl	800394c <HAL_GetTick>
 8008822:	1b00      	subs	r0, r0, r4
 8008824:	2802      	cmp	r0, #2
 8008826:	d9f6      	bls.n	8008816 <HAL_RCC_OscConfig+0x5ba>
 8008828:	e5ba      	b.n	80083a0 <HAL_RCC_OscConfig+0x144>
 800882a:	bf00      	nop

0800882c <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800882c:	4b48      	ldr	r3, [pc, #288]	; (8008950 <HAL_RCC_GetSysClockFreq+0x124>)
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008834:	2a10      	cmp	r2, #16
{
 8008836:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008838:	d00e      	beq.n	8008858 <HAL_RCC_GetSysClockFreq+0x2c>
 800883a:	2a18      	cmp	r2, #24
 800883c:	d00e      	beq.n	800885c <HAL_RCC_GetSysClockFreq+0x30>
 800883e:	2a00      	cmp	r2, #0
 8008840:	f040 8084 	bne.w	800894c <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	4843      	ldr	r0, [pc, #268]	; (8008954 <HAL_RCC_GetSysClockFreq+0x128>)
 8008848:	f012 0f20 	tst.w	r2, #32
 800884c:	d07f      	beq.n	800894e <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008854:	40d8      	lsrs	r0, r3
 8008856:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008858:	483f      	ldr	r0, [pc, #252]	; (8008958 <HAL_RCC_GetSysClockFreq+0x12c>)
 800885a:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800885c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800885e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008864:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008868:	f001 0101 	and.w	r1, r1, #1
 800886c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800895c <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008870:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8008874:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008876:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800887a:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 800887e:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008880:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008884:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 8008888:	d002      	beq.n	8008890 <HAL_RCC_GetSysClockFreq+0x64>
 800888a:	d30e      	bcc.n	80088aa <HAL_RCC_GetSysClockFreq+0x7e>
 800888c:	2a02      	cmp	r2, #2
 800888e:	d04c      	beq.n	800892a <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	4a33      	ldr	r2, [pc, #204]	; (8008960 <HAL_RCC_GetSysClockFreq+0x134>)
 8008894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008898:	ee07 3a10 	vmov	s14, r3
 800889c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80088a0:	eea6 7a25 	vfma.f32	s14, s12, s11
 80088a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088a8:	e04b      	b.n	8008942 <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	f012 0f20 	tst.w	r2, #32
 80088b0:	4a28      	ldr	r2, [pc, #160]	; (8008954 <HAL_RCC_GetSysClockFreq+0x128>)
 80088b2:	d026      	beq.n	8008902 <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088b4:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80088b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088b8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80088bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088c0:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80088c2:	fbb2 f2f0 	udiv	r2, r2, r0
 80088c6:	ee07 2a10 	vmov	s14, r2
 80088ca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80088ce:	ee07 3a10 	vmov	s14, r3
 80088d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80088d6:	eea6 7a25 	vfma.f32	s14, s12, s11
 80088da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088de:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 80088e2:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <HAL_RCC_GetSysClockFreq+0x124>)
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80088ea:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 80088ec:	ee07 3a10 	vmov	s14, r3
 80088f0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80088f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80088f8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80088fc:	ee17 0a90 	vmov	r0, s15
 8008900:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8008902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008908:	ee07 3a10 	vmov	s14, r3
 800890c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008910:	fbb2 f3f0 	udiv	r3, r2, r0
 8008914:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800891c:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8008920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008928:	e7db      	b.n	80088e2 <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800892a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892c:	4a0a      	ldr	r2, [pc, #40]	; (8008958 <HAL_RCC_GetSysClockFreq+0x12c>)
 800892e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008932:	ee07 3a10 	vmov	s14, r3
 8008936:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800893a:	eea6 7a25 	vfma.f32	s14, s12, s11
 800893e:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8008942:	fbb2 f2f0 	udiv	r2, r2, r0
 8008946:	ee07 2a90 	vmov	s15, r2
 800894a:	e7e9      	b.n	8008920 <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 800894c:	4804      	ldr	r0, [pc, #16]	; (8008960 <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800894e:	bd10      	pop	{r4, pc}
 8008950:	58024400 	.word	0x58024400
 8008954:	03d09000 	.word	0x03d09000
 8008958:	017d7840 	.word	0x017d7840
 800895c:	39000000 	.word	0x39000000
 8008960:	003d0900 	.word	0x003d0900

08008964 <HAL_RCC_ClockConfig>:
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008964:	6803      	ldr	r3, [r0, #0]
 8008966:	3b01      	subs	r3, #1
 8008968:	2b3e      	cmp	r3, #62	; 0x3e
{
 800896a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896e:	4604      	mov	r4, r0
 8008970:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008972:	d904      	bls.n	800897e <HAL_RCC_ClockConfig+0x1a>
 8008974:	f240 21e3 	movw	r1, #739	; 0x2e3
 8008978:	48a5      	ldr	r0, [pc, #660]	; (8008c10 <HAL_RCC_ClockConfig+0x2ac>)
 800897a:	f7f9 fbde 	bl	800213a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800897e:	2d07      	cmp	r5, #7
 8008980:	d904      	bls.n	800898c <HAL_RCC_ClockConfig+0x28>
 8008982:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 8008986:	48a2      	ldr	r0, [pc, #648]	; (8008c10 <HAL_RCC_ClockConfig+0x2ac>)
 8008988:	f7f9 fbd7 	bl	800213a <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800898c:	4aa1      	ldr	r2, [pc, #644]	; (8008c14 <HAL_RCC_ClockConfig+0x2b0>)
 800898e:	6813      	ldr	r3, [r2, #0]
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	429d      	cmp	r5, r3
 8008996:	d877      	bhi.n	8008a88 <HAL_RCC_ClockConfig+0x124>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	079f      	lsls	r7, r3, #30
 800899c:	f100 8082 	bmi.w	8008aa4 <HAL_RCC_ClockConfig+0x140>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	07de      	lsls	r6, r3, #31
 80089a4:	f100 8090 	bmi.w	8008ac8 <HAL_RCC_ClockConfig+0x164>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80089a8:	4a9a      	ldr	r2, [pc, #616]	; (8008c14 <HAL_RCC_ClockConfig+0x2b0>)
 80089aa:	6813      	ldr	r3, [r2, #0]
 80089ac:	f003 0307 	and.w	r3, r3, #7
 80089b0:	429d      	cmp	r5, r3
 80089b2:	f0c0 8109 	bcc.w	8008bc8 <HAL_RCC_ClockConfig+0x264>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	0758      	lsls	r0, r3, #29
 80089ba:	f100 8111 	bmi.w	8008be0 <HAL_RCC_ClockConfig+0x27c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	0719      	lsls	r1, r3, #28
 80089c2:	d515      	bpl.n	80089f0 <HAL_RCC_ClockConfig+0x8c>
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80089c4:	6963      	ldr	r3, [r4, #20]
 80089c6:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80089ca:	d00a      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x7e>
 80089cc:	f023 0220 	bic.w	r2, r3, #32
 80089d0:	2a50      	cmp	r2, #80	; 0x50
 80089d2:	d006      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x7e>
 80089d4:	2b60      	cmp	r3, #96	; 0x60
 80089d6:	d004      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x7e>
 80089d8:	f44f 715c 	mov.w	r1, #880	; 0x370
 80089dc:	488c      	ldr	r0, [pc, #560]	; (8008c10 <HAL_RCC_ClockConfig+0x2ac>)
 80089de:	f7f9 fbac 	bl	800213a <assert_failed>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089e2:	4a8d      	ldr	r2, [pc, #564]	; (8008c18 <HAL_RCC_ClockConfig+0x2b4>)
 80089e4:	6961      	ldr	r1, [r4, #20]
 80089e6:	69d3      	ldr	r3, [r2, #28]
 80089e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ec:	430b      	orrs	r3, r1
 80089ee:	61d3      	str	r3, [r2, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	06da      	lsls	r2, r3, #27
 80089f4:	d517      	bpl.n	8008a26 <HAL_RCC_ClockConfig+0xc2>
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80089f6:	69a3      	ldr	r3, [r4, #24]
 80089f8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80089fc:	d00c      	beq.n	8008a18 <HAL_RCC_ClockConfig+0xb4>
 80089fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a02:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8008a06:	d007      	beq.n	8008a18 <HAL_RCC_ClockConfig+0xb4>
 8008a08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008a0c:	d004      	beq.n	8008a18 <HAL_RCC_ClockConfig+0xb4>
 8008a0e:	f240 3177 	movw	r1, #887	; 0x377
 8008a12:	487f      	ldr	r0, [pc, #508]	; (8008c10 <HAL_RCC_ClockConfig+0x2ac>)
 8008a14:	f7f9 fb91 	bl	800213a <assert_failed>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a18:	4a7f      	ldr	r2, [pc, #508]	; (8008c18 <HAL_RCC_ClockConfig+0x2b4>)
 8008a1a:	69a1      	ldr	r1, [r4, #24]
 8008a1c:	69d3      	ldr	r3, [r2, #28]
 8008a1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008a22:	430b      	orrs	r3, r1
 8008a24:	61d3      	str	r3, [r2, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	069b      	lsls	r3, r3, #26
 8008a2a:	d515      	bpl.n	8008a58 <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8008a2c:	69e3      	ldr	r3, [r4, #28]
 8008a2e:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8008a32:	d00a      	beq.n	8008a4a <HAL_RCC_ClockConfig+0xe6>
 8008a34:	f023 0220 	bic.w	r2, r3, #32
 8008a38:	2a50      	cmp	r2, #80	; 0x50
 8008a3a:	d006      	beq.n	8008a4a <HAL_RCC_ClockConfig+0xe6>
 8008a3c:	2b60      	cmp	r3, #96	; 0x60
 8008a3e:	d004      	beq.n	8008a4a <HAL_RCC_ClockConfig+0xe6>
 8008a40:	f240 317f 	movw	r1, #895	; 0x37f
 8008a44:	4872      	ldr	r0, [pc, #456]	; (8008c10 <HAL_RCC_ClockConfig+0x2ac>)
 8008a46:	f7f9 fb78 	bl	800213a <assert_failed>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008a4a:	4a73      	ldr	r2, [pc, #460]	; (8008c18 <HAL_RCC_ClockConfig+0x2b4>)
 8008a4c:	69e1      	ldr	r1, [r4, #28]
 8008a4e:	6a13      	ldr	r3, [r2, #32]
 8008a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a54:	430b      	orrs	r3, r1
 8008a56:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8008a58:	f7ff fee8 	bl	800882c <HAL_RCC_GetSysClockFreq>
 8008a5c:	4b6e      	ldr	r3, [pc, #440]	; (8008c18 <HAL_RCC_ClockConfig+0x2b4>)
 8008a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	fa92 f2a2 	rbit	r2, r2
 8008a68:	fab2 f282 	clz	r2, r2
 8008a6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a70:	40d3      	lsrs	r3, r2
 8008a72:	4a6a      	ldr	r2, [pc, #424]	; (8008c1c <HAL_RCC_ClockConfig+0x2b8>)
 8008a74:	5cd3      	ldrb	r3, [r2, r3]
 8008a76:	40d8      	lsrs	r0, r3
 8008a78:	4b69      	ldr	r3, [pc, #420]	; (8008c20 <HAL_RCC_ClockConfig+0x2bc>)
 8008a7a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	f7fa ff25 	bl	80038cc <HAL_InitTick>
  return HAL_OK;
 8008a82:	2000      	movs	r0, #0
}
 8008a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a88:	6813      	ldr	r3, [r2, #0]
 8008a8a:	f023 0307 	bic.w	r3, r3, #7
 8008a8e:	432b      	orrs	r3, r5
 8008a90:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a92:	6813      	ldr	r3, [r2, #0]
 8008a94:	f003 0307 	and.w	r3, r3, #7
 8008a98:	429d      	cmp	r5, r3
 8008a9a:	f43f af7d 	beq.w	8008998 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008aa4:	68e3      	ldr	r3, [r4, #12]
 8008aa6:	b13b      	cbz	r3, 8008ab8 <HAL_RCC_ClockConfig+0x154>
 8008aa8:	3b08      	subs	r3, #8
 8008aaa:	2b07      	cmp	r3, #7
 8008aac:	d904      	bls.n	8008ab8 <HAL_RCC_ClockConfig+0x154>
 8008aae:	f240 21fb 	movw	r1, #763	; 0x2fb
 8008ab2:	4857      	ldr	r0, [pc, #348]	; (8008c10 <HAL_RCC_ClockConfig+0x2ac>)
 8008ab4:	f7f9 fb41 	bl	800213a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ab8:	4a57      	ldr	r2, [pc, #348]	; (8008c18 <HAL_RCC_ClockConfig+0x2b4>)
 8008aba:	68e1      	ldr	r1, [r4, #12]
 8008abc:	6993      	ldr	r3, [r2, #24]
 8008abe:	f023 030f 	bic.w	r3, r3, #15
 8008ac2:	430b      	orrs	r3, r1
 8008ac4:	6193      	str	r3, [r2, #24]
 8008ac6:	e76b      	b.n	80089a0 <HAL_RCC_ClockConfig+0x3c>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8008ac8:	68a3      	ldr	r3, [r4, #8]
 8008aca:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8008ace:	d016      	beq.n	8008afe <HAL_RCC_ClockConfig+0x19a>
 8008ad0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ad4:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8008ad8:	d011      	beq.n	8008afe <HAL_RCC_ClockConfig+0x19a>
 8008ada:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ade:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8008ae2:	d00c      	beq.n	8008afe <HAL_RCC_ClockConfig+0x19a>
 8008ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ae8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008aec:	d007      	beq.n	8008afe <HAL_RCC_ClockConfig+0x19a>
 8008aee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008af2:	d004      	beq.n	8008afe <HAL_RCC_ClockConfig+0x19a>
 8008af4:	f240 3102 	movw	r1, #770	; 0x302
 8008af8:	4845      	ldr	r0, [pc, #276]	; (8008c10 <HAL_RCC_ClockConfig+0x2ac>)
 8008afa:	f7f9 fb1e 	bl	800213a <assert_failed>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008afe:	6863      	ldr	r3, [r4, #4]
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d904      	bls.n	8008b0e <HAL_RCC_ClockConfig+0x1aa>
 8008b04:	f240 3103 	movw	r1, #771	; 0x303
 8008b08:	4841      	ldr	r0, [pc, #260]	; (8008c10 <HAL_RCC_ClockConfig+0x2ac>)
 8008b0a:	f7f9 fb16 	bl	800213a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b0e:	4b42      	ldr	r3, [pc, #264]	; (8008c18 <HAL_RCC_ClockConfig+0x2b4>)
 8008b10:	68a1      	ldr	r1, [r4, #8]
 8008b12:	699a      	ldr	r2, [r3, #24]
 8008b14:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b1c:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b1e:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b20:	2902      	cmp	r1, #2
 8008b22:	d11e      	bne.n	8008b62 <HAL_RCC_ClockConfig+0x1fe>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b24:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b28:	d0b9      	beq.n	8008a9e <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b2a:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b2c:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8008b30:	4f39      	ldr	r7, [pc, #228]	; (8008c18 <HAL_RCC_ClockConfig+0x2b4>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b32:	f022 0207 	bic.w	r2, r2, #7
 8008b36:	430a      	orrs	r2, r1
 8008b38:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8008b3a:	f7fa ff07 	bl	800394c <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b3e:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8008b40:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d11a      	bne.n	8008b7c <HAL_RCC_ClockConfig+0x218>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b4c:	2b10      	cmp	r3, #16
 8008b4e:	f43f af2b 	beq.w	80089a8 <HAL_RCC_ClockConfig+0x44>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b52:	f7fa fefb 	bl	800394c <HAL_GetTick>
 8008b56:	1b80      	subs	r0, r0, r6
 8008b58:	4540      	cmp	r0, r8
 8008b5a:	d9f4      	bls.n	8008b46 <HAL_RCC_ClockConfig+0x1e2>
            return HAL_TIMEOUT;
 8008b5c:	2003      	movs	r0, #3
 8008b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b62:	2903      	cmp	r1, #3
 8008b64:	d102      	bne.n	8008b6c <HAL_RCC_ClockConfig+0x208>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b66:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008b6a:	e7dd      	b.n	8008b28 <HAL_RCC_ClockConfig+0x1c4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b6c:	2901      	cmp	r1, #1
 8008b6e:	d102      	bne.n	8008b76 <HAL_RCC_ClockConfig+0x212>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8008b70:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008b74:	e7d8      	b.n	8008b28 <HAL_RCC_ClockConfig+0x1c4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b76:	f012 0f04 	tst.w	r2, #4
 8008b7a:	e7d5      	b.n	8008b28 <HAL_RCC_ClockConfig+0x1c4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d10b      	bne.n	8008b98 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b86:	2b18      	cmp	r3, #24
 8008b88:	f43f af0e 	beq.w	80089a8 <HAL_RCC_ClockConfig+0x44>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b8c:	f7fa fede 	bl	800394c <HAL_GetTick>
 8008b90:	1b80      	subs	r0, r0, r6
 8008b92:	4540      	cmp	r0, r8
 8008b94:	d9f4      	bls.n	8008b80 <HAL_RCC_ClockConfig+0x21c>
 8008b96:	e7e1      	b.n	8008b5c <HAL_RCC_ClockConfig+0x1f8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d110      	bne.n	8008bbe <HAL_RCC_ClockConfig+0x25a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	f43f af00 	beq.w	80089a8 <HAL_RCC_ClockConfig+0x44>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ba8:	f7fa fed0 	bl	800394c <HAL_GetTick>
 8008bac:	1b80      	subs	r0, r0, r6
 8008bae:	4540      	cmp	r0, r8
 8008bb0:	d9f4      	bls.n	8008b9c <HAL_RCC_ClockConfig+0x238>
 8008bb2:	e7d3      	b.n	8008b5c <HAL_RCC_ClockConfig+0x1f8>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bb4:	f7fa feca 	bl	800394c <HAL_GetTick>
 8008bb8:	1b80      	subs	r0, r0, r6
 8008bba:	4540      	cmp	r0, r8
 8008bbc:	d8ce      	bhi.n	8008b5c <HAL_RCC_ClockConfig+0x1f8>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f013 0f38 	tst.w	r3, #56	; 0x38
 8008bc4:	d1f6      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x250>
 8008bc6:	e6ef      	b.n	80089a8 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bc8:	6813      	ldr	r3, [r2, #0]
 8008bca:	f023 0307 	bic.w	r3, r3, #7
 8008bce:	432b      	orrs	r3, r5
 8008bd0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008bd2:	6813      	ldr	r3, [r2, #0]
 8008bd4:	f003 0307 	and.w	r3, r3, #7
 8008bd8:	429d      	cmp	r5, r3
 8008bda:	f47f af60 	bne.w	8008a9e <HAL_RCC_ClockConfig+0x13a>
 8008bde:	e6ea      	b.n	80089b6 <HAL_RCC_ClockConfig+0x52>
    assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8008be6:	d00a      	beq.n	8008bfe <HAL_RCC_ClockConfig+0x29a>
 8008be8:	f023 0220 	bic.w	r2, r3, #32
 8008bec:	2a50      	cmp	r2, #80	; 0x50
 8008bee:	d006      	beq.n	8008bfe <HAL_RCC_ClockConfig+0x29a>
 8008bf0:	2b60      	cmp	r3, #96	; 0x60
 8008bf2:	d004      	beq.n	8008bfe <HAL_RCC_ClockConfig+0x29a>
 8008bf4:	f240 3169 	movw	r1, #873	; 0x369
 8008bf8:	4805      	ldr	r0, [pc, #20]	; (8008c10 <HAL_RCC_ClockConfig+0x2ac>)
 8008bfa:	f7f9 fa9e 	bl	800213a <assert_failed>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bfe:	4a06      	ldr	r2, [pc, #24]	; (8008c18 <HAL_RCC_ClockConfig+0x2b4>)
 8008c00:	6921      	ldr	r1, [r4, #16]
 8008c02:	6993      	ldr	r3, [r2, #24]
 8008c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	6193      	str	r3, [r2, #24]
 8008c0c:	e6d7      	b.n	80089be <HAL_RCC_ClockConfig+0x5a>
 8008c0e:	bf00      	nop
 8008c10:	08013926 	.word	0x08013926
 8008c14:	52002000 	.word	0x52002000
 8008c18:	58024400 	.word	0x58024400
 8008c1c:	080135c4 	.word	0x080135c4
 8008c20:	24000018 	.word	0x24000018

08008c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c24:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8008c26:	f000 fff9 	bl	8009c1c <HAL_RCCEx_GetD1SysClockFreq>
 8008c2a:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <HAL_RCC_GetHCLKFreq+0x28>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	fa92 f2a2 	rbit	r2, r2
 8008c34:	fab2 f282 	clz	r2, r2
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	40d3      	lsrs	r3, r2
 8008c3e:	4a04      	ldr	r2, [pc, #16]	; (8008c50 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008c40:	5cd3      	ldrb	r3, [r2, r3]
 8008c42:	40d8      	lsrs	r0, r3
 8008c44:	4b03      	ldr	r3, [pc, #12]	; (8008c54 <HAL_RCC_GetHCLKFreq+0x30>)
 8008c46:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8008c48:	bd08      	pop	{r3, pc}
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	080135c4 	.word	0x080135c4
 8008c54:	2400001c 	.word	0x2400001c

08008c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8008c5a:	f7ff ffe3 	bl	8008c24 <HAL_RCC_GetHCLKFreq>
 8008c5e:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c60:	2210      	movs	r2, #16
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	fa92 f2a2 	rbit	r2, r2
 8008c68:	fab2 f282 	clz	r2, r2
 8008c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c70:	40d3      	lsrs	r3, r2
 8008c72:	4a03      	ldr	r2, [pc, #12]	; (8008c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c74:	5cd3      	ldrb	r3, [r2, r3]
}
 8008c76:	40d8      	lsrs	r0, r3
 8008c78:	bd08      	pop	{r3, pc}
 8008c7a:	bf00      	nop
 8008c7c:	58024400 	.word	0x58024400
 8008c80:	080135c4 	.word	0x080135c4

08008c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c84:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8008c86:	f7ff ffcd 	bl	8008c24 <HAL_RCC_GetHCLKFreq>
 8008c8a:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	fa92 f2a2 	rbit	r2, r2
 8008c96:	fab2 f282 	clz	r2, r2
 8008c9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c9e:	40d3      	lsrs	r3, r2
 8008ca0:	4a02      	ldr	r2, [pc, #8]	; (8008cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ca2:	5cd3      	ldrb	r3, [r2, r3]
}
 8008ca4:	40d8      	lsrs	r0, r3
 8008ca6:	bd08      	pop	{r3, pc}
 8008ca8:	58024400 	.word	0x58024400
 8008cac:	080135c4 	.word	0x080135c4

08008cb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8008cb2:	6803      	ldr	r3, [r0, #0]
{
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	2b3e      	cmp	r3, #62	; 0x3e
 8008cbc:	d904      	bls.n	8008cc8 <RCCEx_PLL2_Config+0x18>
 8008cbe:	f44f 611a 	mov.w	r1, #2464	; 0x9a0
 8008cc2:	4844      	ldr	r0, [pc, #272]	; (8008dd4 <RCCEx_PLL2_Config+0x124>)
 8008cc4:	f7f9 fa39 	bl	800213a <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8008cc8:	6873      	ldr	r3, [r6, #4]
 8008cca:	3b04      	subs	r3, #4
 8008ccc:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8008cd0:	d904      	bls.n	8008cdc <RCCEx_PLL2_Config+0x2c>
 8008cd2:	f640 11a1 	movw	r1, #2465	; 0x9a1
 8008cd6:	483f      	ldr	r0, [pc, #252]	; (8008dd4 <RCCEx_PLL2_Config+0x124>)
 8008cd8:	f7f9 fa2f 	bl	800213a <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8008cdc:	68b3      	ldr	r3, [r6, #8]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8008ce2:	d904      	bls.n	8008cee <RCCEx_PLL2_Config+0x3e>
 8008ce4:	f640 11a2 	movw	r1, #2466	; 0x9a2
 8008ce8:	483a      	ldr	r0, [pc, #232]	; (8008dd4 <RCCEx_PLL2_Config+0x124>)
 8008cea:	f7f9 fa26 	bl	800213a <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8008cee:	6933      	ldr	r3, [r6, #16]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8008cf4:	d904      	bls.n	8008d00 <RCCEx_PLL2_Config+0x50>
 8008cf6:	f640 11a3 	movw	r1, #2467	; 0x9a3
 8008cfa:	4836      	ldr	r0, [pc, #216]	; (8008dd4 <RCCEx_PLL2_Config+0x124>)
 8008cfc:	f7f9 fa1d 	bl	800213a <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8008d00:	68f3      	ldr	r3, [r6, #12]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	2b7f      	cmp	r3, #127	; 0x7f
 8008d06:	d904      	bls.n	8008d12 <RCCEx_PLL2_Config+0x62>
 8008d08:	f640 11a4 	movw	r1, #2468	; 0x9a4
 8008d0c:	4831      	ldr	r0, [pc, #196]	; (8008dd4 <RCCEx_PLL2_Config+0x124>)
 8008d0e:	f7f9 fa14 	bl	800213a <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d12:	4c31      	ldr	r4, [pc, #196]	; (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d058      	beq.n	8008dd0 <RCCEx_PLL2_Config+0x120>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d24:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d26:	f7fa fe11 	bl	800394c <HAL_GetTick>
 8008d2a:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	011a      	lsls	r2, r3, #4
 8008d30:	d43a      	bmi.n	8008da8 <RCCEx_PLL2_Config+0xf8>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d34:	6832      	ldr	r2, [r6, #0]
 8008d36:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008d3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d40:	68b3      	ldr	r3, [r6, #8]
 8008d42:	68f2      	ldr	r2, [r6, #12]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	3a01      	subs	r2, #1
 8008d48:	025b      	lsls	r3, r3, #9
 8008d4a:	0412      	lsls	r2, r2, #16
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008d52:	4313      	orrs	r3, r2
 8008d54:	6872      	ldr	r2, [r6, #4]
 8008d56:	3a01      	subs	r2, #1
 8008d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	6932      	ldr	r2, [r6, #16]
 8008d60:	3a01      	subs	r2, #1
 8008d62:	0612      	lsls	r2, r2, #24
 8008d64:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d6e:	6972      	ldr	r2, [r6, #20]
 8008d70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d74:	4313      	orrs	r3, r2
 8008d76:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d7a:	69b2      	ldr	r2, [r6, #24]
 8008d7c:	f023 0320 	bic.w	r3, r3, #32
 8008d80:	4313      	orrs	r3, r2
 8008d82:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008d86:	b9b5      	cbnz	r5, 8008db6 <RCCEx_PLL2_Config+0x106>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d8e:	4c12      	ldr	r4, [pc, #72]	; (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d96:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d98:	f7fa fdd8 	bl	800394c <HAL_GetTick>
 8008d9c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	d50f      	bpl.n	8008dc4 <RCCEx_PLL2_Config+0x114>
    }

  }


  return status;
 8008da4:	2000      	movs	r0, #0
 8008da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008da8:	f7fa fdd0 	bl	800394c <HAL_GetTick>
 8008dac:	1bc0      	subs	r0, r0, r7
 8008dae:	2802      	cmp	r0, #2
 8008db0:	d9bc      	bls.n	8008d2c <RCCEx_PLL2_Config+0x7c>
        return HAL_TIMEOUT;
 8008db2:	2003      	movs	r0, #3
 8008db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008db6:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008db8:	bf0c      	ite	eq
 8008dba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008dbe:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008dc2:	e7e3      	b.n	8008d8c <RCCEx_PLL2_Config+0xdc>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008dc4:	f7fa fdc2 	bl	800394c <HAL_GetTick>
 8008dc8:	1b40      	subs	r0, r0, r5
 8008dca:	2802      	cmp	r0, #2
 8008dcc:	d9e7      	bls.n	8008d9e <RCCEx_PLL2_Config+0xee>
 8008dce:	e7f0      	b.n	8008db2 <RCCEx_PLL2_Config+0x102>
    return HAL_ERROR;
 8008dd0:	2001      	movs	r0, #1
}
 8008dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd4:	08013964 	.word	0x08013964
 8008dd8:	58024400 	.word	0x58024400

08008ddc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8008dde:	6803      	ldr	r3, [r0, #0]
{
 8008de0:	4606      	mov	r6, r0
 8008de2:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8008de4:	3b01      	subs	r3, #1
 8008de6:	2b3e      	cmp	r3, #62	; 0x3e
 8008de8:	d904      	bls.n	8008df4 <RCCEx_PLL3_Config+0x18>
 8008dea:	f640 11fb 	movw	r1, #2555	; 0x9fb
 8008dee:	4844      	ldr	r0, [pc, #272]	; (8008f00 <RCCEx_PLL3_Config+0x124>)
 8008df0:	f7f9 f9a3 	bl	800213a <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8008df4:	6873      	ldr	r3, [r6, #4]
 8008df6:	3b04      	subs	r3, #4
 8008df8:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8008dfc:	d904      	bls.n	8008e08 <RCCEx_PLL3_Config+0x2c>
 8008dfe:	f640 11fc 	movw	r1, #2556	; 0x9fc
 8008e02:	483f      	ldr	r0, [pc, #252]	; (8008f00 <RCCEx_PLL3_Config+0x124>)
 8008e04:	f7f9 f999 	bl	800213a <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8008e08:	68b3      	ldr	r3, [r6, #8]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8008e0e:	d904      	bls.n	8008e1a <RCCEx_PLL3_Config+0x3e>
 8008e10:	f640 11fd 	movw	r1, #2557	; 0x9fd
 8008e14:	483a      	ldr	r0, [pc, #232]	; (8008f00 <RCCEx_PLL3_Config+0x124>)
 8008e16:	f7f9 f990 	bl	800213a <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8008e1a:	6933      	ldr	r3, [r6, #16]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e20:	d904      	bls.n	8008e2c <RCCEx_PLL3_Config+0x50>
 8008e22:	f640 11fe 	movw	r1, #2558	; 0x9fe
 8008e26:	4836      	ldr	r0, [pc, #216]	; (8008f00 <RCCEx_PLL3_Config+0x124>)
 8008e28:	f7f9 f987 	bl	800213a <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8008e2c:	68f3      	ldr	r3, [r6, #12]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	2b7f      	cmp	r3, #127	; 0x7f
 8008e32:	d904      	bls.n	8008e3e <RCCEx_PLL3_Config+0x62>
 8008e34:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8008e38:	4831      	ldr	r0, [pc, #196]	; (8008f00 <RCCEx_PLL3_Config+0x124>)
 8008e3a:	f7f9 f97e 	bl	800213a <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e3e:	4c31      	ldr	r4, [pc, #196]	; (8008f04 <RCCEx_PLL3_Config+0x128>)
 8008e40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d058      	beq.n	8008efc <RCCEx_PLL3_Config+0x120>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e50:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e52:	f7fa fd7b 	bl	800394c <HAL_GetTick>
 8008e56:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	009a      	lsls	r2, r3, #2
 8008e5c:	d43a      	bmi.n	8008ed4 <RCCEx_PLL3_Config+0xf8>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e60:	6832      	ldr	r2, [r6, #0]
 8008e62:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008e66:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008e6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e6c:	68b3      	ldr	r3, [r6, #8]
 8008e6e:	68f2      	ldr	r2, [r6, #12]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	3a01      	subs	r2, #1
 8008e74:	025b      	lsls	r3, r3, #9
 8008e76:	0412      	lsls	r2, r2, #16
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	6872      	ldr	r2, [r6, #4]
 8008e82:	3a01      	subs	r2, #1
 8008e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	6932      	ldr	r2, [r6, #16]
 8008e8c:	3a01      	subs	r2, #1
 8008e8e:	0612      	lsls	r2, r2, #24
 8008e90:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008e94:	4313      	orrs	r3, r2
 8008e96:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e9a:	6972      	ldr	r2, [r6, #20]
 8008e9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ea4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ea6:	69b2      	ldr	r2, [r6, #24]
 8008ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008eac:	4313      	orrs	r3, r2
 8008eae:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008eb2:	b9b5      	cbnz	r5, 8008ee2 <RCCEx_PLL3_Config+0x106>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008eba:	4c12      	ldr	r4, [pc, #72]	; (8008f04 <RCCEx_PLL3_Config+0x128>)
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ec2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ec4:	f7fa fd42 	bl	800394c <HAL_GetTick>
 8008ec8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	d50f      	bpl.n	8008ef0 <RCCEx_PLL3_Config+0x114>
    }

  }


  return status;
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ed4:	f7fa fd3a 	bl	800394c <HAL_GetTick>
 8008ed8:	1bc0      	subs	r0, r0, r7
 8008eda:	2802      	cmp	r0, #2
 8008edc:	d9bc      	bls.n	8008e58 <RCCEx_PLL3_Config+0x7c>
        return HAL_TIMEOUT;
 8008ede:	2003      	movs	r0, #3
 8008ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ee2:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ee4:	bf0c      	ite	eq
 8008ee6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008eea:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008eee:	e7e3      	b.n	8008eb8 <RCCEx_PLL3_Config+0xdc>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ef0:	f7fa fd2c 	bl	800394c <HAL_GetTick>
 8008ef4:	1b40      	subs	r0, r0, r5
 8008ef6:	2802      	cmp	r0, #2
 8008ef8:	d9e7      	bls.n	8008eca <RCCEx_PLL3_Config+0xee>
 8008efa:	e7f0      	b.n	8008ede <RCCEx_PLL3_Config+0x102>
    return HAL_ERROR;
 8008efc:	2001      	movs	r0, #1
}
 8008efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f00:	08013964 	.word	0x08013964
 8008f04:	58024400 	.word	0x58024400

08008f08 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f0c:	6805      	ldr	r5, [r0, #0]
{
 8008f0e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f10:	f015 6000 	ands.w	r0, r5, #134217728	; 0x8000000
 8008f14:	d014      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f1c:	d018      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8008f1e:	d802      	bhi.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8008f20:	b183      	cbz	r3, 8008f44 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8008f22:	2501      	movs	r5, #1
 8008f24:	e01b      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f2a:	d023      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008f2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f30:	d1f7      	bne.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f32:	4aa6      	ldr	r2, [pc, #664]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f34:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008f36:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008f38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008f3c:	430b      	orrs	r3, r1
 8008f3e:	6513      	str	r3, [r2, #80]	; 0x50
 8008f40:	2500      	movs	r5, #0
 8008f42:	e00c      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f44:	4aa1      	ldr	r2, [pc, #644]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f4c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008f4e:	e7f0      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f50:	2102      	movs	r1, #2
 8008f52:	1d20      	adds	r0, r4, #4
 8008f54:	f7ff feac 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f58:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d0e9      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	05de      	lsls	r6, r3, #23
 8008f62:	d53c      	bpl.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008f64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d834      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8008f6a:	e8df f003 	tbb	[pc, r3]
 8008f6e:	1009      	.short	0x1009
 8008f70:	0e2d      	.short	0x0e2d
 8008f72:	0e          	.byte	0x0e
 8008f73:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f74:	2102      	movs	r1, #2
 8008f76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f7a:	f7ff ff2f 	bl	8008ddc <RCCEx_PLL3_Config>
 8008f7e:	e7eb      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f80:	4a92      	ldr	r2, [pc, #584]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f88:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8008f8a:	462e      	mov	r6, r5
 8008f8c:	e004      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f8e:	2100      	movs	r1, #0
 8008f90:	1d20      	adds	r0, r4, #4
 8008f92:	f7ff fe8d 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f96:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008f98:	b9ee      	cbnz	r6, 8008fd6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f9a:	4a8c      	ldr	r2, [pc, #560]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f9c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008f9e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008fa0:	f023 0307 	bic.w	r3, r3, #7
 8008fa4:	430b      	orrs	r3, r1
 8008fa6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	0598      	lsls	r0, r3, #22
 8008fac:	d527      	bpl.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008fae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fb0:	2b80      	cmp	r3, #128	; 0x80
 8008fb2:	d043      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8008fb4:	d815      	bhi.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d034      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8008fba:	2b40      	cmp	r3, #64	; 0x40
 8008fbc:	d038      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 8008fbe:	2601      	movs	r6, #1
      status |= ret;
 8008fc0:	ea45 0006 	orr.w	r0, r5, r6
 8008fc4:	b2c5      	uxtb	r5, r0
 8008fc6:	e01a      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xf6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fc8:	2100      	movs	r1, #0
 8008fca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008fce:	f7ff ff05 	bl	8008ddc <RCCEx_PLL3_Config>
 8008fd2:	e7e0      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 8008fd4:	2601      	movs	r6, #1
      status |= ret;
 8008fd6:	ea45 0006 	orr.w	r0, r5, r6
 8008fda:	b2c5      	uxtb	r5, r0
 8008fdc:	e7e4      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8008fde:	462e      	mov	r6, r5
 8008fe0:	e7e2      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8008fe4:	d002      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8008fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fea:	d1e8      	bne.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xb6>
    if(ret == HAL_OK)
 8008fec:	2e00      	cmp	r6, #0
 8008fee:	d1e7      	bne.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008ff0:	4a76      	ldr	r2, [pc, #472]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ff2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ff4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008ff6:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	0559      	lsls	r1, r3, #21
 8009002:	d531      	bpl.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009004:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8009008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800900c:	d04b      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800900e:	d81b      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8009010:	2b00      	cmp	r3, #0
 8009012:	d03c      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8009014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009018:	d03f      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x192>
      ret = HAL_ERROR;
 800901a:	2601      	movs	r6, #1
      status |= ret;
 800901c:	ea45 0006 	orr.w	r0, r5, r6
 8009020:	b2c5      	uxtb	r5, r0
 8009022:	e021      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009024:	4a69      	ldr	r2, [pc, #420]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009026:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800902e:	e7dd      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009030:	2100      	movs	r1, #0
 8009032:	1d20      	adds	r0, r4, #4
 8009034:	f7ff fe3c 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009038:	4606      	mov	r6, r0
      break;
 800903a:	e7d7      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800903c:	2100      	movs	r1, #0
 800903e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009042:	f7ff fecb 	bl	8008ddc <RCCEx_PLL3_Config>
 8009046:	e7f7      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x130>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009048:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800904c:	d002      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800904e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009052:	d1e2      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x112>
    if(ret == HAL_OK)
 8009054:	2e00      	cmp	r6, #0
 8009056:	d1e1      	bne.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x114>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009058:	4a5c      	ldr	r2, [pc, #368]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800905a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800905e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009060:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8009064:	430b      	orrs	r3, r1
 8009066:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	051a      	lsls	r2, r3, #20
 800906c:	d531      	bpl.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai4BClockSelection)
 800906e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8009072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009076:	d045      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8009078:	d81b      	bhi.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d036      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800907e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009082:	d039      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = HAL_ERROR;
 8009084:	2601      	movs	r6, #1
      status |= ret;
 8009086:	ea45 0006 	orr.w	r0, r5, r6
 800908a:	b2c5      	uxtb	r5, r0
 800908c:	e021      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800908e:	4a4f      	ldr	r2, [pc, #316]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009090:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009096:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009098:	e7dc      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800909a:	2100      	movs	r1, #0
 800909c:	1d20      	adds	r0, r4, #4
 800909e:	f7ff fe07 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090a2:	4606      	mov	r6, r0
      break;
 80090a4:	e7d6      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090a6:	2100      	movs	r1, #0
 80090a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80090ac:	f7ff fe96 	bl	8008ddc <RCCEx_PLL3_Config>
 80090b0:	e7f7      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->Sai4BClockSelection)
 80090b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090b6:	d002      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80090b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090bc:	d1e2      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 80090be:	2e00      	cmp	r6, #0
 80090c0:	d1e1      	bne.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80090c2:	4a42      	ldr	r2, [pc, #264]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090c4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80090c8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80090ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80090ce:	430b      	orrs	r3, r1
 80090d0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	019b      	lsls	r3, r3, #6
 80090d6:	d528      	bpl.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->QspiClockSelection)
 80090d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80090da:	2b10      	cmp	r3, #16
 80090dc:	d037      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x246>
 80090de:	d817      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80090e0:	b1d3      	cbz	r3, 8009118 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = HAL_ERROR;
 80090e2:	2601      	movs	r6, #1
      status |= ret;
 80090e4:	ea45 0006 	orr.w	r0, r5, r6
 80090e8:	b2c5      	uxtb	r5, r0
 80090ea:	e01e      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ec:	4a37      	ldr	r2, [pc, #220]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80090f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090f4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80090f6:	e7e2      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090f8:	2100      	movs	r1, #0
 80090fa:	1d20      	adds	r0, r4, #4
 80090fc:	f7ff fdd8 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009100:	4606      	mov	r6, r0
      break;
 8009102:	e7dc      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009104:	2100      	movs	r1, #0
 8009106:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800910a:	f7ff fe67 	bl	8008ddc <RCCEx_PLL3_Config>
 800910e:	e7f7      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->QspiClockSelection)
 8009110:	2b20      	cmp	r3, #32
 8009112:	d022      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8009114:	2b30      	cmp	r3, #48	; 0x30
 8009116:	d1e4      	bne.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(ret == HAL_OK)
 8009118:	2e00      	cmp	r6, #0
 800911a:	d1e3      	bne.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800911c:	4a2b      	ldr	r2, [pc, #172]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800911e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009120:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009122:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009126:	430b      	orrs	r3, r1
 8009128:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	04df      	lsls	r7, r3, #19
 800912e:	d529      	bpl.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009130:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009136:	d042      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8009138:	d815      	bhi.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d033      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800913e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009142:	d036      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = HAL_ERROR;
 8009144:	2601      	movs	r6, #1
      status |= ret;
 8009146:	ea45 0006 	orr.w	r0, r5, r6
 800914a:	b2c5      	uxtb	r5, r0
 800914c:	e01a      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800914e:	4a1f      	ldr	r2, [pc, #124]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009150:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009156:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009158:	e7de      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800915a:	2102      	movs	r1, #2
 800915c:	1d20      	adds	r0, r4, #4
 800915e:	f7ff fda7 	bl	8008cb0 <RCCEx_PLL2_Config>
 8009162:	4606      	mov	r6, r0
      break;
 8009164:	e7d8      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009166:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800916a:	d002      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800916c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009170:	d1e8      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    if(ret == HAL_OK)
 8009172:	2e00      	cmp	r6, #0
 8009174:	d1e7      	bne.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009176:	4a15      	ldr	r2, [pc, #84]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009178:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800917a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800917c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009180:	430b      	orrs	r3, r1
 8009182:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	0498      	lsls	r0, r3, #18
 8009188:	d534      	bpl.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Spi45ClockSelection)
 800918a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800918c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009190:	d048      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8009192:	d81d      	bhi.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8009194:	b32b      	cbz	r3, 80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800919a:	d03d      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = HAL_ERROR;
 800919c:	2601      	movs	r6, #1
      status |= ret;
 800919e:	ea45 0006 	orr.w	r0, r5, r6
 80091a2:	b2c5      	uxtb	r5, r0
 80091a4:	e026      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091a6:	4a09      	ldr	r2, [pc, #36]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80091a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80091aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091ae:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80091b0:	e7df      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091b2:	2100      	movs	r1, #0
 80091b4:	1d20      	adds	r0, r4, #4
 80091b6:	f7ff fd7b 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091ba:	4606      	mov	r6, r0
      break;
 80091bc:	e7d9      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091be:	2100      	movs	r1, #0
 80091c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80091c4:	f7ff fe0a 	bl	8008ddc <RCCEx_PLL3_Config>
 80091c8:	e7f7      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 80091ca:	bf00      	nop
 80091cc:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80091d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091d4:	d005      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80091d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091da:	d002      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80091dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091e0:	d1dc      	bne.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	d1db      	bne.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091e6:	4aa9      	ldr	r2, [pc, #676]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80091e8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80091ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80091ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80091f0:	430b      	orrs	r3, r1
 80091f2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	0459      	lsls	r1, r3, #17
 80091f8:	d52d      	bpl.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch(PeriphClkInit->Spi6ClockSelection)
 80091fa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80091fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009202:	d04e      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8009204:	d814      	bhi.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8009206:	b1e3      	cbz	r3, 8009242 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8009208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800920c:	d043      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = HAL_ERROR;
 800920e:	2601      	movs	r6, #1
      status |= ret;
 8009210:	ea45 0006 	orr.w	r0, r5, r6
 8009214:	b2c5      	uxtb	r5, r0
 8009216:	e01e      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009218:	2101      	movs	r1, #1
 800921a:	1d20      	adds	r0, r4, #4
 800921c:	f7ff fd48 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009220:	4606      	mov	r6, r0
      break;
 8009222:	e7de      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009224:	2101      	movs	r1, #1
 8009226:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800922a:	f7ff fdd7 	bl	8008ddc <RCCEx_PLL3_Config>
 800922e:	e7f7      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009234:	d005      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8009236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800923a:	d002      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800923c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009240:	d1e5      	bne.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(ret == HAL_OK)
 8009242:	2e00      	cmp	r6, #0
 8009244:	d1e4      	bne.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009246:	4a91      	ldr	r2, [pc, #580]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009248:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800924c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800924e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009252:	430b      	orrs	r3, r1
 8009254:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	041a      	lsls	r2, r3, #16
 800925a:	d50f      	bpl.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->FdcanClockSelection)
 800925c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800925e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009262:	d024      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8009264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009268:	d027      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800926a:	bb63      	cbnz	r3, 80092c6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if(ret == HAL_OK)
 800926c:	bb66      	cbnz	r6, 80092c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800926e:	4a87      	ldr	r2, [pc, #540]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009270:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009272:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009274:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009278:	430b      	orrs	r3, r1
 800927a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	01db      	lsls	r3, r3, #7
 8009280:	d535      	bpl.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch(PeriphClkInit->FmcClockSelection)
 8009282:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009284:	2b03      	cmp	r3, #3
 8009286:	f200 80e1 	bhi.w	800944c <HAL_RCCEx_PeriphCLKConfig+0x544>
 800928a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800928e:	0026      	.short	0x0026
 8009290:	00d90021 	.word	0x00d90021
 8009294:	0026      	.short	0x0026
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009296:	2101      	movs	r1, #1
 8009298:	1d20      	adds	r0, r4, #4
 800929a:	f7ff fd09 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800929e:	4606      	mov	r6, r0
      break;
 80092a0:	e7cf      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092a2:	2101      	movs	r1, #1
 80092a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80092a8:	f7ff fd98 	bl	8008ddc <RCCEx_PLL3_Config>
 80092ac:	e7f7      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x396>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ae:	4a77      	ldr	r2, [pc, #476]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80092b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80092b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092b6:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80092b8:	e7d8      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092ba:	2101      	movs	r1, #1
 80092bc:	1d20      	adds	r0, r4, #4
 80092be:	f7ff fcf7 	bl	8008cb0 <RCCEx_PLL2_Config>
 80092c2:	4606      	mov	r6, r0
      break;
 80092c4:	e7d2      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 80092c6:	2601      	movs	r6, #1
      status |= ret;
 80092c8:	ea45 0006 	orr.w	r0, r5, r6
 80092cc:	b2c5      	uxtb	r5, r0
 80092ce:	e7d5      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092d0:	4a6e      	ldr	r2, [pc, #440]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80092d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80092d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80092da:	2e00      	cmp	r6, #0
 80092dc:	f040 80b7 	bne.w	800944e <HAL_RCCEx_PeriphCLKConfig+0x546>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80092e0:	4a6a      	ldr	r2, [pc, #424]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80092e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80092e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	430b      	orrs	r3, r1
 80092ec:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	025f      	lsls	r7, r3, #9
 80092f2:	f140 8095 	bpl.w	8009420 <HAL_RCCEx_PeriphCLKConfig+0x518>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80092f6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80092fa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80092fe:	d04c      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009300:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009304:	d049      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009306:	f422 43a0 	bic.w	r3, r2, #20480	; 0x5000
 800930a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800930e:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8009312:	d042      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009314:	f422 4310 	bic.w	r3, r2, #36864	; 0x9000
 8009318:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 800931c:	d03d      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 800931e:	f422 5340 	bic.w	r3, r2, #12288	; 0x3000
 8009322:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8009326:	d038      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009328:	f422 3088 	bic.w	r0, r2, #69632	; 0x11000
 800932c:	f5b0 4f63 	cmp.w	r0, #58112	; 0xe300
 8009330:	d033      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009332:	4857      	ldr	r0, [pc, #348]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8009334:	4283      	cmp	r3, r0
 8009336:	d030      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009338:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800933c:	4283      	cmp	r3, r0
 800933e:	d02c      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009340:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8009344:	4283      	cmp	r3, r0
 8009346:	d028      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009348:	f422 3204 	bic.w	r2, r2, #135168	; 0x21000
 800934c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8009350:	4282      	cmp	r2, r0
 8009352:	d022      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009354:	4a4f      	ldr	r2, [pc, #316]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d01f      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 800935a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800935e:	4293      	cmp	r3, r2
 8009360:	d01b      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009362:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8009366:	4293      	cmp	r3, r2
 8009368:	d017      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 800936a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800936e:	4293      	cmp	r3, r2
 8009370:	d013      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009372:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8009376:	4293      	cmp	r3, r2
 8009378:	d00f      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 800937a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800937e:	4293      	cmp	r3, r2
 8009380:	d00b      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009382:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8009386:	4293      	cmp	r3, r2
 8009388:	d007      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 800938a:	4b43      	ldr	r3, [pc, #268]	; (8009498 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800938c:	4299      	cmp	r1, r3
 800938e:	d004      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009390:	f240 21a9 	movw	r1, #681	; 0x2a9
 8009394:	4841      	ldr	r0, [pc, #260]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x594>)
 8009396:	f7f8 fed0 	bl	800213a <assert_failed>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800939a:	4f41      	ldr	r7, [pc, #260]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093a2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80093a4:	f7fa fad2 	bl	800394c <HAL_GetTick>
 80093a8:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	05d8      	lsls	r0, r3, #23
 80093ae:	d552      	bpl.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    if(ret == HAL_OK)
 80093b0:	2e00      	cmp	r6, #0
 80093b2:	d157      	bne.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x55c>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80093b4:	4b35      	ldr	r3, [pc, #212]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80093b6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80093ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093bc:	4042      	eors	r2, r0
 80093be:	f412 7f40 	tst.w	r2, #768	; 0x300
 80093c2:	d00b      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80093c6:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80093cc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80093d0:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80093d4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80093d8:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80093da:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80093dc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80093e0:	d108      	bne.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        tickstart = HAL_GetTick();
 80093e2:	f7fa fab3 	bl	800394c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093e6:	4f29      	ldr	r7, [pc, #164]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
        tickstart = HAL_GetTick();
 80093e8:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ea:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093f0:	0799      	lsls	r1, r3, #30
 80093f2:	d53b      	bpl.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x564>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093f4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80093f8:	4924      	ldr	r1, [pc, #144]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80093fa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80093fe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009402:	d13e      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8009404:	6908      	ldr	r0, [r1, #16]
 8009406:	4a27      	ldr	r2, [pc, #156]	; (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8009408:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800940c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009410:	4302      	orrs	r2, r0
 8009412:	610a      	str	r2, [r1, #16]
 8009414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009418:	4a1c      	ldr	r2, [pc, #112]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800941a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800941c:	430b      	orrs	r3, r1
 800941e:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	07da      	lsls	r2, r3, #31
 8009424:	d54f      	bpl.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009426:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009428:	2b10      	cmp	r3, #16
 800942a:	d05d      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800942c:	d83c      	bhi.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d040      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009432:	2b08      	cmp	r3, #8
 8009434:	d052      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
      ret = HAL_ERROR;
 8009436:	2601      	movs	r6, #1
      status |= ret;
 8009438:	ea45 0006 	orr.w	r0, r5, r6
 800943c:	b2c5      	uxtb	r5, r0
 800943e:	e042      	b.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009440:	2102      	movs	r1, #2
 8009442:	1d20      	adds	r0, r4, #4
 8009444:	f7ff fc34 	bl	8008cb0 <RCCEx_PLL2_Config>
 8009448:	4606      	mov	r6, r0
      break;
 800944a:	e746      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      ret = HAL_ERROR;
 800944c:	2601      	movs	r6, #1
      status |= ret;
 800944e:	ea45 0006 	orr.w	r0, r5, r6
 8009452:	b2c5      	uxtb	r5, r0
 8009454:	e74b      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009456:	f7fa fa79 	bl	800394c <HAL_GetTick>
 800945a:	eba0 0008 	sub.w	r0, r0, r8
 800945e:	2864      	cmp	r0, #100	; 0x64
 8009460:	d9a3      	bls.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        ret = HAL_TIMEOUT;
 8009462:	2603      	movs	r6, #3
      status |= ret;
 8009464:	ea45 0006 	orr.w	r0, r5, r6
 8009468:	b2c5      	uxtb	r5, r0
 800946a:	e7d9      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x518>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800946c:	f7fa fa6e 	bl	800394c <HAL_GetTick>
 8009470:	eba0 0008 	sub.w	r0, r0, r8
 8009474:	4548      	cmp	r0, r9
 8009476:	d9ba      	bls.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        status |= ret;
 8009478:	f045 0003 	orr.w	r0, r5, #3
            ret = HAL_TIMEOUT;
 800947c:	2603      	movs	r6, #3
        status |= ret;
 800947e:	b2c5      	uxtb	r5, r0
 8009480:	e7ce      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x518>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009482:	690a      	ldr	r2, [r1, #16]
 8009484:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009488:	e7c3      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800948a:	bf00      	nop
 800948c:	58024400 	.word	0x58024400
 8009490:	00010300 	.word	0x00010300
 8009494:	00020300 	.word	0x00020300
 8009498:	0003e300 	.word	0x0003e300
 800949c:	08013964 	.word	0x08013964
 80094a0:	58024800 	.word	0x58024800
 80094a4:	00ffffcf 	.word	0x00ffffcf
    switch(PeriphClkInit->Usart16ClockSelection)
 80094a8:	2b20      	cmp	r3, #32
 80094aa:	d003      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80094ac:	2b28      	cmp	r3, #40	; 0x28
 80094ae:	d001      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80094b0:	2b18      	cmp	r3, #24
 80094b2:	d1c0      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(ret == HAL_OK)
 80094b4:	2e00      	cmp	r6, #0
 80094b6:	d1bf      	bne.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x530>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094b8:	4a68      	ldr	r2, [pc, #416]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80094ba:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80094bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80094be:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80094c2:	430b      	orrs	r3, r1
 80094c4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	079b      	lsls	r3, r3, #30
 80094ca:	d520      	bpl.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80094cc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80094ce:	2b05      	cmp	r3, #5
 80094d0:	d82f      	bhi.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80094d2:	e8df f003 	tbb	[pc, r3]
 80094d6:	0f14      	.short	0x0f14
 80094d8:	14141428 	.word	0x14141428
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094dc:	2101      	movs	r1, #1
 80094de:	1d20      	adds	r0, r4, #4
 80094e0:	f7ff fbe6 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094e4:	4606      	mov	r6, r0
      break;
 80094e6:	e7e5      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094e8:	2101      	movs	r1, #1
 80094ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80094ee:	f7ff fc75 	bl	8008ddc <RCCEx_PLL3_Config>
 80094f2:	e7f7      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094f4:	2101      	movs	r1, #1
 80094f6:	1d20      	adds	r0, r4, #4
 80094f8:	f7ff fbda 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094fc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80094fe:	b9ce      	cbnz	r6, 8009534 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009500:	4a56      	ldr	r2, [pc, #344]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8009502:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009504:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	430b      	orrs	r3, r1
 800950c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	075f      	lsls	r7, r3, #29
 8009512:	d521      	bpl.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009514:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009518:	2b05      	cmp	r3, #5
 800951a:	d835      	bhi.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800951c:	e8df f003 	tbb	[pc, r3]
 8009520:	132e0e13 	.word	0x132e0e13
 8009524:	1313      	.short	0x1313
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009526:	2101      	movs	r1, #1
 8009528:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800952c:	f7ff fc56 	bl	8008ddc <RCCEx_PLL3_Config>
 8009530:	e7e4      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = HAL_ERROR;
 8009532:	2601      	movs	r6, #1
      status |= ret;
 8009534:	ea45 0006 	orr.w	r0, r5, r6
 8009538:	b2c5      	uxtb	r5, r0
 800953a:	e7e8      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x606>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800953c:	2101      	movs	r1, #1
 800953e:	1d20      	adds	r0, r4, #4
 8009540:	f7ff fbb6 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009544:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009546:	bb06      	cbnz	r6, 800958a <HAL_RCCEx_PeriphCLKConfig+0x682>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009548:	4a44      	ldr	r2, [pc, #272]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800954a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800954e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009550:	f023 0307 	bic.w	r3, r3, #7
 8009554:	430b      	orrs	r3, r1
 8009556:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	0698      	lsls	r0, r3, #26
 800955c:	d52c      	bpl.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800955e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009566:	d03f      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009568:	d813      	bhi.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 800956a:	b1db      	cbz	r3, 80095a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800956c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009570:	d034      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      ret = HAL_ERROR;
 8009572:	2601      	movs	r6, #1
      status |= ret;
 8009574:	ea45 0006 	orr.w	r0, r5, r6
 8009578:	b2c5      	uxtb	r5, r0
 800957a:	e01d      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800957c:	2101      	movs	r1, #1
 800957e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009582:	f7ff fc2b 	bl	8008ddc <RCCEx_PLL3_Config>
 8009586:	e7dd      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      ret = HAL_ERROR;
 8009588:	2601      	movs	r6, #1
      status |= ret;
 800958a:	ea45 0006 	orr.w	r0, r5, r6
 800958e:	b2c5      	uxtb	r5, r0
 8009590:	e7e2      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009596:	d005      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8009598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800959c:	d002      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800959e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095a2:	d1e6      	bne.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if(ret == HAL_OK)
 80095a4:	2e00      	cmp	r6, #0
 80095a6:	d1e5      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095a8:	4a2c      	ldr	r2, [pc, #176]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80095aa:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80095ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80095b0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80095b4:	430b      	orrs	r3, r1
 80095b6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	0659      	lsls	r1, r3, #25
 80095bc:	d52d      	bpl.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095be:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80095c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095c6:	d042      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x746>
 80095c8:	d814      	bhi.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80095ca:	b1e3      	cbz	r3, 8009606 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 80095cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095d0:	d037      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      ret = HAL_ERROR;
 80095d2:	2601      	movs	r6, #1
      status |= ret;
 80095d4:	ea45 0006 	orr.w	r0, r5, r6
 80095d8:	b2c5      	uxtb	r5, r0
 80095da:	e01e      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x712>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095dc:	2100      	movs	r1, #0
 80095de:	1d20      	adds	r0, r4, #4
 80095e0:	f7ff fb66 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095e4:	4606      	mov	r6, r0
      break;
 80095e6:	e7dd      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095e8:	2102      	movs	r1, #2
 80095ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095ee:	f7ff fbf5 	bl	8008ddc <RCCEx_PLL3_Config>
 80095f2:	e7f7      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f8:	d005      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 80095fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095fe:	d002      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8009600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009604:	d1e5      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
    if(ret == HAL_OK)
 8009606:	2e00      	cmp	r6, #0
 8009608:	d1e4      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800960a:	4a14      	ldr	r2, [pc, #80]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800960c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009610:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009612:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009616:	430b      	orrs	r3, r1
 8009618:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	061a      	lsls	r2, r3, #24
 800961e:	d532      	bpl.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x77e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009620:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009628:	f000 80bc 	beq.w	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800962c:	d818      	bhi.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800962e:	b303      	cbz	r3, 8009672 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 8009630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009634:	f000 80b0 	beq.w	8009798 <HAL_RCCEx_PeriphCLKConfig+0x890>
      ret = HAL_ERROR;
 8009638:	2601      	movs	r6, #1
      status |= ret;
 800963a:	ea45 0006 	orr.w	r0, r5, r6
 800963e:	b2c5      	uxtb	r5, r0
 8009640:	e021      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009642:	2100      	movs	r1, #0
 8009644:	1d20      	adds	r0, r4, #4
 8009646:	f7ff fb33 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800964a:	4606      	mov	r6, r0
      break;
 800964c:	e7db      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800964e:	2102      	movs	r1, #2
 8009650:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009654:	f7ff fbc2 	bl	8008ddc <RCCEx_PLL3_Config>
 8009658:	e7f7      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x742>
 800965a:	bf00      	nop
 800965c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009664:	d005      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 8009666:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800966a:	d002      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 800966c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009670:	d1e2      	bne.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x730>
    if(ret == HAL_OK)
 8009672:	2e00      	cmp	r6, #0
 8009674:	d1e1      	bne.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x732>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009676:	4ab1      	ldr	r2, [pc, #708]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8009678:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800967c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800967e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009682:	430b      	orrs	r3, r1
 8009684:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	071b      	lsls	r3, r3, #28
 800968a:	d516      	bpl.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800968c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009690:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8009694:	d004      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x798>
 8009696:	f240 4127 	movw	r1, #1063	; 0x427
 800969a:	48a9      	ldr	r0, [pc, #676]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 800969c:	f7f8 fd4d 	bl	800213a <assert_failed>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80096a0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80096a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80096a8:	f040 8082 	bne.w	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096ac:	2102      	movs	r1, #2
 80096ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096b2:	f7ff fb93 	bl	8008ddc <RCCEx_PLL3_Config>
 80096b6:	4305      	orrs	r5, r0
 80096b8:	b2ed      	uxtb	r5, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	06df      	lsls	r7, r3, #27
 80096be:	d51b      	bpl.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80096c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80096c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096c8:	d00a      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80096ca:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80096ce:	d007      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80096d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096d4:	d004      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80096d6:	f240 4139 	movw	r1, #1081	; 0x439
 80096da:	4899      	ldr	r0, [pc, #612]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 80096dc:	f7f8 fd2d 	bl	800213a <assert_failed>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80096e0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80096e4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80096e8:	d169      	bne.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096ea:	2102      	movs	r1, #2
 80096ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096f0:	f7ff fb74 	bl	8008ddc <RCCEx_PLL3_Config>
 80096f4:	4305      	orrs	r5, r0
 80096f6:	b2ed      	uxtb	r5, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	0318      	lsls	r0, r3, #12
 80096fc:	d517      	bpl.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x826>
    switch(PeriphClkInit->AdcClockSelection)
 80096fe:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009702:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009706:	d061      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009708:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800970c:	d005      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x812>
 800970e:	2900      	cmp	r1, #0
 8009710:	d162      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009712:	1d20      	adds	r0, r4, #4
 8009714:	f7ff facc 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009718:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800971a:	2e00      	cmp	r6, #0
 800971c:	d15d      	bne.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800971e:	4a87      	ldr	r2, [pc, #540]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8009720:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009724:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009726:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800972a:	430b      	orrs	r3, r1
 800972c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	0359      	lsls	r1, r3, #13
 8009732:	d519      	bpl.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x860>
    switch(PeriphClkInit->UsbClockSelection)
 8009734:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800973c:	d051      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800973e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009742:	d007      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8009744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009748:	d152      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800974a:	4a7c      	ldr	r2, [pc, #496]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800974c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800974e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009752:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009754:	2e00      	cmp	r6, #0
 8009756:	d14c      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009758:	4a78      	ldr	r2, [pc, #480]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800975a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800975e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009760:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009764:	430b      	orrs	r3, r1
 8009766:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	03da      	lsls	r2, r3, #15
 800976c:	d553      	bpl.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x90e>
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 800976e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009770:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009774:	d004      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8009776:	f240 419e 	movw	r1, #1182	; 0x49e
 800977a:	4871      	ldr	r0, [pc, #452]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 800977c:	f7f8 fcdd 	bl	800213a <assert_failed>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009780:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009782:	2b00      	cmp	r3, #0
 8009784:	d039      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8009786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800978a:	f000 80d0 	beq.w	800992e <HAL_RCCEx_PeriphCLKConfig+0xa26>
      ret = HAL_ERROR;
 800978e:	2601      	movs	r6, #1
      status |= ret;
 8009790:	ea45 0006 	orr.w	r0, r5, r6
 8009794:	b2c5      	uxtb	r5, r0
 8009796:	e03e      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009798:	2100      	movs	r1, #0
 800979a:	1d20      	adds	r0, r4, #4
 800979c:	f7ff fa88 	bl	8008cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097a0:	4606      	mov	r6, r0
      break;
 80097a2:	e766      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x76a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097a4:	2102      	movs	r1, #2
 80097a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097aa:	f7ff fb17 	bl	8008ddc <RCCEx_PLL3_Config>
 80097ae:	e7f7      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80097b0:	4a62      	ldr	r2, [pc, #392]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 80097b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80097b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80097b8:	430b      	orrs	r3, r1
 80097ba:	6553      	str	r3, [r2, #84]	; 0x54
 80097bc:	e77d      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097be:	4a5f      	ldr	r2, [pc, #380]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 80097c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80097c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c6:	430b      	orrs	r3, r1
 80097c8:	6593      	str	r3, [r2, #88]	; 0x58
 80097ca:	e795      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097cc:	2102      	movs	r1, #2
 80097ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097d2:	f7ff fb03 	bl	8008ddc <RCCEx_PLL3_Config>
 80097d6:	e79f      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x810>
      ret = HAL_ERROR;
 80097d8:	2601      	movs	r6, #1
      status |= ret;
 80097da:	ea45 0006 	orr.w	r0, r5, r6
 80097de:	b2c5      	uxtb	r5, r0
 80097e0:	e7a5      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x826>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097e2:	2101      	movs	r1, #1
 80097e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097e8:	f7ff faf8 	bl	8008ddc <RCCEx_PLL3_Config>
 80097ec:	4606      	mov	r6, r0
      break;
 80097ee:	e7b1      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      ret = HAL_ERROR;
 80097f0:	2601      	movs	r6, #1
      status |= ret;
 80097f2:	ea45 0006 	orr.w	r0, r5, r6
 80097f6:	b2c5      	uxtb	r5, r0
 80097f8:	e7b6      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097fa:	4a50      	ldr	r2, [pc, #320]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 80097fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80097fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009802:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009804:	2e00      	cmp	r6, #0
 8009806:	d1c3      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009808:	4a4c      	ldr	r2, [pc, #304]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800980a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800980c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800980e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009812:	430b      	orrs	r3, r1
 8009814:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	d506      	bpl.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x922>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800981c:	2102      	movs	r1, #2
 800981e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009822:	f7ff fadb 	bl	8008ddc <RCCEx_PLL3_Config>
 8009826:	4305      	orrs	r5, r0
 8009828:	b2ed      	uxtb	r5, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800982a:	6821      	ldr	r1, [r4, #0]
 800982c:	038f      	lsls	r7, r1, #14
 800982e:	d512      	bpl.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x94e>
    switch(PeriphClkInit->RngClockSelection)
 8009830:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009832:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009836:	f000 8092 	beq.w	800995e <HAL_RCCEx_PeriphCLKConfig+0xa56>
 800983a:	f200 8083 	bhi.w	8009944 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800983e:	2a00      	cmp	r2, #0
 8009840:	f040 8088 	bne.w	8009954 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    if(ret == HAL_OK)
 8009844:	2e00      	cmp	r6, #0
 8009846:	f040 8086 	bne.w	8009956 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800984a:	483c      	ldr	r0, [pc, #240]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800984c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800984e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009852:	4313      	orrs	r3, r2
 8009854:	6543      	str	r3, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009856:	02c8      	lsls	r0, r1, #11
 8009858:	d50f      	bpl.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x972>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800985a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800985c:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8009860:	d004      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009862:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8009866:	4836      	ldr	r0, [pc, #216]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009868:	f7f8 fc67 	bl	800213a <assert_failed>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800986c:	4a33      	ldr	r2, [pc, #204]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800986e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009870:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009876:	430b      	orrs	r3, r1
 8009878:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	00d9      	lsls	r1, r3, #3
 800987e:	d511      	bpl.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8009880:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009884:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8009888:	d004      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800988a:	f240 5102 	movw	r1, #1282	; 0x502
 800988e:	482c      	ldr	r0, [pc, #176]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009890:	f7f8 fc53 	bl	800213a <assert_failed>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009894:	4a29      	ldr	r2, [pc, #164]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8009896:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800989a:	6913      	ldr	r3, [r2, #16]
 800989c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098a0:	430b      	orrs	r3, r1
 80098a2:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	029a      	lsls	r2, r3, #10
 80098a8:	d50f      	bpl.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x9c2>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80098aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80098ac:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 80098b0:	d004      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 80098b2:	f240 510c 	movw	r1, #1292	; 0x50c
 80098b6:	4822      	ldr	r0, [pc, #136]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 80098b8:	f7f8 fc3f 	bl	800213a <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098bc:	4a1f      	ldr	r2, [pc, #124]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 80098be:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80098c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80098c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098c6:	430b      	orrs	r3, r1
 80098c8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	d513      	bpl.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80098d0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80098d4:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80098d8:	d004      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 80098da:	f240 5116 	movw	r1, #1302	; 0x516
 80098de:	4818      	ldr	r0, [pc, #96]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 80098e0:	f7f8 fc2b 	bl	800213a <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098e4:	4b15      	ldr	r3, [pc, #84]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 80098e6:	691a      	ldr	r2, [r3, #16]
 80098e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098ec:	611a      	str	r2, [r3, #16]
 80098ee:	691a      	ldr	r2, [r3, #16]
 80098f0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80098f4:	430a      	orrs	r2, r1
 80098f6:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	da12      	bge.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80098fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009900:	f033 5280 	bics.w	r2, r3, #268435456	; 0x10000000
 8009904:	d007      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800990a:	d004      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800990c:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8009910:	480b      	ldr	r0, [pc, #44]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009912:	f7f8 fc12 	bl	800213a <assert_failed>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009916:	4a09      	ldr	r2, [pc, #36]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8009918:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800991a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800991c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009920:	430b      	orrs	r3, r1
 8009922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009924:	1c28      	adds	r0, r5, #0
 8009926:	bf18      	it	ne
 8009928:	2001      	movne	r0, #1
}
 800992a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800992e:	2102      	movs	r1, #2
 8009930:	1d20      	adds	r0, r4, #4
 8009932:	f7ff f9bd 	bl	8008cb0 <RCCEx_PLL2_Config>
 8009936:	4606      	mov	r6, r0
      break;
 8009938:	e764      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800993a:	bf00      	nop
 800993c:	58024400 	.word	0x58024400
 8009940:	08013964 	.word	0x08013964
    switch(PeriphClkInit->RngClockSelection)
 8009944:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009948:	f43f af7c 	beq.w	8009844 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800994c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009950:	f43f af78 	beq.w	8009844 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      ret = HAL_ERROR;
 8009954:	2601      	movs	r6, #1
      status |= ret;
 8009956:	ea45 0006 	orr.w	r0, r5, r6
 800995a:	b2c5      	uxtb	r5, r0
 800995c:	e77b      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x94e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800995e:	4803      	ldr	r0, [pc, #12]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0xa64>)
 8009960:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009966:	62c3      	str	r3, [r0, #44]	; 0x2c
      break;
 8009968:	e76c      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800996a:	bf00      	nop
 800996c:	58024400 	.word	0x58024400

08009970 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009970:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8009972:	f7ff f957 	bl	8008c24 <HAL_RCC_GetHCLKFreq>
 8009976:	4b07      	ldr	r3, [pc, #28]	; (8009994 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009978:	2210      	movs	r2, #16
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	fa92 f2a2 	rbit	r2, r2
 8009980:	fab2 f282 	clz	r2, r2
 8009984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009988:	40d3      	lsrs	r3, r2
 800998a:	4a03      	ldr	r2, [pc, #12]	; (8009998 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800998c:	5cd3      	ldrb	r3, [r2, r3]
}
 800998e:	40d8      	lsrs	r0, r3
 8009990:	bd08      	pop	{r3, pc}
 8009992:	bf00      	nop
 8009994:	58024400 	.word	0x58024400
 8009998:	080135c4 	.word	0x080135c4

0800999c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800999c:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800999e:	4c4a      	ldr	r4, [pc, #296]	; (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 80099a0:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 80099a4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80099a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80099a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80099ac:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80099b0:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099b4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80099b8:	4353      	muls	r3, r2
 80099ba:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099be:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 80099c2:	2b01      	cmp	r3, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099c4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80099c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 80099cc:	d002      	beq.n	80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x38>
 80099ce:	d30e      	bcc.n	80099ee <HAL_RCCEx_GetPLL2ClockFreq+0x52>
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d068      	beq.n	8009aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80099d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80099d6:	4a3e      	ldr	r2, [pc, #248]	; (8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 80099d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099dc:	ee07 3a10 	vmov	s14, r3
 80099e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099e4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80099e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099ec:	e067      	b.n	8009abe <HAL_RCCEx_GetPLL2ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	4a38      	ldr	r2, [pc, #224]	; (8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 80099f2:	f013 0f20 	tst.w	r3, #32
 80099f6:	d042      	beq.n	8009a7e <HAL_RCCEx_GetPLL2ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099f8:	6825      	ldr	r5, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80099fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099fc:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8009a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a04:	40e2      	lsrs	r2, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8009a06:	fbb2 f2f1 	udiv	r2, r2, r1
 8009a0a:	ee07 2a10 	vmov	s14, r2
 8009a0e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009a12:	ee07 3a10 	vmov	s14, r3
 8009a16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a1a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a22:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8009a26:	4a28      	ldr	r2, [pc, #160]	; (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8009a28:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009a2a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009a2e:	3301      	adds	r3, #1
 8009a30:	ee07 3a10 	vmov	s14, r3
 8009a34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009a3c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009a40:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8009a44:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009a46:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	ee07 3a10 	vmov	s14, r3
 8009a50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009a58:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009a5c:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8009a60:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009a62:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009a66:	3301      	adds	r3, #1
 8009a68:	ee07 3a10 	vmov	s14, r3
 8009a6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009a74:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009a78:	edc0 6a02 	vstr	s13, [r0, #8]
 8009a7c:	bd30      	pop	{r4, r5, pc}
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8009a7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a84:	ee07 3a10 	vmov	s14, r3
 8009a88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a8c:	fbb2 f3f1 	udiv	r3, r2, r1
 8009a90:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a98:	ee07 3a90 	vmov	s15, r3
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8009a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8009aa4:	e7bf      	b.n	8009a26 <HAL_RCCEx_GetPLL2ClockFreq+0x8a>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8009aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009aa8:	4a0b      	ldr	r2, [pc, #44]	; (8009ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 8009aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aae:	ee07 3a10 	vmov	s14, r3
 8009ab2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ab6:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009aba:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8009abe:	fbb2 f2f1 	udiv	r2, r2, r1
 8009ac2:	ee07 2a90 	vmov	s15, r2
 8009ac6:	e7e9      	b.n	8009a9c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8009ac8:	58024400 	.word	0x58024400
 8009acc:	39000000 	.word	0x39000000
 8009ad0:	003d0900 	.word	0x003d0900
 8009ad4:	03d09000 	.word	0x03d09000
 8009ad8:	017d7840 	.word	0x017d7840

08009adc <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8009adc:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ade:	4c4a      	ldr	r4, [pc, #296]	; (8009c08 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8009ae0:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8009ae4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009ae6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8009ae8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009aea:	6c62      	ldr	r2, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009aec:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8009af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009af4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8009af8:	4353      	muls	r3, r2
 8009afa:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009afe:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8009b02:	2b01      	cmp	r3, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b04:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009b08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8009b0c:	d002      	beq.n	8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x38>
 8009b0e:	d30e      	bcc.n	8009b2e <HAL_RCCEx_GetPLL3ClockFreq+0x52>
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d068      	beq.n	8009be6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8009b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b16:	4a3e      	ldr	r2, [pc, #248]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 8009b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1c:	ee07 3a10 	vmov	s14, r3
 8009b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b24:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009b28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b2c:	e067      	b.n	8009bfe <HAL_RCCEx_GetPLL3ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	4a38      	ldr	r2, [pc, #224]	; (8009c14 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 8009b32:	f013 0f20 	tst.w	r3, #32
 8009b36:	d042      	beq.n	8009bbe <HAL_RCCEx_GetPLL3ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b38:	6825      	ldr	r5, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8009b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b3c:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8009b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b44:	40e2      	lsrs	r2, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8009b46:	fbb2 f2f1 	udiv	r2, r2, r1
 8009b4a:	ee07 2a10 	vmov	s14, r2
 8009b4e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009b52:	ee07 3a10 	vmov	s14, r3
 8009b56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b5a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b62:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8009b66:	4a28      	ldr	r2, [pc, #160]	; (8009c08 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8009b68:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009b6a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009b6e:	3301      	adds	r3, #1
 8009b70:	ee07 3a10 	vmov	s14, r3
 8009b74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009b7c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009b80:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8009b84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009b86:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	ee07 3a10 	vmov	s14, r3
 8009b90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009b98:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009b9c:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8009ba0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009ba2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	ee07 3a10 	vmov	s14, r3
 8009bac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009bb0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009bb4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009bb8:	edc0 6a02 	vstr	s13, [r0, #8]
 8009bbc:	bd30      	pop	{r4, r5, pc}
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8009bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc4:	ee07 3a10 	vmov	s14, r3
 8009bc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009bcc:	fbb2 f3f1 	udiv	r3, r2, r1
 8009bd0:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bd8:	ee07 3a90 	vmov	s15, r3
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8009bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009be0:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8009be4:	e7bf      	b.n	8009b66 <HAL_RCCEx_GetPLL3ClockFreq+0x8a>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8009be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009be8:	4a0b      	ldr	r2, [pc, #44]	; (8009c18 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 8009bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bee:	ee07 3a10 	vmov	s14, r3
 8009bf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009bf6:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8009bfe:	fbb2 f2f1 	udiv	r2, r2, r1
 8009c02:	ee07 2a90 	vmov	s15, r2
 8009c06:	e7e9      	b.n	8009bdc <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8009c08:	58024400 	.word	0x58024400
 8009c0c:	39000000 	.word	0x39000000
 8009c10:	003d0900 	.word	0x003d0900
 8009c14:	03d09000 	.word	0x03d09000
 8009c18:	017d7840 	.word	0x017d7840

08009c1c <HAL_RCCEx_GetD1SysClockFreq>:
{
 8009c1c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8009c1e:	f7fe fe05 	bl	800882c <HAL_RCC_GetSysClockFreq>
 8009c22:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8009c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	fa92 f2a2 	rbit	r2, r2
 8009c2e:	fab2 f282 	clz	r2, r2
 8009c32:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009c36:	40d3      	lsrs	r3, r2
 8009c38:	4a03      	ldr	r2, [pc, #12]	; (8009c48 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8009c3a:	5cd3      	ldrb	r3, [r2, r3]
 8009c3c:	40d8      	lsrs	r0, r3
 8009c3e:	4b03      	ldr	r3, [pc, #12]	; (8009c4c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8009c40:	6018      	str	r0, [r3, #0]
}
 8009c42:	bd08      	pop	{r3, pc}
 8009c44:	58024400 	.word	0x58024400
 8009c48:	080135c4 	.word	0x080135c4
 8009c4c:	24000018 	.word	0x24000018

08009c50 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit: generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8009c50:	4770      	bx	lr

08009c52 <HAL_RNG_ErrorCallback>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8009c52:	4770      	bx	lr

08009c54 <HAL_RNG_IRQHandler>:
  if((__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET) ||  (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET))
 8009c54:	6803      	ldr	r3, [r0, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
{
 8009c58:	b510      	push	{r4, lr}
 8009c5a:	4604      	mov	r4, r0
  if((__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET) ||  (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET))
 8009c5c:	0690      	lsls	r0, r2, #26
 8009c5e:	d402      	bmi.n	8009c66 <HAL_RNG_IRQHandler+0x12>
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	0659      	lsls	r1, r3, #25
 8009c64:	d508      	bpl.n	8009c78 <HAL_RNG_IRQHandler+0x24>
    hrng->State = HAL_RNG_STATE_ERROR;
 8009c66:	2304      	movs	r3, #4
    HAL_RNG_ErrorCallback(hrng);
 8009c68:	4620      	mov	r0, r4
    hrng->State = HAL_RNG_STATE_ERROR;
 8009c6a:	7263      	strb	r3, [r4, #9]
    HAL_RNG_ErrorCallback(hrng);
 8009c6c:	f7ff fff1 	bl	8009c52 <HAL_RNG_ErrorCallback>
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI|RNG_IT_SEI);
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8009c76:	605a      	str	r2, [r3, #4]
  if(__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	07d2      	lsls	r2, r2, #31
 8009c7e:	d50d      	bpl.n	8009c9c <HAL_RNG_IRQHandler+0x48>
    __HAL_RNG_DISABLE_IT(hrng);
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	f022 0208 	bic.w	r2, r2, #8
 8009c86:	601a      	str	r2, [r3, #0]
    hrng->RandomNumber = hrng->Instance->DR;
 8009c88:	6899      	ldr	r1, [r3, #8]
    if(hrng->State != HAL_RNG_STATE_ERROR)
 8009c8a:	7a63      	ldrb	r3, [r4, #9]
    hrng->RandomNumber = hrng->Instance->DR;
 8009c8c:	60e1      	str	r1, [r4, #12]
    if(hrng->State != HAL_RNG_STATE_ERROR)
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	d004      	beq.n	8009c9c <HAL_RNG_IRQHandler+0x48>
      hrng->State = HAL_RNG_STATE_READY; 
 8009c92:	2301      	movs	r3, #1
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8009c94:	4620      	mov	r0, r4
      hrng->State = HAL_RNG_STATE_READY; 
 8009c96:	7263      	strb	r3, [r4, #9]
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8009c98:	f7ff ffda 	bl	8009c50 <HAL_RNG_ReadyDataCallback>
 8009c9c:	bd10      	pop	{r4, pc}

08009c9e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009c9e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ca0:	6803      	ldr	r3, [r0, #0]
{
 8009ca2:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ca4:	68da      	ldr	r2, [r3, #12]
 8009ca6:	0652      	lsls	r2, r2, #25
 8009ca8:	d501      	bpl.n	8009cae <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8009caa:	2000      	movs	r0, #0
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009cae:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8009cb4:	f7f9 fe4a 	bl	800394c <HAL_GetTick>
 8009cb8:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	065b      	lsls	r3, r3, #25
 8009cc0:	d4f3      	bmi.n	8009caa <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009cc2:	f7f9 fe43 	bl	800394c <HAL_GetTick>
 8009cc6:	1b40      	subs	r0, r0, r5
 8009cc8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009ccc:	d9f5      	bls.n	8009cba <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8009cce:	2003      	movs	r0, #3
}
 8009cd0:	bd38      	pop	{r3, r4, r5, pc}
	...

08009cd4 <HAL_RTC_Init>:
{
 8009cd4:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d059      	beq.n	8009d90 <HAL_RTC_Init+0xbc>
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8009cdc:	6802      	ldr	r2, [r0, #0]
 8009cde:	4b42      	ldr	r3, [pc, #264]	; (8009de8 <HAL_RTC_Init+0x114>)
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d003      	beq.n	8009cec <HAL_RTC_Init+0x18>
 8009ce4:	21c1      	movs	r1, #193	; 0xc1
 8009ce6:	4841      	ldr	r0, [pc, #260]	; (8009dec <HAL_RTC_Init+0x118>)
 8009ce8:	f7f8 fa27 	bl	800213a <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8009cec:	6863      	ldr	r3, [r4, #4]
 8009cee:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8009cf2:	d003      	beq.n	8009cfc <HAL_RTC_Init+0x28>
 8009cf4:	21c2      	movs	r1, #194	; 0xc2
 8009cf6:	483d      	ldr	r0, [pc, #244]	; (8009dec <HAL_RTC_Init+0x118>)
 8009cf8:	f7f8 fa1f 	bl	800213a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8009cfc:	68a3      	ldr	r3, [r4, #8]
 8009cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8009d00:	d903      	bls.n	8009d0a <HAL_RTC_Init+0x36>
 8009d02:	21c3      	movs	r1, #195	; 0xc3
 8009d04:	4839      	ldr	r0, [pc, #228]	; (8009dec <HAL_RTC_Init+0x118>)
 8009d06:	f7f8 fa18 	bl	800213a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8009d0a:	68e3      	ldr	r3, [r4, #12]
 8009d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d10:	d303      	bcc.n	8009d1a <HAL_RTC_Init+0x46>
 8009d12:	21c4      	movs	r1, #196	; 0xc4
 8009d14:	4835      	ldr	r0, [pc, #212]	; (8009dec <HAL_RTC_Init+0x118>)
 8009d16:	f7f8 fa10 	bl	800213a <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8009d20:	d003      	beq.n	8009d2a <HAL_RTC_Init+0x56>
 8009d22:	21c5      	movs	r1, #197	; 0xc5
 8009d24:	4831      	ldr	r0, [pc, #196]	; (8009dec <HAL_RTC_Init+0x118>)
 8009d26:	f7f8 fa08 	bl	800213a <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8009d2a:	6963      	ldr	r3, [r4, #20]
 8009d2c:	f033 0302 	bics.w	r3, r3, #2
 8009d30:	d003      	beq.n	8009d3a <HAL_RTC_Init+0x66>
 8009d32:	21c6      	movs	r1, #198	; 0xc6
 8009d34:	482d      	ldr	r0, [pc, #180]	; (8009dec <HAL_RTC_Init+0x118>)
 8009d36:	f7f8 fa00 	bl	800213a <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8009d3a:	69a3      	ldr	r3, [r4, #24]
 8009d3c:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8009d40:	d003      	beq.n	8009d4a <HAL_RTC_Init+0x76>
 8009d42:	21c7      	movs	r1, #199	; 0xc7
 8009d44:	4829      	ldr	r0, [pc, #164]	; (8009dec <HAL_RTC_Init+0x118>)
 8009d46:	f7f8 f9f8 	bl	800213a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8009d4a:	69e3      	ldr	r3, [r4, #28]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d903      	bls.n	8009d58 <HAL_RTC_Init+0x84>
 8009d50:	21c8      	movs	r1, #200	; 0xc8
 8009d52:	4826      	ldr	r0, [pc, #152]	; (8009dec <HAL_RTC_Init+0x118>)
 8009d54:	f7f8 f9f1 	bl	800213a <assert_failed>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009d58:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8009d5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d60:	b923      	cbnz	r3, 8009d6c <HAL_RTC_Init+0x98>
    hrtc->Lock = HAL_UNLOCKED;
 8009d62:	f884 2020 	strb.w	r2, [r4, #32]
    HAL_RTC_MspInit(hrtc);
 8009d66:	4620      	mov	r0, r4
 8009d68:	f7f8 fa92 	bl	8002290 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d6c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d6e:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d70:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d72:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24
 8009d7a:	2253      	movs	r2, #83	; 0x53
 8009d7c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d7e:	f7ff ff8e 	bl	8009c9e <RTC_EnterInitMode>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	b130      	cbz	r0, 8009d94 <HAL_RTC_Init+0xc0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d86:	22ff      	movs	r2, #255	; 0xff
 8009d88:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d8a:	2304      	movs	r3, #4
 8009d8c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 8009d90:	2001      	movs	r0, #1
}
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d94:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d96:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d98:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8009d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009da0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009da2:	6862      	ldr	r2, [r4, #4]
 8009da4:	6899      	ldr	r1, [r3, #8]
 8009da6:	432a      	orrs	r2, r5
 8009da8:	69a5      	ldr	r5, [r4, #24]
 8009daa:	432a      	orrs	r2, r5
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009dac:	6965      	ldr	r5, [r4, #20]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009dae:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009db0:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009db2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009db4:	68e2      	ldr	r2, [r4, #12]
 8009db6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009db8:	691a      	ldr	r2, [r3, #16]
 8009dba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009dbe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009dc0:	68da      	ldr	r2, [r3, #12]
 8009dc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009dc6:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dca:	f022 0203 	bic.w	r2, r2, #3
 8009dce:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009dd0:	69e2      	ldr	r2, [r4, #28]
 8009dd2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009dd4:	432a      	orrs	r2, r5
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dda:	22ff      	movs	r2, #255	; 0xff
 8009ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_OK;
 8009de4:	bd38      	pop	{r3, r4, r5, pc}
 8009de6:	bf00      	nop
 8009de8:	58004000 	.word	0x58004000
 8009dec:	080139a5 	.word	0x080139a5

08009df0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	4606      	mov	r6, r0
 8009df6:	b087      	sub	sp, #28
 8009df8:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009dfa:	f7f9 fda7 	bl	800394c <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8009dfe:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8009e00:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8009e02:	6830      	ldr	r0, [r6, #0]
 8009e04:	f002 ff64 	bl	800ccd0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e08:	4604      	mov	r4, r0
 8009e0a:	bb40      	cbnz	r0, 8009e5e <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8009e0c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8009e0e:	6830      	ldr	r0, [r6, #0]
 8009e10:	0409      	lsls	r1, r1, #16
 8009e12:	f003 f883 	bl	800cf1c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e16:	4604      	mov	r4, r0
 8009e18:	bb08      	cbnz	r0, 8009e5e <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e1a:	2230      	movs	r2, #48	; 0x30
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	2108      	movs	r1, #8
 8009e22:	2302      	movs	r3, #2
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e24:	9404      	str	r4, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e2a:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e2c:	4669      	mov	r1, sp
 8009e2e:	6830      	ldr	r0, [r6, #0]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e30:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e32:	f002 feff 	bl	800cc34 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009e36:	6830      	ldr	r0, [r6, #0]
 8009e38:	f003 f89f 	bl	800cf7a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	b970      	cbnz	r0, 8009e5e <SD_FindSCR+0x6e>
 8009e40:	4605      	mov	r5, r0
 8009e42:	4607      	mov	r7, r0
 8009e44:	4683      	mov	fp, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009e46:	f240 592a 	movw	r9, #1322	; 0x52a
 8009e4a:	6830      	ldr	r0, [r6, #0]
 8009e4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e4e:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009e52:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009e54:	d007      	beq.n	8009e66 <SD_FindSCR+0x76>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e56:	0719      	lsls	r1, r3, #28
 8009e58:	d51c      	bpl.n	8009e94 <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009e5a:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009e5c:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8009e5e:	4620      	mov	r0, r4
 8009e60:	b007      	add	sp, #28
 8009e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009e66:	031b      	lsls	r3, r3, #12
 8009e68:	d40b      	bmi.n	8009e82 <SD_FindSCR+0x92>
 8009e6a:	f1bb 0f00 	cmp.w	fp, #0
 8009e6e:	d108      	bne.n	8009e82 <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009e70:	f002 fe7a 	bl	800cb68 <SDMMC_ReadFIFO>
 8009e74:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009e76:	6830      	ldr	r0, [r6, #0]
      index++;
 8009e78:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009e7c:	f002 fe74 	bl	800cb68 <SDMMC_ReadFIFO>
 8009e80:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e82:	f7f9 fd63 	bl	800394c <HAL_GetTick>
 8009e86:	eba0 000a 	sub.w	r0, r0, sl
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	d1dd      	bne.n	8009e4a <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 8009e8e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009e92:	e7e4      	b.n	8009e5e <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e96:	079a      	lsls	r2, r3, #30
 8009e98:	d501      	bpl.n	8009e9e <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009e9a:	2402      	movs	r4, #2
 8009e9c:	e7de      	b.n	8009e5c <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ea0:	069b      	lsls	r3, r3, #26
 8009ea2:	d501      	bpl.n	8009ea8 <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009ea4:	2420      	movs	r4, #32
 8009ea6:	e7d9      	b.n	8009e5c <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ea8:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <SD_FindSCR+0xcc>)
 8009eaa:	ba2d      	rev	r5, r5
 8009eac:	ba3f      	rev	r7, r7
 8009eae:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009eb0:	f8c8 5000 	str.w	r5, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009eb4:	f8c8 7004 	str.w	r7, [r8, #4]
  return HAL_SD_ERROR_NONE;
 8009eb8:	e7d1      	b.n	8009e5e <SD_FindSCR+0x6e>
 8009eba:	bf00      	nop
 8009ebc:	18000f3a 	.word	0x18000f3a

08009ec0 <HAL_SD_ReadBlocks>:
{
 8009ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec4:	460f      	mov	r7, r1
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	4604      	mov	r4, r0
 8009eca:	4616      	mov	r6, r2
 8009ecc:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8009ece:	f7f9 fd3d 	bl	800394c <HAL_GetTick>
 8009ed2:	4681      	mov	r9, r0
  if(NULL == pData)
 8009ed4:	b92f      	cbnz	r7, 8009ee2 <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ed8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009edc:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009ede:	2001      	movs	r0, #1
 8009ee0:	e010      	b.n	8009f04 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8009ee2:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8009ee6:	b2c0      	uxtb	r0, r0
 8009ee8:	2801      	cmp	r0, #1
 8009eea:	f040 80af 	bne.w	800a04c <HAL_SD_ReadBlocks+0x18c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009eee:	eb06 0308 	add.w	r3, r6, r8
 8009ef2:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ef4:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ef6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ef8:	6361      	str	r1, [r4, #52]	; 0x34
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009efa:	d906      	bls.n	8009f0a <HAL_SD_ReadBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009efc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009f02:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009f04:	b006      	add	sp, #24
 8009f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8009f0a:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8009f0c:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8009f0e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
 8009f14:	62c1      	str	r1, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f16:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f1a:	2b01      	cmp	r3, #1
      add *= 512U;
 8009f1c:	bf18      	it	ne
 8009f1e:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f20:	f002 fed6 	bl	800ccd0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f24:	b148      	cbz	r0, 8009f3a <HAL_SD_ReadBlocks+0x7a>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	4a4a      	ldr	r2, [pc, #296]	; (800a054 <HAL_SD_ReadBlocks+0x194>)
 8009f2a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009f2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f2e:	4318      	orrs	r0, r3
 8009f30:	6360      	str	r0, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009f32:	2001      	movs	r0, #1
 8009f34:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009f38:	e7e4      	b.n	8009f04 <HAL_SD_ReadBlocks+0x44>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f3a:	f04f 33ff 	mov.w	r3, #4294967295
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f3e:	2502      	movs	r5, #2
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f40:	9004      	str	r0, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f42:	4669      	mov	r1, sp
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f44:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009f46:	ea4f 2348 	mov.w	r3, r8, lsl #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009f4a:	9005      	str	r0, [sp, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009f4c:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009f4e:	2390      	movs	r3, #144	; 0x90
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f50:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009f52:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f54:	9503      	str	r5, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f56:	f002 fe6d 	bl	800cc34 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009f5a:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8009f5c:	f1b8 0f01 	cmp.w	r8, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009f60:	68c3      	ldr	r3, [r0, #12]
 8009f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f66:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8009f68:	d926      	bls.n	8009fb8 <HAL_SD_ReadBlocks+0xf8>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009f6a:	62e5      	str	r5, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	f002 fee1 	bl	800cd34 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d1d7      	bne.n	8009f26 <HAL_SD_ReadBlocks+0x66>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009f76:	6820      	ldr	r0, [r4, #0]
 8009f78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009f7a:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8009f7e:	d021      	beq.n	8009fc4 <HAL_SD_ReadBlocks+0x104>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009f80:	68c3      	ldr	r3, [r0, #12]
 8009f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f86:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009f88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009f8a:	05dd      	lsls	r5, r3, #23
 8009f8c:	d509      	bpl.n	8009fa2 <HAL_SD_ReadBlocks+0xe2>
 8009f8e:	f1b8 0f01 	cmp.w	r8, #1
 8009f92:	d906      	bls.n	8009fa2 <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009f94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d003      	beq.n	8009fa2 <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f9a:	f002 ff17 	bl	800cdcc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d1c1      	bne.n	8009f26 <HAL_SD_ReadBlocks+0x66>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fa6:	0711      	lsls	r1, r2, #28
 8009fa8:	d537      	bpl.n	800a01a <HAL_SD_ReadBlocks+0x15a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009faa:	4a2a      	ldr	r2, [pc, #168]	; (800a054 <HAL_SD_ReadBlocks+0x194>)
 8009fac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009fae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fb0:	f043 0308 	orr.w	r3, r3, #8
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8009fb6:	e7bc      	b.n	8009f32 <HAL_SD_ReadBlocks+0x72>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009fb8:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009fba:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009fbe:	f002 fea0 	bl	800cd02 <SDMMC_CmdReadSingleBlock>
 8009fc2:	e7d6      	b.n	8009f72 <HAL_SD_ReadBlocks+0xb2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009fc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009fc6:	041e      	lsls	r6, r3, #16
 8009fc8:	d514      	bpl.n	8009ff4 <HAL_SD_ReadBlocks+0x134>
 8009fca:	1d3e      	adds	r6, r7, #4
 8009fcc:	f107 0a24 	add.w	sl, r7, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009fd0:	6820      	ldr	r0, [r4, #0]
 8009fd2:	3604      	adds	r6, #4
 8009fd4:	f002 fdc8 	bl	800cb68 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009fd8:	f806 0c08 	strb.w	r0, [r6, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009fdc:	0a03      	lsrs	r3, r0, #8
 8009fde:	f806 3c07 	strb.w	r3, [r6, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009fe2:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009fe4:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009fe6:	f806 3c06 	strb.w	r3, [r6, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009fea:	f806 0c05 	strb.w	r0, [r6, #-5]
        for(count = 0U; count < 8U; count++)
 8009fee:	45b2      	cmp	sl, r6
 8009ff0:	d1ee      	bne.n	8009fd0 <HAL_SD_ReadBlocks+0x110>
 8009ff2:	3720      	adds	r7, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009ff4:	f7f9 fcaa 	bl	800394c <HAL_GetTick>
 8009ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ffa:	eba0 0009 	sub.w	r0, r0, r9
 8009ffe:	4298      	cmp	r0, r3
 800a000:	d3b9      	bcc.n	8009f76 <HAL_SD_ReadBlocks+0xb6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a002:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800a004:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a006:	4a13      	ldr	r2, [pc, #76]	; (800a054 <HAL_SD_ReadBlocks+0x194>)
 800a008:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a00a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a00c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a010:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State= HAL_SD_STATE_READY;
 800a012:	2301      	movs	r3, #1
 800a014:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800a018:	e774      	b.n	8009f04 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a01a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a01c:	0792      	lsls	r2, r2, #30
 800a01e:	d505      	bpl.n	800a02c <HAL_SD_ReadBlocks+0x16c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a020:	4a0c      	ldr	r2, [pc, #48]	; (800a054 <HAL_SD_ReadBlocks+0x194>)
 800a022:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a024:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a026:	f043 0302 	orr.w	r3, r3, #2
 800a02a:	e7c3      	b.n	8009fb4 <HAL_SD_ReadBlocks+0xf4>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a02c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a02e:	f010 0020 	ands.w	r0, r0, #32
 800a032:	d005      	beq.n	800a040 <HAL_SD_ReadBlocks+0x180>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a034:	4a07      	ldr	r2, [pc, #28]	; (800a054 <HAL_SD_ReadBlocks+0x194>)
 800a036:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a03a:	f043 0320 	orr.w	r3, r3, #32
 800a03e:	e7b9      	b.n	8009fb4 <HAL_SD_ReadBlocks+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a040:	4a05      	ldr	r2, [pc, #20]	; (800a058 <HAL_SD_ReadBlocks+0x198>)
 800a042:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a044:	2301      	movs	r3, #1
 800a046:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_OK;
 800a04a:	e75b      	b.n	8009f04 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a04c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a04e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a052:	e743      	b.n	8009edc <HAL_SD_ReadBlocks+0x1c>
 800a054:	1fe00fff 	.word	0x1fe00fff
 800a058:	18000f3a 	.word	0x18000f3a

0800a05c <HAL_SD_WriteBlocks>:
{
 800a05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a060:	460e      	mov	r6, r1
 800a062:	b089      	sub	sp, #36	; 0x24
 800a064:	4604      	mov	r4, r0
 800a066:	4691      	mov	r9, r2
 800a068:	461f      	mov	r7, r3
 800a06a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800a06c:	f7f9 fc6e 	bl	800394c <HAL_GetTick>
 800a070:	4680      	mov	r8, r0
  if(NULL == pData)
 800a072:	b92e      	cbnz	r6, 800a080 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a07a:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a07c:	2001      	movs	r0, #1
 800a07e:	e010      	b.n	800a0a2 <HAL_SD_WriteBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 800a080:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800a084:	b2c0      	uxtb	r0, r0
 800a086:	2801      	cmp	r0, #1
 800a088:	f040 80a0 	bne.w	800a1cc <HAL_SD_WriteBlocks+0x170>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a08c:	eb09 0307 	add.w	r3, r9, r7
 800a090:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a092:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a094:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a096:	6361      	str	r1, [r4, #52]	; 0x34
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a098:	d906      	bls.n	800a0a8 <HAL_SD_WriteBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a09a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a09c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a0a0:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a0a2:	b009      	add	sp, #36	; 0x24
 800a0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800a0a8:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800a0aa:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800a0ac:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
 800a0b2:	62c1      	str	r1, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0b4:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0b8:	2b01      	cmp	r3, #1
      add *= 512U;
 800a0ba:	bf18      	it	ne
 800a0bc:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0c0:	f002 fe06 	bl	800ccd0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0c4:	b148      	cbz	r0, 800a0da <HAL_SD_WriteBlocks+0x7e>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	4a42      	ldr	r2, [pc, #264]	; (800a1d4 <HAL_SD_WriteBlocks+0x178>)
 800a0ca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a0cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0ce:	4318      	orrs	r0, r3
 800a0d0:	6360      	str	r0, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a0d8:	e7e3      	b.n	800a0a2 <HAL_SD_WriteBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a0de:	9005      	str	r0, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0e0:	9006      	str	r0, [sp, #24]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0e2:	a902      	add	r1, sp, #8
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0e4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a0e6:	027b      	lsls	r3, r7, #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a0e8:	9007      	str	r0, [sp, #28]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a0ea:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a0ec:	2390      	movs	r3, #144	; 0x90
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0ee:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a0f0:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0f2:	f002 fd9f 	bl	800cc34 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a0f6:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 800a0f8:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a0fa:	68c3      	ldr	r3, [r0, #12]
 800a0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a100:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 800a102:	d926      	bls.n	800a152 <HAL_SD_WriteBlocks+0xf6>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a104:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a106:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a108:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a10a:	f002 fe45 	bl	800cd98 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a10e:	2800      	cmp	r0, #0
 800a110:	d1d9      	bne.n	800a0c6 <HAL_SD_WriteBlocks+0x6a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a112:	6820      	ldr	r0, [r4, #0]
 800a114:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a116:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800a11a:	d020      	beq.n	800a15e <HAL_SD_WriteBlocks+0x102>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a11c:	68c3      	ldr	r3, [r0, #12]
 800a11e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a122:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a124:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a126:	05dd      	lsls	r5, r3, #23
 800a128:	d508      	bpl.n	800a13c <HAL_SD_WriteBlocks+0xe0>
 800a12a:	2f01      	cmp	r7, #1
 800a12c:	d906      	bls.n	800a13c <HAL_SD_WriteBlocks+0xe0>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a12e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a130:	2b03      	cmp	r3, #3
 800a132:	d003      	beq.n	800a13c <HAL_SD_WriteBlocks+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a134:	f002 fe4a 	bl	800cdcc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a138:	2800      	cmp	r0, #0
 800a13a:	d1c4      	bne.n	800a0c6 <HAL_SD_WriteBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a140:	0711      	lsls	r1, r2, #28
 800a142:	d52a      	bpl.n	800a19a <HAL_SD_WriteBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a144:	4a23      	ldr	r2, [pc, #140]	; (800a1d4 <HAL_SD_WriteBlocks+0x178>)
 800a146:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a148:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a14a:	f043 0308 	orr.w	r3, r3, #8
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a14e:	6363      	str	r3, [r4, #52]	; 0x34
 800a150:	e7bf      	b.n	800a0d2 <HAL_SD_WriteBlocks+0x76>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a152:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a154:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a156:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a158:	f002 fe05 	bl	800cd66 <SDMMC_CmdWriteSingleBlock>
 800a15c:	e7d7      	b.n	800a10e <HAL_SD_WriteBlocks+0xb2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 800a15e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a160:	045b      	lsls	r3, r3, #17
 800a162:	d50a      	bpl.n	800a17a <HAL_SD_WriteBlocks+0x11e>
 800a164:	f106 0920 	add.w	r9, r6, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a168:	f856 3b04 	ldr.w	r3, [r6], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a16c:	a901      	add	r1, sp, #4
 800a16e:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a170:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a172:	f002 fcfc 	bl	800cb6e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a176:	45b1      	cmp	r9, r6
 800a178:	d1f6      	bne.n	800a168 <HAL_SD_WriteBlocks+0x10c>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a17a:	f7f9 fbe7 	bl	800394c <HAL_GetTick>
 800a17e:	eba0 0008 	sub.w	r0, r0, r8
 800a182:	42a8      	cmp	r0, r5
 800a184:	d3c5      	bcc.n	800a112 <HAL_SD_WriteBlocks+0xb6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a186:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800a188:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a18a:	4a12      	ldr	r2, [pc, #72]	; (800a1d4 <HAL_SD_WriteBlocks+0x178>)
 800a18c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a18e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a190:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a192:	2301      	movs	r3, #1
 800a194:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800a198:	e783      	b.n	800a0a2 <HAL_SD_WriteBlocks+0x46>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a19a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a19c:	0792      	lsls	r2, r2, #30
 800a19e:	d505      	bpl.n	800a1ac <HAL_SD_WriteBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1a0:	4a0c      	ldr	r2, [pc, #48]	; (800a1d4 <HAL_SD_WriteBlocks+0x178>)
 800a1a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1a6:	f043 0302 	orr.w	r3, r3, #2
 800a1aa:	e7d0      	b.n	800a14e <HAL_SD_WriteBlocks+0xf2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a1ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a1ae:	f010 0010 	ands.w	r0, r0, #16
 800a1b2:	d005      	beq.n	800a1c0 <HAL_SD_WriteBlocks+0x164>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1b4:	4a07      	ldr	r2, [pc, #28]	; (800a1d4 <HAL_SD_WriteBlocks+0x178>)
 800a1b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a1b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1ba:	f043 0310 	orr.w	r3, r3, #16
 800a1be:	e7c6      	b.n	800a14e <HAL_SD_WriteBlocks+0xf2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1c0:	4a05      	ldr	r2, [pc, #20]	; (800a1d8 <HAL_SD_WriteBlocks+0x17c>)
 800a1c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_OK;
 800a1ca:	e76a      	b.n	800a0a2 <HAL_SD_WriteBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a1cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1d2:	e752      	b.n	800a07a <HAL_SD_WriteBlocks+0x1e>
 800a1d4:	1fe00fff 	.word	0x1fe00fff
 800a1d8:	18000f3a 	.word	0x18000f3a

0800a1dc <HAL_SD_ErrorCallback>:
 800a1dc:	4770      	bx	lr

0800a1de <HAL_SD_DriveTransceiver_1_8V_Callback>:
{
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a1e0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a1e2:	0f9a      	lsrs	r2, r3, #30
 800a1e4:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a1e6:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800a1ea:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a1ec:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800a1f0:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a1f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a1f6:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a1f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a1fc:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a1fe:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a200:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a202:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800a204:	0d1a      	lsrs	r2, r3, #20
 800a206:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a208:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800a20c:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a20e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800a212:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a214:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a218:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a21a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800a21e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a220:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800a224:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a226:	2200      	movs	r2, #0
 800a228:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a22a:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 800a22c:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a22e:	2a00      	cmp	r2, #0
 800a230:	d16b      	bne.n	800a30a <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a232:	f640 74fc 	movw	r4, #4092	; 0xffc
 800a236:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800a238:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 800a23c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800a240:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a242:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800a246:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a248:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800a24c:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a24e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800a252:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a254:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a258:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a25c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a25e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a260:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a262:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a264:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a266:	f002 0207 	and.w	r2, r2, #7
 800a26a:	3202      	adds	r2, #2
 800a26c:	4093      	lsls	r3, r2
 800a26e:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a270:	7a0a      	ldrb	r2, [r1, #8]
 800a272:	f002 040f 	and.w	r4, r2, #15
 800a276:	2201      	movs	r2, #1
 800a278:	40a2      	lsls	r2, r4
 800a27a:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a27c:	0a52      	lsrs	r2, r2, #9
 800a27e:	4353      	muls	r3, r2
 800a280:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a282:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a286:	6543      	str	r3, [r0, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a288:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a28a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a28e:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a290:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a298:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a29a:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a29c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->Reserved3 = 0;
 800a29e:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a2a0:	0fda      	lsrs	r2, r3, #31
 800a2a2:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a2a4:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800a2a8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a2aa:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800a2ae:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a2b0:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800a2b4:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a2b6:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800a2ba:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a2be:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 800a2c2:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a2c6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a2ca:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800a2ce:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a2d2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a2d6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a2da:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800a2de:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a2e2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800a2e6:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a2ea:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800a2ee:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a2f2:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a2f6:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a2fa:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a2fe:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800a302:	2301      	movs	r3, #1
 800a304:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 800a308:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a30a:	2a01      	cmp	r2, #1
 800a30c:	d10f      	bne.n	800a32e <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a30e:	041b      	lsls	r3, r3, #16
 800a310:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
 800a314:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a318:	4313      	orrs	r3, r2
 800a31a:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a31c:	690b      	ldr	r3, [r1, #16]
 800a31e:	3301      	adds	r3, #1
 800a320:	029b      	lsls	r3, r3, #10
 800a322:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a324:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a32a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800a32c:	e7ab      	b.n	800a286 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a32e:	6803      	ldr	r3, [r0, #0]
 800a330:	4a05      	ldr	r2, [pc, #20]	; (800a348 <HAL_SD_GetCardCSD+0x168>)
 800a332:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a334:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a33a:	6343      	str	r3, [r0, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a33c:	2301      	movs	r3, #1
 800a33e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    return HAL_ERROR;
 800a342:	4618      	mov	r0, r3
 800a344:	bd10      	pop	{r4, pc}
 800a346:	bf00      	nop
 800a348:	1fe00fff 	.word	0x1fe00fff

0800a34c <HAL_SD_InitCard>:
{
 800a34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a350:	2300      	movs	r3, #0
{
 800a352:	b094      	sub	sp, #80	; 0x50
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a354:	6805      	ldr	r5, [r0, #0]
{
 800a356:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a358:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a35a:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a35c:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a35e:	9307      	str	r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a360:	23fa      	movs	r3, #250	; 0xfa
 800a362:	9308      	str	r3, [sp, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a364:	682b      	ldr	r3, [r5, #0]
 800a366:	f043 0310 	orr.w	r3, r3, #16
 800a36a:	602b      	str	r3, [r5, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 800a36c:	ab07      	add	r3, sp, #28
 800a36e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a372:	ab04      	add	r3, sp, #16
 800a374:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a378:	4628      	mov	r0, r5
 800a37a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a37c:	f002 fba2 	bl	800cac4 <SDMMC_Init>
  if(status != HAL_OK)
 800a380:	2800      	cmp	r0, #0
 800a382:	f040 8105 	bne.w	800a590 <HAL_SD_InitCard+0x244>
  status = SDMMC_PowerState_ON(hsd->Instance);
 800a386:	6820      	ldr	r0, [r4, #0]
 800a388:	f002 fbf6 	bl	800cb78 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f040 80ff 	bne.w	800a590 <HAL_SD_InitCard+0x244>
  __IO uint32_t count = 0;
 800a392:	9003      	str	r0, [sp, #12]
  uint32_t tickstart = HAL_GetTick();
 800a394:	f7f9 fada 	bl	800394c <HAL_GetTick>
 800a398:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a39a:	6820      	ldr	r0, [r4, #0]
 800a39c:	f002 fd56 	bl	800ce4c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d15e      	bne.n	800a464 <HAL_SD_InitCard+0x118>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a3a6:	6820      	ldr	r0, [r4, #0]
 800a3a8:	f002 fd7a 	bl	800cea0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d054      	beq.n	800a45a <HAL_SD_InitCard+0x10e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a3b0:	63e6      	str	r6, [r4, #60]	; 0x3c
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6820      	ldr	r0, [r4, #0]
 800a3b6:	f002 fdb1 	bl	800cf1c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d150      	bne.n	800a460 <HAL_SD_InitCard+0x114>
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a3be:	f64f 78fe 	movw	r8, #65534	; 0xfffe
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3c2:	4605      	mov	r5, r0
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a3c4:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 800a59c <HAL_SD_InitCard+0x250>
 800a3c8:	46c1      	mov	r9, r8
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a3ca:	9b03      	ldr	r3, [sp, #12]
 800a3cc:	4543      	cmp	r3, r8
 800a3ce:	d950      	bls.n	800a472 <HAL_SD_InitCard+0x126>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a3d0:	9b03      	ldr	r3, [sp, #12]
 800a3d2:	454b      	cmp	r3, r9
 800a3d4:	d865      	bhi.n	800a4a2 <HAL_SD_InitCard+0x156>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a3d6:	0043      	lsls	r3, r0, #1
 800a3d8:	d534      	bpl.n	800a444 <HAL_SD_InitCard+0xf8>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a3da:	2301      	movs	r3, #1
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a3dc:	01c6      	lsls	r6, r0, #7
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a3de:	63a3      	str	r3, [r4, #56]	; 0x38
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a3e0:	d530      	bpl.n	800a444 <HAL_SD_InitCard+0xf8>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a3e2:	6820      	ldr	r0, [r4, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a3e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3e8:	65a3      	str	r3, [r4, #88]	; 0x58
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a3ea:	6803      	ldr	r3, [r0, #0]
 800a3ec:	f043 0308 	orr.w	r3, r3, #8
 800a3f0:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a3f2:	f002 fea6 	bl	800d142 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d133      	bne.n	800a464 <HAL_SD_InitCard+0x118>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a400:	0155      	lsls	r5, r2, #5
 800a402:	d551      	bpl.n	800a4a8 <HAL_SD_InitCard+0x15c>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a404:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a408:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40c:	02d8      	lsls	r0, r3, #11
 800a40e:	d527      	bpl.n	800a460 <HAL_SD_InitCard+0x114>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800a410:	2001      	movs	r0, #1
 800a412:	f7ff fee4 	bl	800a1de <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a416:	6822      	ldr	r2, [r4, #0]
 800a418:	6813      	ldr	r3, [r2, #0]
 800a41a:	f043 0304 	orr.w	r3, r3, #4
 800a41e:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a424:	0191      	lsls	r1, r2, #6
 800a426:	d547      	bpl.n	800a4b8 <HAL_SD_InitCard+0x16c>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a42c:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a42e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a430:	02d2      	lsls	r2, r2, #11
 800a432:	d436      	bmi.n	800a4a2 <HAL_SD_InitCard+0x156>
          hsd->Instance->POWER = 0x13U;
 800a434:	2213      	movs	r2, #19
 800a436:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a438:	f04f 32ff 	mov.w	r2, #4294967295
 800a43c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a43e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a442:	65a3      	str	r3, [r4, #88]	; 0x58
  uint16_t sd_rca = 1;
 800a444:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a446:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 800a448:	f8ad 300a 	strh.w	r3, [sp, #10]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a44c:	f002 fb9e 	bl	800cb8c <SDMMC_GetPowerState>
 800a450:	2800      	cmp	r0, #0
 800a452:	d137      	bne.n	800a4c4 <HAL_SD_InitCard+0x178>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a454:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a458:	e075      	b.n	800a546 <HAL_SD_InitCard+0x1fa>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a45a:	2301      	movs	r3, #1
 800a45c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a45e:	e7a8      	b.n	800a3b2 <HAL_SD_InitCard+0x66>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a460:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 800a464:	2501      	movs	r5, #1
 800a466:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a46a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a46c:	431e      	orrs	r6, r3
 800a46e:	6366      	str	r6, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a470:	e05e      	b.n	800a530 <HAL_SD_InitCard+0x1e4>
    while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a472:	2d00      	cmp	r5, #0
 800a474:	d1ac      	bne.n	800a3d0 <HAL_SD_InitCard+0x84>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a476:	4629      	mov	r1, r5
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	f002 fd4f 	bl	800cf1c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a47e:	4606      	mov	r6, r0
 800a480:	2800      	cmp	r0, #0
 800a482:	d1ef      	bne.n	800a464 <HAL_SD_InitCard+0x118>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a484:	4651      	mov	r1, sl
 800a486:	6820      	ldr	r0, [r4, #0]
 800a488:	f002 fd61 	bl	800cf4e <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d1e7      	bne.n	800a460 <HAL_SD_InitCard+0x114>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a490:	4629      	mov	r1, r5
 800a492:	6820      	ldr	r0, [r4, #0]
 800a494:	f002 fbbe 	bl	800cc14 <SDMMC_GetResponse>
      count++;
 800a498:	9b03      	ldr	r3, [sp, #12]
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a49a:	0fc5      	lsrs	r5, r0, #31
      count++;
 800a49c:	3301      	adds	r3, #1
 800a49e:	9303      	str	r3, [sp, #12]
 800a4a0:	e793      	b.n	800a3ca <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a4a2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 800a4a6:	e7dd      	b.n	800a464 <HAL_SD_InitCard+0x118>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a4a8:	f7f9 fa50 	bl	800394c <HAL_GetTick>
 800a4ac:	1bc0      	subs	r0, r0, r7
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	d1a4      	bne.n	800a3fc <HAL_SD_InitCard+0xb0>
            return HAL_SD_ERROR_TIMEOUT;
 800a4b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a4b6:	e7d5      	b.n	800a464 <HAL_SD_InitCard+0x118>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a4b8:	f7f9 fa48 	bl	800394c <HAL_GetTick>
 800a4bc:	1bc0      	subs	r0, r0, r7
 800a4be:	3001      	adds	r0, #1
 800a4c0:	d1ae      	bne.n	800a420 <HAL_SD_InitCard+0xd4>
 800a4c2:	e7f6      	b.n	800a4b2 <HAL_SD_InitCard+0x166>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a4c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	d018      	beq.n	800a4fc <HAL_SD_InitCard+0x1b0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a4ca:	6820      	ldr	r0, [r4, #0]
 800a4cc:	f002 fd6e 	bl	800cfac <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d138      	bne.n	800a546 <HAL_SD_InitCard+0x1fa>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	6820      	ldr	r0, [r4, #0]
 800a4d8:	f002 fb9c 	bl	800cc14 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a4dc:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4de:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a4e0:	6820      	ldr	r0, [r4, #0]
 800a4e2:	f002 fb97 	bl	800cc14 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a4e6:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a4e8:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a4ea:	6820      	ldr	r0, [r4, #0]
 800a4ec:	f002 fb92 	bl	800cc14 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a4f0:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a4f2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	f002 fb8d 	bl	800cc14 <SDMMC_GetResponse>
 800a4fa:	67a0      	str	r0, [r4, #120]	; 0x78
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a4fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d11a      	bne.n	800a538 <HAL_SD_InitCard+0x1ec>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a504:	2b03      	cmp	r3, #3
 800a506:	d125      	bne.n	800a554 <HAL_SD_InitCard+0x208>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800a508:	2104      	movs	r1, #4
 800a50a:	6820      	ldr	r0, [r4, #0]
 800a50c:	f002 fb82 	bl	800cc14 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a510:	a909      	add	r1, sp, #36	; 0x24
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800a512:	0d00      	lsrs	r0, r0, #20
 800a514:	6420      	str	r0, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a516:	4620      	mov	r0, r4
 800a518:	f7ff fe62 	bl	800a1e0 <HAL_SD_GetCardCSD>
 800a51c:	4605      	mov	r5, r0
 800a51e:	2800      	cmp	r0, #0
 800a520:	d138      	bne.n	800a594 <HAL_SD_InitCard+0x248>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800a522:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a524:	4603      	mov	r3, r0
 800a526:	6820      	ldr	r0, [r4, #0]
 800a528:	0412      	lsls	r2, r2, #16
 800a52a:	f002 fc75 	bl	800ce18 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a52e:	b950      	cbnz	r0, 800a546 <HAL_SD_InitCard+0x1fa>
}
 800a530:	4628      	mov	r0, r5
 800a532:	b014      	add	sp, #80	; 0x50
 800a534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a538:	f10d 010a 	add.w	r1, sp, #10
 800a53c:	6820      	ldr	r0, [r4, #0]
 800a53e:	f002 fd61 	bl	800d004 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a542:	2800      	cmp	r0, #0
 800a544:	d0dd      	beq.n	800a502 <HAL_SD_InitCard+0x1b6>
    hsd->State = HAL_SD_STATE_READY;
 800a546:	2501      	movs	r5, #1
 800a548:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a54c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a54e:	4308      	orrs	r0, r1
 800a550:	6360      	str	r0, [r4, #52]	; 0x34
 800a552:	e7ed      	b.n	800a530 <HAL_SD_InitCard+0x1e4>
    hsd->SdCard.RelCardAdd = sd_rca;
 800a554:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a558:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800a55a:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a55c:	0409      	lsls	r1, r1, #16
 800a55e:	f002 fd3b 	bl	800cfd8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a562:	2800      	cmp	r0, #0
 800a564:	d1ef      	bne.n	800a546 <HAL_SD_InitCard+0x1fa>
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a566:	4601      	mov	r1, r0
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	f002 fb53 	bl	800cc14 <SDMMC_GetResponse>
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a56e:	2104      	movs	r1, #4
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a570:	65e0      	str	r0, [r4, #92]	; 0x5c
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a572:	6820      	ldr	r0, [r4, #0]
 800a574:	f002 fb4e 	bl	800cc14 <SDMMC_GetResponse>
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a578:	2108      	movs	r1, #8
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a57a:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	f002 fb49 	bl	800cc14 <SDMMC_GetResponse>
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a582:	210c      	movs	r1, #12
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a584:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a586:	6820      	ldr	r0, [r4, #0]
 800a588:	f002 fb44 	bl	800cc14 <SDMMC_GetResponse>
 800a58c:	66a0      	str	r0, [r4, #104]	; 0x68
 800a58e:	e7bb      	b.n	800a508 <HAL_SD_InitCard+0x1bc>
    return HAL_ERROR;
 800a590:	2501      	movs	r5, #1
 800a592:	e7cd      	b.n	800a530 <HAL_SD_InitCard+0x1e4>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a594:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a598:	e7d5      	b.n	800a546 <HAL_SD_InitCard+0x1fa>
 800a59a:	bf00      	nop
 800a59c:	c1100000 	.word	0xc1100000

0800a5a0 <HAL_SD_GetCardStatus>:
{
 800a5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	b096      	sub	sp, #88	; 0x58
 800a5a8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800a5aa:	f7f9 f9cf 	bl	800394c <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a5ae:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800a5b0:	4607      	mov	r7, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a5b2:	6820      	ldr	r0, [r4, #0]
 800a5b4:	f002 fb2e 	bl	800cc14 <SDMMC_GetResponse>
 800a5b8:	0183      	lsls	r3, r0, #6
 800a5ba:	f100 8095 	bmi.w	800a6e8 <HAL_SD_GetCardStatus+0x148>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 800a5be:	2140      	movs	r1, #64	; 0x40
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	f002 fb85 	bl	800ccd0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5c6:	b158      	cbz	r0, 800a5e0 <HAL_SD_GetCardStatus+0x40>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a5c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5ca:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	4a4b      	ldr	r2, [pc, #300]	; (800a6fc <HAL_SD_GetCardStatus+0x15c>)
 800a5d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a5d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5d4:	4318      	orrs	r0, r3
 800a5d6:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a5d8:	2001      	movs	r0, #1
 800a5da:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 800a5de:	e062      	b.n	800a6a6 <HAL_SD_GetCardStatus+0x106>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a5e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a5e2:	6820      	ldr	r0, [r4, #0]
 800a5e4:	0409      	lsls	r1, r1, #16
 800a5e6:	f002 fc99 	bl	800cf1c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d1ec      	bne.n	800a5c8 <HAL_SD_GetCardStatus+0x28>
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f2:	f04f 0c60 	mov.w	ip, #96	; 0x60
 800a5f6:	f04f 0e02 	mov.w	lr, #2
 800a5fa:	2640      	movs	r6, #64	; 0x40
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a5fc:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a5fe:	4669      	mov	r1, sp
 800a600:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a602:	e88d 5048 	stmia.w	sp, {r3, r6, ip, lr}
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a606:	2301      	movs	r3, #1
 800a608:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a60a:	f002 fb13 	bl	800cc34 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a60e:	6820      	ldr	r0, [r4, #0]
 800a610:	f002 fd63 	bl	800d0da <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a614:	2800      	cmp	r0, #0
 800a616:	d1d7      	bne.n	800a5c8 <HAL_SD_GetCardStatus+0x28>
 800a618:	ae06      	add	r6, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a61e:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800a622:	d043      	beq.n	800a6ac <HAL_SD_GetCardStatus+0x10c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a626:	0711      	lsls	r1, r2, #28
 800a628:	d461      	bmi.n	800a6ee <HAL_SD_GetCardStatus+0x14e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a62a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a62c:	0792      	lsls	r2, r2, #30
 800a62e:	d460      	bmi.n	800a6f2 <HAL_SD_GetCardStatus+0x152>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a632:	069b      	lsls	r3, r3, #26
 800a634:	d45f      	bmi.n	800a6f6 <HAL_SD_GetCardStatus+0x156>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a636:	6820      	ldr	r0, [r4, #0]
 800a638:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a63a:	f412 5200 	ands.w	r2, r2, #8192	; 0x2000
 800a63e:	d149      	bne.n	800a6d4 <HAL_SD_GetCardStatus+0x134>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a640:	9906      	ldr	r1, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a642:	4b2f      	ldr	r3, [pc, #188]	; (800a700 <HAL_SD_GetCardStatus+0x160>)
 800a644:	6383      	str	r3, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a646:	f3c1 1381 	ubfx	r3, r1, #6, #2
 800a64a:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a64c:	f3c1 1340 	ubfx	r3, r1, #5, #1
 800a650:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a652:	0a0b      	lsrs	r3, r1, #8
 800a654:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a658:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	806b      	strh	r3, [r5, #2]
 800a660:	9b07      	ldr	r3, [sp, #28]
 800a662:	ba1b      	rev	r3, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a664:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a666:	9b08      	ldr	r3, [sp, #32]
 800a668:	b2d9      	uxtb	r1, r3
 800a66a:	7229      	strb	r1, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a66c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a670:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a672:	f3c3 5103 	ubfx	r1, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a676:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a678:	72a9      	strb	r1, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a67a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a67c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a680:	b2c8      	uxtb	r0, r1
 800a682:	4303      	orrs	r3, r0
  return HAL_OK;
 800a684:	4610      	mov	r0, r2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a686:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a688:	f3c1 2385 	ubfx	r3, r1, #10, #6
 800a68c:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a68e:	f3c1 2301 	ubfx	r3, r1, #8, #2
 800a692:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a694:	f3c1 1303 	ubfx	r3, r1, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a698:	f001 010f 	and.w	r1, r1, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a69c:	742b      	strb	r3, [r5, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a69e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a6a2:	7469      	strb	r1, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a6a4:	74ab      	strb	r3, [r5, #18]
}
 800a6a6:	b016      	add	sp, #88	; 0x58
 800a6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ae:	0418      	lsls	r0, r3, #16
 800a6b0:	d508      	bpl.n	800a6c4 <HAL_SD_GetCardStatus+0x124>
 800a6b2:	f106 0820 	add.w	r8, r6, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a6b6:	6820      	ldr	r0, [r4, #0]
 800a6b8:	f002 fa56 	bl	800cb68 <SDMMC_ReadFIFO>
 800a6bc:	f846 0b04 	str.w	r0, [r6], #4
      for(count = 0U; count < 8U; count++)
 800a6c0:	4546      	cmp	r6, r8
 800a6c2:	d1f8      	bne.n	800a6b6 <HAL_SD_GetCardStatus+0x116>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a6c4:	f7f9 f942 	bl	800394c <HAL_GetTick>
 800a6c8:	1bc0      	subs	r0, r0, r7
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d1a5      	bne.n	800a61a <HAL_SD_GetCardStatus+0x7a>
      return HAL_SD_ERROR_TIMEOUT;
 800a6ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a6d2:	e77b      	b.n	800a5cc <HAL_SD_GetCardStatus+0x2c>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a6d4:	f002 fa48 	bl	800cb68 <SDMMC_ReadFIFO>
 800a6d8:	f846 0b04 	str.w	r0, [r6], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a6dc:	f7f9 f936 	bl	800394c <HAL_GetTick>
 800a6e0:	1bc0      	subs	r0, r0, r7
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	d1a7      	bne.n	800a636 <HAL_SD_GetCardStatus+0x96>
 800a6e6:	e7f2      	b.n	800a6ce <HAL_SD_GetCardStatus+0x12e>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a6e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a6ec:	e76e      	b.n	800a5cc <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a6ee:	2008      	movs	r0, #8
 800a6f0:	e76c      	b.n	800a5cc <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a6f2:	2002      	movs	r0, #2
 800a6f4:	e76a      	b.n	800a5cc <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 800a6f6:	2020      	movs	r0, #32
 800a6f8:	e768      	b.n	800a5cc <HAL_SD_GetCardStatus+0x2c>
 800a6fa:	bf00      	nop
 800a6fc:	1fe00fff 	.word	0x1fe00fff
 800a700:	18000f3a 	.word	0x18000f3a

0800a704 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a704:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a706:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a708:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a70a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a70c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a70e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a710:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a712:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a714:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a716:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a718:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a71a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a71c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a71e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a720:	6d43      	ldr	r3, [r0, #84]	; 0x54
}
 800a722:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a724:	61cb      	str	r3, [r1, #28]
}
 800a726:	4770      	bx	lr

0800a728 <HAL_SD_ConfigWideBusOperation>:
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800a728:	f431 4380 	bics.w	r3, r1, #16384	; 0x4000
{
 800a72c:	b530      	push	{r4, r5, lr}
 800a72e:	4604      	mov	r4, r0
 800a730:	b089      	sub	sp, #36	; 0x24
 800a732:	460d      	mov	r5, r1
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800a734:	d007      	beq.n	800a746 <HAL_SD_ConfigWideBusOperation+0x1e>
 800a736:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a73a:	d004      	beq.n	800a746 <HAL_SD_ConfigWideBusOperation+0x1e>
 800a73c:	f240 7195 	movw	r1, #1941	; 0x795
 800a740:	4842      	ldr	r0, [pc, #264]	; (800a84c <HAL_SD_ConfigWideBusOperation+0x124>)
 800a742:	f7f7 fcfa 	bl	800213a <assert_failed>
  hsd->State = HAL_SD_STATE_BUSY;
 800a746:	2303      	movs	r3, #3
 800a748:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a74c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d002      	beq.n	800a758 <HAL_SD_ConfigWideBusOperation+0x30>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a752:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a756:	d103      	bne.n	800a760 <HAL_SD_ConfigWideBusOperation+0x38>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a75a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a75e:	e04e      	b.n	800a7fe <HAL_SD_ConfigWideBusOperation+0xd6>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a760:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 800a764:	d127      	bne.n	800a7b6 <HAL_SD_ConfigWideBusOperation+0x8e>
  uint32_t scr[2] = {0, 0};
 800a766:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a768:	6820      	ldr	r0, [r4, #0]
  uint32_t scr[2] = {0, 0};
 800a76a:	9103      	str	r1, [sp, #12]
 800a76c:	9104      	str	r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a76e:	f002 fa51 	bl	800cc14 <SDMMC_GetResponse>
 800a772:	0180      	lsls	r0, r0, #6
 800a774:	d43a      	bmi.n	800a7ec <HAL_SD_ConfigWideBusOperation+0xc4>
  errorstate = SD_FindSCR(hsd, scr);
 800a776:	a903      	add	r1, sp, #12
 800a778:	4620      	mov	r0, r4
 800a77a:	f7ff fb39 	bl	8009df0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a77e:	b960      	cbnz	r0, 800a79a <HAL_SD_ConfigWideBusOperation+0x72>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a780:	9b04      	ldr	r3, [sp, #16]
 800a782:	0359      	lsls	r1, r3, #13
 800a784:	d535      	bpl.n	800a7f2 <HAL_SD_ConfigWideBusOperation+0xca>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a786:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a788:	6820      	ldr	r0, [r4, #0]
 800a78a:	0409      	lsls	r1, r1, #16
 800a78c:	f002 fbc6 	bl	800cf1c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a790:	b918      	cbnz	r0, 800a79a <HAL_SD_ConfigWideBusOperation+0x72>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800a792:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800a794:	6820      	ldr	r0, [r4, #0]
 800a796:	f002 fcd2 	bl	800d13e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a79a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a79c:	4318      	orrs	r0, r3
 800a79e:	6360      	str	r0, [r4, #52]	; 0x34
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a7a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d02d      	beq.n	800a802 <HAL_SD_ConfigWideBusOperation+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7a6:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a7a8:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7aa:	4a29      	ldr	r2, [pc, #164]	; (800a850 <HAL_SD_ConfigWideBusOperation+0x128>)
 800a7ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a7ae:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 800a7b2:	b009      	add	sp, #36	; 0x24
 800a7b4:	bd30      	pop	{r4, r5, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a7b6:	b9fd      	cbnz	r5, 800a7f8 <HAL_SD_ConfigWideBusOperation+0xd0>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	6820      	ldr	r0, [r4, #0]
  uint32_t scr[2] = {0, 0};
 800a7bc:	9503      	str	r5, [sp, #12]
 800a7be:	9504      	str	r5, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7c0:	f002 fa28 	bl	800cc14 <SDMMC_GetResponse>
 800a7c4:	0182      	lsls	r2, r0, #6
 800a7c6:	d411      	bmi.n	800a7ec <HAL_SD_ConfigWideBusOperation+0xc4>
  errorstate = SD_FindSCR(hsd, scr);
 800a7c8:	a903      	add	r1, sp, #12
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f7ff fb10 	bl	8009df0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d1e2      	bne.n	800a79a <HAL_SD_ConfigWideBusOperation+0x72>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	03db      	lsls	r3, r3, #15
 800a7d8:	d50b      	bpl.n	800a7f2 <HAL_SD_ConfigWideBusOperation+0xca>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a7da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a7dc:	6820      	ldr	r0, [r4, #0]
 800a7de:	0409      	lsls	r1, r1, #16
 800a7e0:	f002 fb9c 	bl	800cf1c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d1d8      	bne.n	800a79a <HAL_SD_ConfigWideBusOperation+0x72>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	e7d3      	b.n	800a794 <HAL_SD_ConfigWideBusOperation+0x6c>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a7ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a7f0:	e7d3      	b.n	800a79a <HAL_SD_ConfigWideBusOperation+0x72>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a7f2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a7f6:	e7d0      	b.n	800a79a <HAL_SD_ConfigWideBusOperation+0x72>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a7f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7fe:	6363      	str	r3, [r4, #52]	; 0x34
 800a800:	e7ce      	b.n	800a7a0 <HAL_SD_ConfigWideBusOperation+0x78>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a802:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 800a804:	9505      	str	r5, [sp, #20]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a806:	9303      	str	r3, [sp, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a808:	68a3      	ldr	r3, [r4, #8]
 800a80a:	9304      	str	r3, [sp, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	9306      	str	r3, [sp, #24]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a810:	6963      	ldr	r3, [r4, #20]
 800a812:	2b03      	cmp	r3, #3
 800a814:	d90f      	bls.n	800a836 <HAL_SD_ConfigWideBusOperation+0x10e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a816:	9307      	str	r3, [sp, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a818:	ab08      	add	r3, sp, #32
 800a81a:	e913 0003 	ldmdb	r3, {r0, r1}
 800a81e:	ab03      	add	r3, sp, #12
 800a820:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a824:	6820      	ldr	r0, [r4, #0]
 800a826:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a828:	f002 f94c 	bl	800cac4 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800a82c:	2301      	movs	r3, #1
  return HAL_OK;
 800a82e:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 800a830:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800a834:	e7bd      	b.n	800a7b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a836:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a838:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a83c:	d0eb      	beq.n	800a816 <HAL_SD_ConfigWideBusOperation+0xee>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a83e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a842:	bf0c      	ite	eq
 800a844:	2302      	moveq	r3, #2
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a846:	2304      	movne	r3, #4
 800a848:	e7e5      	b.n	800a816 <HAL_SD_ConfigWideBusOperation+0xee>
 800a84a:	bf00      	nop
 800a84c:	080139e3 	.word	0x080139e3
 800a850:	1fe00fff 	.word	0x1fe00fff

0800a854 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a854:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800a856:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a858:	0409      	lsls	r1, r1, #16
{
 800a85a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a85c:	6800      	ldr	r0, [r0, #0]
 800a85e:	f002 fc23 	bl	800d0a8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a862:	4601      	mov	r1, r0
 800a864:	b928      	cbnz	r0, 800a872 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a866:	6820      	ldr	r0, [r4, #0]
 800a868:	f002 f9d4 	bl	800cc14 <SDMMC_GetResponse>
  return (HAL_SD_CardStateTypedef)cardstate;
 800a86c:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800a870:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800a872:	6b63      	ldr	r3, [r4, #52]	; 0x34
  uint32_t resp1 = 0;
 800a874:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800a876:	4319      	orrs	r1, r3
 800a878:	6361      	str	r1, [r4, #52]	; 0x34
 800a87a:	e7f7      	b.n	800a86c <HAL_SD_GetCardState+0x18>

0800a87c <HAL_SD_Init>:
{
 800a87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(hsd == NULL)
 800a880:	4604      	mov	r4, r0
{
 800a882:	b09c      	sub	sp, #112	; 0x70
  if(hsd == NULL)
 800a884:	b908      	cbnz	r0, 800a88a <HAL_SD_Init+0xe>
      return HAL_ERROR;
 800a886:	2501      	movs	r5, #1
 800a888:	e17d      	b.n	800ab86 <HAL_SD_Init+0x30a>
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 800a88a:	6802      	ldr	r2, [r0, #0]
 800a88c:	4bb0      	ldr	r3, [pc, #704]	; (800ab50 <HAL_SD_Init+0x2d4>)
 800a88e:	429a      	cmp	r2, r3
 800a890:	d003      	beq.n	800a89a <HAL_SD_Init+0x1e>
 800a892:	21f7      	movs	r1, #247	; 0xf7
 800a894:	48af      	ldr	r0, [pc, #700]	; (800ab54 <HAL_SD_Init+0x2d8>)
 800a896:	f7f7 fc50 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800a89a:	6863      	ldr	r3, [r4, #4]
 800a89c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a8a0:	d003      	beq.n	800a8aa <HAL_SD_Init+0x2e>
 800a8a2:	21f8      	movs	r1, #248	; 0xf8
 800a8a4:	48ab      	ldr	r0, [pc, #684]	; (800ab54 <HAL_SD_Init+0x2d8>)
 800a8a6:	f7f7 fc48 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800a8aa:	68a3      	ldr	r3, [r4, #8]
 800a8ac:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a8b0:	d003      	beq.n	800a8ba <HAL_SD_Init+0x3e>
 800a8b2:	21f9      	movs	r1, #249	; 0xf9
 800a8b4:	48a7      	ldr	r0, [pc, #668]	; (800ab54 <HAL_SD_Init+0x2d8>)
 800a8b6:	f7f7 fc40 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800a8ba:	68e3      	ldr	r3, [r4, #12]
 800a8bc:	f433 4280 	bics.w	r2, r3, #16384	; 0x4000
 800a8c0:	d006      	beq.n	800a8d0 <HAL_SD_Init+0x54>
 800a8c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8c6:	d003      	beq.n	800a8d0 <HAL_SD_Init+0x54>
 800a8c8:	21fa      	movs	r1, #250	; 0xfa
 800a8ca:	48a2      	ldr	r0, [pc, #648]	; (800ab54 <HAL_SD_Init+0x2d8>)
 800a8cc:	f7f7 fc35 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800a8d6:	d003      	beq.n	800a8e0 <HAL_SD_Init+0x64>
 800a8d8:	21fb      	movs	r1, #251	; 0xfb
 800a8da:	489e      	ldr	r0, [pc, #632]	; (800ab54 <HAL_SD_Init+0x2d8>)
 800a8dc:	f7f7 fc2d 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800a8e0:	6963      	ldr	r3, [r4, #20]
 800a8e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8e6:	d303      	bcc.n	800a8f0 <HAL_SD_Init+0x74>
 800a8e8:	21fc      	movs	r1, #252	; 0xfc
 800a8ea:	489a      	ldr	r0, [pc, #616]	; (800ab54 <HAL_SD_Init+0x2d8>)
 800a8ec:	f7f7 fc25 	bl	800213a <assert_failed>
  if(hsd->State == HAL_SD_STATE_RESET)
 800a8f0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a8f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a8f8:	b91b      	cbnz	r3, 800a902 <HAL_SD_Init+0x86>
    hsd->Lock = HAL_UNLOCKED;
 800a8fa:	7622      	strb	r2, [r4, #24]
    HAL_SD_MspInit(hsd);
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f7f7 fd3d 	bl	800237c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800a902:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a904:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800a906:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a90a:	f7ff fd1f 	bl	800a34c <HAL_SD_InitCard>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d1b9      	bne.n	800a886 <HAL_SD_Init+0xa>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a912:	a901      	add	r1, sp, #4
 800a914:	4620      	mov	r0, r4
 800a916:	f7ff fe43 	bl	800a5a0 <HAL_SD_GetCardStatus>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d1b3      	bne.n	800a886 <HAL_SD_Init+0xa>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a91e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800a920:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a924:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a926:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800a92a:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a92c:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a92e:	d15a      	bne.n	800a9e6 <HAL_SD_Init+0x16a>
 800a930:	b90a      	cbnz	r2, 800a936 <HAL_SD_Init+0xba>
 800a932:	2b00      	cmp	r3, #0
 800a934:	d054      	beq.n	800a9e0 <HAL_SD_Init+0x164>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a936:	f44f 7300 	mov.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a93a:	65a3      	str	r3, [r4, #88]	; 0x58
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a93c:	68e1      	ldr	r1, [r4, #12]
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff fef2 	bl	800a728 <HAL_SD_ConfigWideBusOperation>
 800a944:	4605      	mov	r5, r0
 800a946:	2800      	cmp	r0, #0
 800a948:	d19d      	bne.n	800a886 <HAL_SD_Init+0xa>
  if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800a94a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a94c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a950:	d003      	beq.n	800a95a <HAL_SD_Init+0xde>
 800a952:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a954:	2a01      	cmp	r2, #1
 800a956:	f040 8096 	bne.w	800aa86 <HAL_SD_Init+0x20a>
    hsd->Instance->CLKCR |= 0x00100000U;
 800a95a:	6822      	ldr	r2, [r4, #0]
  */
uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 800a95c:	2640      	movs	r6, #64	; 0x40
 800a95e:	2100      	movs	r1, #0
 800a960:	a80c      	add	r0, sp, #48	; 0x30
    hsd->Instance->CLKCR |= 0x00100000U;
 800a962:	6853      	ldr	r3, [r2, #4]
 800a964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a968:	6053      	str	r3, [r2, #4]
  uint32_t SD_hs[16]  = {0};
 800a96a:	4632      	mov	r2, r6
 800a96c:	f007 fdbe 	bl	80124ec <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 800a970:	f7f8 ffec 	bl	800394c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800a974:	6da3      	ldr	r3, [r4, #88]	; 0x58
  uint32_t Timeout = HAL_GetTick();
 800a976:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d084      	beq.n	800a886 <HAL_SD_Init+0xa>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a97c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a980:	d172      	bne.n	800aa68 <HAL_SD_Init+0x1ec>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 800a982:	6820      	ldr	r0, [r4, #0]
 800a984:	2300      	movs	r3, #0
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 800a986:	4631      	mov	r1, r6
    hsd->Instance->DCTRL = 0;
 800a988:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 800a98a:	f002 f9a1 	bl	800ccd0 <SDMMC_CmdBlockLength>

    if (errorstate != HAL_SD_ERROR_NONE)
 800a98e:	2800      	cmp	r0, #0
 800a990:	f47f af79 	bne.w	800a886 <HAL_SD_Init+0xa>
    {
      return errorstate;
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a994:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64;
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a998:	900a      	str	r0, [sp, #40]	; 0x28
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;

    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800a99a:	a906      	add	r1, sp, #24
 800a99c:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a99e:	9306      	str	r3, [sp, #24]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800a9a0:	2360      	movs	r3, #96	; 0x60
    sdmmc_datainitstructure.DataLength    = 64;
 800a9a2:	9607      	str	r6, [sp, #28]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800a9a4:	9308      	str	r3, [sp, #32]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	9309      	str	r3, [sp, #36]	; 0x24
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	930b      	str	r3, [sp, #44]	; 0x2c
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800a9ae:	f002 f941 	bl	800cc34 <SDMMC_ConfigData>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	f47f af67 	bne.w	800a886 <HAL_SD_Init+0xa>
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 800a9b8:	4967      	ldr	r1, [pc, #412]	; (800ab58 <HAL_SD_Init+0x2dc>)
 800a9ba:	6820      	ldr	r0, [r4, #0]
 800a9bc:	f002 fba6 	bl	800d10c <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	f47f af60 	bne.w	800a886 <HAL_SD_Init+0xa>
 800a9c6:	4681      	mov	r9, r0
    {
      return errorstate;
    }

    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800a9c8:	f240 572a 	movw	r7, #1322	; 0x52a
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a9d0:	403e      	ands	r6, r7
 800a9d2:	d00a      	beq.n	800a9ea <HAL_SD_Init+0x16e>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a9d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9d6:	0716      	lsls	r6, r2, #28
 800a9d8:	d524      	bpl.n	800aa24 <HAL_SD_Init+0x1a8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a9da:	2208      	movs	r2, #8
 800a9dc:	639a      	str	r2, [r3, #56]	; 0x38
 800a9de:	e043      	b.n	800aa68 <HAL_SD_Init+0x1ec>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a9e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9e4:	e7a9      	b.n	800a93a <HAL_SD_Init+0xbe>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a9e6:	65a0      	str	r0, [r4, #88]	; 0x58
 800a9e8:	e7a8      	b.n	800a93c <HAL_SD_Init+0xc0>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ec:	041b      	lsls	r3, r3, #16
 800a9ee:	d50c      	bpl.n	800aa0a <HAL_SD_Init+0x18e>
 800a9f0:	ab0c      	add	r3, sp, #48	; 0x30
 800a9f2:	eb03 1a49 	add.w	sl, r3, r9, lsl #5
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800a9f6:	6820      	ldr	r0, [r4, #0]
 800a9f8:	f002 f8b6 	bl	800cb68 <SDMMC_ReadFIFO>
 800a9fc:	f84a 0026 	str.w	r0, [sl, r6, lsl #2]
        for (count = 0U; count < 8U; count++)
 800aa00:	3601      	adds	r6, #1
 800aa02:	2e08      	cmp	r6, #8
 800aa04:	d1f7      	bne.n	800a9f6 <HAL_SD_Init+0x17a>
        loop ++;
 800aa06:	f109 0901 	add.w	r9, r9, #1
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800aa0a:	f7f8 ff9f 	bl	800394c <HAL_GetTick>
 800aa0e:	eba0 0008 	sub.w	r0, r0, r8
 800aa12:	3001      	adds	r0, #1
 800aa14:	d1da      	bne.n	800a9cc <HAL_SD_Init+0x150>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800aa16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa1a:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State= HAL_SD_STATE_READY;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800aa22:	e730      	b.n	800a886 <HAL_SD_Init+0xa>

      errorstate = 0;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800aa24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa26:	0790      	lsls	r0, r2, #30
 800aa28:	d502      	bpl.n	800aa30 <HAL_SD_Init+0x1b4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800aa2a:	2202      	movs	r2, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800aa2c:	639a      	str	r2, [r3, #56]	; 0x38
 800aa2e:	e72a      	b.n	800a886 <HAL_SD_Init+0xa>

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aa30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa32:	0691      	lsls	r1, r2, #26
 800aa34:	d501      	bpl.n	800aa3a <HAL_SD_Init+0x1be>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800aa36:	2220      	movs	r2, #32
 800aa38:	e7f8      	b.n	800aa2c <HAL_SD_Init+0x1b0>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa3a:	4a48      	ldr	r2, [pc, #288]	; (800ab5c <HAL_SD_Init+0x2e0>)
 800aa3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800aa3e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 800aa42:	079a      	lsls	r2, r3, #30
 800aa44:	f57f af1f 	bpl.w	800a886 <HAL_SD_Init+0xa>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
    }
    else
    {
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800aa48:	2001      	movs	r0, #1
 800aa4a:	f7ff fbc8 	bl	800a1de <HAL_SD_DriveTransceiver_1_8V_Callback>
#if defined (DLYB_SDMMC1) || defined (DLYB_SDMMC2)
      /* Enable DelayBlock IP */
      /* SDMMC_FB_CLK tuned feedback clock selected as receive clock, for SDR104 */
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 800aa4e:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(DLYB_SDMMC1) != HAL_OK)
 800aa50:	4843      	ldr	r0, [pc, #268]	; (800ab60 <HAL_SD_Init+0x2e4>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 800aa52:	6853      	ldr	r3, [r2, #4]
 800aa54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800aa58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa5c:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(DLYB_SDMMC1) != HAL_OK)
 800aa5e:	f001 ff07 	bl	800c870 <DelayBlock_Enable>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	f47f af0f 	bne.w	800a886 <HAL_SD_Init+0xa>
  tickstart = HAL_GetTick();
 800aa68:	f7f8 ff70 	bl	800394c <HAL_GetTick>
 800aa6c:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f7ff fef0 	bl	800a854 <HAL_SD_GetCardState>
 800aa74:	2804      	cmp	r0, #4
 800aa76:	d179      	bne.n	800ab6c <HAL_SD_Init+0x2f0>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aa7c:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800aa84:	e07f      	b.n	800ab86 <HAL_SD_Init+0x30a>
  else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 800aa86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa8a:	d1ed      	bne.n	800aa68 <HAL_SD_Init+0x1ec>
  uint32_t SD_hs[16]  = {0};
 800aa8c:	2640      	movs	r6, #64	; 0x40
 800aa8e:	4601      	mov	r1, r0
 800aa90:	a80c      	add	r0, sp, #48	; 0x30
 800aa92:	4632      	mov	r2, r6
 800aa94:	f007 fd2a 	bl	80124ec <memset>
  uint32_t Timeout = HAL_GetTick();
 800aa98:	f7f8 ff58 	bl	800394c <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800aa9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  uint32_t Timeout = HAL_GetTick();
 800aa9e:	4607      	mov	r7, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f43f aef0 	beq.w	800a886 <HAL_SD_Init+0xa>
  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aaa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaaa:	d1dd      	bne.n	800aa68 <HAL_SD_Init+0x1ec>
    hsd->Instance->DCTRL = 0;
 800aaac:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 800aaae:	4631      	mov	r1, r6
    hsd->Instance->DCTRL = 0;
 800aab0:	62c5      	str	r5, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 800aab2:	f002 f90d 	bl	800ccd0 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 800aab6:	2800      	cmp	r0, #0
 800aab8:	f47f aee5 	bne.w	800a886 <HAL_SD_Init+0xa>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aabc:	f04f 33ff 	mov.w	r3, #4294967295
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800aac0:	a906      	add	r1, sp, #24
 800aac2:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aac4:	9306      	str	r3, [sp, #24]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800aac6:	2360      	movs	r3, #96	; 0x60
    sdmmc_datainitstructure.DataLength    = 64;
 800aac8:	9607      	str	r6, [sp, #28]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800aaca:	9308      	str	r3, [sp, #32]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aacc:	2302      	movs	r3, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aace:	950a      	str	r5, [sp, #40]	; 0x28
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aad0:	9309      	str	r3, [sp, #36]	; 0x24
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800aad2:	2301      	movs	r3, #1
 800aad4:	930b      	str	r3, [sp, #44]	; 0x2c
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800aad6:	f002 f8ad 	bl	800cc34 <SDMMC_ConfigData>
 800aada:	2800      	cmp	r0, #0
 800aadc:	f47f aed3 	bne.w	800a886 <HAL_SD_Init+0xa>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 800aae0:	4920      	ldr	r1, [pc, #128]	; (800ab64 <HAL_SD_Init+0x2e8>)
 800aae2:	6820      	ldr	r0, [r4, #0]
 800aae4:	f002 fb12 	bl	800d10c <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 800aae8:	2800      	cmp	r0, #0
 800aaea:	f47f aecc 	bne.w	800a886 <HAL_SD_Init+0xa>
 800aaee:	46a9      	mov	r9, r5
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800aaf0:	f240 582a 	movw	r8, #1322	; 0x52a
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800aaf8:	ea16 0608 	ands.w	r6, r6, r8
 800aafc:	d011      	beq.n	800ab22 <HAL_SD_Init+0x2a6>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aafe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab00:	0710      	lsls	r0, r2, #28
 800ab02:	f53f af6a 	bmi.w	800a9da <HAL_SD_Init+0x15e>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ab06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab08:	0791      	lsls	r1, r2, #30
 800ab0a:	d48e      	bmi.n	800aa2a <HAL_SD_Init+0x1ae>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ab0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab0e:	0692      	lsls	r2, r2, #26
 800ab10:	d491      	bmi.n	800aa36 <HAL_SD_Init+0x1ba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab12:	4a15      	ldr	r2, [pc, #84]	; (800ab68 <HAL_SD_Init+0x2ec>)
 800ab14:	639a      	str	r2, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800ab16:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 800ab1a:	079b      	lsls	r3, r3, #30
 800ab1c:	f57f aeb3 	bpl.w	800a886 <HAL_SD_Init+0xa>
 800ab20:	e7a2      	b.n	800aa68 <HAL_SD_Init+0x1ec>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ab22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab24:	041b      	lsls	r3, r3, #16
 800ab26:	d50c      	bpl.n	800ab42 <HAL_SD_Init+0x2c6>
 800ab28:	ab0c      	add	r3, sp, #48	; 0x30
 800ab2a:	eb03 1a49 	add.w	sl, r3, r9, lsl #5
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800ab2e:	6820      	ldr	r0, [r4, #0]
 800ab30:	f002 f81a 	bl	800cb68 <SDMMC_ReadFIFO>
 800ab34:	f84a 0026 	str.w	r0, [sl, r6, lsl #2]
        for (count = 0U; count < 8U; count++)
 800ab38:	3601      	adds	r6, #1
 800ab3a:	2e08      	cmp	r6, #8
 800ab3c:	d1f7      	bne.n	800ab2e <HAL_SD_Init+0x2b2>
        loop ++;
 800ab3e:	f109 0901 	add.w	r9, r9, #1
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800ab42:	f7f8 ff03 	bl	800394c <HAL_GetTick>
 800ab46:	1bc0      	subs	r0, r0, r7
 800ab48:	3001      	adds	r0, #1
 800ab4a:	d1d3      	bne.n	800aaf4 <HAL_SD_Init+0x278>
 800ab4c:	e763      	b.n	800aa16 <HAL_SD_Init+0x19a>
 800ab4e:	bf00      	nop
 800ab50:	52007000 	.word	0x52007000
 800ab54:	080139e3 	.word	0x080139e3
 800ab58:	80ff1f03 	.word	0x80ff1f03
 800ab5c:	18000f3a 	.word	0x18000f3a
 800ab60:	52008000 	.word	0x52008000
 800ab64:	80ffff01 	.word	0x80ffff01
 800ab68:	1fe00fff 	.word	0x1fe00fff
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800ab6c:	f7f8 feee 	bl	800394c <HAL_GetTick>
 800ab70:	1b80      	subs	r0, r0, r6
 800ab72:	3001      	adds	r0, #1
 800ab74:	f47f af7b 	bne.w	800aa6e <HAL_SD_Init+0x1f2>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ab78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      return HAL_TIMEOUT;
 800ab7c:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ab7e:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State= HAL_SD_STATE_READY;
 800ab80:	2301      	movs	r3, #1
 800ab82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800ab86:	4628      	mov	r0, r5
 800ab88:	b01c      	add	sp, #112	; 0x70
 800ab8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8e:	bf00      	nop

0800ab90 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
 800ab90:	4770      	bx	lr

0800ab92 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800ab92:	4770      	bx	lr

0800ab94 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800ab94:	4770      	bx	lr

0800ab96 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ab96:	4770      	bx	lr

0800ab98 <HAL_SD_IRQHandler>:
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800ab98:	6803      	ldr	r3, [r0, #0]
{
 800ab9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t context = hsd->Context;
 800ab9c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
 800ab9e:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800aba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aba2:	05d2      	lsls	r2, r2, #23
 800aba4:	d54f      	bpl.n	800ac46 <HAL_SD_IRQHandler+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800aba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abaa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT   |\
 800abac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abae:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 800abb2:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 800abb6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800abb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800abbe:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800abc0:	68da      	ldr	r2, [r3, #12]
 800abc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abc6:	60da      	str	r2, [r3, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800abc8:	f015 0208 	ands.w	r2, r5, #8
 800abcc:	d01e      	beq.n	800ac0c <HAL_SD_IRQHandler+0x74>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800abce:	f015 0f22 	tst.w	r5, #34	; 0x22
 800abd2:	d009      	beq.n	800abe8 <HAL_SD_IRQHandler+0x50>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800abd4:	4618      	mov	r0, r3
 800abd6:	f002 f8f9 	bl	800cdcc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800abda:	b128      	cbz	r0, 800abe8 <HAL_SD_IRQHandler+0x50>
          hsd->ErrorCode |= errorstate;
 800abdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abde:	4318      	orrs	r0, r3
 800abe0:	6360      	str	r0, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800abe2:	4620      	mov	r0, r4
 800abe4:	f7ff fafa 	bl	800a1dc <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800abe8:	6823      	ldr	r3, [r4, #0]
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800abea:	07af      	lsls	r7, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800abec:	4a6e      	ldr	r2, [pc, #440]	; (800ada8 <HAL_SD_IRQHandler+0x210>)
 800abee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800abf0:	f04f 0301 	mov.w	r3, #1
 800abf4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800abf8:	d004      	beq.n	800ac04 <HAL_SD_IRQHandler+0x6c>
        HAL_SD_RxCpltCallback(hsd);
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7f6 f982 	bl	8000f04 <HAL_SD_RxCpltCallback>
}
 800ac00:	b003      	add	sp, #12
 800ac02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SD_TxCpltCallback(hsd);
 800ac04:	4620      	mov	r0, r4
 800ac06:	f7f6 f978 	bl	8000efa <HAL_SD_TxCpltCallback>
 800ac0a:	e7f9      	b.n	800ac00 <HAL_SD_IRQHandler+0x68>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ac0c:	062e      	lsls	r6, r5, #24
 800ac0e:	d5f7      	bpl.n	800ac00 <HAL_SD_IRQHandler+0x68>
      if((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U)
 800ac10:	07e8      	lsls	r0, r5, #31
      hsd->Instance->DLEN = 0;
 800ac12:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ac14:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ac16:	651a      	str	r2, [r3, #80]	; 0x50
      if((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U)
 800ac18:	d409      	bmi.n	800ac2e <HAL_SD_IRQHandler+0x96>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f002 f8d6 	bl	800cdcc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800ac20:	b128      	cbz	r0, 800ac2e <HAL_SD_IRQHandler+0x96>
          hsd->ErrorCode |= errorstate;
 800ac22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac24:	4318      	orrs	r0, r3
 800ac26:	6360      	str	r0, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f7ff fad7 	bl	800a1dc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800ac2e:	2301      	movs	r3, #1
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ac30:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800ac34:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ac38:	d002      	beq.n	800ac40 <HAL_SD_IRQHandler+0xa8>
        HAL_SD_TxCpltCallback(hsd);
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f7f6 f95d 	bl	8000efa <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ac40:	07a9      	lsls	r1, r5, #30
 800ac42:	d0dd      	beq.n	800ac00 <HAL_SD_IRQHandler+0x68>
 800ac44:	e7d9      	b.n	800abfa <HAL_SD_IRQHandler+0x62>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 800ac46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac48:	0452      	lsls	r2, r2, #17
 800ac4a:	d51f      	bpl.n	800ac8c <HAL_SD_IRQHandler+0xf4>
  tmp = hsd->pTxBuffPtr;
 800ac4c:	69c6      	ldr	r6, [r0, #28]
 800ac4e:	1d35      	adds	r5, r6, #4
 800ac50:	f106 0724 	add.w	r7, r6, #36	; 0x24
    data = (uint32_t)(*tmp);
 800ac54:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800ac58:	3504      	adds	r5, #4
    (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ac5a:	a901      	add	r1, sp, #4
 800ac5c:	6820      	ldr	r0, [r4, #0]
    data = (uint32_t)(*tmp);
 800ac5e:	9301      	str	r3, [sp, #4]
    data |= ((uint32_t)(*tmp) << 8U);
 800ac60:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 800ac64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ac68:	9301      	str	r3, [sp, #4]
    data |= ((uint32_t)(*tmp) << 16U);
 800ac6a:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 800ac6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac72:	9301      	str	r3, [sp, #4]
    data |= ((uint32_t)(*tmp) << 24U);
 800ac74:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 800ac78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ac7c:	9301      	str	r3, [sp, #4]
    (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ac7e:	f001 ff76 	bl	800cb6e <SDMMC_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800ac82:	42af      	cmp	r7, r5
 800ac84:	d1e6      	bne.n	800ac54 <HAL_SD_IRQHandler+0xbc>
  hsd->pTxBuffPtr = tmp;
 800ac86:	3620      	adds	r6, #32
 800ac88:	61e6      	str	r6, [r4, #28]
 800ac8a:	e7b9      	b.n	800ac00 <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 800ac8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac8e:	0417      	lsls	r7, r2, #16
 800ac90:	d517      	bpl.n	800acc2 <HAL_SD_IRQHandler+0x12a>
  tmp = hsd->pRxBuffPtr;
 800ac92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac94:	1d35      	adds	r5, r6, #4
 800ac96:	f106 0724 	add.w	r7, r6, #36	; 0x24
    data = SDMMC_ReadFIFO(hsd->Instance);
 800ac9a:	6820      	ldr	r0, [r4, #0]
 800ac9c:	3504      	adds	r5, #4
 800ac9e:	f001 ff63 	bl	800cb68 <SDMMC_ReadFIFO>
    *tmp = (uint8_t)(data & 0xFFU);
 800aca2:	f805 0c08 	strb.w	r0, [r5, #-8]
    *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800aca6:	0a03      	lsrs	r3, r0, #8
 800aca8:	f805 3c07 	strb.w	r3, [r5, #-7]
    *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800acac:	0c03      	lsrs	r3, r0, #16
    *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800acae:	0e00      	lsrs	r0, r0, #24
    *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800acb0:	f805 3c06 	strb.w	r3, [r5, #-6]
    *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800acb4:	f805 0c05 	strb.w	r0, [r5, #-5]
  for(count = 0U; count < 8U; count++)
 800acb8:	42bd      	cmp	r5, r7
 800acba:	d1ee      	bne.n	800ac9a <HAL_SD_IRQHandler+0x102>
  hsd->pRxBuffPtr = tmp;
 800acbc:	3620      	adds	r6, #32
 800acbe:	6266      	str	r6, [r4, #36]	; 0x24
 800acc0:	e79e      	b.n	800ac00 <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 800acc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acc4:	f012 0f3a 	tst.w	r2, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800acc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 800acca:	d052      	beq.n	800ad72 <HAL_SD_IRQHandler+0x1da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800accc:	0796      	lsls	r6, r2, #30
 800acce:	d503      	bpl.n	800acd8 <HAL_SD_IRQHandler+0x140>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800acd0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800acd2:	f042 0202 	orr.w	r2, r2, #2
 800acd6:	6342      	str	r2, [r0, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800acd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acda:	0710      	lsls	r0, r2, #28
 800acdc:	d503      	bpl.n	800ace6 <HAL_SD_IRQHandler+0x14e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800acde:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ace0:	f042 0208 	orr.w	r2, r2, #8
 800ace4:	6362      	str	r2, [r4, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ace6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ace8:	0691      	lsls	r1, r2, #26
 800acea:	d503      	bpl.n	800acf4 <HAL_SD_IRQHandler+0x15c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800acec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800acee:	f042 0220 	orr.w	r2, r2, #32
 800acf2:	6362      	str	r2, [r4, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800acf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acf6:	06d2      	lsls	r2, r2, #27
 800acf8:	d503      	bpl.n	800ad02 <HAL_SD_IRQHandler+0x16a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800acfa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800acfc:	f042 0210 	orr.w	r2, r2, #16
 800ad00:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ad02:	4a29      	ldr	r2, [pc, #164]	; (800ada8 <HAL_SD_IRQHandler+0x210>)
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad04:	4618      	mov	r0, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ad06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ad08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad0a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ad0e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad16:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ad18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ad20:	68da      	ldr	r2, [r3, #12]
 800ad22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad26:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad28:	f002 f850 	bl	800cdcc <SDMMC_CmdStopTransfer>
 800ad2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if((context & SD_CONTEXT_IT) != 0U)
 800ad2e:	f015 0108 	ands.w	r1, r5, #8
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad32:	ea40 0003 	orr.w	r0, r0, r3
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ad36:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad38:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ad3a:	68da      	ldr	r2, [r3, #12]
 800ad3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad40:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ad42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad46:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ad48:	d006      	beq.n	800ad58 <HAL_SD_IRQHandler+0x1c0>
        hsd->State = HAL_SD_STATE_READY;
 800ad4a:	2301      	movs	r3, #1
        HAL_SD_ErrorCallback(hsd);
 800ad4c:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 800ad4e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800ad52:	f7ff fa43 	bl	800a1dc <HAL_SD_ErrorCallback>
 800ad56:	e753      	b.n	800ac00 <HAL_SD_IRQHandler+0x68>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ad58:	062f      	lsls	r7, r5, #24
 800ad5a:	f57f af51 	bpl.w	800ac00 <HAL_SD_IRQHandler+0x68>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	f43f af4d 	beq.w	800ac00 <HAL_SD_IRQHandler+0x68>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ad66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad68:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ad6c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ad6e:	6519      	str	r1, [r3, #80]	; 0x50
 800ad70:	e7eb      	b.n	800ad4a <HAL_SD_IRQHandler+0x1b2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_IDMABTC) != RESET)
 800ad72:	00d6      	lsls	r6, r2, #3
 800ad74:	f57f af44 	bpl.w	800ac00 <HAL_SD_IRQHandler+0x68>
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ad78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad7a:	0759      	lsls	r1, r3, #29
 800ad7c:	d40c      	bmi.n	800ad98 <HAL_SD_IRQHandler+0x200>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ad7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ad80:	069a      	lsls	r2, r3, #26
 800ad82:	d506      	bpl.n	800ad92 <HAL_SD_IRQHandler+0x1fa>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800ad84:	f7ff ff07 	bl	800ab96 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ad90:	e736      	b.n	800ac00 <HAL_SD_IRQHandler+0x68>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800ad92:	f7ff fefe 	bl	800ab92 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800ad96:	e7f7      	b.n	800ad88 <HAL_SD_IRQHandler+0x1f0>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ad98:	06ab      	lsls	r3, r5, #26
 800ad9a:	d502      	bpl.n	800ada2 <HAL_SD_IRQHandler+0x20a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800ad9c:	f7ff fefa 	bl	800ab94 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800ada0:	e7f2      	b.n	800ad88 <HAL_SD_IRQHandler+0x1f0>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800ada2:	f7ff fef5 	bl	800ab90 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
 800ada6:	e7ef      	b.n	800ad88 <HAL_SD_IRQHandler+0x1f0>
 800ada8:	18000f3a 	.word	0x18000f3a

0800adac <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800adac:	6803      	ldr	r3, [r0, #0]
 800adae:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800adb0:	699a      	ldr	r2, [r3, #24]
 800adb2:	f042 0208 	orr.w	r2, r2, #8
 800adb6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	f042 0210 	orr.w	r2, r2, #16
 800adbe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	f022 0201 	bic.w	r2, r2, #1
 800adc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800adc8:	691a      	ldr	r2, [r3, #16]
 800adca:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 800adce:	f022 0203 	bic.w	r2, r2, #3
 800add2:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN);
 800add4:	689a      	ldr	r2, [r3, #8]
 800add6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800adda:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800addc:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800ade0:	2a04      	cmp	r2, #4
 800ade2:	d00b      	beq.n	800adfc <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != RESET)
 800ade4:	068a      	lsls	r2, r1, #26
 800ade6:	d509      	bpl.n	800adfc <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ade8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800adec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800adf0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800adf4:	699a      	ldr	r2, [r3, #24]
 800adf6:	f042 0220 	orr.w	r2, r2, #32
 800adfa:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800adfc:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800ae00:	2a03      	cmp	r2, #3
 800ae02:	d00b      	beq.n	800ae1c <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != RESET)
 800ae04:	064a      	lsls	r2, r1, #25
 800ae06:	d509      	bpl.n	800ae1c <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae08:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ae0c:	f042 0204 	orr.w	r2, r2, #4
 800ae10:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae14:	699a      	ldr	r2, [r3, #24]
 800ae16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae1a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != RESET)
 800ae1c:	058a      	lsls	r2, r1, #22
 800ae1e:	d509      	bpl.n	800ae34 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae20:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ae24:	f042 0201 	orr.w	r2, r2, #1
 800ae28:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae2c:	699a      	ldr	r2, [r3, #24]
 800ae2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae32:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != RESET)
 800ae34:	05ca      	lsls	r2, r1, #23
 800ae36:	d509      	bpl.n	800ae4c <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae38:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ae3c:	f042 0208 	orr.w	r2, r2, #8
 800ae40:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae44:	699a      	ldr	r2, [r3, #24]
 800ae46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = 0U;
 800ae52:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 800ae56:	4770      	bx	lr

0800ae58 <HAL_SPI_Init>:
{
 800ae58:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	b908      	cbnz	r0, 800ae62 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 800ae5e:	2001      	movs	r0, #1
 800ae60:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800ae62:	6803      	ldr	r3, [r0, #0]
 800ae64:	4a82      	ldr	r2, [pc, #520]	; (800b070 <HAL_SPI_Init+0x218>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d016      	beq.n	800ae98 <HAL_SPI_Init+0x40>
 800ae6a:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d012      	beq.n	800ae98 <HAL_SPI_Init+0x40>
 800ae72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d00e      	beq.n	800ae98 <HAL_SPI_Init+0x40>
 800ae7a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d00a      	beq.n	800ae98 <HAL_SPI_Init+0x40>
 800ae82:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d006      	beq.n	800ae98 <HAL_SPI_Init+0x40>
 800ae8a:	4a7a      	ldr	r2, [pc, #488]	; (800b074 <HAL_SPI_Init+0x21c>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d003      	beq.n	800ae98 <HAL_SPI_Init+0x40>
 800ae90:	21d1      	movs	r1, #209	; 0xd1
 800ae92:	4879      	ldr	r0, [pc, #484]	; (800b078 <HAL_SPI_Init+0x220>)
 800ae94:	f7f7 f951 	bl	800213a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800ae98:	6863      	ldr	r3, [r4, #4]
 800ae9a:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800ae9e:	d003      	beq.n	800aea8 <HAL_SPI_Init+0x50>
 800aea0:	21d2      	movs	r1, #210	; 0xd2
 800aea2:	4875      	ldr	r0, [pc, #468]	; (800b078 <HAL_SPI_Init+0x220>)
 800aea4:	f7f7 f949 	bl	800213a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800aea8:	68a3      	ldr	r3, [r4, #8]
 800aeaa:	f433 23c0 	bics.w	r3, r3, #393216	; 0x60000
 800aeae:	d003      	beq.n	800aeb8 <HAL_SPI_Init+0x60>
 800aeb0:	21d3      	movs	r1, #211	; 0xd3
 800aeb2:	4871      	ldr	r0, [pc, #452]	; (800b078 <HAL_SPI_Init+0x220>)
 800aeb4:	f7f7 f941 	bl	800213a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800aeb8:	68e3      	ldr	r3, [r4, #12]
 800aeba:	3b03      	subs	r3, #3
 800aebc:	2b1c      	cmp	r3, #28
 800aebe:	d903      	bls.n	800aec8 <HAL_SPI_Init+0x70>
 800aec0:	21d4      	movs	r1, #212	; 0xd4
 800aec2:	486d      	ldr	r0, [pc, #436]	; (800b078 <HAL_SPI_Init+0x220>)
 800aec4:	f7f7 f939 	bl	800213a <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800aec8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aeca:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800aece:	d00b      	beq.n	800aee8 <HAL_SPI_Init+0x90>
 800aed0:	2b80      	cmp	r3, #128	; 0x80
 800aed2:	d009      	beq.n	800aee8 <HAL_SPI_Init+0x90>
 800aed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aed8:	d006      	beq.n	800aee8 <HAL_SPI_Init+0x90>
 800aeda:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800aede:	d003      	beq.n	800aee8 <HAL_SPI_Init+0x90>
 800aee0:	21d5      	movs	r1, #213	; 0xd5
 800aee2:	4865      	ldr	r0, [pc, #404]	; (800b078 <HAL_SPI_Init+0x220>)
 800aee4:	f7f7 f929 	bl	800213a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800aee8:	69a3      	ldr	r3, [r4, #24]
 800aeea:	f033 6280 	bics.w	r2, r3, #67108864	; 0x4000000
 800aeee:	d006      	beq.n	800aefe <HAL_SPI_Init+0xa6>
 800aef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aef4:	d003      	beq.n	800aefe <HAL_SPI_Init+0xa6>
 800aef6:	21d6      	movs	r1, #214	; 0xd6
 800aef8:	485f      	ldr	r0, [pc, #380]	; (800b078 <HAL_SPI_Init+0x220>)
 800aefa:	f7f7 f91e 	bl	800213a <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800aefe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af00:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 800af04:	d003      	beq.n	800af0e <HAL_SPI_Init+0xb6>
 800af06:	21d7      	movs	r1, #215	; 0xd7
 800af08:	485b      	ldr	r0, [pc, #364]	; (800b078 <HAL_SPI_Init+0x220>)
 800af0a:	f7f7 f916 	bl	800213a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800af0e:	69e3      	ldr	r3, [r4, #28]
 800af10:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800af14:	d006      	beq.n	800af24 <HAL_SPI_Init+0xcc>
 800af16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af1a:	d003      	beq.n	800af24 <HAL_SPI_Init+0xcc>
 800af1c:	21d8      	movs	r1, #216	; 0xd8
 800af1e:	4856      	ldr	r0, [pc, #344]	; (800b078 <HAL_SPI_Init+0x220>)
 800af20:	f7f7 f90b 	bl	800213a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800af24:	6a23      	ldr	r3, [r4, #32]
 800af26:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800af2a:	d003      	beq.n	800af34 <HAL_SPI_Init+0xdc>
 800af2c:	21d9      	movs	r1, #217	; 0xd9
 800af2e:	4852      	ldr	r0, [pc, #328]	; (800b078 <HAL_SPI_Init+0x220>)
 800af30:	f7f7 f903 	bl	800213a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800af34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af36:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800af3a:	d003      	beq.n	800af44 <HAL_SPI_Init+0xec>
 800af3c:	21da      	movs	r1, #218	; 0xda
 800af3e:	484e      	ldr	r0, [pc, #312]	; (800b078 <HAL_SPI_Init+0x220>)
 800af40:	f7f7 f8fb 	bl	800213a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800af44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af46:	b97b      	cbnz	r3, 800af68 <HAL_SPI_Init+0x110>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 800af4e:	d003      	beq.n	800af58 <HAL_SPI_Init+0x100>
 800af50:	21dd      	movs	r1, #221	; 0xdd
 800af52:	4849      	ldr	r0, [pc, #292]	; (800b078 <HAL_SPI_Init+0x220>)
 800af54:	f7f7 f8f1 	bl	800213a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800af58:	6963      	ldr	r3, [r4, #20]
 800af5a:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 800af5e:	d003      	beq.n	800af68 <HAL_SPI_Init+0x110>
 800af60:	21de      	movs	r1, #222	; 0xde
 800af62:	4845      	ldr	r0, [pc, #276]	; (800b078 <HAL_SPI_Init+0x220>)
 800af64:	f7f7 f8e9 	bl	800213a <assert_failed>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af68:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af6a:	6822      	ldr	r2, [r4, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af6c:	62a3      	str	r3, [r4, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af6e:	4b40      	ldr	r3, [pc, #256]	; (800b070 <HAL_SPI_Init+0x218>)
 800af70:	429a      	cmp	r2, r3
 800af72:	68e3      	ldr	r3, [r4, #12]
 800af74:	d009      	beq.n	800af8a <HAL_SPI_Init+0x132>
 800af76:	4941      	ldr	r1, [pc, #260]	; (800b07c <HAL_SPI_Init+0x224>)
 800af78:	428a      	cmp	r2, r1
 800af7a:	d006      	beq.n	800af8a <HAL_SPI_Init+0x132>
 800af7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800af80:	428a      	cmp	r2, r1
 800af82:	d002      	beq.n	800af8a <HAL_SPI_Init+0x132>
 800af84:	2b0f      	cmp	r3, #15
 800af86:	f63f af6a 	bhi.w	800ae5e <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 800af8a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 800af8c:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 800af8e:	0949      	lsrs	r1, r1, #5
  data_size = (data_size+7)/8;
 800af90:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800af92:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 800af96:	4936      	ldr	r1, [pc, #216]	; (800b070 <HAL_SPI_Init+0x218>)
 800af98:	428a      	cmp	r2, r1
 800af9a:	d067      	beq.n	800b06c <HAL_SPI_Init+0x214>
 800af9c:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800afa0:	428a      	cmp	r2, r1
 800afa2:	d063      	beq.n	800b06c <HAL_SPI_Init+0x214>
 800afa4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800afa8:	428a      	cmp	r2, r1
 800afaa:	d05f      	beq.n	800b06c <HAL_SPI_Init+0x214>
 800afac:	2b08      	cmp	r3, #8
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 800afae:	f63f af56 	bhi.w	800ae5e <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800afb2:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800afb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800afba:	b923      	cbnz	r3, 800afc6 <HAL_SPI_Init+0x16e>
    hspi->Lock = HAL_UNLOCKED;
 800afbc:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800afc0:	4620      	mov	r0, r4
 800afc2:	f7f7 fa99 	bl	80024f8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800afc6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800afc8:	6822      	ldr	r2, [r4, #0]
 800afca:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800afcc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800afd0:	6813      	ldr	r3, [r2, #0]
 800afd2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800afd4:	f023 0301 	bic.w	r3, r3, #1
 800afd8:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800afda:	69a3      	ldr	r3, [r4, #24]
 800afdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afe0:	d107      	bne.n	800aff2 <HAL_SPI_Init+0x19a>
 800afe2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800afe6:	d104      	bne.n	800aff2 <HAL_SPI_Init+0x19a>
 800afe8:	b91d      	cbnz	r5, 800aff2 <HAL_SPI_Init+0x19a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800afea:	6810      	ldr	r0, [r2, #0]
 800afec:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800aff0:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aff4:	69e0      	ldr	r0, [r4, #28]
 800aff6:	4330      	orrs	r0, r6
 800aff8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800affa:	4330      	orrs	r0, r6
 800affc:	68e6      	ldr	r6, [r4, #12]
 800affe:	4330      	orrs	r0, r6
 800b000:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b002:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b004:	4303      	orrs	r3, r0
 800b006:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b008:	4303      	orrs	r3, r0
 800b00a:	6920      	ldr	r0, [r4, #16]
 800b00c:	432b      	orrs	r3, r5
 800b00e:	4303      	orrs	r3, r0
 800b010:	6960      	ldr	r0, [r4, #20]
 800b012:	4303      	orrs	r3, r0
 800b014:	6a20      	ldr	r0, [r4, #32]
 800b016:	4303      	orrs	r3, r0
 800b018:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b01a:	430b      	orrs	r3, r1
 800b01c:	4303      	orrs	r3, r0
 800b01e:	68a0      	ldr	r0, [r4, #8]
 800b020:	4303      	orrs	r3, r0
 800b022:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b024:	4303      	orrs	r3, r0
 800b026:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b028:	4303      	orrs	r3, r0
 800b02a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b02c:	b959      	cbnz	r1, 800b046 <HAL_SPI_Init+0x1ee>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b02e:	6893      	ldr	r3, [r2, #8]
 800b030:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b034:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b038:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b03a:	6893      	ldr	r3, [r2, #8]
 800b03c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b044:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b046:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b048:	f023 0301 	bic.w	r3, r3, #1
 800b04c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b04e:	024b      	lsls	r3, r1, #9
 800b050:	d505      	bpl.n	800b05e <HAL_SPI_Init+0x206>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b052:	68d3      	ldr	r3, [r2, #12]
 800b054:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b05a:	430b      	orrs	r3, r1
 800b05c:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b05e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800b060:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b062:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b066:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 800b06c:	2b10      	cmp	r3, #16
 800b06e:	e79e      	b.n	800afae <HAL_SPI_Init+0x156>
 800b070:	40013000 	.word	0x40013000
 800b074:	58001400 	.word	0x58001400
 800b078:	08013a20 	.word	0x08013a20
 800b07c:	40003800 	.word	0x40003800

0800b080 <HAL_SPI_Transmit>:
{
 800b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
 800b086:	6883      	ldr	r3, [r0, #8]
{
 800b088:	4617      	mov	r7, r2
 800b08a:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
 800b08c:	f433 3200 	bics.w	r2, r3, #131072	; 0x20000
{
 800b090:	4688      	mov	r8, r1
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
 800b092:	d007      	beq.n	800b0a4 <HAL_SPI_Transmit+0x24>
 800b094:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b098:	d004      	beq.n	800b0a4 <HAL_SPI_Transmit+0x24>
 800b09a:	f240 11e9 	movw	r1, #489	; 0x1e9
 800b09e:	488b      	ldr	r0, [pc, #556]	; (800b2cc <HAL_SPI_Transmit+0x24c>)
 800b0a0:	f7f7 f84b 	bl	800213a <assert_failed>
  __HAL_LOCK(hspi);
 800b0a4:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d00c      	beq.n	800b0c6 <HAL_SPI_Transmit+0x46>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800b0b2:	f7f8 fc4b 	bl	800394c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b0b6:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 800b0ba:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d005      	beq.n	800b0cc <HAL_SPI_Transmit+0x4c>
    __HAL_UNLOCK(hspi);
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b0c6:	2002      	movs	r0, #2
 800b0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800b0cc:	f1b8 0f00 	cmp.w	r8, #0
 800b0d0:	d000      	beq.n	800b0d4 <HAL_SPI_Transmit+0x54>
 800b0d2:	b92f      	cbnz	r7, 800b0e0 <HAL_SPI_Transmit+0x60>
    __HAL_UNLOCK(hspi);
 800b0d4:	2300      	movs	r3, #0
    return errorcode;
 800b0d6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b0d8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800b0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b0e0:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b0e2:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b0e6:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b0ea:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 800b0f4:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->TxXferCount = Size;
 800b0f6:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  hspi->RxXferSize  = 0U;
 800b0fa:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = 0U;
 800b0fe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b102:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxISR       = NULL;
 800b104:	6723      	str	r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	d103      	bne.n	800b118 <HAL_SPI_Transmit+0x98>
    SPI_1LINE_TX(hspi);
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b116:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b118:	6859      	ldr	r1, [r3, #4]
 800b11a:	0c09      	lsrs	r1, r1, #16
 800b11c:	0409      	lsls	r1, r1, #16
 800b11e:	4339      	orrs	r1, r7
 800b120:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	f042 0201 	orr.w	r2, r2, #1
 800b128:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b12a:	6862      	ldr	r2, [r4, #4]
 800b12c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800b130:	d103      	bne.n	800b13a <HAL_SPI_Transmit+0xba>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b138:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b13a:	68e3      	ldr	r3, [r4, #12]
 800b13c:	2b0f      	cmp	r3, #15
 800b13e:	d82e      	bhi.n	800b19e <HAL_SPI_Transmit+0x11e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b140:	2b07      	cmp	r3, #7
 800b142:	d875      	bhi.n	800b230 <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 800b144:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b148:	b29b      	uxth	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d02c      	beq.n	800b1a8 <HAL_SPI_Transmit+0x128>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b14e:	6822      	ldr	r2, [r4, #0]
 800b150:	6953      	ldr	r3, [r2, #20]
 800b152:	079f      	lsls	r7, r3, #30
 800b154:	f140 809d 	bpl.w	800b292 <HAL_SPI_Transmit+0x212>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b158:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	2b03      	cmp	r3, #3
 800b160:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b162:	d97d      	bls.n	800b260 <HAL_SPI_Transmit+0x1e0>
 800b164:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b166:	2940      	cmp	r1, #64	; 0x40
 800b168:	d97a      	bls.n	800b260 <HAL_SPI_Transmit+0x1e0>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b16a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b16e:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b170:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=4;
 800b172:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b176:	3b04      	subs	r3, #4
          hspi->TxXferCount-=2;
 800b178:	b29b      	uxth	r3, r3
 800b17a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800b17e:	e7e1      	b.n	800b144 <HAL_SPI_Transmit+0xc4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b180:	6822      	ldr	r2, [r4, #0]
 800b182:	6953      	ldr	r3, [r2, #20]
 800b184:	079f      	lsls	r7, r3, #30
 800b186:	d523      	bpl.n	800b1d0 <HAL_SPI_Transmit+0x150>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b188:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b18a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b18e:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b190:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800b192:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b196:	3b01      	subs	r3, #1
 800b198:	b29b      	uxth	r3, r3
 800b19a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 800b19e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1eb      	bne.n	800b180 <HAL_SPI_Transmit+0x100>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b1a8:	6822      	ldr	r2, [r4, #0]
 800b1aa:	6953      	ldr	r3, [r2, #20]
 800b1ac:	071b      	lsls	r3, r3, #28
 800b1ae:	d57c      	bpl.n	800b2aa <HAL_SPI_Transmit+0x22a>
  SPI_CloseTransfer(hspi);
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f7ff fdfb 	bl	800adac <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1c2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 800b1c6:	3000      	adds	r0, #0
 800b1c8:	bf18      	it	ne
 800b1ca:	2001      	movne	r0, #1
 800b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b1d0:	b985      	cbnz	r5, 800b1f4 <HAL_SPI_Transmit+0x174>
          SPI_CloseTransfer(hspi);
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f7ff fdea 	bl	800adac <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800b1d8:	2300      	movs	r3, #0
          hspi->State = HAL_SPI_STATE_READY;
 800b1da:	2001      	movs	r0, #1
          __HAL_UNLOCK(hspi);
 800b1dc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b1ec:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 800b1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b1f4:	1c68      	adds	r0, r5, #1
 800b1f6:	d0d2      	beq.n	800b19e <HAL_SPI_Transmit+0x11e>
 800b1f8:	f7f8 fba8 	bl	800394c <HAL_GetTick>
 800b1fc:	1b80      	subs	r0, r0, r6
 800b1fe:	4285      	cmp	r5, r0
 800b200:	d8cd      	bhi.n	800b19e <HAL_SPI_Transmit+0x11e>
 800b202:	e7e6      	b.n	800b1d2 <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b204:	6822      	ldr	r2, [r4, #0]
 800b206:	6953      	ldr	r3, [r2, #20]
 800b208:	0799      	lsls	r1, r3, #30
 800b20a:	d51f      	bpl.n	800b24c <HAL_SPI_Transmit+0x1cc>
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b20c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b210:	b29b      	uxth	r3, r3
 800b212:	2b01      	cmp	r3, #1
 800b214:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b216:	d911      	bls.n	800b23c <HAL_SPI_Transmit+0x1bc>
 800b218:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b21a:	b179      	cbz	r1, 800b23c <HAL_SPI_Transmit+0x1bc>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b21c:	f853 1b04 	ldr.w	r1, [r3], #4
 800b220:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b222:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 800b224:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b228:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 800b230:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b234:	b29b      	uxth	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1e4      	bne.n	800b204 <HAL_SPI_Transmit+0x184>
 800b23a:	e7b5      	b.n	800b1a8 <HAL_SPI_Transmit+0x128>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800b23c:	f833 1b02 	ldrh.w	r1, [r3], #2
 800b240:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b242:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800b244:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b248:	3b01      	subs	r3, #1
 800b24a:	e7ee      	b.n	800b22a <HAL_SPI_Transmit+0x1aa>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b24c:	2d00      	cmp	r5, #0
 800b24e:	d0c0      	beq.n	800b1d2 <HAL_SPI_Transmit+0x152>
 800b250:	1c6b      	adds	r3, r5, #1
 800b252:	d0ed      	beq.n	800b230 <HAL_SPI_Transmit+0x1b0>
 800b254:	f7f8 fb7a 	bl	800394c <HAL_GetTick>
 800b258:	1b80      	subs	r0, r0, r6
 800b25a:	4285      	cmp	r5, r0
 800b25c:	d8e8      	bhi.n	800b230 <HAL_SPI_Transmit+0x1b0>
 800b25e:	e7b8      	b.n	800b1d2 <HAL_SPI_Transmit+0x152>
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b260:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800b264:	b289      	uxth	r1, r1
 800b266:	2901      	cmp	r1, #1
 800b268:	d909      	bls.n	800b27e <HAL_SPI_Transmit+0x1fe>
 800b26a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b26c:	b139      	cbz	r1, 800b27e <HAL_SPI_Transmit+0x1fe>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800b26e:	f833 1b02 	ldrh.w	r1, [r3], #2
 800b272:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b274:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 800b276:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b27a:	3b02      	subs	r3, #2
 800b27c:	e77c      	b.n	800b178 <HAL_SPI_Transmit+0xf8>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b284:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b286:	3301      	adds	r3, #1
 800b288:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800b28a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b28e:	3b01      	subs	r3, #1
 800b290:	e772      	b.n	800b178 <HAL_SPI_Transmit+0xf8>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b292:	2d00      	cmp	r5, #0
 800b294:	d09d      	beq.n	800b1d2 <HAL_SPI_Transmit+0x152>
 800b296:	1c68      	adds	r0, r5, #1
 800b298:	f43f af54 	beq.w	800b144 <HAL_SPI_Transmit+0xc4>
 800b29c:	f7f8 fb56 	bl	800394c <HAL_GetTick>
 800b2a0:	1b80      	subs	r0, r0, r6
 800b2a2:	4285      	cmp	r5, r0
 800b2a4:	f63f af4e 	bhi.w	800b144 <HAL_SPI_Transmit+0xc4>
 800b2a8:	e793      	b.n	800b1d2 <HAL_SPI_Transmit+0x152>
    if(Timeout != HAL_MAX_DELAY)
 800b2aa:	1c69      	adds	r1, r5, #1
 800b2ac:	f43f af7d 	beq.w	800b1aa <HAL_SPI_Transmit+0x12a>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800b2b0:	b12d      	cbz	r5, 800b2be <HAL_SPI_Transmit+0x23e>
 800b2b2:	f7f8 fb4b 	bl	800394c <HAL_GetTick>
 800b2b6:	1b80      	subs	r0, r0, r6
 800b2b8:	4285      	cmp	r5, r0
 800b2ba:	f4bf af75 	bcs.w	800b1a8 <HAL_SPI_Transmit+0x128>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2be:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2c2:	f043 0320 	orr.w	r3, r3, #32
 800b2c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b2ca:	e771      	b.n	800b1b0 <HAL_SPI_Transmit+0x130>
 800b2cc:	08013a20 	.word	0x08013a20

0800b2d0 <HAL_SPI_TransmitReceive>:
{
 800b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	461f      	mov	r7, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800b2d6:	6883      	ldr	r3, [r0, #8]
{
 800b2d8:	4604      	mov	r4, r0
 800b2da:	4688      	mov	r8, r1
 800b2dc:	4691      	mov	r9, r2
 800b2de:	9d08      	ldr	r5, [sp, #32]
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800b2e0:	b123      	cbz	r3, 800b2ec <HAL_SPI_TransmitReceive+0x1c>
 800b2e2:	f240 3196 	movw	r1, #918	; 0x396
 800b2e6:	48ad      	ldr	r0, [pc, #692]	; (800b59c <HAL_SPI_TransmitReceive+0x2cc>)
 800b2e8:	f7f6 ff27 	bl	800213a <assert_failed>
  __HAL_LOCK(hspi);
 800b2ec:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d016      	beq.n	800b322 <HAL_SPI_TransmitReceive+0x52>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800b2fa:	f7f8 fb27 	bl	800394c <HAL_GetTick>
  if (!((hspi->State == HAL_SPI_STATE_READY) || \
 800b2fe:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 800b302:	4606      	mov	r6, r0
  if (!((hspi->State == HAL_SPI_STATE_READY) || \
 800b304:	2b01      	cmp	r3, #1
 800b306:	d00f      	beq.n	800b328 <HAL_SPI_TransmitReceive+0x58>
 800b308:	6863      	ldr	r3, [r4, #4]
 800b30a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b30e:	d105      	bne.n	800b31c <HAL_SPI_TransmitReceive+0x4c>
        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX))))
 800b310:	68a3      	ldr	r3, [r4, #8]
 800b312:	b91b      	cbnz	r3, 800b31c <HAL_SPI_TransmitReceive+0x4c>
 800b314:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b318:	2b04      	cmp	r3, #4
 800b31a:	d005      	beq.n	800b328 <HAL_SPI_TransmitReceive+0x58>
    __HAL_UNLOCK(hspi);
 800b31c:	2300      	movs	r3, #0
 800b31e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b322:	2002      	movs	r0, #2
 800b324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b328:	f1b8 0f00 	cmp.w	r8, #0
 800b32c:	d003      	beq.n	800b336 <HAL_SPI_TransmitReceive+0x66>
 800b32e:	f1b9 0f00 	cmp.w	r9, #0
 800b332:	d000      	beq.n	800b336 <HAL_SPI_TransmitReceive+0x66>
 800b334:	b92f      	cbnz	r7, 800b342 <HAL_SPI_TransmitReceive+0x72>
    __HAL_UNLOCK(hspi);
 800b336:	2300      	movs	r3, #0
    return errorcode;
 800b338:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b33a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800b33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b342:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b346:	2b04      	cmp	r3, #4
 800b348:	d002      	beq.n	800b350 <HAL_SPI_TransmitReceive+0x80>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b34a:	2305      	movs	r3, #5
 800b34c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b350:	2300      	movs	r3, #0
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b352:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b354:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b358:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 800b35c:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 800b360:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b364:	684a      	ldr	r2, [r1, #4]
  hspi->RxISR       = NULL;
 800b366:	6723      	str	r3, [r4, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b368:	0c12      	lsrs	r2, r2, #16
  hspi->TxISR       = NULL;
 800b36a:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxXferSize  = Size;
 800b36c:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b370:	0412      	lsls	r2, r2, #16
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b372:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b376:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b37a:	433a      	orrs	r2, r7
 800b37c:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800b37e:	680b      	ldr	r3, [r1, #0]
 800b380:	f043 0301 	orr.w	r3, r3, #1
 800b384:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b386:	6863      	ldr	r3, [r4, #4]
 800b388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b38c:	d103      	bne.n	800b396 <HAL_SPI_TransmitReceive+0xc6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b38e:	680b      	ldr	r3, [r1, #0]
 800b390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b394:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b396:	68e3      	ldr	r3, [r4, #12]
 800b398:	2b0f      	cmp	r3, #15
 800b39a:	f200 8089 	bhi.w	800b4b0 <HAL_SPI_TransmitReceive+0x1e0>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b39e:	2b07      	cmp	r3, #7
 800b3a0:	f200 80e1 	bhi.w	800b566 <HAL_SPI_TransmitReceive+0x296>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3a4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	b92b      	cbnz	r3, 800b3b8 <HAL_SPI_TransmitReceive+0xe8>
 800b3ac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 8088 	beq.w	800b4c8 <HAL_SPI_TransmitReceive+0x1f8>
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b3b8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	b1c3      	cbz	r3, 800b3f2 <HAL_SPI_TransmitReceive+0x122>
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	6953      	ldr	r3, [r2, #20]
 800b3c4:	079f      	lsls	r7, r3, #30
 800b3c6:	d514      	bpl.n	800b3f2 <HAL_SPI_TransmitReceive+0x122>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b3c8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b3d2:	f240 80e5 	bls.w	800b5a0 <HAL_SPI_TransmitReceive+0x2d0>
 800b3d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b3d8:	2940      	cmp	r1, #64	; 0x40
 800b3da:	f240 80e1 	bls.w	800b5a0 <HAL_SPI_TransmitReceive+0x2d0>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b3de:	f853 1b04 	ldr.w	r1, [r3], #4
 800b3e2:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b3e4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=4;
 800b3e6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b3ea:	3b04      	subs	r3, #4
          hspi->TxXferCount--;
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL)))
 800b3f2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	b1a3      	cbz	r3, 800b424 <HAL_SPI_TransmitReceive+0x154>
 800b3fa:	6822      	ldr	r2, [r4, #0]
 800b3fc:	6953      	ldr	r3, [r2, #20]
 800b3fe:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800b402:	d00f      	beq.n	800b424 <HAL_SPI_TransmitReceive+0x154>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 800b404:	6953      	ldr	r3, [r2, #20]
 800b406:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b40a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b40c:	f000 80e1 	beq.w	800b5d2 <HAL_SPI_TransmitReceive+0x302>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b410:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b412:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b416:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount-=4;
 800b418:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b41c:	3b04      	subs	r3, #4
          hspi->RxXferCount--;
 800b41e:	b29b      	uxth	r3, r3
 800b420:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b424:	1c68      	adds	r0, r5, #1
 800b426:	d0bd      	beq.n	800b3a4 <HAL_SPI_TransmitReceive+0xd4>
 800b428:	f7f8 fa90 	bl	800394c <HAL_GetTick>
 800b42c:	1b80      	subs	r0, r0, r6
 800b42e:	4285      	cmp	r5, r0
 800b430:	d8b8      	bhi.n	800b3a4 <HAL_SPI_TransmitReceive+0xd4>
 800b432:	e02c      	b.n	800b48e <HAL_SPI_TransmitReceive+0x1be>
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b434:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b438:	b29b      	uxth	r3, r3
 800b43a:	b173      	cbz	r3, 800b45a <HAL_SPI_TransmitReceive+0x18a>
 800b43c:	6822      	ldr	r2, [r4, #0]
 800b43e:	6953      	ldr	r3, [r2, #20]
 800b440:	079b      	lsls	r3, r3, #30
 800b442:	d50a      	bpl.n	800b45a <HAL_SPI_TransmitReceive+0x18a>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b444:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b446:	f853 1b04 	ldr.w	r1, [r3], #4
 800b44a:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b44c:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800b44e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b452:	3b01      	subs	r3, #1
 800b454:	b29b      	uxth	r3, r3
 800b456:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT)))
 800b45a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b45e:	b29b      	uxth	r3, r3
 800b460:	b173      	cbz	r3, 800b480 <HAL_SPI_TransmitReceive+0x1b0>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	695a      	ldr	r2, [r3, #20]
 800b466:	423a      	tst	r2, r7
 800b468:	d00a      	beq.n	800b480 <HAL_SPI_TransmitReceive+0x1b0>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b46a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b46c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b46e:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b472:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800b474:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b480:	1c68      	adds	r0, r5, #1
 800b482:	d017      	beq.n	800b4b4 <HAL_SPI_TransmitReceive+0x1e4>
 800b484:	f7f8 fa62 	bl	800394c <HAL_GetTick>
 800b488:	1b80      	subs	r0, r0, r6
 800b48a:	4285      	cmp	r5, r0
 800b48c:	d812      	bhi.n	800b4b4 <HAL_SPI_TransmitReceive+0x1e4>
        SPI_CloseTransfer(hspi);
 800b48e:	4620      	mov	r0, r4
 800b490:	f7ff fc8c 	bl	800adac <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800b494:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800b496:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 800b498:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b49c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b4a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b4a8:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 800b4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT)))
 800b4b0:	f248 0708 	movw	r7, #32776	; 0x8008
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4b4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1ba      	bne.n	800b434 <HAL_SPI_TransmitReceive+0x164>
 800b4be:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1b5      	bne.n	800b434 <HAL_SPI_TransmitReceive+0x164>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b4c8:	6822      	ldr	r2, [r4, #0]
 800b4ca:	6953      	ldr	r3, [r2, #20]
 800b4cc:	071b      	lsls	r3, r3, #28
 800b4ce:	f140 8098 	bpl.w	800b602 <HAL_SPI_TransmitReceive+0x332>
  SPI_CloseTransfer(hspi);
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f7ff fc6a 	bl	800adac <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4e4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 800b4e8:	3000      	adds	r0, #0
 800b4ea:	bf18      	it	ne
 800b4ec:	2001      	movne	r0, #1
 800b4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b4f2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	b1b3      	cbz	r3, 800b528 <HAL_SPI_TransmitReceive+0x258>
 800b4fa:	6822      	ldr	r2, [r4, #0]
 800b4fc:	6953      	ldr	r3, [r2, #20]
 800b4fe:	0799      	lsls	r1, r3, #30
 800b500:	d512      	bpl.n	800b528 <HAL_SPI_TransmitReceive+0x258>
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b502:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b506:	b29b      	uxth	r3, r3
 800b508:	2b01      	cmp	r3, #1
 800b50a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b50c:	d936      	bls.n	800b57c <HAL_SPI_TransmitReceive+0x2ac>
 800b50e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b510:	2900      	cmp	r1, #0
 800b512:	d033      	beq.n	800b57c <HAL_SPI_TransmitReceive+0x2ac>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b514:	f853 1b04 	ldr.w	r1, [r3], #4
 800b518:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b51a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 800b51c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b520:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800b522:	b29b      	uxth	r3, r3
 800b524:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL)))
 800b528:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	b19b      	cbz	r3, 800b558 <HAL_SPI_TransmitReceive+0x288>
 800b530:	6822      	ldr	r2, [r4, #0]
 800b532:	6953      	ldr	r3, [r2, #20]
 800b534:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800b538:	d00e      	beq.n	800b558 <HAL_SPI_TransmitReceive+0x288>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 800b53a:	6953      	ldr	r3, [r2, #20]
 800b53c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b542:	d023      	beq.n	800b58c <HAL_SPI_TransmitReceive+0x2bc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b544:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b546:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b54a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 800b54c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b550:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 800b552:	b29b      	uxth	r3, r3
 800b554:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b558:	1c6b      	adds	r3, r5, #1
 800b55a:	d004      	beq.n	800b566 <HAL_SPI_TransmitReceive+0x296>
 800b55c:	f7f8 f9f6 	bl	800394c <HAL_GetTick>
 800b560:	1b80      	subs	r0, r0, r6
 800b562:	4285      	cmp	r5, r0
 800b564:	d993      	bls.n	800b48e <HAL_SPI_TransmitReceive+0x1be>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b566:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1c0      	bne.n	800b4f2 <HAL_SPI_TransmitReceive+0x222>
 800b570:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b574:	b29b      	uxth	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1bb      	bne.n	800b4f2 <HAL_SPI_TransmitReceive+0x222>
 800b57a:	e7a5      	b.n	800b4c8 <HAL_SPI_TransmitReceive+0x1f8>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800b57c:	f833 1b02 	ldrh.w	r1, [r3], #2
 800b580:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b582:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800b584:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b588:	3b01      	subs	r3, #1
 800b58a:	e7ca      	b.n	800b522 <HAL_SPI_TransmitReceive+0x252>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 800b58c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800b58e:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b592:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800b594:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b598:	3b01      	subs	r3, #1
 800b59a:	e7da      	b.n	800b552 <HAL_SPI_TransmitReceive+0x282>
 800b59c:	08013a20 	.word	0x08013a20
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b5a0:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800b5a4:	b289      	uxth	r1, r1
 800b5a6:	2901      	cmp	r1, #1
 800b5a8:	d909      	bls.n	800b5be <HAL_SPI_TransmitReceive+0x2ee>
 800b5aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b5ac:	b139      	cbz	r1, 800b5be <HAL_SPI_TransmitReceive+0x2ee>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800b5ae:	f833 1b02 	ldrh.w	r1, [r3], #2
 800b5b2:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5b4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 800b5b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b5ba:	3b02      	subs	r3, #2
 800b5bc:	e716      	b.n	800b3ec <HAL_SPI_TransmitReceive+0x11c>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800b5ca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	e70c      	b.n	800b3ec <HAL_SPI_TransmitReceive+0x11c>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_FRLVL_QUARTER_FULL)
 800b5d2:	6951      	ldr	r1, [r2, #20]
 800b5d4:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 800b5d8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b5dc:	d907      	bls.n	800b5ee <HAL_SPI_TransmitReceive+0x31e>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 800b5de:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800b5e0:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5e4:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 800b5e6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b5ea:	3b02      	subs	r3, #2
 800b5ec:	e717      	b.n	800b41e <HAL_SPI_TransmitReceive+0x14e>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b5ee:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800b5f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800b5fa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b5fe:	3b01      	subs	r3, #1
 800b600:	e70d      	b.n	800b41e <HAL_SPI_TransmitReceive+0x14e>
    if(Timeout != HAL_MAX_DELAY)
 800b602:	1c69      	adds	r1, r5, #1
 800b604:	f43f af61 	beq.w	800b4ca <HAL_SPI_TransmitReceive+0x1fa>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800b608:	b12d      	cbz	r5, 800b616 <HAL_SPI_TransmitReceive+0x346>
 800b60a:	f7f8 f99f 	bl	800394c <HAL_GetTick>
 800b60e:	1b80      	subs	r0, r0, r6
 800b610:	4285      	cmp	r5, r0
 800b612:	f4bf af59 	bcs.w	800b4c8 <HAL_SPI_TransmitReceive+0x1f8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b616:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b61a:	f043 0320 	orr.w	r3, r3, #32
 800b61e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b622:	e756      	b.n	800b4d2 <HAL_SPI_TransmitReceive+0x202>

0800b624 <HAL_SPI_Receive>:
{
 800b624:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b628:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));
 800b62a:	6883      	ldr	r3, [r0, #8]
{
 800b62c:	4617      	mov	r7, r2
 800b62e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));
 800b630:	f433 2280 	bics.w	r2, r3, #262144	; 0x40000
{
 800b634:	4688      	mov	r8, r1
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));
 800b636:	d007      	beq.n	800b648 <HAL_SPI_Receive+0x24>
 800b638:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b63c:	d004      	beq.n	800b648 <HAL_SPI_Receive+0x24>
 800b63e:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800b642:	4886      	ldr	r0, [pc, #536]	; (800b85c <HAL_SPI_Receive+0x238>)
 800b644:	f7f6 fd79 	bl	800213a <assert_failed>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b648:	6863      	ldr	r3, [r4, #4]
 800b64a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b64e:	d10e      	bne.n	800b66e <HAL_SPI_Receive+0x4a>
 800b650:	68a3      	ldr	r3, [r4, #8]
 800b652:	b963      	cbnz	r3, 800b66e <HAL_SPI_Receive+0x4a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b654:	2304      	movs	r3, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b656:	9500      	str	r5, [sp, #0]
 800b658:	4642      	mov	r2, r8
 800b65a:	4641      	mov	r1, r8
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b65c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b660:	4620      	mov	r0, r4
 800b662:	463b      	mov	r3, r7
 800b664:	f7ff fe34 	bl	800b2d0 <HAL_SPI_TransmitReceive>
}
 800b668:	b002      	add	sp, #8
 800b66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800b66e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b672:	2b01      	cmp	r3, #1
 800b674:	d00c      	beq.n	800b690 <HAL_SPI_Receive+0x6c>
 800b676:	2301      	movs	r3, #1
 800b678:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800b67c:	f7f8 f966 	bl	800394c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b680:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 800b684:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800b686:	2b01      	cmp	r3, #1
 800b688:	d004      	beq.n	800b694 <HAL_SPI_Receive+0x70>
    __HAL_UNLOCK(hspi);
 800b68a:	2300      	movs	r3, #0
 800b68c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b690:	2002      	movs	r0, #2
 800b692:	e7e9      	b.n	800b668 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 800b694:	f1b8 0f00 	cmp.w	r8, #0
 800b698:	d000      	beq.n	800b69c <HAL_SPI_Receive+0x78>
 800b69a:	b927      	cbnz	r7, 800b6a6 <HAL_SPI_Receive+0x82>
    __HAL_UNLOCK(hspi);
 800b69c:	2300      	movs	r3, #0
    return errorcode;
 800b69e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b6a0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800b6a4:	e7e0      	b.n	800b668 <HAL_SPI_Receive+0x44>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b6a6:	2304      	movs	r3, #4
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b6a8:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b6ac:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b6b0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	6821      	ldr	r1, [r4, #0]
 800b6b8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = NULL;
 800b6bc:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->RxXferCount = Size;
 800b6be:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
  hspi->TxXferSize  = 0U;
 800b6c2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = 0U;
 800b6c6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b6ca:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b6cc:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6ce:	68a3      	ldr	r3, [r4, #8]
 800b6d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b6d4:	d103      	bne.n	800b6de <HAL_SPI_Receive+0xba>
    SPI_1LINE_RX(hspi);
 800b6d6:	680b      	ldr	r3, [r1, #0]
 800b6d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6dc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b6de:	684b      	ldr	r3, [r1, #4]
 800b6e0:	0c1b      	lsrs	r3, r3, #16
 800b6e2:	041b      	lsls	r3, r3, #16
 800b6e4:	433b      	orrs	r3, r7
 800b6e6:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800b6e8:	680b      	ldr	r3, [r1, #0]
 800b6ea:	f043 0301 	orr.w	r3, r3, #1
 800b6ee:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6f0:	6863      	ldr	r3, [r4, #4]
 800b6f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6f6:	d103      	bne.n	800b700 <HAL_SPI_Receive+0xdc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b6f8:	680b      	ldr	r3, [r1, #0]
 800b6fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6fe:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b700:	68e3      	ldr	r3, [r4, #12]
 800b702:	2b0f      	cmp	r3, #15
 800b704:	d857      	bhi.n	800b7b6 <HAL_SPI_Receive+0x192>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b706:	2b07      	cmp	r3, #7
 800b708:	d86c      	bhi.n	800b7e4 <HAL_SPI_Receive+0x1c0>
    while (hspi->RxXferCount > 0U)
 800b70a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b70e:	b29b      	uxth	r3, r3
 800b710:	b34b      	cbz	r3, 800b766 <HAL_SPI_Receive+0x142>
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL))
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	695a      	ldr	r2, [r3, #20]
 800b716:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 800b71a:	f000 8093 	beq.w	800b844 <HAL_SPI_Receive+0x220>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 800b71e:	695a      	ldr	r2, [r3, #20]
 800b720:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800b724:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b726:	d075      	beq.n	800b814 <HAL_SPI_Receive+0x1f0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72a:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount-=4;
 800b72e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b732:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=4;
 800b734:	3b04      	subs	r3, #4
          hspi->RxXferCount-=2;
 800b736:	b29b      	uxth	r3, r3
 800b738:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b73c:	e7e5      	b.n	800b70a <HAL_SPI_Receive+0xe6>
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT))
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	695a      	ldr	r2, [r3, #20]
 800b742:	423a      	tst	r2, r7
 800b744:	d01e      	beq.n	800b784 <HAL_SPI_Receive+0x160>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b74a:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b74e:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800b750:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b754:	3b01      	subs	r3, #1
 800b756:	b29b      	uxth	r3, r3
 800b758:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0U)
 800b75c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b760:	b29b      	uxth	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1eb      	bne.n	800b73e <HAL_SPI_Receive+0x11a>
  SPI_CloseTransfer(hspi);
 800b766:	4620      	mov	r0, r4
 800b768:	f7ff fb20 	bl	800adac <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800b76c:	2300      	movs	r3, #0
 800b76e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800b772:	2301      	movs	r3, #1
 800b774:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b778:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b77c:	3000      	adds	r0, #0
 800b77e:	bf18      	it	ne
 800b780:	2001      	movne	r0, #1
 800b782:	e771      	b.n	800b668 <HAL_SPI_Receive+0x44>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b784:	b97d      	cbnz	r5, 800b7a6 <HAL_SPI_Receive+0x182>
          SPI_CloseTransfer(hspi);
 800b786:	4620      	mov	r0, r4
 800b788:	f7ff fb10 	bl	800adac <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800b78c:	2300      	movs	r3, #0
          hspi->State = HAL_SPI_STATE_READY;
 800b78e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hspi);
 800b790:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b794:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b79c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b7a0:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 800b7a4:	e760      	b.n	800b668 <HAL_SPI_Receive+0x44>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b7a6:	1c69      	adds	r1, r5, #1
 800b7a8:	d0d8      	beq.n	800b75c <HAL_SPI_Receive+0x138>
 800b7aa:	f7f8 f8cf 	bl	800394c <HAL_GetTick>
 800b7ae:	1b80      	subs	r0, r0, r6
 800b7b0:	4285      	cmp	r5, r0
 800b7b2:	d8d3      	bhi.n	800b75c <HAL_SPI_Receive+0x138>
 800b7b4:	e7e7      	b.n	800b786 <HAL_SPI_Receive+0x162>
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT))
 800b7b6:	f248 0708 	movw	r7, #32776	; 0x8008
 800b7ba:	e7cf      	b.n	800b75c <HAL_SPI_Receive+0x138>
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL))
 800b7bc:	6822      	ldr	r2, [r4, #0]
 800b7be:	6953      	ldr	r3, [r2, #20]
 800b7c0:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800b7c4:	d01c      	beq.n	800b800 <HAL_SPI_Receive+0x1dc>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 800b7c6:	6953      	ldr	r3, [r2, #20]
 800b7c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b7cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7ce:	d00f      	beq.n	800b7f0 <HAL_SPI_Receive+0x1cc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b7d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b7d2:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b7d6:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 800b7d8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b7dc:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0U)
 800b7e4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e6      	bne.n	800b7bc <HAL_SPI_Receive+0x198>
 800b7ee:	e7ba      	b.n	800b766 <HAL_SPI_Receive+0x142>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 800b7f0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800b7f2:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7f6:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800b7f8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	e7ee      	b.n	800b7de <HAL_SPI_Receive+0x1ba>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b800:	2d00      	cmp	r5, #0
 800b802:	d0c0      	beq.n	800b786 <HAL_SPI_Receive+0x162>
 800b804:	1c6a      	adds	r2, r5, #1
 800b806:	d0ed      	beq.n	800b7e4 <HAL_SPI_Receive+0x1c0>
 800b808:	f7f8 f8a0 	bl	800394c <HAL_GetTick>
 800b80c:	1b80      	subs	r0, r0, r6
 800b80e:	4285      	cmp	r5, r0
 800b810:	d8e8      	bhi.n	800b7e4 <HAL_SPI_Receive+0x1c0>
 800b812:	e7b8      	b.n	800b786 <HAL_SPI_Receive+0x162>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_FRLVL_QUARTER_FULL)
 800b814:	6959      	ldr	r1, [r3, #20]
 800b816:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 800b81a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b81e:	d907      	bls.n	800b830 <HAL_SPI_Receive+0x20c>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 800b820:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b822:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount-=2;
 800b826:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b82a:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 800b82c:	3b02      	subs	r3, #2
 800b82e:	e782      	b.n	800b736 <HAL_SPI_Receive+0x112>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b830:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b834:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b838:	3301      	adds	r3, #1
 800b83a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800b83c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b840:	3b01      	subs	r3, #1
 800b842:	e778      	b.n	800b736 <HAL_SPI_Receive+0x112>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b844:	2d00      	cmp	r5, #0
 800b846:	d09e      	beq.n	800b786 <HAL_SPI_Receive+0x162>
 800b848:	1c6b      	adds	r3, r5, #1
 800b84a:	f43f af5e 	beq.w	800b70a <HAL_SPI_Receive+0xe6>
 800b84e:	f7f8 f87d 	bl	800394c <HAL_GetTick>
 800b852:	1b80      	subs	r0, r0, r6
 800b854:	4285      	cmp	r5, r0
 800b856:	f63f af58 	bhi.w	800b70a <HAL_SPI_Receive+0xe6>
 800b85a:	e794      	b.n	800b786 <HAL_SPI_Receive+0x162>
 800b85c:	08013a20 	.word	0x08013a20

0800b860 <HAL_SPI_TxCpltCallback>:
 800b860:	4770      	bx	lr

0800b862 <HAL_SPI_RxCpltCallback>:
 800b862:	4770      	bx	lr

0800b864 <HAL_SPI_TxRxCpltCallback>:
 800b864:	4770      	bx	lr

0800b866 <HAL_SPI_ErrorCallback>:
 800b866:	4770      	bx	lr

0800b868 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 800b868:	6803      	ldr	r3, [r0, #0]
{
 800b86a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t itsource = hspi->Instance->IER;
 800b86e:	f8d3 a010 	ldr.w	sl, [r3, #16]
{
 800b872:	4604      	mov	r4, r0
  uint32_t itflag   = hspi->Instance->SR;
 800b874:	f8d3 9014 	ldr.w	r9, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b878:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 800b87c:	ea0a 0509 	and.w	r5, sl, r9
  HAL_SPI_StateTypeDef State = hspi->State;
 800b880:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 800b884:	f005 0741 	and.w	r7, r5, #65	; 0x41
  HAL_SPI_StateTypeDef State = hspi->State;
 800b888:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 800b88a:	2f01      	cmp	r7, #1
 800b88c:	d10a      	bne.n	800b8a4 <HAL_SPI_IRQHandler+0x3c>
    hspi->RxISR(hspi);
 800b88e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800b890:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXE))
 800b892:	f005 0322 	and.w	r3, r5, #34	; 0x22
 800b896:	2b02      	cmp	r3, #2
 800b898:	d106      	bne.n	800b8a8 <HAL_SPI_IRQHandler+0x40>
    hspi->TxISR(hspi);
 800b89a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b89c:	4620      	mov	r0, r4
}
 800b89e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hspi->TxISR(hspi);
 800b8a2:	4718      	bx	r3
  uint32_t handled  = 0;
 800b8a4:	2700      	movs	r7, #0
 800b8a6:	e7f4      	b.n	800b892 <HAL_SPI_IRQHandler+0x2a>
  if (handled != 0)
 800b8a8:	2f00      	cmp	r7, #0
 800b8aa:	d166      	bne.n	800b97a <HAL_SPI_IRQHandler+0x112>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b8ac:	072f      	lsls	r7, r5, #28
 800b8ae:	d566      	bpl.n	800b97e <HAL_SPI_IRQHandler+0x116>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b8b0:	6823      	ldr	r3, [r4, #0]
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 800b8b2:	f418 4f40 	tst.w	r8, #49152	; 0xc000
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b8b6:	699a      	ldr	r2, [r3, #24]
 800b8b8:	f042 0208 	orr.w	r2, r2, #8
 800b8bc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b8be:	699a      	ldr	r2, [r3, #24]
 800b8c0:	f042 0210 	orr.w	r2, r2, #16
 800b8c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b8c6:	699a      	ldr	r2, [r3, #24]
 800b8c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8cc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b8ce:	691a      	ldr	r2, [r3, #16]
 800b8d0:	f022 0208 	bic.w	r2, r2, #8
 800b8d4:	611a      	str	r2, [r3, #16]
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 800b8d6:	d00e      	beq.n	800b8f6 <HAL_SPI_IRQHandler+0x8e>
 800b8d8:	2e04      	cmp	r6, #4
 800b8da:	d009      	beq.n	800b8f0 <HAL_SPI_IRQHandler+0x88>
       ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800b8dc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b8de:	69d2      	ldr	r2, [r2, #28]
 800b8e0:	b14a      	cbz	r2, 800b8f6 <HAL_SPI_IRQHandler+0x8e>
 800b8e2:	2e03      	cmp	r6, #3
 800b8e4:	d104      	bne.n	800b8f0 <HAL_SPI_IRQHandler+0x88>
      HAL_SPI_TxCpltCallback(hspi);
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7ff ffba 	bl	800b860 <HAL_SPI_TxCpltCallback>
 800b8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
       ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)) )   // DMA is used in normal mode
 800b8f0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b8f2:	69d2      	ldr	r2, [r2, #28]
 800b8f4:	bb8a      	cbnz	r2, 800b95a <HAL_SPI_IRQHandler+0xf2>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b8fc:	d01b      	beq.n	800b936 <HAL_SPI_IRQHandler+0xce>
      SPI_CloseTransfer(hspi);
 800b8fe:	4620      	mov	r0, r4
 800b900:	f7ff fa54 	bl	800adac <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800b904:	2301      	movs	r3, #1
 800b906:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b90a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b90e:	b323      	cbz	r3, 800b95a <HAL_SPI_IRQHandler+0xf2>
        HAL_SPI_ErrorCallback(hspi);
 800b910:	4620      	mov	r0, r4
 800b912:	f7ff ffa8 	bl	800b866 <HAL_SPI_ErrorCallback>
 800b916:	e030      	b.n	800b97a <HAL_SPI_IRQHandler+0x112>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b918:	68e1      	ldr	r1, [r4, #12]
 800b91a:	6822      	ldr	r2, [r4, #0]
 800b91c:	290f      	cmp	r1, #15
 800b91e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b920:	d90f      	bls.n	800b942 <HAL_SPI_IRQHandler+0xda>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b922:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b924:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b928:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800b92a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b92e:	3b01      	subs	r3, #1
 800b930:	b29b      	uxth	r3, r3
 800b932:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0)
 800b936:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1eb      	bne.n	800b918 <HAL_SPI_IRQHandler+0xb0>
 800b940:	e7dd      	b.n	800b8fe <HAL_SPI_IRQHandler+0x96>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b942:	2907      	cmp	r1, #7
 800b944:	d903      	bls.n	800b94e <HAL_SPI_IRQHandler+0xe6>
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 800b946:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800b948:	f823 2b02 	strh.w	r2, [r3], #2
 800b94c:	e7ec      	b.n	800b928 <HAL_SPI_IRQHandler+0xc0>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b94e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800b952:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b956:	3301      	adds	r3, #1
 800b958:	e7e6      	b.n	800b928 <HAL_SPI_IRQHandler+0xc0>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b95a:	2e05      	cmp	r6, #5
 800b95c:	d104      	bne.n	800b968 <HAL_SPI_IRQHandler+0x100>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b95e:	4620      	mov	r0, r4
 800b960:	f7ff ff80 	bl	800b864 <HAL_SPI_TxRxCpltCallback>
 800b964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b968:	2e04      	cmp	r6, #4
 800b96a:	d104      	bne.n	800b976 <HAL_SPI_IRQHandler+0x10e>
      HAL_SPI_RxCpltCallback(hspi);
 800b96c:	4620      	mov	r0, r4
 800b96e:	f7ff ff78 	bl	800b862 <HAL_SPI_RxCpltCallback>
 800b972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b976:	2e03      	cmp	r6, #3
 800b978:	d0b5      	beq.n	800b8e6 <HAL_SPI_IRQHandler+0x7e>
 800b97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT) && HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP ))
 800b97e:	f01a 0f08 	tst.w	sl, #8
 800b982:	d009      	beq.n	800b998 <HAL_SPI_IRQHandler+0x130>
 800b984:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800b988:	d006      	beq.n	800b998 <HAL_SPI_IRQHandler+0x130>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b98a:	6822      	ldr	r2, [r4, #0]
 800b98c:	6993      	ldr	r3, [r2, #24]
 800b98e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b992:	6193      	str	r3, [r2, #24]
    return;
 800b994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != RESET)
 800b998:	f415 7f58 	tst.w	r5, #864	; 0x360
 800b99c:	d0ed      	beq.n	800b97a <HAL_SPI_IRQHandler+0x112>
    if ((trigger & SPI_FLAG_OVR) != RESET)
 800b99e:	0668      	lsls	r0, r5, #25
 800b9a0:	d50a      	bpl.n	800b9b8 <HAL_SPI_IRQHandler+0x150>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b9a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9a6:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b9a8:	f043 0304 	orr.w	r3, r3, #4
 800b9ac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9b0:	6993      	ldr	r3, [r2, #24]
 800b9b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9b6:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != RESET)
 800b9b8:	05a9      	lsls	r1, r5, #22
 800b9ba:	d50a      	bpl.n	800b9d2 <HAL_SPI_IRQHandler+0x16a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b9bc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b9c0:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b9ca:	6993      	ldr	r3, [r2, #24]
 800b9cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b9d0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != RESET)
 800b9d2:	05ea      	lsls	r2, r5, #23
 800b9d4:	d50a      	bpl.n	800b9ec <HAL_SPI_IRQHandler+0x184>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b9d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b9da:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b9dc:	f043 0308 	orr.w	r3, r3, #8
 800b9e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b9e4:	6993      	ldr	r3, [r2, #24]
 800b9e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9ea:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != RESET)
 800b9ec:	06ab      	lsls	r3, r5, #26
 800b9ee:	d50a      	bpl.n	800ba06 <HAL_SPI_IRQHandler+0x19e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b9f0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b9f4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b9f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b9fe:	6993      	ldr	r3, [r2, #24]
 800ba00:	f043 0320 	orr.w	r3, r3, #32
 800ba04:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba06:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0b5      	beq.n	800b97a <HAL_SPI_IRQHandler+0x112>
      __HAL_SPI_DISABLE(hspi);
 800ba0e:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 800ba10:	f418 4f40 	tst.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	f022 0201 	bic.w	r2, r2, #1
 800ba1a:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800ba1c:	691a      	ldr	r2, [r3, #16]
 800ba1e:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 800ba22:	f022 0203 	bic.w	r2, r2, #3
 800ba26:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 800ba28:	d012      	beq.n	800ba50 <HAL_SPI_IRQHandler+0x1e8>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ba2a:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800ba2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ba2e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ba32:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800ba34:	b118      	cbz	r0, 800ba3e <HAL_SPI_IRQHandler+0x1d6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba36:	4b08      	ldr	r3, [pc, #32]	; (800ba58 <HAL_SPI_IRQHandler+0x1f0>)
 800ba38:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800ba3a:	f7f8 fce3 	bl	8004404 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 800ba3e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d09a      	beq.n	800b97a <HAL_SPI_IRQHandler+0x112>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba44:	4b04      	ldr	r3, [pc, #16]	; (800ba58 <HAL_SPI_IRQHandler+0x1f0>)
}
 800ba46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba4a:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800ba4c:	f7f8 bcda 	b.w	8004404 <HAL_DMA_Abort_IT>
        hspi->State = HAL_SPI_STATE_READY;
 800ba50:	2301      	movs	r3, #1
 800ba52:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800ba56:	e75b      	b.n	800b910 <HAL_SPI_IRQHandler+0xa8>
 800ba58:	0800ba5d 	.word	0x0800ba5d

0800ba5c <SPI_DMAAbortOnError>:
{
 800ba5c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800ba60:	2300      	movs	r3, #0
 800ba62:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = 0U;
 800ba66:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800ba70:	f7ff fef9 	bl	800b866 <HAL_SPI_ErrorCallback>
 800ba74:	bd08      	pop	{r3, pc}

0800ba76 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba76:	6803      	ldr	r3, [r0, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ba7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba80:	689a      	ldr	r2, [r3, #8]
 800ba82:	f022 0201 	bic.w	r2, r2, #1
 800ba86:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba88:	2320      	movs	r3, #32
 800ba8a:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
 800ba8e:	4770      	bx	lr

0800ba90 <HAL_UART_TxCpltCallback>:
 800ba90:	4770      	bx	lr

0800ba92 <HAL_UART_RxCpltCallback>:
 800ba92:	4770      	bx	lr

0800ba94 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba94:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 800ba98:	6801      	ldr	r1, [r0, #0]
 800ba9a:	2b22      	cmp	r3, #34	; 0x22
{
 800ba9c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba9e:	d129      	bne.n	800baf4 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baa0:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 800baa2:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800baa6:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baac:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800baae:	ea02 0201 	and.w	r2, r2, r1
 800bab2:	d11b      	bne.n	800baec <UART_Receive_IT+0x58>
 800bab4:	6901      	ldr	r1, [r0, #16]
 800bab6:	b9c9      	cbnz	r1, 800baec <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 800bab8:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2;
 800babc:	6643      	str	r3, [r0, #100]	; 0x64
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 800babe:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 800bac2:	3c01      	subs	r4, #1
 800bac4:	b2a4      	uxth	r4, r4
 800bac6:	f8a0 406a 	strh.w	r4, [r0, #106]	; 0x6a
 800baca:	b96c      	cbnz	r4, 800bae8 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bacc:	6803      	ldr	r3, [r0, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bad4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	f022 0201 	bic.w	r2, r2, #1
 800badc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bade:	2320      	movs	r3, #32
 800bae0:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a

      HAL_UART_RxCpltCallback(huart);
 800bae4:	f7ff ffd5 	bl	800ba92 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 800bae8:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800baea:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800baec:	1c59      	adds	r1, r3, #1
 800baee:	6641      	str	r1, [r0, #100]	; 0x64
 800baf0:	701a      	strb	r2, [r3, #0]
 800baf2:	e7e4      	b.n	800babe <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800baf4:	8b0b      	ldrh	r3, [r1, #24]
    return HAL_BUSY;
 800baf6:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	f043 0308 	orr.w	r3, r3, #8
 800bafe:	830b      	strh	r3, [r1, #24]
    return HAL_BUSY;
 800bb00:	bd10      	pop	{r4, pc}

0800bb02 <HAL_UART_ErrorCallback>:
 800bb02:	4770      	bx	lr

0800bb04 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb04:	6803      	ldr	r3, [r0, #0]
 800bb06:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb08:	6819      	ldr	r1, [r3, #0]
{
 800bb0a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800bb0c:	0715      	lsls	r5, r2, #28
{
 800bb0e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb10:	6898      	ldr	r0, [r3, #8]
  if (errorflags == RESET)
 800bb12:	d10a      	bne.n	800bb2a <HAL_UART_IRQHandler+0x26>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 800bb14:	0696      	lsls	r6, r2, #26
 800bb16:	d56a      	bpl.n	800bbee <HAL_UART_IRQHandler+0xea>
     && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb18:	068d      	lsls	r5, r1, #26
 800bb1a:	d401      	bmi.n	800bb20 <HAL_UART_IRQHandler+0x1c>
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800bb1c:	00c6      	lsls	r6, r0, #3
 800bb1e:	d566      	bpl.n	800bbee <HAL_UART_IRQHandler+0xea>
      UART_Receive_IT(huart);
 800bb20:	4620      	mov	r0, r4
}
 800bb22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800bb26:	f7ff bfb5 	b.w	800ba94 <UART_Receive_IT>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 800bb2a:	4e61      	ldr	r6, [pc, #388]	; (800bcb0 <HAL_UART_IRQHandler+0x1ac>)
 800bb2c:	4006      	ands	r6, r0
 800bb2e:	d102      	bne.n	800bb36 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb30:	f411 7f90 	tst.w	r1, #288	; 0x120
 800bb34:	d05b      	beq.n	800bbee <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bb36:	07d5      	lsls	r5, r2, #31
 800bb38:	d507      	bpl.n	800bb4a <HAL_UART_IRQHandler+0x46>
 800bb3a:	05cd      	lsls	r5, r1, #23
 800bb3c:	d505      	bpl.n	800bb4a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800bb3e:	2501      	movs	r5, #1
 800bb40:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb42:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800bb44:	f045 0501 	orr.w	r5, r5, #1
 800bb48:	67e5      	str	r5, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb4a:	0795      	lsls	r5, r2, #30
 800bb4c:	d507      	bpl.n	800bb5e <HAL_UART_IRQHandler+0x5a>
 800bb4e:	07c5      	lsls	r5, r0, #31
 800bb50:	d505      	bpl.n	800bb5e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800bb52:	2502      	movs	r5, #2
 800bb54:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb56:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800bb58:	f045 0504 	orr.w	r5, r5, #4
 800bb5c:	67e5      	str	r5, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb5e:	0755      	lsls	r5, r2, #29
 800bb60:	d507      	bpl.n	800bb72 <HAL_UART_IRQHandler+0x6e>
 800bb62:	07c5      	lsls	r5, r0, #31
 800bb64:	d505      	bpl.n	800bb72 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800bb66:	2504      	movs	r5, #4
 800bb68:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb6a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800bb6c:	f045 0502 	orr.w	r5, r5, #2
 800bb70:	67e5      	str	r5, [r4, #124]	; 0x7c
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 800bb72:	0715      	lsls	r5, r2, #28
 800bb74:	d507      	bpl.n	800bb86 <HAL_UART_IRQHandler+0x82>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 800bb76:	068d      	lsls	r5, r1, #26
 800bb78:	d400      	bmi.n	800bb7c <HAL_UART_IRQHandler+0x78>
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 800bb7a:	b126      	cbz	r6, 800bb86 <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800bb7c:	2508      	movs	r5, #8
 800bb7e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb80:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800bb82:	432b      	orrs	r3, r5
 800bb84:	67e3      	str	r3, [r4, #124]	; 0x7c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb86:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d05a      	beq.n	800bc42 <HAL_UART_IRQHandler+0x13e>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 800bb8c:	0696      	lsls	r6, r2, #26
 800bb8e:	d506      	bpl.n	800bb9e <HAL_UART_IRQHandler+0x9a>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb90:	068d      	lsls	r5, r1, #26
 800bb92:	d401      	bmi.n	800bb98 <HAL_UART_IRQHandler+0x94>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800bb94:	00c0      	lsls	r0, r0, #3
 800bb96:	d502      	bpl.n	800bb9e <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f7ff ff7b 	bl	800ba94 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800bb9e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
        UART_EndRxTransfer(huart);
 800bba0:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800bba2:	0719      	lsls	r1, r3, #28
 800bba4:	d404      	bmi.n	800bbb0 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800bbaa:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800bbae:	d01a      	beq.n	800bbe6 <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 800bbb0:	f7ff ff61 	bl	800ba76 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb4:	6823      	ldr	r3, [r4, #0]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	0652      	lsls	r2, r2, #25
 800bbba:	d510      	bpl.n	800bbde <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbbc:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800bbbe:	6f60      	ldr	r0, [r4, #116]	; 0x74
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbc4:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800bbc6:	b150      	cbz	r0, 800bbde <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbc8:	4b3a      	ldr	r3, [pc, #232]	; (800bcb4 <HAL_UART_IRQHandler+0x1b0>)
 800bbca:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbcc:	f7f8 fc1a 	bl	8004404 <HAL_DMA_Abort_IT>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d036      	beq.n	800bc42 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbd4:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 800bbd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbda:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bbdc:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7ff ff8f 	bl	800bb02 <HAL_UART_ErrorCallback>
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800bbe6:	f7ff ff8c 	bl	800bb02 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbea:	67e5      	str	r5, [r4, #124]	; 0x7c
 800bbec:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800bbee:	02d6      	lsls	r6, r2, #11
 800bbf0:	d50e      	bpl.n	800bc10 <HAL_UART_IRQHandler+0x10c>
 800bbf2:	0245      	lsls	r5, r0, #9
 800bbf4:	d50c      	bpl.n	800bc10 <HAL_UART_IRQHandler+0x10c>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800bbf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800bbfa:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800bbfc:	621a      	str	r2, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800bbfe:	2320      	movs	r3, #32
 800bc00:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    huart->RxState = HAL_UART_STATE_READY;
 800bc04:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
 800bc08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800bc0c:	f000 be2e 	b.w	800c86c <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET)
 800bc10:	0616      	lsls	r6, r2, #24
 800bc12:	d535      	bpl.n	800bc80 <HAL_UART_IRQHandler+0x17c>
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 800bc14:	060d      	lsls	r5, r1, #24
 800bc16:	d401      	bmi.n	800bc1c <HAL_UART_IRQHandler+0x118>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 800bc18:	0200      	lsls	r0, r0, #8
 800bc1a:	d531      	bpl.n	800bc80 <HAL_UART_IRQHandler+0x17c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc1c:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 800bc20:	2a21      	cmp	r2, #33	; 0x21
 800bc22:	d10e      	bne.n	800bc42 <HAL_UART_IRQHandler+0x13e>
    if(huart->TxXferCount == 0U)
 800bc24:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800bc28:	b292      	uxth	r2, r2
 800bc2a:	b982      	cbnz	r2, 800bc4e <HAL_UART_IRQHandler+0x14a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	0092      	lsls	r2, r2, #2
 800bc30:	d508      	bpl.n	800bc44 <HAL_UART_IRQHandler+0x140>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bc32:	689a      	ldr	r2, [r3, #8]
 800bc34:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bc38:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 800bc40:	601a      	str	r2, [r3, #0]
 800bc42:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	e7f5      	b.n	800bc3a <HAL_UART_IRQHandler+0x136>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc4e:	68a2      	ldr	r2, [r4, #8]
 800bc50:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bc54:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800bc56:	d10e      	bne.n	800bc76 <HAL_UART_IRQHandler+0x172>
 800bc58:	6921      	ldr	r1, [r4, #16]
 800bc5a:	b961      	cbnz	r1, 800bc76 <HAL_UART_IRQHandler+0x172>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800bc5c:	f832 1b02 	ldrh.w	r1, [r2], #2
 800bc60:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800bc64:	8519      	strh	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bc66:	65e2      	str	r2, [r4, #92]	; 0x5c
      huart->TxXferCount--;
 800bc68:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800bc74:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800bc76:	1c51      	adds	r1, r2, #1
 800bc78:	65e1      	str	r1, [r4, #92]	; 0x5c
 800bc7a:	7812      	ldrb	r2, [r2, #0]
 800bc7c:	851a      	strh	r2, [r3, #40]	; 0x28
 800bc7e:	e7f3      	b.n	800bc68 <HAL_UART_IRQHandler+0x164>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bc80:	0656      	lsls	r6, r2, #25
 800bc82:	d50c      	bpl.n	800bc9e <HAL_UART_IRQHandler+0x19a>
 800bc84:	064d      	lsls	r5, r1, #25
 800bc86:	d50a      	bpl.n	800bc9e <HAL_UART_IRQHandler+0x19a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc88:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 800bc8a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc90:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800bc92:	2320      	movs	r3, #32
 800bc94:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  HAL_UART_TxCpltCallback(huart);
 800bc98:	f7ff fefa 	bl	800ba90 <HAL_UART_TxCpltCallback>
 800bc9c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 800bc9e:	0210      	lsls	r0, r2, #8
 800bca0:	d5cf      	bpl.n	800bc42 <HAL_UART_IRQHandler+0x13e>
 800bca2:	004a      	lsls	r2, r1, #1
 800bca4:	d5cd      	bpl.n	800bc42 <HAL_UART_IRQHandler+0x13e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800bcac:	e7c8      	b.n	800bc40 <HAL_UART_IRQHandler+0x13c>
 800bcae:	bf00      	nop
 800bcb0:	10000001 	.word	0x10000001
 800bcb4:	0800bcb9 	.word	0x0800bcb9

0800bcb8 <UART_DMAAbortOnError>:
{
 800bcb8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800bcba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  huart->TxXferCount = 0U;
 800bcc2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  HAL_UART_ErrorCallback(huart);
 800bcc6:	f7ff ff1c 	bl	800bb02 <HAL_UART_ErrorCallback>
 800bcca:	bd08      	pop	{r3, pc}

0800bccc <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bccc:	6842      	ldr	r2, [r0, #4]
 800bcce:	4bb4      	ldr	r3, [pc, #720]	; (800bfa0 <UART_SetConfig+0x2d4>)
 800bcd0:	429a      	cmp	r2, r3
{
 800bcd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	b087      	sub	sp, #28
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bcda:	d904      	bls.n	800bce6 <UART_SetConfig+0x1a>
 800bcdc:	f640 0112 	movw	r1, #2066	; 0x812
 800bce0:	48b0      	ldr	r0, [pc, #704]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bce2:	f7f6 fa2a 	bl	800213a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800bce6:	68a3      	ldr	r3, [r4, #8]
 800bce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcec:	d007      	beq.n	800bcfe <UART_SetConfig+0x32>
 800bcee:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bcf2:	d004      	beq.n	800bcfe <UART_SetConfig+0x32>
 800bcf4:	f640 0113 	movw	r1, #2067	; 0x813
 800bcf8:	48aa      	ldr	r0, [pc, #680]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bcfa:	f7f6 fa1e 	bl	800213a <assert_failed>
  if(UART_INSTANCE_LOWPOWER(huart))
 800bcfe:	4baa      	ldr	r3, [pc, #680]	; (800bfa8 <UART_SetConfig+0x2dc>)
 800bd00:	6822      	ldr	r2, [r4, #0]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	68e3      	ldr	r3, [r4, #12]
 800bd06:	f040 80b1 	bne.w	800be6c <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800bd0a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800bd0e:	d004      	beq.n	800bd1a <UART_SetConfig+0x4e>
 800bd10:	f640 0116 	movw	r1, #2070	; 0x816
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800bd14:	48a3      	ldr	r0, [pc, #652]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bd16:	f7f6 fa10 	bl	800213a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800bd20:	d007      	beq.n	800bd32 <UART_SetConfig+0x66>
 800bd22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bd26:	d004      	beq.n	800bd32 <UART_SetConfig+0x66>
 800bd28:	f640 011e 	movw	r1, #2078	; 0x81e
 800bd2c:	489d      	ldr	r0, [pc, #628]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bd2e:	f7f6 fa04 	bl	800213a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bd32:	6963      	ldr	r3, [r4, #20]
 800bd34:	f033 020c 	bics.w	r2, r3, #12
 800bd38:	d100      	bne.n	800bd3c <UART_SetConfig+0x70>
 800bd3a:	b923      	cbnz	r3, 800bd46 <UART_SetConfig+0x7a>
 800bd3c:	f640 011f 	movw	r1, #2079	; 0x81f
 800bd40:	4898      	ldr	r0, [pc, #608]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bd42:	f7f6 f9fa 	bl	800213a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800bd46:	69a3      	ldr	r3, [r4, #24]
 800bd48:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800bd4c:	d004      	beq.n	800bd58 <UART_SetConfig+0x8c>
 800bd4e:	f44f 6102 	mov.w	r1, #2080	; 0x820
 800bd52:	4894      	ldr	r0, [pc, #592]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bd54:	f7f6 f9f1 	bl	800213a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800bd58:	69e3      	ldr	r3, [r4, #28]
 800bd5a:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800bd5e:	d004      	beq.n	800bd6a <UART_SetConfig+0x9e>
 800bd60:	f640 0121 	movw	r1, #2081	; 0x821
 800bd64:	488f      	ldr	r0, [pc, #572]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bd66:	f7f6 f9e8 	bl	800213a <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.Prescaler));
 800bd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd6c:	2b0b      	cmp	r3, #11
 800bd6e:	d904      	bls.n	800bd7a <UART_SetConfig+0xae>
 800bd70:	f640 0122 	movw	r1, #2082	; 0x822
 800bd74:	488b      	ldr	r0, [pc, #556]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bd76:	f7f6 f9e0 	bl	800213a <assert_failed>
  assert_param(IS_UART_FIFO_MODE_STATE(huart->Init.FIFOMode));
 800bd7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd7c:	f033 5300 	bics.w	r3, r3, #536870912	; 0x20000000
 800bd80:	d004      	beq.n	800bd8c <UART_SetConfig+0xc0>
 800bd82:	f640 0123 	movw	r1, #2083	; 0x823
 800bd86:	4887      	ldr	r0, [pc, #540]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bd88:	f7f6 f9d7 	bl	800213a <assert_failed>
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 800bd8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd92:	d11b      	bne.n	800bdcc <UART_SetConfig+0x100>
    assert_param(IS_UART_TXFIFO_THRESHOLD(huart->Init.TXFIFOThreshold));
 800bd94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bd96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bd9a:	f033 43c0 	bics.w	r3, r3, #1610612736	; 0x60000000
 800bd9e:	d007      	beq.n	800bdb0 <UART_SetConfig+0xe4>
 800bda0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800bda4:	d004      	beq.n	800bdb0 <UART_SetConfig+0xe4>
 800bda6:	f640 0126 	movw	r1, #2086	; 0x826
 800bdaa:	487e      	ldr	r0, [pc, #504]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bdac:	f7f6 f9c5 	bl	800213a <assert_failed>
    assert_param(IS_UART_RXFIFO_THRESHOLD(huart->Init.RXFIFOThreshold));
 800bdb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bdb2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bdb6:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 800bdba:	d007      	beq.n	800bdcc <UART_SetConfig+0x100>
 800bdbc:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800bdc0:	d004      	beq.n	800bdcc <UART_SetConfig+0x100>
 800bdc2:	f640 0127 	movw	r1, #2087	; 0x827
 800bdc6:	4877      	ldr	r0, [pc, #476]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800bdc8:	f7f6 f9b7 	bl	800213a <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdcc:	6922      	ldr	r2, [r4, #16]
 800bdce:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bdd0:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	6962      	ldr	r2, [r4, #20]
 800bdd6:	69e0      	ldr	r0, [r4, #28]
 800bdd8:	4313      	orrs	r3, r2
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 800bdda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bddc:	682e      	ldr	r6, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdde:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bde0:	4a72      	ldr	r2, [pc, #456]	; (800bfac <UART_SetConfig+0x2e0>)
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 800bde2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bde4:	4032      	ands	r2, r6
 800bde6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bde8:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bdea:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdec:	686b      	ldr	r3, [r5, #4]
 800bdee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bdf2:	4313      	orrs	r3, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdf4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdf6:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdf8:	4b6b      	ldr	r3, [pc, #428]	; (800bfa8 <UART_SetConfig+0x2dc>)
 800bdfa:	429d      	cmp	r5, r3
    tmpreg |= huart->Init.OneBitSampling;
 800bdfc:	bf1c      	itt	ne
 800bdfe:	6a23      	ldrne	r3, [r4, #32]
 800be00:	431a      	orrne	r2, r3
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 800be02:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 800be06:	bf02      	ittt	eq
 800be08:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
 800be0a:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 800be0c:	430b      	orreq	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 800be0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 800be10:	bf08      	it	eq
 800be12:	431a      	orreq	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be14:	68ab      	ldr	r3, [r5, #8]
 800be16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800be1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800be1e:	4313      	orrs	r3, r2
 800be20:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 800be22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800be24:	f023 030f 	bic.w	r3, r3, #15
 800be28:	430b      	orrs	r3, r1
 800be2a:	62eb      	str	r3, [r5, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be2c:	4b60      	ldr	r3, [pc, #384]	; (800bfb0 <UART_SetConfig+0x2e4>)
 800be2e:	429d      	cmp	r5, r3
 800be30:	d12c      	bne.n	800be8c <UART_SetConfig+0x1c0>
 800be32:	4b60      	ldr	r3, [pc, #384]	; (800bfb4 <UART_SetConfig+0x2e8>)
 800be34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be3a:	2b28      	cmp	r3, #40	; 0x28
 800be3c:	f200 827b 	bhi.w	800c336 <UART_SetConfig+0x66a>
 800be40:	4a5d      	ldr	r2, [pc, #372]	; (800bfb8 <UART_SetConfig+0x2ec>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be42:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800be46:	5cd3      	ldrb	r3, [r2, r3]
 800be48:	f040 81f8 	bne.w	800c23c <UART_SetConfig+0x570>
    switch (clocksource)
 800be4c:	2b08      	cmp	r3, #8
 800be4e:	f000 81c2 	beq.w	800c1d6 <UART_SetConfig+0x50a>
 800be52:	f200 817d 	bhi.w	800c150 <UART_SetConfig+0x484>
 800be56:	2b01      	cmp	r3, #1
 800be58:	f000 819f 	beq.w	800c19a <UART_SetConfig+0x4ce>
 800be5c:	f0c0 818c 	bcc.w	800c178 <UART_SetConfig+0x4ac>
 800be60:	2b04      	cmp	r3, #4
 800be62:	f000 819d 	beq.w	800c1a0 <UART_SetConfig+0x4d4>
        ret = HAL_ERROR;
 800be66:	2301      	movs	r3, #1
  uint16_t usartdiv                   = 0x0000U;
 800be68:	2200      	movs	r2, #0
 800be6a:	e1d4      	b.n	800c216 <UART_SetConfig+0x54a>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800be6c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800be70:	d004      	beq.n	800be7c <UART_SetConfig+0x1b0>
 800be72:	f640 011a 	movw	r1, #2074	; 0x81a
 800be76:	484b      	ldr	r0, [pc, #300]	; (800bfa4 <UART_SetConfig+0x2d8>)
 800be78:	f7f6 f95f 	bl	800213a <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800be7c:	6a23      	ldr	r3, [r4, #32]
 800be7e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800be82:	f43f af4a 	beq.w	800bd1a <UART_SetConfig+0x4e>
 800be86:	f640 011b 	movw	r1, #2075	; 0x81b
 800be8a:	e743      	b.n	800bd14 <UART_SetConfig+0x48>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be8c:	4b4b      	ldr	r3, [pc, #300]	; (800bfbc <UART_SetConfig+0x2f0>)
 800be8e:	429d      	cmp	r5, r3
 800be90:	d108      	bne.n	800bea4 <UART_SetConfig+0x1d8>
 800be92:	4b48      	ldr	r3, [pc, #288]	; (800bfb4 <UART_SetConfig+0x2e8>)
 800be94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	2b05      	cmp	r3, #5
 800be9c:	f200 824b 	bhi.w	800c336 <UART_SetConfig+0x66a>
 800bea0:	4a47      	ldr	r2, [pc, #284]	; (800bfc0 <UART_SetConfig+0x2f4>)
 800bea2:	e7ce      	b.n	800be42 <UART_SetConfig+0x176>
 800bea4:	4b47      	ldr	r3, [pc, #284]	; (800bfc4 <UART_SetConfig+0x2f8>)
 800bea6:	429d      	cmp	r5, r3
 800bea8:	d108      	bne.n	800bebc <UART_SetConfig+0x1f0>
 800beaa:	4b42      	ldr	r3, [pc, #264]	; (800bfb4 <UART_SetConfig+0x2e8>)
 800beac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beae:	f003 0307 	and.w	r3, r3, #7
 800beb2:	2b05      	cmp	r3, #5
 800beb4:	f200 823f 	bhi.w	800c336 <UART_SetConfig+0x66a>
 800beb8:	4a43      	ldr	r2, [pc, #268]	; (800bfc8 <UART_SetConfig+0x2fc>)
 800beba:	e7c2      	b.n	800be42 <UART_SetConfig+0x176>
 800bebc:	4b43      	ldr	r3, [pc, #268]	; (800bfcc <UART_SetConfig+0x300>)
 800bebe:	429d      	cmp	r5, r3
 800bec0:	d108      	bne.n	800bed4 <UART_SetConfig+0x208>
 800bec2:	4b3c      	ldr	r3, [pc, #240]	; (800bfb4 <UART_SetConfig+0x2e8>)
 800bec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec6:	f003 0307 	and.w	r3, r3, #7
 800beca:	2b05      	cmp	r3, #5
 800becc:	f200 8233 	bhi.w	800c336 <UART_SetConfig+0x66a>
 800bed0:	4a3f      	ldr	r2, [pc, #252]	; (800bfd0 <UART_SetConfig+0x304>)
 800bed2:	e7b6      	b.n	800be42 <UART_SetConfig+0x176>
 800bed4:	4b3f      	ldr	r3, [pc, #252]	; (800bfd4 <UART_SetConfig+0x308>)
 800bed6:	429d      	cmp	r5, r3
 800bed8:	d108      	bne.n	800beec <UART_SetConfig+0x220>
 800beda:	4b36      	ldr	r3, [pc, #216]	; (800bfb4 <UART_SetConfig+0x2e8>)
 800bedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bede:	f003 0307 	and.w	r3, r3, #7
 800bee2:	2b05      	cmp	r3, #5
 800bee4:	f200 8227 	bhi.w	800c336 <UART_SetConfig+0x66a>
 800bee8:	4a3b      	ldr	r2, [pc, #236]	; (800bfd8 <UART_SetConfig+0x30c>)
 800beea:	e7aa      	b.n	800be42 <UART_SetConfig+0x176>
 800beec:	4b3b      	ldr	r3, [pc, #236]	; (800bfdc <UART_SetConfig+0x310>)
 800beee:	429d      	cmp	r5, r3
 800bef0:	d108      	bne.n	800bf04 <UART_SetConfig+0x238>
 800bef2:	4b30      	ldr	r3, [pc, #192]	; (800bfb4 <UART_SetConfig+0x2e8>)
 800bef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800befa:	2b28      	cmp	r3, #40	; 0x28
 800befc:	f200 821b 	bhi.w	800c336 <UART_SetConfig+0x66a>
 800bf00:	4a37      	ldr	r2, [pc, #220]	; (800bfe0 <UART_SetConfig+0x314>)
 800bf02:	e79e      	b.n	800be42 <UART_SetConfig+0x176>
 800bf04:	4b37      	ldr	r3, [pc, #220]	; (800bfe4 <UART_SetConfig+0x318>)
 800bf06:	429d      	cmp	r5, r3
 800bf08:	d108      	bne.n	800bf1c <UART_SetConfig+0x250>
 800bf0a:	4b2a      	ldr	r3, [pc, #168]	; (800bfb4 <UART_SetConfig+0x2e8>)
 800bf0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0e:	f003 0307 	and.w	r3, r3, #7
 800bf12:	2b05      	cmp	r3, #5
 800bf14:	f200 820f 	bhi.w	800c336 <UART_SetConfig+0x66a>
 800bf18:	4a33      	ldr	r2, [pc, #204]	; (800bfe8 <UART_SetConfig+0x31c>)
 800bf1a:	e792      	b.n	800be42 <UART_SetConfig+0x176>
 800bf1c:	4b33      	ldr	r3, [pc, #204]	; (800bfec <UART_SetConfig+0x320>)
 800bf1e:	429d      	cmp	r5, r3
 800bf20:	d108      	bne.n	800bf34 <UART_SetConfig+0x268>
 800bf22:	4b24      	ldr	r3, [pc, #144]	; (800bfb4 <UART_SetConfig+0x2e8>)
 800bf24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf26:	f003 0307 	and.w	r3, r3, #7
 800bf2a:	2b05      	cmp	r3, #5
 800bf2c:	f200 8203 	bhi.w	800c336 <UART_SetConfig+0x66a>
 800bf30:	4a2f      	ldr	r2, [pc, #188]	; (800bff0 <UART_SetConfig+0x324>)
 800bf32:	e786      	b.n	800be42 <UART_SetConfig+0x176>
 800bf34:	4b1c      	ldr	r3, [pc, #112]	; (800bfa8 <UART_SetConfig+0x2dc>)
 800bf36:	429d      	cmp	r5, r3
 800bf38:	f040 81fd 	bne.w	800c336 <UART_SetConfig+0x66a>
 800bf3c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800bf40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf42:	f002 0207 	and.w	r2, r2, #7
 800bf46:	2a05      	cmp	r2, #5
 800bf48:	d901      	bls.n	800bf4e <UART_SetConfig+0x282>
        ret = HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
  return ret;
 800bf4c:	e0b0      	b.n	800c0b0 <UART_SetConfig+0x3e4>
 800bf4e:	4929      	ldr	r1, [pc, #164]	; (800bff4 <UART_SetConfig+0x328>)
 800bf50:	5c8d      	ldrb	r5, [r1, r2]
    switch (clocksource)
 800bf52:	2d08      	cmp	r5, #8
 800bf54:	d05d      	beq.n	800c012 <UART_SetConfig+0x346>
 800bf56:	d808      	bhi.n	800bf6a <UART_SetConfig+0x29e>
 800bf58:	2d02      	cmp	r5, #2
 800bf5a:	d04f      	beq.n	800bffc <UART_SetConfig+0x330>
 800bf5c:	2d04      	cmp	r5, #4
 800bf5e:	d1f4      	bne.n	800bf4a <UART_SetConfig+0x27e>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf60:	4668      	mov	r0, sp
 800bf62:	f7fd fd1b 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 800bf66:	9801      	ldr	r0, [sp, #4]
      break;
 800bf68:	e04a      	b.n	800c000 <UART_SetConfig+0x334>
    switch (clocksource)
 800bf6a:	2d20      	cmp	r5, #32
 800bf6c:	d05b      	beq.n	800c026 <UART_SetConfig+0x35a>
 800bf6e:	2d40      	cmp	r5, #64	; 0x40
 800bf70:	d04a      	beq.n	800c008 <UART_SetConfig+0x33c>
 800bf72:	2d10      	cmp	r5, #16
 800bf74:	d1e9      	bne.n	800bf4a <UART_SetConfig+0x27e>
      tmpreg =(uint32_t) CSI_VALUE;
 800bf76:	4820      	ldr	r0, [pc, #128]	; (800bff8 <UART_SetConfig+0x32c>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800bf78:	6866      	ldr	r6, [r4, #4]
 800bf7a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800bf7e:	4283      	cmp	r3, r0
 800bf80:	d8e3      	bhi.n	800bf4a <UART_SetConfig+0x27e>
 800bf82:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 800bf86:	d8e0      	bhi.n	800bf4a <UART_SetConfig+0x27e>
        switch (clocksource)
 800bf88:	2d08      	cmp	r5, #8
 800bf8a:	f000 80ab 	beq.w	800c0e4 <UART_SetConfig+0x418>
 800bf8e:	d84d      	bhi.n	800c02c <UART_SetConfig+0x360>
 800bf90:	2d02      	cmp	r5, #2
 800bf92:	d06a      	beq.n	800c06a <UART_SetConfig+0x39e>
 800bf94:	2d04      	cmp	r5, #4
 800bf96:	f000 808f 	beq.w	800c0b8 <UART_SetConfig+0x3ec>
          ret = HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e080      	b.n	800c0a0 <UART_SetConfig+0x3d4>
 800bf9e:	bf00      	nop
 800bfa0:	00bebc20 	.word	0x00bebc20
 800bfa4:	08013a93 	.word	0x08013a93
 800bfa8:	58000c00 	.word	0x58000c00
 800bfac:	cfff69f3 	.word	0xcfff69f3
 800bfb0:	40011000 	.word	0x40011000
 800bfb4:	58024400 	.word	0x58024400
 800bfb8:	08013a5e 	.word	0x08013a5e
 800bfbc:	40004400 	.word	0x40004400
 800bfc0:	08013a87 	.word	0x08013a87
 800bfc4:	40004800 	.word	0x40004800
 800bfc8:	08013a87 	.word	0x08013a87
 800bfcc:	40004c00 	.word	0x40004c00
 800bfd0:	08013a87 	.word	0x08013a87
 800bfd4:	40005000 	.word	0x40005000
 800bfd8:	08013a87 	.word	0x08013a87
 800bfdc:	40011400 	.word	0x40011400
 800bfe0:	08013a5e 	.word	0x08013a5e
 800bfe4:	40007800 	.word	0x40007800
 800bfe8:	08013a87 	.word	0x08013a87
 800bfec:	40007c00 	.word	0x40007c00
 800bff0:	08013a87 	.word	0x08013a87
 800bff4:	08013a8d 	.word	0x08013a8d
 800bff8:	003d0900 	.word	0x003d0900
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 800bffc:	f7fd fcb8 	bl	8009970 <HAL_RCCEx_GetD3PCLK1Freq>
    if (tmpreg != 0U)
 800c000:	2800      	cmp	r0, #0
 800c002:	d1b9      	bne.n	800bf78 <UART_SetConfig+0x2ac>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c004:	2300      	movs	r3, #0
      break;
 800c006:	e053      	b.n	800c0b0 <UART_SetConfig+0x3e4>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c008:	a803      	add	r0, sp, #12
 800c00a:	f7fd fd67 	bl	8009adc <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 800c00e:	9804      	ldr	r0, [sp, #16]
      break;
 800c010:	e7f6      	b.n	800c000 <UART_SetConfig+0x334>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	48bf      	ldr	r0, [pc, #764]	; (800c314 <UART_SetConfig+0x648>)
 800c016:	f012 0f20 	tst.w	r2, #32
 800c01a:	d0ad      	beq.n	800bf78 <UART_SetConfig+0x2ac>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c022:	40d8      	lsrs	r0, r3
 800c024:	e7a8      	b.n	800bf78 <UART_SetConfig+0x2ac>
      tmpreg = (uint32_t) LSE_VALUE;
 800c026:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c02a:	e7a5      	b.n	800bf78 <UART_SetConfig+0x2ac>
        switch (clocksource)
 800c02c:	2d20      	cmp	r5, #32
 800c02e:	d07e      	beq.n	800c12e <UART_SetConfig+0x462>
 800c030:	2d40      	cmp	r5, #64	; 0x40
 800c032:	d04c      	beq.n	800c0ce <UART_SetConfig+0x402>
 800c034:	2d10      	cmp	r5, #16
 800c036:	d1b0      	bne.n	800bf9a <UART_SetConfig+0x2ce>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c038:	4bb7      	ldr	r3, [pc, #732]	; (800c318 <UART_SetConfig+0x64c>)
 800c03a:	2100      	movs	r1, #0
 800c03c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c03e:	48b7      	ldr	r0, [pc, #732]	; (800c31c <UART_SetConfig+0x650>)
 800c040:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c044:	2300      	movs	r3, #0
 800c046:	f7f4 f9a3 	bl	8000390 <__aeabi_uldivmod>
 800c04a:	4632      	mov	r2, r6
 800c04c:	ea4f 2901 	mov.w	r9, r1, lsl #8
 800c050:	2300      	movs	r3, #0
 800c052:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800c056:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800c05a:	0870      	lsrs	r0, r6, #1
 800c05c:	eb18 0500 	adds.w	r5, r8, r0
 800c060:	f149 0600 	adc.w	r6, r9, #0
 800c064:	4628      	mov	r0, r5
 800c066:	4631      	mov	r1, r6
 800c068:	e017      	b.n	800c09a <UART_SetConfig+0x3ce>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800c06a:	f7fd fc81 	bl	8009970 <HAL_RCCEx_GetD3PCLK1Freq>
 800c06e:	4baa      	ldr	r3, [pc, #680]	; (800c318 <UART_SetConfig+0x64c>)
 800c070:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c072:	6865      	ldr	r5, [r4, #4]
 800c074:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c078:	2300      	movs	r3, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800c07a:	2100      	movs	r1, #0
 800c07c:	f7f4 f988 	bl	8000390 <__aeabi_uldivmod>
 800c080:	462a      	mov	r2, r5
 800c082:	020f      	lsls	r7, r1, #8
 800c084:	2300      	movs	r3, #0
 800c086:	0206      	lsls	r6, r0, #8
 800c088:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800c08c:	0868      	lsrs	r0, r5, #1
 800c08e:	eb16 0800 	adds.w	r8, r6, r0
 800c092:	f147 0900 	adc.w	r9, r7, #0
 800c096:	4640      	mov	r0, r8
 800c098:	4649      	mov	r1, r9
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c09a:	f7f4 f979 	bl	8000390 <__aeabi_uldivmod>
          break;
 800c09e:	2300      	movs	r3, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800c0a0:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800c0a4:	4a9e      	ldr	r2, [pc, #632]	; (800c320 <UART_SetConfig+0x654>)
 800c0a6:	4291      	cmp	r1, r2
 800c0a8:	f63f af4f 	bhi.w	800bf4a <UART_SetConfig+0x27e>
           huart->Instance->BRR = tmpreg;
 800c0ac:	6822      	ldr	r2, [r4, #0]
 800c0ae:	60d0      	str	r0, [r2, #12]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	b007      	add	sp, #28
 800c0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0b8:	4668      	mov	r0, sp
 800c0ba:	f7fd fc6f 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800c0be:	4b96      	ldr	r3, [pc, #600]	; (800c318 <UART_SetConfig+0x64c>)
 800c0c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c0c2:	6865      	ldr	r5, [r4, #4]
 800c0c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	9801      	ldr	r0, [sp, #4]
 800c0cc:	e7d5      	b.n	800c07a <UART_SetConfig+0x3ae>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ce:	a803      	add	r0, sp, #12
 800c0d0:	f7fd fd04 	bl	8009adc <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800c0d4:	4b90      	ldr	r3, [pc, #576]	; (800c318 <UART_SetConfig+0x64c>)
 800c0d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c0d8:	6865      	ldr	r5, [r4, #4]
 800c0da:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c0de:	2300      	movs	r3, #0
 800c0e0:	9804      	ldr	r0, [sp, #16]
 800c0e2:	e7ca      	b.n	800c07a <UART_SetConfig+0x3ae>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0e4:	498f      	ldr	r1, [pc, #572]	; (800c324 <UART_SetConfig+0x658>)
 800c0e6:	0877      	lsrs	r7, r6, #1
 800c0e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c0ea:	680d      	ldr	r5, [r1, #0]
 800c0ec:	4b8a      	ldr	r3, [pc, #552]	; (800c318 <UART_SetConfig+0x64c>)
 800c0ee:	f015 0520 	ands.w	r5, r5, #32
 800c0f2:	d017      	beq.n	800c124 <UART_SetConfig+0x458>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800c0f4:	6809      	ldr	r1, [r1, #0]
 800c0f6:	4887      	ldr	r0, [pc, #540]	; (800c314 <UART_SetConfig+0x648>)
 800c0f8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800c0fc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c100:	2300      	movs	r3, #0
 800c102:	40c8      	lsrs	r0, r1
 800c104:	2100      	movs	r1, #0
 800c106:	f7f4 f943 	bl	8000390 <__aeabi_uldivmod>
 800c10a:	4632      	mov	r2, r6
 800c10c:	ea4f 2901 	mov.w	r9, r1, lsl #8
 800c110:	2300      	movs	r3, #0
 800c112:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800c116:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800c11a:	eb18 0007 	adds.w	r0, r8, r7
 800c11e:	f149 0100 	adc.w	r1, r9, #0
 800c122:	e7ba      	b.n	800c09a <UART_SetConfig+0x3ce>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c124:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c128:	2300      	movs	r3, #0
 800c12a:	487a      	ldr	r0, [pc, #488]	; (800c314 <UART_SetConfig+0x648>)
 800c12c:	e7ea      	b.n	800c104 <UART_SetConfig+0x438>
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c12e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c130:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 800c134:	4b78      	ldr	r3, [pc, #480]	; (800c318 <UART_SetConfig+0x64c>)
 800c136:	0870      	lsrs	r0, r6, #1
 800c138:	2100      	movs	r1, #0
 800c13a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c13e:	4632      	mov	r2, r6
 800c140:	f44f 7680 	mov.w	r6, #256	; 0x100
 800c144:	fbb5 f5f3 	udiv	r5, r5, r3
 800c148:	2300      	movs	r3, #0
 800c14a:	fbe5 0106 	umlal	r0, r1, r5, r6
 800c14e:	e7a4      	b.n	800c09a <UART_SetConfig+0x3ce>
    switch (clocksource)
 800c150:	2b20      	cmp	r3, #32
 800c152:	d068      	beq.n	800c226 <UART_SetConfig+0x55a>
 800c154:	2b40      	cmp	r3, #64	; 0x40
 800c156:	d034      	beq.n	800c1c2 <UART_SetConfig+0x4f6>
 800c158:	2b10      	cmp	r3, #16
 800c15a:	f47f ae84 	bne.w	800be66 <UART_SetConfig+0x19a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c15e:	4b6e      	ldr	r3, [pc, #440]	; (800c318 <UART_SetConfig+0x64c>)
 800c160:	4a6e      	ldr	r2, [pc, #440]	; (800c31c <UART_SetConfig+0x650>)
 800c162:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800c166:	6860      	ldr	r0, [r4, #4]
 800c168:	fbb2 f3f3 	udiv	r3, r2, r3
 800c16c:	0842      	lsrs	r2, r0, #1
 800c16e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800c172:	fbb2 f2f0 	udiv	r2, r2, r0
 800c176:	e00d      	b.n	800c194 <UART_SetConfig+0x4c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800c178:	f7fc fd6e 	bl	8008c58 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800c17c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c17e:	4a66      	ldr	r2, [pc, #408]	; (800c318 <UART_SetConfig+0x64c>)
 800c180:	6863      	ldr	r3, [r4, #4]
 800c182:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800c186:	fbb0 f0f2 	udiv	r0, r0, r2
 800c18a:	085a      	lsrs	r2, r3, #1
 800c18c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c190:	fbb2 f2f3 	udiv	r2, r2, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c194:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800c196:	2300      	movs	r3, #0
      break;
 800c198:	e03d      	b.n	800c216 <UART_SetConfig+0x54a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800c19a:	f7fc fd73 	bl	8008c84 <HAL_RCC_GetPCLK2Freq>
 800c19e:	e7ed      	b.n	800c17c <UART_SetConfig+0x4b0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1a0:	4668      	mov	r0, sp
 800c1a2:	f7fd fbfb 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800c1a6:	4b5c      	ldr	r3, [pc, #368]	; (800c318 <UART_SetConfig+0x64c>)
 800c1a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c1aa:	6861      	ldr	r1, [r4, #4]
 800c1ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c1b0:	9b01      	ldr	r3, [sp, #4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800c1b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1b6:	084a      	lsrs	r2, r1, #1
 800c1b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800c1bc:	fbb2 f2f1 	udiv	r2, r2, r1
 800c1c0:	e7e8      	b.n	800c194 <UART_SetConfig+0x4c8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c2:	a803      	add	r0, sp, #12
 800c1c4:	f7fd fc8a 	bl	8009adc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800c1c8:	4b53      	ldr	r3, [pc, #332]	; (800c318 <UART_SetConfig+0x64c>)
 800c1ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c1cc:	6861      	ldr	r1, [r4, #4]
 800c1ce:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c1d2:	9b04      	ldr	r3, [sp, #16]
 800c1d4:	e7ed      	b.n	800c1b2 <UART_SetConfig+0x4e6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1d6:	4a53      	ldr	r2, [pc, #332]	; (800c324 <UART_SetConfig+0x658>)
 800c1d8:	6865      	ldr	r5, [r4, #4]
 800c1da:	6813      	ldr	r3, [r2, #0]
 800c1dc:	484d      	ldr	r0, [pc, #308]	; (800c314 <UART_SetConfig+0x648>)
 800c1de:	f013 0320 	ands.w	r3, r3, #32
 800c1e2:	4e4d      	ldr	r6, [pc, #308]	; (800c318 <UART_SetConfig+0x64c>)
 800c1e4:	d00d      	beq.n	800c202 <UART_SetConfig+0x536>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800c1e6:	6812      	ldr	r2, [r2, #0]
 800c1e8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800c1ec:	40d0      	lsrs	r0, r2
 800c1ee:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 800c1f2:	fbb0 f0f2 	udiv	r0, r0, r2
 800c1f6:	086a      	lsrs	r2, r5, #1
 800c1f8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c1fc:	fbb2 f2f5 	udiv	r2, r2, r5
 800c200:	e7c8      	b.n	800c194 <UART_SetConfig+0x4c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c202:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 800c206:	fbb0 f0f2 	udiv	r0, r0, r2
 800c20a:	086a      	lsrs	r2, r5, #1
 800c20c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c210:	fbb2 f2f5 	udiv	r2, r2, r5
 800c214:	b292      	uxth	r2, r2
    brrtemp = usartdiv & 0xFFF0U;
 800c216:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c21a:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 800c21e:	6820      	ldr	r0, [r4, #0]
 800c220:	430a      	orrs	r2, r1
 800c222:	60c2      	str	r2, [r0, #12]
 800c224:	e744      	b.n	800c0b0 <UART_SetConfig+0x3e4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c226:	4b3c      	ldr	r3, [pc, #240]	; (800c318 <UART_SetConfig+0x64c>)
 800c228:	6865      	ldr	r5, [r4, #4]
 800c22a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800c22e:	fbb0 f2f3 	udiv	r2, r0, r3
 800c232:	b293      	uxth	r3, r2
 800c234:	086a      	lsrs	r2, r5, #1
 800c236:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800c23a:	e7df      	b.n	800c1fc <UART_SetConfig+0x530>
    switch (clocksource)
 800c23c:	2b08      	cmp	r3, #8
 800c23e:	d046      	beq.n	800c2ce <UART_SetConfig+0x602>
 800c240:	d818      	bhi.n	800c274 <UART_SetConfig+0x5a8>
 800c242:	2b01      	cmp	r3, #1
 800c244:	d035      	beq.n	800c2b2 <UART_SetConfig+0x5e6>
 800c246:	d324      	bcc.n	800c292 <UART_SetConfig+0x5c6>
 800c248:	2b04      	cmp	r3, #4
 800c24a:	f47f ae7e 	bne.w	800bf4a <UART_SetConfig+0x27e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c24e:	4668      	mov	r0, sp
 800c250:	f7fd fba4 	bl	800999c <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800c254:	4b30      	ldr	r3, [pc, #192]	; (800c318 <UART_SetConfig+0x64c>)
 800c256:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c258:	e894 0006 	ldmia.w	r4, {r1, r2}
 800c25c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800c260:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800c262:	fbb3 f3f0 	udiv	r3, r3, r0
 800c266:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800c26a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c26e:	b29b      	uxth	r3, r3
 800c270:	60cb      	str	r3, [r1, #12]
 800c272:	e6c7      	b.n	800c004 <UART_SetConfig+0x338>
    switch (clocksource)
 800c274:	2b20      	cmp	r3, #32
 800c276:	d057      	beq.n	800c328 <UART_SetConfig+0x65c>
 800c278:	2b40      	cmp	r3, #64	; 0x40
 800c27a:	d01d      	beq.n	800c2b8 <UART_SetConfig+0x5ec>
 800c27c:	2b10      	cmp	r3, #16
 800c27e:	f47f ae64 	bne.w	800bf4a <UART_SetConfig+0x27e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c282:	4b25      	ldr	r3, [pc, #148]	; (800c318 <UART_SetConfig+0x64c>)
 800c284:	6862      	ldr	r2, [r4, #4]
 800c286:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800c28a:	4b24      	ldr	r3, [pc, #144]	; (800c31c <UART_SetConfig+0x650>)
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c28c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c290:	e008      	b.n	800c2a4 <UART_SetConfig+0x5d8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800c292:	f7fc fce1 	bl	8008c58 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800c296:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c298:	4b1f      	ldr	r3, [pc, #124]	; (800c318 <UART_SetConfig+0x64c>)
 800c29a:	6862      	ldr	r2, [r4, #4]
 800c29c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800c2a0:	fbb0 f3f3 	udiv	r3, r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c2a4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800c2a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	60eb      	str	r3, [r5, #12]
 800c2b0:	e6a8      	b.n	800c004 <UART_SetConfig+0x338>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800c2b2:	f7fc fce7 	bl	8008c84 <HAL_RCC_GetPCLK2Freq>
 800c2b6:	e7ee      	b.n	800c296 <UART_SetConfig+0x5ca>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2b8:	a803      	add	r0, sp, #12
 800c2ba:	f7fd fc0f 	bl	8009adc <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800c2be:	4b16      	ldr	r3, [pc, #88]	; (800c318 <UART_SetConfig+0x64c>)
 800c2c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c2c2:	e894 0006 	ldmia.w	r4, {r1, r2}
 800c2c6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800c2ca:	9b04      	ldr	r3, [sp, #16]
 800c2cc:	e7c9      	b.n	800c262 <UART_SetConfig+0x596>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2ce:	4e15      	ldr	r6, [pc, #84]	; (800c324 <UART_SetConfig+0x658>)
 800c2d0:	6860      	ldr	r0, [r4, #4]
 800c2d2:	6833      	ldr	r3, [r6, #0]
 800c2d4:	4a0f      	ldr	r2, [pc, #60]	; (800c314 <UART_SetConfig+0x648>)
 800c2d6:	f013 0320 	ands.w	r3, r3, #32
 800c2da:	4c0f      	ldr	r4, [pc, #60]	; (800c318 <UART_SetConfig+0x64c>)
 800c2dc:	d00e      	beq.n	800c2fc <UART_SetConfig+0x630>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800c2de:	6833      	ldr	r3, [r6, #0]
 800c2e0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c2e4:	40da      	lsrs	r2, r3
 800c2e6:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 800c2ea:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2ee:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800c2f2:	fbb2 f2f0 	udiv	r2, r2, r0
 800c2f6:	b292      	uxth	r2, r2
 800c2f8:	60ea      	str	r2, [r5, #12]
 800c2fa:	e683      	b.n	800c004 <UART_SetConfig+0x338>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c2fc:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800c300:	fbb2 f2f1 	udiv	r2, r2, r1
 800c304:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800c308:	fbb2 f2f0 	udiv	r2, r2, r0
 800c30c:	b292      	uxth	r2, r2
 800c30e:	60ea      	str	r2, [r5, #12]
 800c310:	e6ce      	b.n	800c0b0 <UART_SetConfig+0x3e4>
 800c312:	bf00      	nop
 800c314:	03d09000 	.word	0x03d09000
 800c318:	08013ad2 	.word	0x08013ad2
 800c31c:	003d0900 	.word	0x003d0900
 800c320:	000ffcff 	.word	0x000ffcff
 800c324:	58024400 	.word	0x58024400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800c328:	4b05      	ldr	r3, [pc, #20]	; (800c340 <UART_SetConfig+0x674>)
 800c32a:	6862      	ldr	r2, [r4, #4]
 800c32c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800c330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c334:	e7aa      	b.n	800c28c <UART_SetConfig+0x5c0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c336:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c33a:	f47f ae06 	bne.w	800bf4a <UART_SetConfig+0x27e>
 800c33e:	e592      	b.n	800be66 <UART_SetConfig+0x19a>
 800c340:	08013ad2 	.word	0x08013ad2

0800c344 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c344:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c346:	2bff      	cmp	r3, #255	; 0xff
{
 800c348:	b510      	push	{r4, lr}
 800c34a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c34c:	d904      	bls.n	800c358 <UART_AdvFeatureConfig+0x14>
 800c34e:	f640 111b 	movw	r1, #2331	; 0x91b
 800c352:	486a      	ldr	r0, [pc, #424]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c354:	f7f5 fef1 	bl	800213a <assert_failed>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c35a:	07d8      	lsls	r0, r3, #31
 800c35c:	d50f      	bpl.n	800c37e <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800c35e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c360:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c364:	d004      	beq.n	800c370 <UART_AdvFeatureConfig+0x2c>
 800c366:	f44f 6112 	mov.w	r1, #2336	; 0x920
 800c36a:	4864      	ldr	r0, [pc, #400]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c36c:	f7f5 fee5 	bl	800213a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c370:	6822      	ldr	r2, [r4, #0]
 800c372:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c374:	6853      	ldr	r3, [r2, #4]
 800c376:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c37a:	430b      	orrs	r3, r1
 800c37c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c37e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c380:	0799      	lsls	r1, r3, #30
 800c382:	d50f      	bpl.n	800c3a4 <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800c384:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c386:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c38a:	d004      	beq.n	800c396 <UART_AdvFeatureConfig+0x52>
 800c38c:	f640 1127 	movw	r1, #2343	; 0x927
 800c390:	485a      	ldr	r0, [pc, #360]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c392:	f7f5 fed2 	bl	800213a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c396:	6822      	ldr	r2, [r4, #0]
 800c398:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c39a:	6853      	ldr	r3, [r2, #4]
 800c39c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3a0:	430b      	orrs	r3, r1
 800c3a2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3a6:	075a      	lsls	r2, r3, #29
 800c3a8:	d50f      	bpl.n	800c3ca <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800c3aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3ac:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800c3b0:	d004      	beq.n	800c3bc <UART_AdvFeatureConfig+0x78>
 800c3b2:	f640 112e 	movw	r1, #2350	; 0x92e
 800c3b6:	4851      	ldr	r0, [pc, #324]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c3b8:	f7f5 febf 	bl	800213a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3bc:	6822      	ldr	r2, [r4, #0]
 800c3be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c3c0:	6853      	ldr	r3, [r2, #4]
 800c3c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3c6:	430b      	orrs	r3, r1
 800c3c8:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3cc:	071b      	lsls	r3, r3, #28
 800c3ce:	d50f      	bpl.n	800c3f0 <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800c3d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c3d2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800c3d6:	d004      	beq.n	800c3e2 <UART_AdvFeatureConfig+0x9e>
 800c3d8:	f640 1135 	movw	r1, #2357	; 0x935
 800c3dc:	4847      	ldr	r0, [pc, #284]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c3de:	f7f5 feac 	bl	800213a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c3e6:	6853      	ldr	r3, [r2, #4]
 800c3e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3ec:	430b      	orrs	r3, r1
 800c3ee:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3f2:	06d8      	lsls	r0, r3, #27
 800c3f4:	d50f      	bpl.n	800c416 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800c3f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c3f8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c3fc:	d004      	beq.n	800c408 <UART_AdvFeatureConfig+0xc4>
 800c3fe:	f640 113c 	movw	r1, #2364	; 0x93c
 800c402:	483e      	ldr	r0, [pc, #248]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c404:	f7f5 fe99 	bl	800213a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c408:	6822      	ldr	r2, [r4, #0]
 800c40a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c40c:	6893      	ldr	r3, [r2, #8]
 800c40e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c412:	430b      	orrs	r3, r1
 800c414:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c416:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c418:	0699      	lsls	r1, r3, #26
 800c41a:	d50f      	bpl.n	800c43c <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800c41c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c41e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800c422:	d004      	beq.n	800c42e <UART_AdvFeatureConfig+0xea>
 800c424:	f640 1143 	movw	r1, #2371	; 0x943
 800c428:	4834      	ldr	r0, [pc, #208]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c42a:	f7f5 fe86 	bl	800213a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c42e:	6822      	ldr	r2, [r4, #0]
 800c430:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c432:	6893      	ldr	r3, [r2, #8]
 800c434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c438:	430b      	orrs	r3, r1
 800c43a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c43c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c43e:	065a      	lsls	r2, r3, #25
 800c440:	d548      	bpl.n	800c4d4 <UART_AdvFeatureConfig+0x190>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	4a2e      	ldr	r2, [pc, #184]	; (800c500 <UART_AdvFeatureConfig+0x1bc>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d020      	beq.n	800c48c <UART_AdvFeatureConfig+0x148>
 800c44a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800c44e:	4293      	cmp	r3, r2
 800c450:	d01c      	beq.n	800c48c <UART_AdvFeatureConfig+0x148>
 800c452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c456:	4293      	cmp	r3, r2
 800c458:	d018      	beq.n	800c48c <UART_AdvFeatureConfig+0x148>
 800c45a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c45e:	4293      	cmp	r3, r2
 800c460:	d014      	beq.n	800c48c <UART_AdvFeatureConfig+0x148>
 800c462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c466:	4293      	cmp	r3, r2
 800c468:	d010      	beq.n	800c48c <UART_AdvFeatureConfig+0x148>
 800c46a:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800c46e:	4293      	cmp	r3, r2
 800c470:	d00c      	beq.n	800c48c <UART_AdvFeatureConfig+0x148>
 800c472:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800c476:	4293      	cmp	r3, r2
 800c478:	d008      	beq.n	800c48c <UART_AdvFeatureConfig+0x148>
 800c47a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c47e:	4293      	cmp	r3, r2
 800c480:	d004      	beq.n	800c48c <UART_AdvFeatureConfig+0x148>
 800c482:	f640 114a 	movw	r1, #2378	; 0x94a
 800c486:	481d      	ldr	r0, [pc, #116]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c488:	f7f5 fe57 	bl	800213a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800c48c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c48e:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 800c492:	d004      	beq.n	800c49e <UART_AdvFeatureConfig+0x15a>
 800c494:	f640 114b 	movw	r1, #2379	; 0x94b
 800c498:	4818      	ldr	r0, [pc, #96]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c49a:	f7f5 fe4e 	bl	800213a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c49e:	6821      	ldr	r1, [r4, #0]
 800c4a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c4a2:	684b      	ldr	r3, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4a4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c4ac:	ea43 0302 	orr.w	r3, r3, r2
 800c4b0:	604b      	str	r3, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4b2:	d10f      	bne.n	800c4d4 <UART_AdvFeatureConfig+0x190>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800c4b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c4b6:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800c4ba:	d004      	beq.n	800c4c6 <UART_AdvFeatureConfig+0x182>
 800c4bc:	f44f 6115 	mov.w	r1, #2384	; 0x950
 800c4c0:	480e      	ldr	r0, [pc, #56]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c4c2:	f7f5 fe3a 	bl	800213a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4c6:	6822      	ldr	r2, [r4, #0]
 800c4c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c4ca:	6853      	ldr	r3, [r2, #4]
 800c4cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c4d0:	430b      	orrs	r3, r1
 800c4d2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4d6:	061b      	lsls	r3, r3, #24
 800c4d8:	d50f      	bpl.n	800c4fa <UART_AdvFeatureConfig+0x1b6>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800c4da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4dc:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800c4e0:	d004      	beq.n	800c4ec <UART_AdvFeatureConfig+0x1a8>
 800c4e2:	f640 1158 	movw	r1, #2392	; 0x958
 800c4e6:	4805      	ldr	r0, [pc, #20]	; (800c4fc <UART_AdvFeatureConfig+0x1b8>)
 800c4e8:	f7f5 fe27 	bl	800213a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4ec:	6822      	ldr	r2, [r4, #0]
 800c4ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c4f0:	6853      	ldr	r3, [r2, #4]
 800c4f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c4f6:	430b      	orrs	r3, r1
 800c4f8:	6053      	str	r3, [r2, #4]
 800c4fa:	bd10      	pop	{r4, pc}
 800c4fc:	08013a93 	.word	0x08013a93
 800c500:	40011000 	.word	0x40011000

0800c504 <UART_WaitOnFlagUntilTimeout>:
{
 800c504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c508:	9d06      	ldr	r5, [sp, #24]
 800c50a:	4604      	mov	r4, r0
 800c50c:	460f      	mov	r7, r1
 800c50e:	4616      	mov	r6, r2
 800c510:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c512:	6821      	ldr	r1, [r4, #0]
 800c514:	69ca      	ldr	r2, [r1, #28]
 800c516:	ea37 0302 	bics.w	r3, r7, r2
 800c51a:	bf0c      	ite	eq
 800c51c:	2201      	moveq	r2, #1
 800c51e:	2200      	movne	r2, #0
 800c520:	42b2      	cmp	r2, r6
 800c522:	d002      	beq.n	800c52a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800c524:	2000      	movs	r0, #0
}
 800c526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800c52a:	1c6b      	adds	r3, r5, #1
 800c52c:	d0f2      	beq.n	800c514 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c52e:	b99d      	cbnz	r5, 800c558 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c530:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800c532:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c53a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c53c:	689a      	ldr	r2, [r3, #8]
 800c53e:	f022 0201 	bic.w	r2, r2, #1
 800c542:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c544:	2320      	movs	r3, #32
 800c546:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 800c54a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 800c54e:	2300      	movs	r3, #0
 800c550:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 800c554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c558:	f7f7 f9f8 	bl	800394c <HAL_GetTick>
 800c55c:	eba0 0008 	sub.w	r0, r0, r8
 800c560:	4285      	cmp	r5, r0
 800c562:	d2d6      	bcs.n	800c512 <UART_WaitOnFlagUntilTimeout+0xe>
 800c564:	e7e4      	b.n	800c530 <UART_WaitOnFlagUntilTimeout+0x2c>

0800c566 <HAL_UART_Transmit>:
{
 800c566:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c56a:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800c56c:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
{
 800c570:	4604      	mov	r4, r0
 800c572:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 800c574:	2b20      	cmp	r3, #32
{
 800c576:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800c578:	d14c      	bne.n	800c614 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 800c57a:	2900      	cmp	r1, #0
 800c57c:	d048      	beq.n	800c610 <HAL_UART_Transmit+0xaa>
 800c57e:	2a00      	cmp	r2, #0
 800c580:	d046      	beq.n	800c610 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800c582:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800c586:	2b01      	cmp	r3, #1
 800c588:	d044      	beq.n	800c614 <HAL_UART_Transmit+0xae>
 800c58a:	2301      	movs	r3, #1
 800c58c:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c590:	2300      	movs	r3, #0
 800c592:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c594:	2321      	movs	r3, #33	; 0x21
 800c596:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    tickstart = HAL_GetTick();
 800c59a:	f7f7 f9d7 	bl	800394c <HAL_GetTick>
 800c59e:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800c5a0:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
    huart->TxXferCount = Size;
 800c5a4:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 800c5a8:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c5ac:	b292      	uxth	r2, r2
 800c5ae:	b962      	cbnz	r2, 800c5ca <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5b0:	9700      	str	r7, [sp, #0]
 800c5b2:	4633      	mov	r3, r6
 800c5b4:	2140      	movs	r1, #64	; 0x40
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f7ff ffa4 	bl	800c504 <UART_WaitOnFlagUntilTimeout>
 800c5bc:	b998      	cbnz	r0, 800c5e6 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800c5be:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800c5c0:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    huart->gState = HAL_UART_STATE_READY;
 800c5c4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    return HAL_OK;
 800c5c8:	e00e      	b.n	800c5e8 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800c5ca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	9700      	str	r7, [sp, #0]
 800c5d2:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 800c5d4:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5d6:	4620      	mov	r0, r4
      huart->TxXferCount--;
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5de:	4633      	mov	r3, r6
 800c5e0:	f7ff ff90 	bl	800c504 <UART_WaitOnFlagUntilTimeout>
 800c5e4:	b118      	cbz	r0, 800c5ee <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800c5e6:	2003      	movs	r0, #3
}
 800c5e8:	b002      	add	sp, #8
 800c5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5ee:	68a3      	ldr	r3, [r4, #8]
 800c5f0:	6822      	ldr	r2, [r4, #0]
 800c5f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5f6:	d107      	bne.n	800c608 <HAL_UART_Transmit+0xa2>
 800c5f8:	6923      	ldr	r3, [r4, #16]
 800c5fa:	b92b      	cbnz	r3, 800c608 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800c5fc:	f835 3b02 	ldrh.w	r3, [r5], #2
 800c600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c604:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800c606:	e7cf      	b.n	800c5a8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800c608:	782b      	ldrb	r3, [r5, #0]
 800c60a:	3501      	adds	r5, #1
 800c60c:	8513      	strh	r3, [r2, #40]	; 0x28
 800c60e:	e7cb      	b.n	800c5a8 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800c610:	2001      	movs	r0, #1
 800c612:	e7e9      	b.n	800c5e8 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800c614:	2002      	movs	r0, #2
 800c616:	e7e7      	b.n	800c5e8 <HAL_UART_Transmit+0x82>

0800c618 <HAL_UART_Receive>:
{
 800c618:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c61c:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800c61e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
{
 800c622:	4604      	mov	r4, r0
 800c624:	460d      	mov	r5, r1
  if(huart->RxState == HAL_UART_STATE_READY)
 800c626:	2b20      	cmp	r3, #32
{
 800c628:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800c62a:	d161      	bne.n	800c6f0 <HAL_UART_Receive+0xd8>
    if((pData == NULL ) || (Size == 0U))
 800c62c:	2900      	cmp	r1, #0
 800c62e:	d05d      	beq.n	800c6ec <HAL_UART_Receive+0xd4>
 800c630:	2a00      	cmp	r2, #0
 800c632:	d05b      	beq.n	800c6ec <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 800c634:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d059      	beq.n	800c6f0 <HAL_UART_Receive+0xd8>
 800c63c:	2301      	movs	r3, #1
 800c63e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c642:	2300      	movs	r3, #0
 800c644:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c646:	2322      	movs	r3, #34	; 0x22
 800c648:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
    tickstart = HAL_GetTick();
 800c64c:	f7f7 f97e 	bl	800394c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800c650:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800c652:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800c654:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 800c658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 800c65c:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
    UART_MASK_COMPUTATION(huart);
 800c660:	d115      	bne.n	800c68e <HAL_UART_Receive+0x76>
 800c662:	6923      	ldr	r3, [r4, #16]
 800c664:	b98b      	cbnz	r3, 800c68a <HAL_UART_Receive+0x72>
 800c666:	f240 13ff 	movw	r3, #511	; 0x1ff
 800c66a:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
    uhMask = huart->Mask;
 800c66e:	f8b4 606c 	ldrh.w	r6, [r4, #108]	; 0x6c
    while(huart->RxXferCount > 0U)
 800c672:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
 800c676:	b280      	uxth	r0, r0
 800c678:	b9b8      	cbnz	r0, 800c6aa <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 800c67a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800c67c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 800c680:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
 800c684:	b002      	add	sp, #8
 800c686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 800c68a:	23ff      	movs	r3, #255	; 0xff
 800c68c:	e7ed      	b.n	800c66a <HAL_UART_Receive+0x52>
 800c68e:	b923      	cbnz	r3, 800c69a <HAL_UART_Receive+0x82>
 800c690:	6923      	ldr	r3, [r4, #16]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0f9      	beq.n	800c68a <HAL_UART_Receive+0x72>
 800c696:	237f      	movs	r3, #127	; 0x7f
 800c698:	e7e7      	b.n	800c66a <HAL_UART_Receive+0x52>
 800c69a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c69e:	d1e6      	bne.n	800c66e <HAL_UART_Receive+0x56>
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d0f7      	beq.n	800c696 <HAL_UART_Receive+0x7e>
 800c6a6:	233f      	movs	r3, #63	; 0x3f
 800c6a8:	e7df      	b.n	800c66a <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 800c6aa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f8cd 8000 	str.w	r8, [sp]
 800c6b4:	2120      	movs	r1, #32
      huart->RxXferCount--;
 800c6b6:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c6b8:	4620      	mov	r0, r4
      huart->RxXferCount--;
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c6c0:	463b      	mov	r3, r7
 800c6c2:	f7ff ff1f 	bl	800c504 <UART_WaitOnFlagUntilTimeout>
 800c6c6:	b9a8      	cbnz	r0, 800c6f4 <HAL_UART_Receive+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6c8:	68a3      	ldr	r3, [r4, #8]
 800c6ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	d106      	bne.n	800c6e0 <HAL_UART_Receive+0xc8>
 800c6d2:	6922      	ldr	r2, [r4, #16]
 800c6d4:	b922      	cbnz	r2, 800c6e0 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800c6d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c6d8:	4033      	ands	r3, r6
 800c6da:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 800c6de:	e7c8      	b.n	800c672 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c6e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c6e2:	3501      	adds	r5, #1
 800c6e4:	4033      	ands	r3, r6
 800c6e6:	f805 3c01 	strb.w	r3, [r5, #-1]
 800c6ea:	e7c2      	b.n	800c672 <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	e7c9      	b.n	800c684 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 800c6f0:	2002      	movs	r0, #2
 800c6f2:	e7c7      	b.n	800c684 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800c6f4:	2003      	movs	r0, #3
 800c6f6:	e7c5      	b.n	800c684 <HAL_UART_Receive+0x6c>

0800c6f8 <UART_CheckIdleState>:
{
 800c6f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6fa:	2600      	movs	r6, #0
{
 800c6fc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6fe:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800c700:	f7f7 f924 	bl	800394c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c704:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c706:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	071a      	lsls	r2, r3, #28
 800c70c:	d417      	bmi.n	800c73e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	075b      	lsls	r3, r3, #29
 800c714:	d50a      	bpl.n	800c72c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c716:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c71a:	2200      	movs	r2, #0
 800c71c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c720:	4620      	mov	r0, r4
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	462b      	mov	r3, r5
 800c726:	f7ff feed 	bl	800c504 <UART_WaitOnFlagUntilTimeout>
 800c72a:	b9a0      	cbnz	r0, 800c756 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 800c72c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c72e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c730:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 800c734:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c738:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  return HAL_OK;
 800c73c:	e00c      	b.n	800c758 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c73e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c742:	4632      	mov	r2, r6
 800c744:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	4603      	mov	r3, r0
 800c74c:	4620      	mov	r0, r4
 800c74e:	f7ff fed9 	bl	800c504 <UART_WaitOnFlagUntilTimeout>
 800c752:	2800      	cmp	r0, #0
 800c754:	d0db      	beq.n	800c70e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800c756:	2003      	movs	r0, #3
}
 800c758:	b002      	add	sp, #8
 800c75a:	bd70      	pop	{r4, r5, r6, pc}

0800c75c <HAL_UART_Init>:
{
 800c75c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800c75e:	4604      	mov	r4, r0
 800c760:	2800      	cmp	r0, #0
 800c762:	d079      	beq.n	800c858 <HAL_UART_Init+0xfc>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800c764:	6981      	ldr	r1, [r0, #24]
 800c766:	6803      	ldr	r3, [r0, #0]
 800c768:	4a3c      	ldr	r2, [pc, #240]	; (800c85c <HAL_UART_Init+0x100>)
 800c76a:	2900      	cmp	r1, #0
 800c76c:	d052      	beq.n	800c814 <HAL_UART_Init+0xb8>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800c76e:	4293      	cmp	r3, r2
 800c770:	d022      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c772:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800c776:	4293      	cmp	r3, r2
 800c778:	d01e      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c77a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c77e:	4293      	cmp	r3, r2
 800c780:	d01a      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c786:	4293      	cmp	r3, r2
 800c788:	d016      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c78a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c78e:	4293      	cmp	r3, r2
 800c790:	d012      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c792:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800c796:	4293      	cmp	r3, r2
 800c798:	d00e      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c79a:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d00a      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c7a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d006      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c7aa:	4a2d      	ldr	r2, [pc, #180]	; (800c860 <HAL_UART_Init+0x104>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d003      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c7b0:	21f0      	movs	r1, #240	; 0xf0
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800c7b2:	482c      	ldr	r0, [pc, #176]	; (800c864 <HAL_UART_Init+0x108>)
 800c7b4:	f7f5 fcc1 	bl	800213a <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 800c7b8:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 800c7bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c7c0:	b923      	cbnz	r3, 800c7cc <HAL_UART_Init+0x70>
    huart->Lock = HAL_UNLOCKED;
 800c7c2:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f7f6 f988 	bl	8002adc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c7cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c7ce:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c7d0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800c7d2:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 800c7d6:	6813      	ldr	r3, [r2, #0]
 800c7d8:	f023 0301 	bic.w	r3, r3, #1
 800c7dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c7de:	f7ff fa75 	bl	800bccc <UART_SetConfig>
 800c7e2:	2801      	cmp	r0, #1
 800c7e4:	d038      	beq.n	800c858 <HAL_UART_Init+0xfc>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c7e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7e8:	b113      	cbz	r3, 800c7f0 <HAL_UART_Init+0x94>
    UART_AdvFeatureConfig(huart);
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f7ff fdaa 	bl	800c344 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7f0:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c7f2:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c7fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c7fc:	689a      	ldr	r2, [r3, #8]
 800c7fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c802:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	f042 0201 	orr.w	r2, r2, #1
}
 800c80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c80e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c810:	f7ff bf72 	b.w	800c6f8 <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800c814:	4293      	cmp	r3, r2
 800c816:	d0cf      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c818:	4a13      	ldr	r2, [pc, #76]	; (800c868 <HAL_UART_Init+0x10c>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d0cc      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c81e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c822:	4293      	cmp	r3, r2
 800c824:	d0c8      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d0c4      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c82e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c832:	4293      	cmp	r3, r2
 800c834:	d0c0      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c836:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d0bc      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c83e:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800c842:	4293      	cmp	r3, r2
 800c844:	d0b8      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d0b4      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c84e:	4a04      	ldr	r2, [pc, #16]	; (800c860 <HAL_UART_Init+0x104>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d0b1      	beq.n	800c7b8 <HAL_UART_Init+0x5c>
 800c854:	21f5      	movs	r1, #245	; 0xf5
 800c856:	e7ac      	b.n	800c7b2 <HAL_UART_Init+0x56>
}
 800c858:	2001      	movs	r0, #1
 800c85a:	bd10      	pop	{r4, pc}
 800c85c:	40011000 	.word	0x40011000
 800c860:	58000c00 	.word	0x58000c00
 800c864:	08013a93 	.word	0x08013a93
 800c868:	40004400 	.word	0x40004400

0800c86c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c86c:	4770      	bx	lr
	...

0800c870 <DelayBlock_Enable>:
  */
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx)
{
  uint32_t i=0,N=0, lng=0, tuningOn = 1;

  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));
 800c870:	4b23      	ldr	r3, [pc, #140]	; (800c900 <DelayBlock_Enable+0x90>)
 800c872:	4298      	cmp	r0, r3
{
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	4604      	mov	r4, r0
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));
 800c878:	d009      	beq.n	800c88e <DelayBlock_Enable+0x1e>
 800c87a:	4b22      	ldr	r3, [pc, #136]	; (800c904 <DelayBlock_Enable+0x94>)
 800c87c:	4298      	cmp	r0, r3
 800c87e:	d006      	beq.n	800c88e <DelayBlock_Enable+0x1e>
 800c880:	4b21      	ldr	r3, [pc, #132]	; (800c908 <DelayBlock_Enable+0x98>)
 800c882:	4298      	cmp	r0, r3
 800c884:	d003      	beq.n	800c88e <DelayBlock_Enable+0x1e>
 800c886:	2173      	movs	r1, #115	; 0x73
 800c888:	4820      	ldr	r0, [pc, #128]	; (800c90c <DelayBlock_Enable+0x9c>)
 800c88a:	f7f5 fc56 	bl	800213a <assert_failed>

  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 800c88e:	2303      	movs	r3, #3
  uint32_t i=0,N=0, lng=0, tuningOn = 1;
 800c890:	2500      	movs	r5, #0
  {
    
    DLYBx->CFGR = 12 | (i << 8);
    HAL_Delay(1);
    if(((DLYBx->CFGR & DLYB_CFGR_LNGF) != 0) 
       && ((DLYBx->CFGR & DLYB_CFGR_LNG) != 0)
 800c892:	4e1f      	ldr	r6, [pc, #124]	; (800c910 <DelayBlock_Enable+0xa0>)
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 800c894:	6023      	str	r3, [r4, #0]
    DLYBx->CFGR = 12 | (i << 8);
 800c896:	022b      	lsls	r3, r5, #8
    HAL_Delay(1);
 800c898:	2001      	movs	r0, #1
    DLYBx->CFGR = 12 | (i << 8);
 800c89a:	f043 030c 	orr.w	r3, r3, #12
 800c89e:	6063      	str	r3, [r4, #4]
    HAL_Delay(1);
 800c8a0:	f7f7 f85a 	bl	8003958 <HAL_Delay>
    if(((DLYBx->CFGR & DLYB_CFGR_LNGF) != 0) 
 800c8a4:	6863      	ldr	r3, [r4, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	da10      	bge.n	800c8cc <DelayBlock_Enable+0x5c>
       && ((DLYBx->CFGR & DLYB_CFGR_LNG) != 0)
 800c8aa:	6863      	ldr	r3, [r4, #4]
 800c8ac:	4233      	tst	r3, r6
 800c8ae:	d00d      	beq.n	800c8cc <DelayBlock_Enable+0x5c>
       && ((DLYBx->CFGR & DLYB_CFGR_LNG) != (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)))
 800c8b0:	6863      	ldr	r3, [r4, #4]
 800c8b2:	4033      	ands	r3, r6
 800c8b4:	f103 4274 	add.w	r2, r3, #4093640704	; 0xf4000000
 800c8b8:	4253      	negs	r3, r2
 800c8ba:	4153      	adcs	r3, r2
    {
      tuningOn = 0;
    }
    i++;
 800c8bc:	3501      	adds	r5, #1
  while((tuningOn != 0) && (i < DLYB_MAX_UNIT))
 800c8be:	b13b      	cbz	r3, 800c8d0 <DelayBlock_Enable+0x60>
 800c8c0:	2d80      	cmp	r5, #128	; 0x80
 800c8c2:	d1e8      	bne.n	800c896 <DelayBlock_Enable+0x26>
  * @retval HAL status
  */
HAL_StatusTypeDef DelayBlock_Disable(DLYB_TypeDef *DLYBx)
{
  /* Disable DLYB */
  DLYBx->CR = 0;
 800c8c4:	2300      	movs	r3, #0
  return HAL_ERROR;
 800c8c6:	2001      	movs	r0, #1
  DLYBx->CR = 0;
 800c8c8:	6023      	str	r3, [r4, #0]
  return HAL_ERROR;
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e7f5      	b.n	800c8bc <DelayBlock_Enable+0x4c>
  if(DLYB_MAX_UNIT != i)
 800c8d0:	2d80      	cmp	r5, #128	; 0x80
 800c8d2:	d0f7      	beq.n	800c8c4 <DelayBlock_Enable+0x54>
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16;
 800c8d4:	6862      	ldr	r2, [r4, #4]
    N = 10;
 800c8d6:	230a      	movs	r3, #10
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16;
 800c8d8:	f3c2 420b 	ubfx	r2, r2, #16, #12
    while((N>0) && ((lng >> N) == 0))
 800c8dc:	fa32 f103 	lsrs.w	r1, r2, r3
 800c8e0:	d00a      	beq.n	800c8f8 <DelayBlock_Enable+0x88>
      MODIFY_REG(DLYBx->CFGR, DLYB_CFGR_SEL, ((N/2)+1));
 800c8e2:	6862      	ldr	r2, [r4, #4]
 800c8e4:	085b      	lsrs	r3, r3, #1
      return HAL_OK;
 800c8e6:	2000      	movs	r0, #0
      MODIFY_REG(DLYBx->CFGR, DLYB_CFGR_SEL, ((N/2)+1));
 800c8e8:	f022 020f 	bic.w	r2, r2, #15
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	6063      	str	r3, [r4, #4]
      DLYBx->CR = DLYB_CR_DEN;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	6023      	str	r3, [r4, #0]
}
 800c8f6:	bd70      	pop	{r4, r5, r6, pc}
    while((N>0) && ((lng >> N) == 0))
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	d1ef      	bne.n	800c8dc <DelayBlock_Enable+0x6c>
 800c8fc:	e7e2      	b.n	800c8c4 <DelayBlock_Enable+0x54>
 800c8fe:	bf00      	nop
 800c900:	52008000 	.word	0x52008000
 800c904:	48022800 	.word	0x48022800
 800c908:	52006000 	.word	0x52006000
 800c90c:	08013aea 	.word	0x08013aea
 800c910:	0fff0000 	.word	0x0fff0000

0800c914 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c914:	4b11      	ldr	r3, [pc, #68]	; (800c95c <SDMMC_GetCmdResp2+0x48>)
 800c916:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c920:	f241 3388 	movw	r3, #5000	; 0x1388
 800c924:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800c926:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c92a:	d313      	bcc.n	800c954 <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800c92c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c92e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c932:	d0f8      	beq.n	800c926 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c934:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c936:	075b      	lsls	r3, r3, #29
 800c938:	d503      	bpl.n	800c942 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c93a:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c93c:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800c93e:	4618      	mov	r0, r3
 800c940:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c942:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c944:	f013 0301 	ands.w	r3, r3, #1
 800c948:	d001      	beq.n	800c94e <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c94a:	2301      	movs	r3, #1
 800c94c:	e7f6      	b.n	800c93c <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c94e:	4a04      	ldr	r2, [pc, #16]	; (800c960 <SDMMC_GetCmdResp2+0x4c>)
 800c950:	6382      	str	r2, [r0, #56]	; 0x38
 800c952:	e7f4      	b.n	800c93e <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800c954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c958:	e7f1      	b.n	800c93e <SDMMC_GetCmdResp2+0x2a>
 800c95a:	bf00      	nop
 800c95c:	24000018 	.word	0x24000018
 800c960:	002000c5 	.word	0x002000c5

0800c964 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c964:	4b0e      	ldr	r3, [pc, #56]	; (800c9a0 <SDMMC_GetCmdResp3+0x3c>)
 800c966:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c970:	f241 3388 	movw	r3, #5000	; 0x1388
 800c974:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800c976:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c97a:	d30e      	bcc.n	800c99a <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800c97c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c97e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c982:	d0f8      	beq.n	800c976 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c984:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c986:	f013 0304 	ands.w	r3, r3, #4
 800c98a:	d003      	beq.n	800c994 <SDMMC_GetCmdResp3+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c98c:	2304      	movs	r3, #4
 800c98e:	6383      	str	r3, [r0, #56]	; 0x38
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
 800c990:	4618      	mov	r0, r3
 800c992:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c994:	4a03      	ldr	r2, [pc, #12]	; (800c9a4 <SDMMC_GetCmdResp3+0x40>)
 800c996:	6382      	str	r2, [r0, #56]	; 0x38
 800c998:	e7fa      	b.n	800c990 <SDMMC_GetCmdResp3+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800c99a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c99e:	4770      	bx	lr
 800c9a0:	24000018 	.word	0x24000018
 800c9a4:	002000c5 	.word	0x002000c5

0800c9a8 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c9a8:	4b42      	ldr	r3, [pc, #264]	; (800cab4 <SDMMC_GetCmdResp1+0x10c>)
{
 800c9aa:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800c9b2:	fbb3 f3f4 	udiv	r3, r3, r4
 800c9b6:	435a      	muls	r2, r3
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END));
 800c9b8:	4b3f      	ldr	r3, [pc, #252]	; (800cab8 <SDMMC_GetCmdResp1+0x110>)
    if (count-- == 0U)
 800c9ba:	2a00      	cmp	r2, #0
 800c9bc:	d046      	beq.n	800ca4c <SDMMC_GetCmdResp1+0xa4>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END));
 800c9be:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c9c0:	3a01      	subs	r2, #1
 800c9c2:	421c      	tst	r4, r3
 800c9c4:	d0f9      	beq.n	800c9ba <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c9c8:	075b      	lsls	r3, r3, #29
 800c9ca:	d503      	bpl.n	800c9d4 <SDMMC_GetCmdResp1+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9cc:	2304      	movs	r3, #4
 800c9ce:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c9d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c9d6:	07dc      	lsls	r4, r3, #31
 800c9d8:	d503      	bpl.n	800c9e2 <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c9da:	2301      	movs	r3, #1
 800c9dc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9de:	2001      	movs	r0, #1
 800c9e0:	bd10      	pop	{r4, pc}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9e2:	4b36      	ldr	r3, [pc, #216]	; (800cabc <SDMMC_GetCmdResp1+0x114>)
 800c9e4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c9e6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	4299      	cmp	r1, r3
 800c9ec:	d1f7      	bne.n	800c9de <SDMMC_GetCmdResp1+0x36>
  return (*(__IO uint32_t *) tmp);
 800c9ee:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c9f0:	4833      	ldr	r0, [pc, #204]	; (800cac0 <SDMMC_GetCmdResp1+0x118>)
 800c9f2:	4018      	ands	r0, r3
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d05c      	beq.n	800cab2 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	db2a      	blt.n	800ca52 <SDMMC_GetCmdResp1+0xaa>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c9fc:	005a      	lsls	r2, r3, #1
 800c9fe:	d42b      	bmi.n	800ca58 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ca00:	009c      	lsls	r4, r3, #2
 800ca02:	d42b      	bmi.n	800ca5c <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ca04:	00d9      	lsls	r1, r3, #3
 800ca06:	d42b      	bmi.n	800ca60 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ca08:	011a      	lsls	r2, r3, #4
 800ca0a:	d42c      	bmi.n	800ca66 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ca0c:	015c      	lsls	r4, r3, #5
 800ca0e:	d42d      	bmi.n	800ca6c <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca10:	01d9      	lsls	r1, r3, #7
 800ca12:	d42e      	bmi.n	800ca72 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca14:	021a      	lsls	r2, r3, #8
 800ca16:	d42f      	bmi.n	800ca78 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ca18:	025c      	lsls	r4, r3, #9
 800ca1a:	d430      	bmi.n	800ca7e <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ca1c:	0299      	lsls	r1, r3, #10
 800ca1e:	d431      	bmi.n	800ca84 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ca20:	02da      	lsls	r2, r3, #11
 800ca22:	d432      	bmi.n	800ca8a <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ca24:	035c      	lsls	r4, r3, #13
 800ca26:	d433      	bmi.n	800ca90 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ca28:	0399      	lsls	r1, r3, #14
 800ca2a:	d434      	bmi.n	800ca96 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ca2c:	03da      	lsls	r2, r3, #15
 800ca2e:	d435      	bmi.n	800ca9c <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ca30:	041c      	lsls	r4, r3, #16
 800ca32:	d436      	bmi.n	800caa2 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ca34:	0459      	lsls	r1, r3, #17
 800ca36:	d437      	bmi.n	800caa8 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ca38:	049a      	lsls	r2, r3, #18
 800ca3a:	d438      	bmi.n	800caae <SDMMC_GetCmdResp1+0x106>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ca3c:	f013 0f08 	tst.w	r3, #8
 800ca40:	bf14      	ite	ne
 800ca42:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800ca46:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ca4a:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800ca4c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ca50:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ca52:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800ca56:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ca58:	2040      	movs	r0, #64	; 0x40
 800ca5a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ca5c:	2080      	movs	r0, #128	; 0x80
 800ca5e:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ca60:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ca64:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ca66:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ca6a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ca70:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ca76:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ca7c:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca7e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ca82:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ca84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ca88:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CC_ERR;
 800ca8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ca8e:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ca90:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ca94:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ca96:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ca9a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ca9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800caa0:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800caa2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800caa6:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800caa8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800caac:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_RESET;
 800caae:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800cab2:	bd10      	pop	{r4, pc}
 800cab4:	24000018 	.word	0x24000018
 800cab8:	00200045 	.word	0x00200045
 800cabc:	002000c5 	.word	0x002000c5
 800cac0:	fdffe008 	.word	0xfdffe008

0800cac4 <SDMMC_Init>:
{
 800cac4:	b084      	sub	sp, #16
 800cac6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caca:	4605      	mov	r5, r0
 800cacc:	a809      	add	r0, sp, #36	; 0x24
 800cace:	460c      	mov	r4, r1
 800cad0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800cad4:	4b21      	ldr	r3, [pc, #132]	; (800cb5c <SDMMC_Init+0x98>)
 800cad6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800cada:	429d      	cmp	r5, r3
 800cadc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cade:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800cae2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800cae4:	d003      	beq.n	800caee <SDMMC_Init+0x2a>
 800cae6:	21e2      	movs	r1, #226	; 0xe2
 800cae8:	481d      	ldr	r0, [pc, #116]	; (800cb60 <SDMMC_Init+0x9c>)
 800caea:	f7f5 fb26 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 800caee:	f434 3380 	bics.w	r3, r4, #65536	; 0x10000
 800caf2:	d003      	beq.n	800cafc <SDMMC_Init+0x38>
 800caf4:	21e3      	movs	r1, #227	; 0xe3
 800caf6:	481a      	ldr	r0, [pc, #104]	; (800cb60 <SDMMC_Init+0x9c>)
 800caf8:	f7f5 fb1f 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800cafc:	f439 5380 	bics.w	r3, r9, #4096	; 0x1000
 800cb00:	d003      	beq.n	800cb0a <SDMMC_Init+0x46>
 800cb02:	21e4      	movs	r1, #228	; 0xe4
 800cb04:	4816      	ldr	r0, [pc, #88]	; (800cb60 <SDMMC_Init+0x9c>)
 800cb06:	f7f5 fb18 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800cb0a:	f436 4380 	bics.w	r3, r6, #16384	; 0x4000
 800cb0e:	d006      	beq.n	800cb1e <SDMMC_Init+0x5a>
 800cb10:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800cb14:	d003      	beq.n	800cb1e <SDMMC_Init+0x5a>
 800cb16:	21e5      	movs	r1, #229	; 0xe5
 800cb18:	4811      	ldr	r0, [pc, #68]	; (800cb60 <SDMMC_Init+0x9c>)
 800cb1a:	f7f5 fb0e 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800cb1e:	f438 3300 	bics.w	r3, r8, #131072	; 0x20000
 800cb22:	d003      	beq.n	800cb2c <SDMMC_Init+0x68>
 800cb24:	21e6      	movs	r1, #230	; 0xe6
 800cb26:	480e      	ldr	r0, [pc, #56]	; (800cb60 <SDMMC_Init+0x9c>)
 800cb28:	f7f5 fb07 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800cb2c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800cb30:	d303      	bcc.n	800cb3a <SDMMC_Init+0x76>
 800cb32:	21e7      	movs	r1, #231	; 0xe7
 800cb34:	480a      	ldr	r0, [pc, #40]	; (800cb60 <SDMMC_Init+0x9c>)
 800cb36:	f7f5 fb00 	bl	800213a <assert_failed>
  tmpreg |= (Init.ClockEdge           |\
 800cb3a:	ea44 0309 	orr.w	r3, r4, r9
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cb3e:	6869      	ldr	r1, [r5, #4]
 800cb40:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <SDMMC_Init+0xa0>)
}
 800cb42:	2000      	movs	r0, #0
             Init.ClockPowerSave      |\
 800cb44:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cb46:	400a      	ands	r2, r1
             Init.BusWide             |\
 800cb48:	ea43 0308 	orr.w	r3, r3, r8
             Init.HardwareFlowControl |\
 800cb4c:	433b      	orrs	r3, r7
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	606b      	str	r3, [r5, #4]
}
 800cb52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb56:	b004      	add	sp, #16
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	52007000 	.word	0x52007000
 800cb60:	08013b2e 	.word	0x08013b2e
 800cb64:	fffc2c00 	.word	0xfffc2c00

0800cb68 <SDMMC_ReadFIFO>:
 800cb68:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800cb6c:	4770      	bx	lr

0800cb6e <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800cb6e:	680b      	ldr	r3, [r1, #0]
 800cb70:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800cb74:	2000      	movs	r0, #0
 800cb76:	4770      	bx	lr

0800cb78 <SDMMC_PowerState_ON>:
{  
 800cb78:	b508      	push	{r3, lr}
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cb7a:	6803      	ldr	r3, [r0, #0]
 800cb7c:	f043 0303 	orr.w	r3, r3, #3
 800cb80:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 800cb82:	2002      	movs	r0, #2
 800cb84:	f7f6 fee8 	bl	8003958 <HAL_Delay>
}
 800cb88:	2000      	movs	r0, #0
 800cb8a:	bd08      	pop	{r3, pc}

0800cb8c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cb8c:	6800      	ldr	r0, [r0, #0]
}
 800cb8e:	f000 0003 	and.w	r0, r0, #3
 800cb92:	4770      	bx	lr

0800cb94 <SDMMC_SendCommand>:
{
 800cb94:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800cb96:	684b      	ldr	r3, [r1, #4]
{
 800cb98:	4605      	mov	r5, r0
 800cb9a:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800cb9c:	2b3f      	cmp	r3, #63	; 0x3f
 800cb9e:	d904      	bls.n	800cbaa <SDMMC_SendCommand+0x16>
 800cba0:	f240 117d 	movw	r1, #381	; 0x17d
 800cba4:	4819      	ldr	r0, [pc, #100]	; (800cc0c <SDMMC_SendCommand+0x78>)
 800cba6:	f7f5 fac8 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 800cbaa:	68a3      	ldr	r3, [r4, #8]
 800cbac:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cbb0:	d007      	beq.n	800cbc2 <SDMMC_SendCommand+0x2e>
 800cbb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbb6:	d004      	beq.n	800cbc2 <SDMMC_SendCommand+0x2e>
 800cbb8:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800cbbc:	4813      	ldr	r0, [pc, #76]	; (800cc0c <SDMMC_SendCommand+0x78>)
 800cbbe:	f7f5 fabc 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 800cbc2:	68e3      	ldr	r3, [r4, #12]
 800cbc4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800cbc8:	d007      	beq.n	800cbda <SDMMC_SendCommand+0x46>
 800cbca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbce:	d004      	beq.n	800cbda <SDMMC_SendCommand+0x46>
 800cbd0:	f240 117f 	movw	r1, #383	; 0x17f
 800cbd4:	480d      	ldr	r0, [pc, #52]	; (800cc0c <SDMMC_SendCommand+0x78>)
 800cbd6:	f7f5 fab0 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 800cbda:	6923      	ldr	r3, [r4, #16]
 800cbdc:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800cbe0:	d004      	beq.n	800cbec <SDMMC_SendCommand+0x58>
 800cbe2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800cbe6:	4809      	ldr	r0, [pc, #36]	; (800cc0c <SDMMC_SendCommand+0x78>)
 800cbe8:	f7f5 faa7 	bl	800213a <assert_failed>
  SDMMCx->ARG = Command->Argument;
 800cbec:	6823      	ldr	r3, [r4, #0]
}
 800cbee:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbf0:	68a2      	ldr	r2, [r4, #8]
  SDMMCx->ARG = Command->Argument;
 800cbf2:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbf4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbf6:	68e9      	ldr	r1, [r5, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbf8:	4313      	orrs	r3, r2
                       Command->Response         |\
 800cbfa:	68e2      	ldr	r2, [r4, #12]
 800cbfc:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800cbfe:	6922      	ldr	r2, [r4, #16]
 800cc00:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc02:	4a03      	ldr	r2, [pc, #12]	; (800cc10 <SDMMC_SendCommand+0x7c>)
 800cc04:	400a      	ands	r2, r1
 800cc06:	4313      	orrs	r3, r2
 800cc08:	60eb      	str	r3, [r5, #12]
}
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	08013b2e 	.word	0x08013b2e
 800cc10:	fffee0c0 	.word	0xfffee0c0

0800cc14 <SDMMC_GetResponse>:
{
 800cc14:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_RESP(Response));
 800cc16:	f031 030c 	bics.w	r3, r1, #12
{
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	460d      	mov	r5, r1
  assert_param(IS_SDMMC_RESP(Response));
 800cc1e:	d004      	beq.n	800cc2a <SDMMC_GetResponse+0x16>
 800cc20:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800cc24:	4802      	ldr	r0, [pc, #8]	; (800cc30 <SDMMC_GetResponse+0x1c>)
 800cc26:	f7f5 fa88 	bl	800213a <assert_failed>
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cc2a:	3414      	adds	r4, #20
  return (*(__IO uint32_t *) tmp);
 800cc2c:	5960      	ldr	r0, [r4, r5]
}  
 800cc2e:	bd38      	pop	{r3, r4, r5, pc}
 800cc30:	08013b2e 	.word	0x08013b2e

0800cc34 <SDMMC_ConfigData>:
{
 800cc34:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800cc36:	684b      	ldr	r3, [r1, #4]
{
 800cc38:	4605      	mov	r5, r0
 800cc3a:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800cc3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc40:	d304      	bcc.n	800cc4c <SDMMC_ConfigData+0x18>
 800cc42:	f240 11c1 	movw	r1, #449	; 0x1c1
 800cc46:	4821      	ldr	r0, [pc, #132]	; (800cccc <SDMMC_ConfigData+0x98>)
 800cc48:	f7f5 fa77 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800cc4c:	68a3      	ldr	r3, [r4, #8]
 800cc4e:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 800cc52:	f023 0110 	bic.w	r1, r3, #16
 800cc56:	d00c      	beq.n	800cc72 <SDMMC_ConfigData+0x3e>
 800cc58:	2a40      	cmp	r2, #64	; 0x40
 800cc5a:	d00a      	beq.n	800cc72 <SDMMC_ConfigData+0x3e>
 800cc5c:	2a80      	cmp	r2, #128	; 0x80
 800cc5e:	d008      	beq.n	800cc72 <SDMMC_ConfigData+0x3e>
 800cc60:	29c0      	cmp	r1, #192	; 0xc0
 800cc62:	d006      	beq.n	800cc72 <SDMMC_ConfigData+0x3e>
 800cc64:	2be0      	cmp	r3, #224	; 0xe0
 800cc66:	d004      	beq.n	800cc72 <SDMMC_ConfigData+0x3e>
 800cc68:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800cc6c:	4817      	ldr	r0, [pc, #92]	; (800cccc <SDMMC_ConfigData+0x98>)
 800cc6e:	f7f5 fa64 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800cc72:	68e3      	ldr	r3, [r4, #12]
 800cc74:	f033 0302 	bics.w	r3, r3, #2
 800cc78:	d004      	beq.n	800cc84 <SDMMC_ConfigData+0x50>
 800cc7a:	f240 11c3 	movw	r1, #451	; 0x1c3
 800cc7e:	4813      	ldr	r0, [pc, #76]	; (800cccc <SDMMC_ConfigData+0x98>)
 800cc80:	f7f5 fa5b 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800cc84:	6923      	ldr	r3, [r4, #16]
 800cc86:	f033 0308 	bics.w	r3, r3, #8
 800cc8a:	d004      	beq.n	800cc96 <SDMMC_ConfigData+0x62>
 800cc8c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800cc90:	480e      	ldr	r0, [pc, #56]	; (800cccc <SDMMC_ConfigData+0x98>)
 800cc92:	f7f5 fa52 	bl	800213a <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 800cc96:	6963      	ldr	r3, [r4, #20]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d904      	bls.n	800cca6 <SDMMC_ConfigData+0x72>
 800cc9c:	f240 11c5 	movw	r1, #453	; 0x1c5
 800cca0:	480a      	ldr	r0, [pc, #40]	; (800cccc <SDMMC_ConfigData+0x98>)
 800cca2:	f7f5 fa4a 	bl	800213a <assert_failed>
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cca6:	6823      	ldr	r3, [r4, #0]
}
 800cca8:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ccaa:	68e1      	ldr	r1, [r4, #12]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ccac:	626b      	str	r3, [r5, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800ccae:	6863      	ldr	r3, [r4, #4]
 800ccb0:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ccb2:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ccb4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ccb6:	430b      	orrs	r3, r1
                       Data->TransferDir   |\
 800ccb8:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ccba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
                       Data->TransferDir   |\
 800ccbe:	430b      	orrs	r3, r1
                       Data->TransferMode  |\
 800ccc0:	6961      	ldr	r1, [r4, #20]
 800ccc2:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800ccc8:	bd38      	pop	{r3, r4, r5, pc}
 800ccca:	bf00      	nop
 800cccc:	08013b2e 	.word	0x08013b2e

0800ccd0 <SDMMC_CmdBlockLength>:
{
 800ccd0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccd2:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800ccd6:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ccd8:	2410      	movs	r4, #16
{
 800ccda:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccdc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccde:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cce0:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cce2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cce4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ccea:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccec:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccee:	f7ff ff51 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ccf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f7ff fe55 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800ccfe:	b007      	add	sp, #28
 800cd00:	bd30      	pop	{r4, r5, pc}

0800cd02 <SDMMC_CmdReadSingleBlock>:
{
 800cd02:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd04:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cd08:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cd0a:	2411      	movs	r4, #17
{
 800cd0c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd0e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd10:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd12:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd14:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd16:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cd1c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd1e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd20:	f7ff ff38 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cd24:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd28:	4621      	mov	r1, r4
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f7ff fe3c 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800cd30:	b007      	add	sp, #28
 800cd32:	bd30      	pop	{r4, r5, pc}

0800cd34 <SDMMC_CmdReadMultiBlock>:
{
 800cd34:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd36:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cd3a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cd3c:	2412      	movs	r4, #18
{
 800cd3e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd40:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd42:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd44:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd46:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd48:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cd4e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd50:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd52:	f7ff ff1f 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cd56:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd5a:	4621      	mov	r1, r4
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	f7ff fe23 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800cd62:	b007      	add	sp, #28
 800cd64:	bd30      	pop	{r4, r5, pc}

0800cd66 <SDMMC_CmdWriteSingleBlock>:
{
 800cd66:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd68:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cd6c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd6e:	2418      	movs	r4, #24
{
 800cd70:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd72:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd74:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd76:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd78:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd7a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd80:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd82:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd84:	f7ff ff06 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cd88:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f7ff fe0a 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800cd94:	b007      	add	sp, #28
 800cd96:	bd30      	pop	{r4, r5, pc}

0800cd98 <SDMMC_CmdWriteMultiBlock>:
{
 800cd98:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd9a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cd9e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cda0:	2419      	movs	r4, #25
{
 800cda2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cda4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cda6:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cda8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdaa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdac:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cdb2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdb4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdb6:	f7ff feed 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cdba:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdbe:	4621      	mov	r1, r4
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f7ff fdf1 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800cdc6:	b007      	add	sp, #28
 800cdc8:	bd30      	pop	{r4, r5, pc}
	...

0800cdcc <SDMMC_CmdStopTransfer>:
{
 800cdcc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cdce:	2300      	movs	r3, #0
{
 800cdd0:	b087      	sub	sp, #28
 800cdd2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cdd4:	250c      	movs	r5, #12
  sdmmc_cmdinit.Argument         = 0;
 800cdd6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdd8:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cddc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cde2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cde4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cde6:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cde8:	68c3      	ldr	r3, [r0, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cdea:	9502      	str	r5, [sp, #8]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cdec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdf0:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cdf2:	68c3      	ldr	r3, [r0, #12]
 800cdf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdf8:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdfa:	f7ff fecb 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cdfe:	4a05      	ldr	r2, [pc, #20]	; (800ce14 <SDMMC_CmdStopTransfer+0x48>)
 800ce00:	4629      	mov	r1, r5
 800ce02:	4620      	mov	r0, r4
 800ce04:	f7ff fdd0 	bl	800c9a8 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ce08:	68e3      	ldr	r3, [r4, #12]
 800ce0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce0e:	60e3      	str	r3, [r4, #12]
}
 800ce10:	b007      	add	sp, #28
 800ce12:	bd30      	pop	{r4, r5, pc}
 800ce14:	05f5e100 	.word	0x05f5e100

0800ce18 <SDMMC_CmdSelDesel>:
{
 800ce18:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce1a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800ce1e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ce20:	2407      	movs	r4, #7
{
 800ce22:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce24:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce26:	2300      	movs	r3, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce28:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ce2a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce2c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ce32:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce34:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce36:	f7ff fead 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ce3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce3e:	4621      	mov	r1, r4
 800ce40:	4628      	mov	r0, r5
 800ce42:	f7ff fdb1 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800ce46:	b007      	add	sp, #28
 800ce48:	bd30      	pop	{r4, r5, pc}
	...

0800ce4c <SDMMC_CmdGoIdleState>:
{
 800ce4c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800ce4e:	2300      	movs	r3, #0
{
 800ce50:	b086      	sub	sp, #24
 800ce52:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800ce54:	9301      	str	r3, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce56:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce58:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ce5a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce5c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce62:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce64:	f7ff fe96 	bl	800cb94 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce68:	4b0b      	ldr	r3, [pc, #44]	; (800ce98 <SDMMC_CmdGoIdleState+0x4c>)
 800ce6a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce74:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce78:	4353      	muls	r3, r2
    if (count-- == 0U)
 800ce7a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ce7e:	d307      	bcc.n	800ce90 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ce80:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ce82:	0612      	lsls	r2, r2, #24
 800ce84:	d5f9      	bpl.n	800ce7a <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce86:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <SDMMC_CmdGoIdleState+0x50>)
  return SDMMC_ERROR_NONE;
 800ce88:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce8a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800ce8c:	b006      	add	sp, #24
 800ce8e:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800ce90:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800ce94:	e7fa      	b.n	800ce8c <SDMMC_CmdGoIdleState+0x40>
 800ce96:	bf00      	nop
 800ce98:	24000018 	.word	0x24000018
 800ce9c:	002000c5 	.word	0x002000c5

0800cea0 <SDMMC_CmdOperCond>:
{
 800cea0:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cea2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 800cea6:	b086      	sub	sp, #24
 800cea8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ceaa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ceac:	2308      	movs	r3, #8
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ceae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ceb0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ceb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceb6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cec0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cec2:	f7ff fe67 	bl	800cb94 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cec6:	4b14      	ldr	r3, [pc, #80]	; (800cf18 <SDMMC_CmdOperCond+0x78>)
 800cec8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	fbb3 f2f2 	udiv	r2, r3, r2
 800ced2:	f241 3388 	movw	r3, #5000	; 0x1388
 800ced6:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800ced8:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cedc:	d318      	bcc.n	800cf10 <SDMMC_CmdOperCond+0x70>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800cede:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cee0:	f012 0f45 	tst.w	r2, #69	; 0x45
 800cee4:	d0f8      	beq.n	800ced8 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cee8:	075b      	lsls	r3, r3, #29
 800ceea:	d503      	bpl.n	800cef4 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ceec:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ceee:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800cef0:	b006      	add	sp, #24
 800cef2:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cef4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cef6:	f012 0201 	ands.w	r2, r2, #1
 800cefa:	d001      	beq.n	800cf00 <SDMMC_CmdOperCond+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cefc:	2001      	movs	r0, #1
 800cefe:	e7f6      	b.n	800ceee <SDMMC_CmdOperCond+0x4e>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cf00:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800cf02:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800cf06:	d0f3      	beq.n	800cef0 <SDMMC_CmdOperCond+0x50>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cf08:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 800cf0a:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cf0c:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf0e:	e7ef      	b.n	800cef0 <SDMMC_CmdOperCond+0x50>
      return SDMMC_ERROR_TIMEOUT;
 800cf10:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cf14:	e7ec      	b.n	800cef0 <SDMMC_CmdOperCond+0x50>
 800cf16:	bf00      	nop
 800cf18:	24000018 	.word	0x24000018

0800cf1c <SDMMC_CmdAppCommand>:
{
 800cf1c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf1e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cf22:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cf24:	2437      	movs	r4, #55	; 0x37
{
 800cf26:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf28:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf2a:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cf2c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf2e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf30:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cf36:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf38:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf3a:	f7ff fe2b 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cf3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf42:	4621      	mov	r1, r4
 800cf44:	4628      	mov	r0, r5
 800cf46:	f7ff fd2f 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800cf4a:	b007      	add	sp, #28
 800cf4c:	bd30      	pop	{r4, r5, pc}

0800cf4e <SDMMC_CmdAppOperCommand>:
{
 800cf4e:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf50:	2329      	movs	r3, #41	; 0x29
{
 800cf52:	b086      	sub	sp, #24
 800cf54:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf56:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf58:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdmmc_cmdinit.Argument         = Argument;
 800cf5c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf5e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf60:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf62:	2300      	movs	r3, #0
 800cf64:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf6a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf6c:	f7ff fe12 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cf70:	4620      	mov	r0, r4
 800cf72:	f7ff fcf7 	bl	800c964 <SDMMC_GetCmdResp3>
}
 800cf76:	b006      	add	sp, #24
 800cf78:	bd10      	pop	{r4, pc}

0800cf7a <SDMMC_CmdSendSCR>:
{
 800cf7a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cf7c:	2300      	movs	r3, #0
{
 800cf7e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cf80:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf82:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.Argument         = 0;
 800cf86:	9301      	str	r3, [sp, #4]
{
 800cf88:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf8a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf90:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf92:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf94:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cf96:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf98:	f7ff fdfc 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cf9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfa0:	4621      	mov	r1, r4
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	f7ff fd00 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800cfa8:	b007      	add	sp, #28
 800cfaa:	bd30      	pop	{r4, r5, pc}

0800cfac <SDMMC_CmdSendCID>:
{
 800cfac:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cfae:	2300      	movs	r3, #0
{
 800cfb0:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cfb2:	2202      	movs	r2, #2
{
 800cfb4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800cfb6:	9301      	str	r3, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfb8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cfba:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cfbc:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfc0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cfc6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfc8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfca:	f7ff fde3 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f7ff fca0 	bl	800c914 <SDMMC_GetCmdResp2>
}
 800cfd4:	b006      	add	sp, #24
 800cfd6:	bd10      	pop	{r4, pc}

0800cfd8 <SDMMC_CmdSendCSD>:
{
 800cfd8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cfda:	2309      	movs	r3, #9
{
 800cfdc:	b086      	sub	sp, #24
 800cfde:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cfe0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cfe2:	f44f 7340 	mov.w	r3, #768	; 0x300
  sdmmc_cmdinit.Argument         = Argument;
 800cfe6:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfe8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cfea:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfec:	2300      	movs	r3, #0
 800cfee:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cff4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cff6:	f7ff fdcd 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cffa:	4620      	mov	r0, r4
 800cffc:	f7ff fc8a 	bl	800c914 <SDMMC_GetCmdResp2>
}
 800d000:	b006      	add	sp, #24
 800d002:	bd10      	pop	{r4, pc}

0800d004 <SDMMC_CmdSetRelAdd>:
{
 800d004:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800d006:	2300      	movs	r3, #0
{
 800d008:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d00a:	2203      	movs	r2, #3
{
 800d00c:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 800d00e:	9301      	str	r3, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d010:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d012:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d014:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d018:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d01a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d01e:	9203      	str	r2, [sp, #12]
{
 800d020:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d022:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d024:	f7ff fdb6 	bl	800cb94 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d028:	4b1d      	ldr	r3, [pc, #116]	; (800d0a0 <SDMMC_CmdSetRelAdd+0x9c>)
 800d02a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	fbb3 f2f2 	udiv	r2, r3, r2
 800d034:	f241 3388 	movw	r3, #5000	; 0x1388
 800d038:	4353      	muls	r3, r2
    if (count-- == 0U)
 800d03a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d03e:	d326      	bcc.n	800d08e <SDMMC_CmdSetRelAdd+0x8a>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800d040:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d042:	f012 0f45 	tst.w	r2, #69	; 0x45
 800d046:	d0f8      	beq.n	800d03a <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d04a:	0758      	lsls	r0, r3, #29
 800d04c:	d503      	bpl.n	800d056 <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d04e:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d050:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800d052:	b007      	add	sp, #28
 800d054:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d058:	07d9      	lsls	r1, r3, #31
 800d05a:	d501      	bpl.n	800d060 <SDMMC_CmdSetRelAdd+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d05c:	2001      	movs	r0, #1
 800d05e:	e7f7      	b.n	800d050 <SDMMC_CmdSetRelAdd+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800d060:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b03      	cmp	r3, #3
 800d066:	d115      	bne.n	800d094 <SDMMC_CmdSetRelAdd+0x90>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d068:	4b0e      	ldr	r3, [pc, #56]	; (800d0a4 <SDMMC_CmdSetRelAdd+0xa0>)
 800d06a:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800d06c:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d06e:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800d072:	d102      	bne.n	800d07a <SDMMC_CmdSetRelAdd+0x76>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d074:	0c1b      	lsrs	r3, r3, #16
 800d076:	802b      	strh	r3, [r5, #0]
 800d078:	e7eb      	b.n	800d052 <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d07a:	045a      	lsls	r2, r3, #17
 800d07c:	d40c      	bmi.n	800d098 <SDMMC_CmdSetRelAdd+0x94>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d07e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800d082:	bf14      	ite	ne
 800d084:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800d088:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d08c:	e7e1      	b.n	800d052 <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 800d08e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d092:	e7de      	b.n	800d052 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d094:	2001      	movs	r0, #1
 800d096:	e7dc      	b.n	800d052 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d098:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d09c:	e7d9      	b.n	800d052 <SDMMC_CmdSetRelAdd+0x4e>
 800d09e:	bf00      	nop
 800d0a0:	24000018 	.word	0x24000018
 800d0a4:	002000c5 	.word	0x002000c5

0800d0a8 <SDMMC_CmdSendStatus>:
{
 800d0a8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0aa:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d0ae:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d0b0:	240d      	movs	r4, #13
{
 800d0b2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0b4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0b6:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 800d0b8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0bc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d0c2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0c4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0c6:	f7ff fd65 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d0ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	f7ff fc69 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800d0d6:	b007      	add	sp, #28
 800d0d8:	bd30      	pop	{r4, r5, pc}

0800d0da <SDMMC_CmdStatusRegister>:
{
 800d0da:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800d0dc:	2300      	movs	r3, #0
{
 800d0de:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d0e0:	240d      	movs	r4, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0e2:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.Argument         = 0;
 800d0e6:	9301      	str	r3, [sp, #4]
{
 800d0e8:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0f0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0f2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0f4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d0f6:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0f8:	f7ff fd4c 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d100:	4621      	mov	r1, r4
 800d102:	4628      	mov	r0, r5
 800d104:	f7ff fc50 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800d108:	b007      	add	sp, #28
 800d10a:	bd30      	pop	{r4, r5, pc}

0800d10c <SDMMC_CmdSwitch>:
{
 800d10c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d10e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d112:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800d114:	2406      	movs	r4, #6
{
 800d116:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d118:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d11a:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN;*/
 800d11c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d11e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d120:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800d126:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d128:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d12a:	f7ff fd33 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800d12e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d132:	4621      	mov	r1, r4
 800d134:	4628      	mov	r0, r5
 800d136:	f7ff fc37 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800d13a:	b007      	add	sp, #28
 800d13c:	bd30      	pop	{r4, r5, pc}

0800d13e <SDMMC_CmdBusWidth>:
 800d13e:	f7ff bfe5 	b.w	800d10c <SDMMC_CmdSwitch>

0800d142 <SDMMC_CmdVoltageSwitch>:
{
 800d142:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0x00000000;
 800d144:	2300      	movs	r3, #0
{
 800d146:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d148:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d14a:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.Argument         = 0x00000000;
 800d14e:	9301      	str	r3, [sp, #4]
{
 800d150:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d152:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d158:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d15a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d15c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d15e:	9402      	str	r4, [sp, #8]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d160:	f7ff fd18 	bl	800cb94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d164:	f241 3288 	movw	r2, #5000	; 0x1388
 800d168:	4621      	mov	r1, r4
 800d16a:	4628      	mov	r0, r5
 800d16c:	f7ff fc1c 	bl	800c9a8 <SDMMC_GetCmdResp1>
}
 800d170:	b007      	add	sp, #28
 800d172:	bd30      	pop	{r4, r5, pc}

0800d174 <USB_EnableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d174:	6883      	ldr	r3, [r0, #8]
 800d176:	f043 0301 	orr.w	r3, r3, #1
 800d17a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800d17c:	2000      	movs	r0, #0
 800d17e:	4770      	bx	lr

0800d180 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d180:	6883      	ldr	r3, [r0, #8]
 800d182:	f023 0301 	bic.w	r3, r3, #1
 800d186:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800d188:	2000      	movs	r0, #0
 800d18a:	4770      	bx	lr

0800d18c <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800d18c:	0189      	lsls	r1, r1, #6
 800d18e:	4a07      	ldr	r2, [pc, #28]	; (800d1ac <USB_FlushTxFifo+0x20>)
 800d190:	f041 0120 	orr.w	r1, r1, #32
 800d194:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 800d196:	3a01      	subs	r2, #1
 800d198:	d005      	beq.n	800d1a6 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d19a:	6903      	ldr	r3, [r0, #16]
 800d19c:	f013 0320 	ands.w	r3, r3, #32
 800d1a0:	d1f9      	bne.n	800d196 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d1a6:	2003      	movs	r0, #3
}
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	00030d41 	.word	0x00030d41

0800d1b0 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d1b0:	2310      	movs	r3, #16
 800d1b2:	4a06      	ldr	r2, [pc, #24]	; (800d1cc <USB_FlushRxFifo+0x1c>)
 800d1b4:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800d1b6:	3a01      	subs	r2, #1
 800d1b8:	d005      	beq.n	800d1c6 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d1ba:	6903      	ldr	r3, [r0, #16]
 800d1bc:	f013 0310 	ands.w	r3, r3, #16
 800d1c0:	d1f9      	bne.n	800d1b6 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d1c6:	2003      	movs	r0, #3
}
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	00030d41 	.word	0x00030d41

0800d1d0 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 800d1d0:	3203      	adds	r2, #3
  
  for ( i = 0; i < count32b; i++)
 800d1d2:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800d1d4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = (len + 3) / 4;
 800d1d8:	1092      	asrs	r2, r2, #2
{
 800d1da:	b510      	push	{r4, lr}
  for ( i = 0; i < count32b; i++)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d102      	bne.n	800d1e6 <USB_ReadPacket+0x16>
	dest += 4;
    
  }
  return ((void *)dest);
}
 800d1e0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d1e4:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800d1e6:	6804      	ldr	r4, [r0, #0]
 800d1e8:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( i = 0; i < count32b; i++)
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	e7f5      	b.n	800d1dc <USB_ReadPacket+0xc>

0800d1f0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0;
  
  v = USBx->GINTSTS;
 800d1f0:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 800d1f2:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 800d1f4:	4010      	ands	r0, r2
 800d1f6:	4770      	bx	lr

0800d1f8 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 800d1f8:	6940      	ldr	r0, [r0, #20]
}
 800d1fa:	f000 0001 	and.w	r0, r0, #1
 800d1fe:	4770      	bx	lr

0800d200 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d200:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
  
  if (freq ==  HCFG_48_MHZ)
 800d204:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d206:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800d20a:	f023 0303 	bic.w	r3, r3, #3
{
 800d20e:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d210:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800d214:	f001 0303 	and.w	r3, r1, #3
 800d218:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 800d21c:	ea43 0304 	orr.w	r3, r3, r4
 800d220:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 800d224:	d104      	bne.n	800d230 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = (uint32_t)48000;
 800d226:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d22a:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = (uint32_t)6000;
  } 
  return HAL_OK;  
}
 800d22c:	2000      	movs	r0, #0
 800d22e:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 800d230:	2902      	cmp	r1, #2
 800d232:	d1fb      	bne.n	800d22c <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = (uint32_t)6000;
 800d234:	f241 7370 	movw	r3, #6000	; 0x1770
 800d238:	6053      	str	r3, [r2, #4]
 800d23a:	e7f7      	b.n	800d22c <USB_InitFSLSPClkSel+0x2c>

0800d23c <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d23c:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 800d23e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800d242:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800d244:	9b01      	ldr	r3, [sp, #4]
 800d246:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d24a:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
 800d24c:	9b01      	ldr	r3, [sp, #4]
 800d24e:	04da      	lsls	r2, r3, #19
 800d250:	d406      	bmi.n	800d260 <USB_DriveVbus+0x24>
 800d252:	2901      	cmp	r1, #1
 800d254:	d104      	bne.n	800d260 <USB_DriveVbus+0x24>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 800d256:	9b01      	ldr	r3, [sp, #4]
 800d258:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d25c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
 800d260:	9b01      	ldr	r3, [sp, #4]
 800d262:	04db      	lsls	r3, r3, #19
 800d264:	d505      	bpl.n	800d272 <USB_DriveVbus+0x36>
 800d266:	b921      	cbnz	r1, 800d272 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 800d268:	9b01      	ldr	r3, [sp, #4]
 800d26a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d26e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 800d272:	2000      	movs	r0, #0
 800d274:	b002      	add	sp, #8
 800d276:	4770      	bx	lr

0800d278 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFF);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	b29b      	uxth	r3, r3
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 800d296:	b480      	push	{r7}
 800d298:	b085      	sub	sp, #20
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	460b      	mov	r3, r1
 800d2a0:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((USBx_HC(hc_num)->HCCHAR) & (HCCHAR_CTRL << 18)) || ((USBx_HC(hc_num)->HCCHAR) & (HCCHAR_BULK << 18)))
 800d2a6:	78fb      	ldrb	r3, [r7, #3]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	78fb      	ldrb	r3, [r7, #3]
 800d2b6:	015a      	lsls	r2, r3, #5
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d070      	beq.n	800d3ac <USB_HC_Halt+0x116>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d2ca:	78fb      	ldrb	r3, [r7, #3]
 800d2cc:	015a      	lsls	r2, r3, #5
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	78fb      	ldrb	r3, [r7, #3]
 800d2da:	015a      	lsls	r2, r3, #5
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4413      	add	r3, r2
 800d2e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2ea:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d146      	bne.n	800d384 <USB_HC_Halt+0xee>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d2f6:	78fb      	ldrb	r3, [r7, #3]
 800d2f8:	015a      	lsls	r2, r3, #5
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d302:	4619      	mov	r1, r3
 800d304:	78fb      	ldrb	r3, [r7, #3]
 800d306:	015a      	lsls	r2, r3, #5
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4413      	add	r3, r2
 800d30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d316:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800d318:	78fb      	ldrb	r3, [r7, #3]
 800d31a:	015a      	lsls	r2, r3, #5
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4413      	add	r3, r2
 800d320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d324:	4619      	mov	r1, r3
 800d326:	78fb      	ldrb	r3, [r7, #3]
 800d328:	015a      	lsls	r2, r3, #5
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d338:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d33a:	78fb      	ldrb	r3, [r7, #3]
 800d33c:	015a      	lsls	r2, r3, #5
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4413      	add	r3, r2
 800d342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d346:	4619      	mov	r1, r3
 800d348:	78fb      	ldrb	r3, [r7, #3]
 800d34a:	015a      	lsls	r2, r3, #5
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4413      	add	r3, r2
 800d350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d35a:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000) 
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3301      	adds	r3, #1
 800d360:	60fb      	str	r3, [r7, #12]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d368:	d81e      	bhi.n	800d3a8 <USB_HC_Halt+0x112>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800d36a:	78fb      	ldrb	r3, [r7, #3]
 800d36c:	015a      	lsls	r2, r3, #5
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4413      	add	r3, r2
 800d372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d37c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d380:	d0ec      	beq.n	800d35c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800d382:	e085      	b.n	800d490 <USB_HC_Halt+0x1fa>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800d384:	78fb      	ldrb	r3, [r7, #3]
 800d386:	015a      	lsls	r2, r3, #5
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4413      	add	r3, r2
 800d38c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d390:	4619      	mov	r1, r3
 800d392:	78fb      	ldrb	r3, [r7, #3]
 800d394:	015a      	lsls	r2, r3, #5
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4413      	add	r3, r2
 800d39a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3a4:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800d3a6:	e073      	b.n	800d490 <USB_HC_Halt+0x1fa>
          break;
 800d3a8:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800d3aa:	e071      	b.n	800d490 <USB_HC_Halt+0x1fa>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d3ac:	78fb      	ldrb	r3, [r7, #3]
 800d3ae:	015a      	lsls	r2, r3, #5
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	78fb      	ldrb	r3, [r7, #3]
 800d3bc:	015a      	lsls	r2, r3, #5
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3cc:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d146      	bne.n	800d46a <USB_HC_Halt+0x1d4>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	015a      	lsls	r2, r3, #5
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	78fb      	ldrb	r3, [r7, #3]
 800d3ec:	015a      	lsls	r2, r3, #5
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3fc:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800d3fe:	78fb      	ldrb	r3, [r7, #3]
 800d400:	015a      	lsls	r2, r3, #5
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4413      	add	r3, r2
 800d406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d40a:	4619      	mov	r1, r3
 800d40c:	78fb      	ldrb	r3, [r7, #3]
 800d40e:	015a      	lsls	r2, r3, #5
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4413      	add	r3, r2
 800d414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d41e:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d420:	78fb      	ldrb	r3, [r7, #3]
 800d422:	015a      	lsls	r2, r3, #5
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4413      	add	r3, r2
 800d428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d42c:	4619      	mov	r1, r3
 800d42e:	78fb      	ldrb	r3, [r7, #3]
 800d430:	015a      	lsls	r2, r3, #5
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4413      	add	r3, r2
 800d436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d440:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000) 
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3301      	adds	r3, #1
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d44e:	d81e      	bhi.n	800d48e <USB_HC_Halt+0x1f8>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800d450:	78fb      	ldrb	r3, [r7, #3]
 800d452:	015a      	lsls	r2, r3, #5
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4413      	add	r3, r2
 800d458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d466:	d0ec      	beq.n	800d442 <USB_HC_Halt+0x1ac>
 800d468:	e012      	b.n	800d490 <USB_HC_Halt+0x1fa>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800d46a:	78fb      	ldrb	r3, [r7, #3]
 800d46c:	015a      	lsls	r2, r3, #5
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4413      	add	r3, r2
 800d472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d476:	4619      	mov	r1, r3
 800d478:	78fb      	ldrb	r3, [r7, #3]
 800d47a:	015a      	lsls	r2, r3, #5
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4413      	add	r3, r2
 800d480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d48a:	600b      	str	r3, [r1, #0]
 800d48c:	e000      	b.n	800d490 <USB_HC_Halt+0x1fa>
          break;
 800d48e:	bf00      	nop
    }
  }
  
  return HAL_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3714      	adds	r7, #20
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b086      	sub	sp, #24
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff fe68 	bl	800d180 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
 800d4b0:	2110      	movs	r1, #16
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff fe6a 	bl	800d18c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f7ff fe79 	bl	800d1b0 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 800d4be:	2300      	movs	r3, #0
 800d4c0:	75fb      	strb	r3, [r7, #23]
 800d4c2:	e01f      	b.n	800d504 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
 800d4c6:	015a      	lsls	r2, r3, #5
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4da:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4e2:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d4ea:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
 800d4ee:	015a      	lsls	r2, r3, #5
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
 800d500:	3301      	adds	r3, #1
 800d502:	75fb      	strb	r3, [r7, #23]
 800d504:	7dfb      	ldrb	r3, [r7, #23]
 800d506:	2b0f      	cmp	r3, #15
 800d508:	d9dc      	bls.n	800d4c4 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 800d50a:	2300      	movs	r3, #0
 800d50c:	75fb      	strb	r3, [r7, #23]
 800d50e:	e034      	b.n	800d57a <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 800d510:	7dfb      	ldrb	r3, [r7, #23]
 800d512:	015a      	lsls	r2, r3, #5
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	4413      	add	r3, r2
 800d518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d526:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d52e:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d536:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 800d538:	7dfb      	ldrb	r3, [r7, #23]
 800d53a:	015a      	lsls	r2, r3, #5
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4413      	add	r3, r2
 800d540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d544:	461a      	mov	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000) 
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	3301      	adds	r3, #1
 800d54e:	613b      	str	r3, [r7, #16]
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d556:	d80c      	bhi.n	800d572 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d558:	7dfb      	ldrb	r3, [r7, #23]
 800d55a:	015a      	lsls	r2, r3, #5
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4413      	add	r3, r2
 800d560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d56a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d56e:	d0ec      	beq.n	800d54a <USB_StopHost+0xac>
 800d570:	e000      	b.n	800d574 <USB_StopHost+0xd6>
        break;
 800d572:	bf00      	nop
  for (i = 0; i <= 15; i++)
 800d574:	7dfb      	ldrb	r3, [r7, #23]
 800d576:	3301      	adds	r3, #1
 800d578:	75fb      	strb	r3, [r7, #23]
 800d57a:	7dfb      	ldrb	r3, [r7, #23]
 800d57c:	2b0f      	cmp	r3, #15
 800d57e:	d9c7      	bls.n	800d510 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFF;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d586:	461a      	mov	r2, r3
 800d588:	f04f 33ff 	mov.w	r3, #4294967295
 800d58c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFF;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f04f 32ff 	mov.w	r2, #4294967295
 800d594:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7ff fdec 	bl	800d174 <USB_EnableGlobalInt>
  return HAL_OK;  
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
	...

0800d5a8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800d5a8:	4b0f      	ldr	r3, [pc, #60]	; (800d5e8 <FATFS_LinkDriverEx+0x40>)
{
 800d5aa:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800d5ac:	7a5d      	ldrb	r5, [r3, #9]
 800d5ae:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800d5b2:	b9b5      	cbnz	r5, 800d5e2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d5b4:	7a5d      	ldrb	r5, [r3, #9]
 800d5b6:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800d5b8:	7a5d      	ldrb	r5, [r3, #9]
 800d5ba:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d5be:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800d5c0:	7a58      	ldrb	r0, [r3, #9]
 800d5c2:	4418      	add	r0, r3
 800d5c4:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800d5c6:	7a5a      	ldrb	r2, [r3, #9]
 800d5c8:	b2d2      	uxtb	r2, r2
 800d5ca:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800d5cc:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800d5ce:	b2c0      	uxtb	r0, r0
 800d5d0:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800d5d2:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800d5d4:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 800d5d6:	4620      	mov	r0, r4
    path[1] = ':';
 800d5d8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800d5da:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800d5dc:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800d5de:	708b      	strb	r3, [r1, #2]
 800d5e0:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800d5e2:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 800d5e4:	bd30      	pop	{r4, r5, pc}
 800d5e6:	bf00      	nop
 800d5e8:	240000d0 	.word	0x240000d0

0800d5ec <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f7ff bfdb 	b.w	800d5a8 <FATFS_LinkDriverEx>

0800d5f2 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800d5f2:	ba40      	rev16	r0, r0
}
 800d5f4:	b280      	uxth	r0, r0
 800d5f6:	4770      	bx	lr

0800d5f8 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 800d5f8:	ba00      	rev	r0, r0
 800d5fa:	4770      	bx	lr

0800d5fc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d5fc:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d5fe:	2618      	movs	r6, #24
 800d600:	4c07      	ldr	r4, [pc, #28]	; (800d620 <etharp_free_entry+0x24>)
{
 800d602:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800d604:	4346      	muls	r6, r0
 800d606:	59a0      	ldr	r0, [r4, r6]
 800d608:	b118      	cbz	r0, 800d612 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d60a:	f001 fddb 	bl	800f1c4 <pbuf_free>
    arp_table[i].q = NULL;
 800d60e:	2300      	movs	r3, #0
 800d610:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d612:	2318      	movs	r3, #24
 800d614:	fb03 4405 	mla	r4, r3, r5, r4
 800d618:	2300      	movs	r3, #0
 800d61a:	7523      	strb	r3, [r4, #20]
 800d61c:	bd70      	pop	{r4, r5, r6, pc}
 800d61e:	bf00      	nop
 800d620:	240000dc 	.word	0x240000dc

0800d624 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d624:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d628:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d62a:	4689      	mov	r9, r1
 800d62c:	4692      	mov	sl, r2
 800d62e:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d630:	4607      	mov	r7, r0
 800d632:	b930      	cbnz	r0, 800d642 <etharp_raw+0x1e>
 800d634:	4b2c      	ldr	r3, [pc, #176]	; (800d6e8 <etharp_raw+0xc4>)
 800d636:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800d63a:	492c      	ldr	r1, [pc, #176]	; (800d6ec <etharp_raw+0xc8>)
 800d63c:	482c      	ldr	r0, [pc, #176]	; (800d6f0 <etharp_raw+0xcc>)
 800d63e:	f005 f809 	bl	8012654 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d642:	2200      	movs	r2, #0
 800d644:	211c      	movs	r1, #28
 800d646:	2002      	movs	r0, #2
 800d648:	f001 fe1e 	bl	800f288 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d64c:	4606      	mov	r6, r0
 800d64e:	2800      	cmp	r0, #0
 800d650:	d047      	beq.n	800d6e2 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d652:	8943      	ldrh	r3, [r0, #10]
 800d654:	2b1b      	cmp	r3, #27
 800d656:	d806      	bhi.n	800d666 <etharp_raw+0x42>
 800d658:	4b23      	ldr	r3, [pc, #140]	; (800d6e8 <etharp_raw+0xc4>)
 800d65a:	f240 4264 	movw	r2, #1124	; 0x464
 800d65e:	4925      	ldr	r1, [pc, #148]	; (800d6f4 <etharp_raw+0xd0>)
 800d660:	4823      	ldr	r0, [pc, #140]	; (800d6f0 <etharp_raw+0xcc>)
 800d662:	f004 fff7 	bl	8012654 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d666:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d668:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800d66c:	f7ff ffc1 	bl	800d5f2 <lwip_htons>
 800d670:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d672:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d676:	2b06      	cmp	r3, #6
 800d678:	d006      	beq.n	800d688 <etharp_raw+0x64>
 800d67a:	4b1b      	ldr	r3, [pc, #108]	; (800d6e8 <etharp_raw+0xc4>)
 800d67c:	f240 426b 	movw	r2, #1131	; 0x46b
 800d680:	491d      	ldr	r1, [pc, #116]	; (800d6f8 <etharp_raw+0xd4>)
 800d682:	481b      	ldr	r0, [pc, #108]	; (800d6f0 <etharp_raw+0xcc>)
 800d684:	f004 ffe6 	bl	8012654 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800d688:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d68c:	464a      	mov	r2, r9
 800d68e:	4631      	mov	r1, r6
 800d690:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800d692:	60a3      	str	r3, [r4, #8]
 800d694:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800d698:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800d69a:	682b      	ldr	r3, [r5, #0]
 800d69c:	f8c4 3012 	str.w	r3, [r4, #18]
 800d6a0:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800d6a2:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800d6a4:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800d6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800d6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6b0:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800d6b2:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800d6b4:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800d6b6:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d6b8:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800d6ba:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d6bc:	2308      	movs	r3, #8
 800d6be:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800d6c0:	2306      	movs	r3, #6
 800d6c2:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d6c4:	2304      	movs	r3, #4
 800d6c6:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d6c8:	f640 0306 	movw	r3, #2054	; 0x806
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	4653      	mov	r3, sl
 800d6d0:	f000 fb74 	bl	800ddbc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f001 fd75 	bl	800f1c4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800d6da:	4628      	mov	r0, r5
}
 800d6dc:	b002      	add	sp, #8
 800d6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 800d6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e6:	e7f9      	b.n	800d6dc <etharp_raw+0xb8>
 800d6e8:	08013c62 	.word	0x08013c62
 800d6ec:	0801341c 	.word	0x0801341c
 800d6f0:	0801342a 	.word	0x0801342a
 800d6f4:	08013c9f 	.word	0x08013c9f
 800d6f8:	08013cd0 	.word	0x08013cd0

0800d6fc <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800d6fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	4b3e      	ldr	r3, [pc, #248]	; (800d7fc <etharp_find_entry.isra.0+0x100>)
  s8_t old_queue = ARP_TABLE_SIZE;
 800d702:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800d704:	4605      	mov	r5, r0
 800d706:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d708:	4694      	mov	ip, r2
 800d70a:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d70c:	4681      	mov	r9, r0
 800d70e:	4680      	mov	r8, r0
 800d710:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 800d712:	4696      	mov	lr, r2
 800d714:	461e      	mov	r6, r3
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800d716:	9101      	str	r1, [sp, #4]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d718:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 800d71c:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d71e:	d111      	bne.n	800d744 <etharp_find_entry.isra.0+0x48>
 800d720:	b997      	cbnz	r7, 800d748 <etharp_find_entry.isra.0+0x4c>
      empty = i;
 800d722:	fa4f fe80 	sxtb.w	lr, r0
 800d726:	3001      	adds	r0, #1
 800d728:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d72a:	280a      	cmp	r0, #10
 800d72c:	d1f4      	bne.n	800d718 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d72e:	9b01      	ldr	r3, [sp, #4]
 800d730:	0799      	lsls	r1, r3, #30
 800d732:	d404      	bmi.n	800d73e <etharp_find_entry.isra.0+0x42>
 800d734:	f1be 0f0a 	cmp.w	lr, #10
 800d738:	d11c      	bne.n	800d774 <etharp_find_entry.isra.0+0x78>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d73a:	07db      	lsls	r3, r3, #31
 800d73c:	d435      	bmi.n	800d7aa <etharp_find_entry.isra.0+0xae>
    return (s8_t)ERR_MEM;
 800d73e:	f04f 30ff 	mov.w	r0, #4294967295
 800d742:	e009      	b.n	800d758 <etharp_find_entry.isra.0+0x5c>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d744:	2f00      	cmp	r7, #0
 800d746:	d0ee      	beq.n	800d726 <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d748:	2d00      	cmp	r5, #0
 800d74a:	d04a      	beq.n	800d7e2 <etharp_find_entry.isra.0+0xe6>
 800d74c:	6829      	ldr	r1, [r5, #0]
 800d74e:	468a      	mov	sl, r1
 800d750:	6859      	ldr	r1, [r3, #4]
 800d752:	458a      	cmp	sl, r1
 800d754:	d145      	bne.n	800d7e2 <etharp_find_entry.isra.0+0xe6>
        return i;
 800d756:	b240      	sxtb	r0, r0
}
 800d758:	b003      	add	sp, #12
 800d75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 800d75e:	45c2      	cmp	sl, r8
 800d760:	d3e1      	bcc.n	800d726 <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 800d762:	fa4f fc80 	sxtb.w	ip, r0
 800d766:	46d0      	mov	r8, sl
 800d768:	e7dd      	b.n	800d726 <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 800d76a:	45ca      	cmp	sl, r9
            old_stable = i;
 800d76c:	bf24      	itt	cs
 800d76e:	b244      	sxtbcs	r4, r0
 800d770:	46d1      	movcs	r9, sl
 800d772:	e7d8      	b.n	800d726 <etharp_find_entry.isra.0+0x2a>
    i = empty;
 800d774:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d778:	2318      	movs	r3, #24
 800d77a:	fb03 6307 	mla	r3, r3, r7, r6
 800d77e:	7d1b      	ldrb	r3, [r3, #20]
 800d780:	b133      	cbz	r3, 800d790 <etharp_find_entry.isra.0+0x94>
 800d782:	4b1f      	ldr	r3, [pc, #124]	; (800d800 <etharp_find_entry.isra.0+0x104>)
 800d784:	f240 1287 	movw	r2, #391	; 0x187
 800d788:	491e      	ldr	r1, [pc, #120]	; (800d804 <etharp_find_entry.isra.0+0x108>)
 800d78a:	481f      	ldr	r0, [pc, #124]	; (800d808 <etharp_find_entry.isra.0+0x10c>)
 800d78c:	f004 ff62 	bl	8012654 <iprintf>
  if (ipaddr != NULL) {
 800d790:	b125      	cbz	r5, 800d79c <etharp_find_entry.isra.0+0xa0>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d792:	2318      	movs	r3, #24
 800d794:	682a      	ldr	r2, [r5, #0]
 800d796:	fb03 6307 	mla	r3, r3, r7, r6
 800d79a:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 800d79c:	2318      	movs	r3, #24
  return (err_t)i;
 800d79e:	b278      	sxtb	r0, r7
  arp_table[i].ctime = 0;
 800d7a0:	fb03 6607 	mla	r6, r3, r7, r6
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	8273      	strh	r3, [r6, #18]
 800d7a8:	e7d6      	b.n	800d758 <etharp_find_entry.isra.0+0x5c>
    if (old_stable < ARP_TABLE_SIZE) {
 800d7aa:	2c0a      	cmp	r4, #10
 800d7ac:	d00f      	beq.n	800d7ce <etharp_find_entry.isra.0+0xd2>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d7ae:	2318      	movs	r3, #24
      i = old_stable;
 800d7b0:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d7b2:	435c      	muls	r4, r3
 800d7b4:	5933      	ldr	r3, [r6, r4]
 800d7b6:	b133      	cbz	r3, 800d7c6 <etharp_find_entry.isra.0+0xca>
 800d7b8:	4b11      	ldr	r3, [pc, #68]	; (800d800 <etharp_find_entry.isra.0+0x104>)
 800d7ba:	f240 126f 	movw	r2, #367	; 0x16f
 800d7be:	4913      	ldr	r1, [pc, #76]	; (800d80c <etharp_find_entry.isra.0+0x110>)
 800d7c0:	4811      	ldr	r0, [pc, #68]	; (800d808 <etharp_find_entry.isra.0+0x10c>)
 800d7c2:	f004 ff47 	bl	8012654 <iprintf>
    etharp_free_entry(i);
 800d7c6:	4638      	mov	r0, r7
 800d7c8:	f7ff ff18 	bl	800d5fc <etharp_free_entry>
 800d7cc:	e7d4      	b.n	800d778 <etharp_find_entry.isra.0+0x7c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d7ce:	f1bc 0f0a 	cmp.w	ip, #10
 800d7d2:	d002      	beq.n	800d7da <etharp_find_entry.isra.0+0xde>
      i = old_pending;
 800d7d4:	fa5f f78c 	uxtb.w	r7, ip
 800d7d8:	e7f5      	b.n	800d7c6 <etharp_find_entry.isra.0+0xca>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d7da:	2a0a      	cmp	r2, #10
 800d7dc:	d0af      	beq.n	800d73e <etharp_find_entry.isra.0+0x42>
      i = old_queue;
 800d7de:	b2d7      	uxtb	r7, r2
 800d7e0:	e7f1      	b.n	800d7c6 <etharp_find_entry.isra.0+0xca>
      if (state == ETHARP_STATE_PENDING) {
 800d7e2:	2f01      	cmp	r7, #1
 800d7e4:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 800d7e8:	d1bf      	bne.n	800d76a <etharp_find_entry.isra.0+0x6e>
        if (arp_table[i].q != NULL) {
 800d7ea:	681f      	ldr	r7, [r3, #0]
 800d7ec:	2f00      	cmp	r7, #0
 800d7ee:	d0b6      	beq.n	800d75e <etharp_find_entry.isra.0+0x62>
          if (arp_table[i].ctime >= age_queue) {
 800d7f0:	45da      	cmp	sl, fp
 800d7f2:	d398      	bcc.n	800d726 <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 800d7f4:	b242      	sxtb	r2, r0
 800d7f6:	46d3      	mov	fp, sl
 800d7f8:	e795      	b.n	800d726 <etharp_find_entry.isra.0+0x2a>
 800d7fa:	bf00      	nop
 800d7fc:	240000dc 	.word	0x240000dc
 800d800:	08013c62 	.word	0x08013c62
 800d804:	08013b84 	.word	0x08013b84
 800d808:	0801342a 	.word	0x0801342a
 800d80c:	08013b6d 	.word	0x08013b6d

0800d810 <etharp_cleanup_netif>:
{
 800d810:	b570      	push	{r4, r5, r6, lr}
 800d812:	4606      	mov	r6, r0
 800d814:	4d07      	ldr	r5, [pc, #28]	; (800d834 <etharp_cleanup_netif+0x24>)
 800d816:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d818:	7d2b      	ldrb	r3, [r5, #20]
 800d81a:	b12b      	cbz	r3, 800d828 <etharp_cleanup_netif+0x18>
 800d81c:	68ab      	ldr	r3, [r5, #8]
 800d81e:	42b3      	cmp	r3, r6
 800d820:	d102      	bne.n	800d828 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 800d822:	4620      	mov	r0, r4
 800d824:	f7ff feea 	bl	800d5fc <etharp_free_entry>
 800d828:	3401      	adds	r4, #1
 800d82a:	3518      	adds	r5, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d82c:	2c0a      	cmp	r4, #10
 800d82e:	d1f3      	bne.n	800d818 <etharp_cleanup_netif+0x8>
}
 800d830:	bd70      	pop	{r4, r5, r6, pc}
 800d832:	bf00      	nop
 800d834:	240000dc 	.word	0x240000dc

0800d838 <etharp_input>:
{
 800d838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d83c:	4680      	mov	r8, r0
 800d83e:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d840:	460c      	mov	r4, r1
 800d842:	b949      	cbnz	r1, 800d858 <etharp_input+0x20>
 800d844:	4b46      	ldr	r3, [pc, #280]	; (800d960 <etharp_input+0x128>)
 800d846:	f44f 7222 	mov.w	r2, #648	; 0x288
 800d84a:	4946      	ldr	r1, [pc, #280]	; (800d964 <etharp_input+0x12c>)
 800d84c:	4846      	ldr	r0, [pc, #280]	; (800d968 <etharp_input+0x130>)
 800d84e:	f004 ff01 	bl	8012654 <iprintf>
}
 800d852:	b006      	add	sp, #24
 800d854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 800d858:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d85a:	882b      	ldrh	r3, [r5, #0]
 800d85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d860:	d108      	bne.n	800d874 <etharp_input+0x3c>
 800d862:	792b      	ldrb	r3, [r5, #4]
 800d864:	2b06      	cmp	r3, #6
 800d866:	d105      	bne.n	800d874 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d868:	796b      	ldrb	r3, [r5, #5]
 800d86a:	2b04      	cmp	r3, #4
 800d86c:	d102      	bne.n	800d874 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d86e:	886b      	ldrh	r3, [r5, #2]
 800d870:	2b08      	cmp	r3, #8
 800d872:	d003      	beq.n	800d87c <etharp_input+0x44>
  pbuf_free(p);
 800d874:	4640      	mov	r0, r8
 800d876:	f001 fca5 	bl	800f1c4 <pbuf_free>
 800d87a:	e7ea      	b.n	800d852 <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800d87c:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d880:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800d882:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800d884:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d886:	b116      	cbz	r6, 800d88e <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d888:	1b9b      	subs	r3, r3, r6
 800d88a:	425e      	negs	r6, r3
 800d88c:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d88e:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d890:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d894:	f105 0708 	add.w	r7, r5, #8
 800d898:	bf14      	ite	ne
 800d89a:	f04f 0901 	movne.w	r9, #1
 800d89e:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d8a2:	2b06      	cmp	r3, #6
 800d8a4:	d006      	beq.n	800d8b4 <etharp_input+0x7c>
 800d8a6:	4b2e      	ldr	r3, [pc, #184]	; (800d960 <etharp_input+0x128>)
 800d8a8:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d8ac:	492f      	ldr	r1, [pc, #188]	; (800d96c <etharp_input+0x134>)
 800d8ae:	482e      	ldr	r0, [pc, #184]	; (800d968 <etharp_input+0x130>)
 800d8b0:	f004 fed0 	bl	8012654 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800d8b4:	9805      	ldr	r0, [sp, #20]
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d03c      	beq.n	800d934 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	f000 fd29 	bl	800e312 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800d8c0:	4682      	mov	sl, r0
 800d8c2:	bbb8      	cbnz	r0, 800d934 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 800d8c4:	9b05      	ldr	r3, [sp, #20]
 800d8c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d8ca:	2be0      	cmp	r3, #224	; 0xe0
 800d8cc:	d032      	beq.n	800d934 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 800d8ce:	4649      	mov	r1, r9
 800d8d0:	a805      	add	r0, sp, #20
 800d8d2:	f7ff ff13 	bl	800d6fc <etharp_find_entry.isra.0>
  if (i < 0) {
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	db2c      	blt.n	800d934 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d8da:	2218      	movs	r2, #24
 800d8dc:	4b24      	ldr	r3, [pc, #144]	; (800d970 <etharp_input+0x138>)
 800d8de:	f04f 0c02 	mov.w	ip, #2
 800d8e2:	fb02 f100 	mul.w	r1, r2, r0
 800d8e6:	eb03 0e01 	add.w	lr, r3, r1
 800d8ea:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800d8ee:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 800d8f2:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800d8f6:	fb12 c200 	smlabb	r2, r2, r0, ip
 800d8fa:	6838      	ldr	r0, [r7, #0]
 800d8fc:	eb03 0c02 	add.w	ip, r3, r2
 800d900:	5098      	str	r0, [r3, r2]
 800d902:	88ba      	ldrh	r2, [r7, #4]
 800d904:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 800d908:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 800d90c:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 800d910:	f1b9 0f00 	cmp.w	r9, #0
 800d914:	d00e      	beq.n	800d934 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 800d916:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d91a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d91e:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800d922:	4649      	mov	r1, r9
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	4620      	mov	r0, r4
 800d928:	463b      	mov	r3, r7
 800d92a:	f000 fa47 	bl	800ddbc <ethernet_output>
    pbuf_free(p);
 800d92e:	4648      	mov	r0, r9
 800d930:	f001 fc48 	bl	800f1c4 <pbuf_free>
  switch (hdr->opcode) {
 800d934:	88eb      	ldrh	r3, [r5, #6]
 800d936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d93a:	d19b      	bne.n	800d874 <etharp_input+0x3c>
    if (for_us) {
 800d93c:	2e00      	cmp	r6, #0
 800d93e:	d099      	beq.n	800d874 <etharp_input+0x3c>
      etharp_raw(netif,
 800d940:	2202      	movs	r2, #2
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d942:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 800d946:	9701      	str	r7, [sp, #4]
 800d948:	4620      	mov	r0, r4
 800d94a:	9203      	str	r2, [sp, #12]
 800d94c:	aa05      	add	r2, sp, #20
 800d94e:	4619      	mov	r1, r3
 800d950:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d952:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 800d954:	9200      	str	r2, [sp, #0]
 800d956:	463a      	mov	r2, r7
 800d958:	f7ff fe64 	bl	800d624 <etharp_raw>
 800d95c:	e78a      	b.n	800d874 <etharp_input+0x3c>
 800d95e:	bf00      	nop
 800d960:	08013c62 	.word	0x08013c62
 800d964:	0801341c 	.word	0x0801341c
 800d968:	0801342a 	.word	0x0801342a
 800d96c:	08013bcc 	.word	0x08013bcc
 800d970:	240000dc 	.word	0x240000dc

0800d974 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d976:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d978:	f100 0329 	add.w	r3, r0, #41	; 0x29
 800d97c:	9102      	str	r1, [sp, #8]
 800d97e:	2401      	movs	r4, #1
 800d980:	4905      	ldr	r1, [pc, #20]	; (800d998 <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d982:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d984:	9403      	str	r4, [sp, #12]
 800d986:	9101      	str	r1, [sp, #4]
 800d988:	4619      	mov	r1, r3
 800d98a:	9200      	str	r2, [sp, #0]
 800d98c:	4a03      	ldr	r2, [pc, #12]	; (800d99c <etharp_request+0x28>)
 800d98e:	f7ff fe49 	bl	800d624 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800d992:	b004      	add	sp, #16
 800d994:	bd10      	pop	{r4, pc}
 800d996:	bf00      	nop
 800d998:	08013d83 	.word	0x08013d83
 800d99c:	08013d11 	.word	0x08013d11

0800d9a0 <etharp_tmr>:
{
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	4c13      	ldr	r4, [pc, #76]	; (800d9f0 <etharp_tmr+0x50>)
 800d9a4:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d9a6:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d9a8:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800d9aa:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800d9ac:	b16a      	cbz	r2, 800d9ca <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800d9ae:	89e3      	ldrh	r3, [r4, #14]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d9b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800d9b8:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d9ba:	d203      	bcs.n	800d9c4 <etharp_tmr+0x24>
 800d9bc:	2a01      	cmp	r2, #1
 800d9be:	d109      	bne.n	800d9d4 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d9c0:	2b04      	cmp	r3, #4
 800d9c2:	d90b      	bls.n	800d9dc <etharp_tmr+0x3c>
        etharp_free_entry(i);
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	f7ff fe19 	bl	800d5fc <etharp_free_entry>
 800d9ca:	3501      	adds	r5, #1
 800d9cc:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9ce:	2d0a      	cmp	r5, #10
 800d9d0:	d1eb      	bne.n	800d9aa <etharp_tmr+0xa>
 800d9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d9d4:	2a03      	cmp	r2, #3
 800d9d6:	d106      	bne.n	800d9e6 <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d9d8:	7427      	strb	r7, [r4, #16]
 800d9da:	e7f6      	b.n	800d9ca <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d9dc:	4621      	mov	r1, r4
 800d9de:	6860      	ldr	r0, [r4, #4]
 800d9e0:	f7ff ffc8 	bl	800d974 <etharp_request>
 800d9e4:	e7f1      	b.n	800d9ca <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d9e6:	2a04      	cmp	r2, #4
 800d9e8:	d1ef      	bne.n	800d9ca <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d9ea:	7426      	strb	r6, [r4, #16]
 800d9ec:	e7ed      	b.n	800d9ca <etharp_tmr+0x2a>
 800d9ee:	bf00      	nop
 800d9f0:	240000e0 	.word	0x240000e0

0800d9f4 <etharp_output_to_arp_index>:
{
 800d9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9f8:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d9fa:	4d27      	ldr	r5, [pc, #156]	; (800da98 <etharp_output_to_arp_index+0xa4>)
 800d9fc:	2218      	movs	r2, #24
{
 800d9fe:	b085      	sub	sp, #20
 800da00:	4606      	mov	r6, r0
 800da02:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800da04:	fb02 5204 	mla	r2, r2, r4, r5
 800da08:	7d12      	ldrb	r2, [r2, #20]
 800da0a:	2a01      	cmp	r2, #1
 800da0c:	d806      	bhi.n	800da1c <etharp_output_to_arp_index+0x28>
 800da0e:	4b23      	ldr	r3, [pc, #140]	; (800da9c <etharp_output_to_arp_index+0xa8>)
 800da10:	f240 22ed 	movw	r2, #749	; 0x2ed
 800da14:	4922      	ldr	r1, [pc, #136]	; (800daa0 <etharp_output_to_arp_index+0xac>)
 800da16:	4823      	ldr	r0, [pc, #140]	; (800daa4 <etharp_output_to_arp_index+0xb0>)
 800da18:	f004 fe1c 	bl	8012654 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800da1c:	2118      	movs	r1, #24
 800da1e:	f106 0729 	add.w	r7, r6, #41	; 0x29
 800da22:	fb01 5904 	mla	r9, r1, r4, r5
 800da26:	f899 3014 	ldrb.w	r3, [r9, #20]
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	d10d      	bne.n	800da4a <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800da2e:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800da32:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800da36:	d917      	bls.n	800da68 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800da38:	4649      	mov	r1, r9
 800da3a:	4630      	mov	r0, r6
 800da3c:	3104      	adds	r1, #4
 800da3e:	f7ff ff99 	bl	800d974 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800da42:	b910      	cbnz	r0, 800da4a <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800da44:	2303      	movs	r3, #3
 800da46:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800da4a:	2318      	movs	r3, #24
 800da4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da50:	4641      	mov	r1, r8
 800da52:	4630      	mov	r0, r6
 800da54:	fb03 5304 	mla	r3, r3, r4, r5
 800da58:	9200      	str	r2, [sp, #0]
 800da5a:	463a      	mov	r2, r7
 800da5c:	330c      	adds	r3, #12
 800da5e:	f000 f9ad 	bl	800ddbc <ethernet_output>
}
 800da62:	b005      	add	sp, #20
 800da64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800da68:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800da6c:	d3ed      	bcc.n	800da4a <etharp_output_to_arp_index+0x56>
 800da6e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800da72:	2101      	movs	r1, #1
 800da74:	4630      	mov	r0, r6
 800da76:	00db      	lsls	r3, r3, #3
 800da78:	9103      	str	r1, [sp, #12]
 800da7a:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800da7c:	f103 020c 	add.w	r2, r3, #12
 800da80:	3304      	adds	r3, #4
 800da82:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800da84:	442a      	add	r2, r5
 800da86:	9302      	str	r3, [sp, #8]
 800da88:	4b07      	ldr	r3, [pc, #28]	; (800daa8 <etharp_output_to_arp_index+0xb4>)
 800da8a:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800da8c:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	463b      	mov	r3, r7
 800da92:	f7ff fdc7 	bl	800d624 <etharp_raw>
 800da96:	e7d4      	b.n	800da42 <etharp_output_to_arp_index+0x4e>
 800da98:	240000dc 	.word	0x240000dc
 800da9c:	08013c62 	.word	0x08013c62
 800daa0:	08013bf0 	.word	0x08013bf0
 800daa4:	0801342a 	.word	0x0801342a
 800daa8:	08013d83 	.word	0x08013d83

0800daac <etharp_query>:
{
 800daac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800dab0:	4689      	mov	r9, r1
 800dab2:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dab4:	4601      	mov	r1, r0
{
 800dab6:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dab8:	f8d9 0000 	ldr.w	r0, [r9]
 800dabc:	f000 fc29 	bl	800e312 <ip4_addr_isbroadcast_u32>
 800dac0:	4604      	mov	r4, r0
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d15e      	bne.n	800db84 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 800dac6:	f8d9 3000 	ldr.w	r3, [r9]
 800daca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dace:	2ae0      	cmp	r2, #224	; 0xe0
 800dad0:	d058      	beq.n	800db84 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d056      	beq.n	800db84 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800dad6:	2101      	movs	r1, #1
 800dad8:	4648      	mov	r0, r9
 800dada:	f7ff fe0f 	bl	800d6fc <etharp_find_entry.isra.0>
  if (i < 0) {
 800dade:	1e05      	subs	r5, r0, #0
 800dae0:	db53      	blt.n	800db8a <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dae2:	4f40      	ldr	r7, [pc, #256]	; (800dbe4 <etharp_query+0x138>)
 800dae4:	2318      	movs	r3, #24
 800dae6:	fb03 7305 	mla	r3, r3, r5, r7
 800daea:	7d1a      	ldrb	r2, [r3, #20]
 800daec:	b91a      	cbnz	r2, 800daf6 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800daee:	2401      	movs	r4, #1
    arp_table[i].netif = netif;
 800daf0:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800daf4:	751c      	strb	r4, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800daf6:	2318      	movs	r3, #24
 800daf8:	fb03 7305 	mla	r3, r3, r5, r7
 800dafc:	7d1b      	ldrb	r3, [r3, #20]
 800dafe:	b933      	cbnz	r3, 800db0e <etharp_query+0x62>
 800db00:	4b39      	ldr	r3, [pc, #228]	; (800dbe8 <etharp_query+0x13c>)
 800db02:	f240 32c9 	movw	r2, #969	; 0x3c9
 800db06:	4939      	ldr	r1, [pc, #228]	; (800dbec <etharp_query+0x140>)
 800db08:	4839      	ldr	r0, [pc, #228]	; (800dbf0 <etharp_query+0x144>)
 800db0a:	f004 fda3 	bl	8012654 <iprintf>
  if (is_new_entry || (q == NULL)) {
 800db0e:	b90c      	cbnz	r4, 800db14 <etharp_query+0x68>
 800db10:	2e00      	cmp	r6, #0
 800db12:	d13c      	bne.n	800db8e <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 800db14:	4649      	mov	r1, r9
 800db16:	4640      	mov	r0, r8
 800db18:	f7ff ff2c 	bl	800d974 <etharp_request>
    if (q == NULL) {
 800db1c:	2e00      	cmp	r6, #0
 800db1e:	d138      	bne.n	800db92 <etharp_query+0xe6>
}
 800db20:	b002      	add	sp, #8
 800db22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800db26:	d1fb      	bne.n	800db20 <etharp_query+0x74>
 800db28:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800db2a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800dbe8 <etharp_query+0x13c>
 800db2e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800dbf8 <etharp_query+0x14c>
 800db32:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800dbf0 <etharp_query+0x144>
    while (p) {
 800db36:	b99c      	cbnz	r4, 800db60 <etharp_query+0xb4>
      pbuf_ref(p);
 800db38:	4630      	mov	r0, r6
 800db3a:	f001 fcfd 	bl	800f538 <pbuf_ref>
    if (p != NULL) {
 800db3e:	2e00      	cmp	r6, #0
 800db40:	d04c      	beq.n	800dbdc <etharp_query+0x130>
 800db42:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 800db44:	2318      	movs	r3, #24
 800db46:	fb03 f205 	mul.w	r2, r3, r5
 800db4a:	461c      	mov	r4, r3
 800db4c:	58b8      	ldr	r0, [r7, r2]
 800db4e:	b108      	cbz	r0, 800db54 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 800db50:	f001 fb38 	bl	800f1c4 <pbuf_free>
      arp_table[i].q = p;
 800db54:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 800db58:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800db5a:	f847 8003 	str.w	r8, [r7, r3]
 800db5e:	e7df      	b.n	800db20 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800db60:	8962      	ldrh	r2, [r4, #10]
 800db62:	8923      	ldrh	r3, [r4, #8]
 800db64:	429a      	cmp	r2, r3
 800db66:	d108      	bne.n	800db7a <etharp_query+0xce>
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	b133      	cbz	r3, 800db7a <etharp_query+0xce>
 800db6c:	4643      	mov	r3, r8
 800db6e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800db72:	4649      	mov	r1, r9
 800db74:	4650      	mov	r0, sl
 800db76:	f004 fd6d 	bl	8012654 <iprintf>
      if (p->type != PBUF_ROM) {
 800db7a:	7b23      	ldrb	r3, [r4, #12]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d11e      	bne.n	800dbbe <etharp_query+0x112>
      p = p->next;
 800db80:	6824      	ldr	r4, [r4, #0]
 800db82:	e7d8      	b.n	800db36 <etharp_query+0x8a>
    return ERR_ARG;
 800db84:	f06f 000f 	mvn.w	r0, #15
 800db88:	e7ca      	b.n	800db20 <etharp_query+0x74>
 800db8a:	4628      	mov	r0, r5
 800db8c:	e7c8      	b.n	800db20 <etharp_query+0x74>
  err_t result = ERR_MEM;
 800db8e:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800db92:	2318      	movs	r3, #24
 800db94:	fb03 7205 	mla	r2, r3, r5, r7
 800db98:	7d12      	ldrb	r2, [r2, #20]
 800db9a:	2a01      	cmp	r2, #1
 800db9c:	d9c3      	bls.n	800db26 <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 800db9e:	4a15      	ldr	r2, [pc, #84]	; (800dbf4 <etharp_query+0x148>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800dba0:	4631      	mov	r1, r6
 800dba2:	4640      	mov	r0, r8
    ETHARP_SET_HINT(netif, i);
 800dba4:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800dba6:	220c      	movs	r2, #12
 800dba8:	fb13 2305 	smlabb	r3, r3, r5, r2
 800dbac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbb0:	443b      	add	r3, r7
 800dbb2:	9200      	str	r2, [sp, #0]
 800dbb4:	f108 0229 	add.w	r2, r8, #41	; 0x29
 800dbb8:	f000 f900 	bl	800ddbc <ethernet_output>
 800dbbc:	e7b0      	b.n	800db20 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	8921      	ldrh	r1, [r4, #8]
 800dbc2:	2002      	movs	r0, #2
 800dbc4:	f001 fb60 	bl	800f288 <pbuf_alloc>
      if (p != NULL) {
 800dbc8:	4680      	mov	r8, r0
 800dbca:	b138      	cbz	r0, 800dbdc <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 800dbcc:	4631      	mov	r1, r6
 800dbce:	f001 fd01 	bl	800f5d4 <pbuf_copy>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d0b6      	beq.n	800db44 <etharp_query+0x98>
          pbuf_free(p);
 800dbd6:	4640      	mov	r0, r8
 800dbd8:	f001 faf4 	bl	800f1c4 <pbuf_free>
      result = ERR_MEM;
 800dbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe0:	e79e      	b.n	800db20 <etharp_query+0x74>
 800dbe2:	bf00      	nop
 800dbe4:	240000dc 	.word	0x240000dc
 800dbe8:	08013c62 	.word	0x08013c62
 800dbec:	08013c20 	.word	0x08013c20
 800dbf0:	0801342a 	.word	0x0801342a
 800dbf4:	240001cc 	.word	0x240001cc
 800dbf8:	08013c48 	.word	0x08013c48

0800dbfc <etharp_output>:
{
 800dbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbfe:	460e      	mov	r6, r1
 800dc00:	b085      	sub	sp, #20
 800dc02:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dc04:	4604      	mov	r4, r0
 800dc06:	b930      	cbnz	r0, 800dc16 <etharp_output+0x1a>
 800dc08:	4b3e      	ldr	r3, [pc, #248]	; (800dd04 <etharp_output+0x108>)
 800dc0a:	f240 321b 	movw	r2, #795	; 0x31b
 800dc0e:	493e      	ldr	r1, [pc, #248]	; (800dd08 <etharp_output+0x10c>)
 800dc10:	483e      	ldr	r0, [pc, #248]	; (800dd0c <etharp_output+0x110>)
 800dc12:	f004 fd1f 	bl	8012654 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dc16:	b936      	cbnz	r6, 800dc26 <etharp_output+0x2a>
 800dc18:	4b3a      	ldr	r3, [pc, #232]	; (800dd04 <etharp_output+0x108>)
 800dc1a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dc1e:	493c      	ldr	r1, [pc, #240]	; (800dd10 <etharp_output+0x114>)
 800dc20:	483a      	ldr	r0, [pc, #232]	; (800dd0c <etharp_output+0x110>)
 800dc22:	f004 fd17 	bl	8012654 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dc26:	b935      	cbnz	r5, 800dc36 <etharp_output+0x3a>
 800dc28:	4b36      	ldr	r3, [pc, #216]	; (800dd04 <etharp_output+0x108>)
 800dc2a:	f240 321d 	movw	r2, #797	; 0x31d
 800dc2e:	4939      	ldr	r1, [pc, #228]	; (800dd14 <etharp_output+0x118>)
 800dc30:	4836      	ldr	r0, [pc, #216]	; (800dd0c <etharp_output+0x110>)
 800dc32:	f004 fd0f 	bl	8012654 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dc36:	4621      	mov	r1, r4
 800dc38:	6828      	ldr	r0, [r5, #0]
 800dc3a:	f000 fb6a 	bl	800e312 <ip4_addr_isbroadcast_u32>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d15a      	bne.n	800dcf8 <etharp_output+0xfc>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dc42:	682b      	ldr	r3, [r5, #0]
 800dc44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dc48:	2ae0      	cmp	r2, #224	; 0xe0
 800dc4a:	d11d      	bne.n	800dc88 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dc4c:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dc4e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dc52:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dc56:	235e      	movs	r3, #94	; 0x5e
 800dc58:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dc5c:	786b      	ldrb	r3, [r5, #1]
 800dc5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc62:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dc66:	78ab      	ldrb	r3, [r5, #2]
 800dc68:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dc6c:	78eb      	ldrb	r3, [r5, #3]
 800dc6e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800dc72:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800dc74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc78:	4631      	mov	r1, r6
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	9200      	str	r2, [sp, #0]
 800dc7e:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800dc82:	f000 f89b 	bl	800ddbc <ethernet_output>
 800dc86:	e01f      	b.n	800dcc8 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dc88:	6862      	ldr	r2, [r4, #4]
 800dc8a:	68a1      	ldr	r1, [r4, #8]
 800dc8c:	405a      	eors	r2, r3
 800dc8e:	420a      	tst	r2, r1
 800dc90:	d008      	beq.n	800dca4 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 800dc92:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dc94:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d003      	beq.n	800dca4 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dc9c:	68e3      	ldr	r3, [r4, #12]
 800dc9e:	b36b      	cbz	r3, 800dcfc <etharp_output+0x100>
            dst_addr = netif_ip4_gw(netif);
 800dca0:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dca4:	4b1c      	ldr	r3, [pc, #112]	; (800dd18 <etharp_output+0x11c>)
 800dca6:	2018      	movs	r0, #24
 800dca8:	491c      	ldr	r1, [pc, #112]	; (800dd1c <etharp_output+0x120>)
 800dcaa:	781a      	ldrb	r2, [r3, #0]
 800dcac:	fb00 1002 	mla	r0, r0, r2, r1
 800dcb0:	7d01      	ldrb	r1, [r0, #20]
 800dcb2:	2901      	cmp	r1, #1
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	d909      	bls.n	800dccc <etharp_output+0xd0>
 800dcb8:	682f      	ldr	r7, [r5, #0]
 800dcba:	6843      	ldr	r3, [r0, #4]
 800dcbc:	429f      	cmp	r7, r3
 800dcbe:	d105      	bne.n	800dccc <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 800dcc0:	4631      	mov	r1, r6
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f7ff fe96 	bl	800d9f4 <etharp_output_to_arp_index>
}
 800dcc8:	b005      	add	sp, #20
 800dcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dccc:	4b13      	ldr	r3, [pc, #76]	; (800dd1c <etharp_output+0x120>)
{
 800dcce:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dcd0:	7d18      	ldrb	r0, [r3, #20]
 800dcd2:	2801      	cmp	r0, #1
 800dcd4:	d906      	bls.n	800dce4 <etharp_output+0xe8>
 800dcd6:	682f      	ldr	r7, [r5, #0]
 800dcd8:	6858      	ldr	r0, [r3, #4]
 800dcda:	4287      	cmp	r7, r0
 800dcdc:	d102      	bne.n	800dce4 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 800dcde:	b2d2      	uxtb	r2, r2
 800dce0:	700a      	strb	r2, [r1, #0]
 800dce2:	e7ed      	b.n	800dcc0 <etharp_output+0xc4>
 800dce4:	3201      	adds	r2, #1
 800dce6:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dce8:	2a0a      	cmp	r2, #10
 800dcea:	d1f1      	bne.n	800dcd0 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 800dcec:	4632      	mov	r2, r6
 800dcee:	4629      	mov	r1, r5
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f7ff fedb 	bl	800daac <etharp_query>
 800dcf6:	e7e7      	b.n	800dcc8 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 800dcf8:	4b09      	ldr	r3, [pc, #36]	; (800dd20 <etharp_output+0x124>)
 800dcfa:	e7bb      	b.n	800dc74 <etharp_output+0x78>
            return ERR_RTE;
 800dcfc:	f06f 0003 	mvn.w	r0, #3
 800dd00:	e7e2      	b.n	800dcc8 <etharp_output+0xcc>
 800dd02:	bf00      	nop
 800dd04:	08013c62 	.word	0x08013c62
 800dd08:	0801341c 	.word	0x0801341c
 800dd0c:	0801342a 	.word	0x0801342a
 800dd10:	080146e3 	.word	0x080146e3
 800dd14:	08013bad 	.word	0x08013bad
 800dd18:	240001cc 	.word	0x240001cc
 800dd1c:	240000dc 	.word	0x240000dc
 800dd20:	08013d11 	.word	0x08013d11

0800dd24 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800dd24:	8943      	ldrh	r3, [r0, #10]
 800dd26:	2b0e      	cmp	r3, #14
{
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800dd2e:	d914      	bls.n	800dd5a <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dd30:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dd32:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800dd34:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800dd36:	07d9      	lsls	r1, r3, #31
 800dd38:	d50a      	bpl.n	800dd50 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d111      	bne.n	800dd62 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dd3e:	7843      	ldrb	r3, [r0, #1]
 800dd40:	b933      	cbnz	r3, 800dd50 <ethernet_input+0x2c>
 800dd42:	7883      	ldrb	r3, [r0, #2]
 800dd44:	2b5e      	cmp	r3, #94	; 0x5e
 800dd46:	d103      	bne.n	800dd50 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dd48:	7b63      	ldrb	r3, [r4, #13]
 800dd4a:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dd4e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800dd50:	2e08      	cmp	r6, #8
 800dd52:	d010      	beq.n	800dd76 <ethernet_input+0x52>
 800dd54:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800dd58:	d01e      	beq.n	800dd98 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f001 fa32 	bl	800f1c4 <pbuf_free>
  return ERR_OK;
 800dd60:	e018      	b.n	800dd94 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dd62:	2206      	movs	r2, #6
 800dd64:	4914      	ldr	r1, [pc, #80]	; (800ddb8 <ethernet_input+0x94>)
 800dd66:	f004 fba7 	bl	80124b8 <memcmp>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d1f0      	bne.n	800dd50 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800dd6e:	7b63      	ldrb	r3, [r4, #13]
 800dd70:	f043 0308 	orr.w	r3, r3, #8
 800dd74:	e7eb      	b.n	800dd4e <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dd76:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800dd7a:	071a      	lsls	r2, r3, #28
 800dd7c:	d5ed      	bpl.n	800dd5a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dd7e:	f06f 010d 	mvn.w	r1, #13
 800dd82:	4620      	mov	r0, r4
 800dd84:	f001 fa18 	bl	800f1b8 <pbuf_header>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d1e6      	bne.n	800dd5a <ethernet_input+0x36>
        ip4_input(p, netif);
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f000 f974 	bl	800e07c <ip4_input>
}
 800dd94:	2000      	movs	r0, #0
 800dd96:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dd98:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800dd9c:	071b      	lsls	r3, r3, #28
 800dd9e:	d5dc      	bpl.n	800dd5a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dda0:	f06f 010d 	mvn.w	r1, #13
 800dda4:	4620      	mov	r0, r4
 800dda6:	f001 fa07 	bl	800f1b8 <pbuf_header>
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	d1d5      	bne.n	800dd5a <ethernet_input+0x36>
        etharp_input(p, netif);
 800ddae:	4629      	mov	r1, r5
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f7ff fd41 	bl	800d838 <etharp_input>
      break;
 800ddb6:	e7ed      	b.n	800dd94 <ethernet_input+0x70>
 800ddb8:	08013d11 	.word	0x08013d11

0800ddbc <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ddc4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800ddc8:	4616      	mov	r6, r2
 800ddca:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800ddcc:	f7ff fc11 	bl	800d5f2 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ddd0:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800ddd2:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	f001 f9ef 	bl	800f1b8 <pbuf_header>
 800ddda:	b9e0      	cbnz	r0, 800de16 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800dddc:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800ddde:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	600b      	str	r3, [r1, #0]
 800dde6:	88bb      	ldrh	r3, [r7, #4]
 800dde8:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800ddea:	6833      	ldr	r3, [r6, #0]
 800ddec:	f8c1 3006 	str.w	r3, [r1, #6]
 800ddf0:	88b3      	ldrh	r3, [r6, #4]
 800ddf2:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ddf4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ddf8:	2b06      	cmp	r3, #6
 800ddfa:	d006      	beq.n	800de0a <ethernet_output+0x4e>
 800ddfc:	4b08      	ldr	r3, [pc, #32]	; (800de20 <ethernet_output+0x64>)
 800ddfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800de02:	4908      	ldr	r1, [pc, #32]	; (800de24 <ethernet_output+0x68>)
 800de04:	4808      	ldr	r0, [pc, #32]	; (800de28 <ethernet_output+0x6c>)
 800de06:	f004 fc25 	bl	8012654 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800de0a:	69a3      	ldr	r3, [r4, #24]
 800de0c:	4629      	mov	r1, r5
 800de0e:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800de10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800de14:	4718      	bx	r3
}
 800de16:	f06f 0001 	mvn.w	r0, #1
 800de1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de1e:	bf00      	nop
 800de20:	08013d17 	.word	0x08013d17
 800de24:	08013d52 	.word	0x08013d52
 800de28:	0801342a 	.word	0x0801342a

0800de2c <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 800de2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de2e:	4604      	mov	r4, r0
 800de30:	b087      	sub	sp, #28
 800de32:	460f      	mov	r7, r1
 800de34:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800de36:	2124      	movs	r1, #36	; 0x24
 800de38:	2200      	movs	r2, #0
 800de3a:	2001      	movs	r0, #1
 800de3c:	f001 fa24 	bl	800f288 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800de40:	4605      	mov	r5, r0
 800de42:	b3a0      	cbz	r0, 800deae <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800de44:	8943      	ldrh	r3, [r0, #10]
 800de46:	2b23      	cmp	r3, #35	; 0x23
 800de48:	d806      	bhi.n	800de58 <icmp_send_response.isra.0+0x2c>
 800de4a:	4b1a      	ldr	r3, [pc, #104]	; (800deb4 <icmp_send_response.isra.0+0x88>)
 800de4c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800de50:	4919      	ldr	r1, [pc, #100]	; (800deb8 <icmp_send_response.isra.0+0x8c>)
 800de52:	481a      	ldr	r0, [pc, #104]	; (800debc <icmp_send_response.isra.0+0x90>)
 800de54:	f004 fbfe 	bl	8012654 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800de58:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800de5a:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800de5c:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800de5e:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 800de62:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800de64:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 800de68:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800de6a:	71a3      	strb	r3, [r4, #6]
 800de6c:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800de6e:	4613      	mov	r3, r2
  icmphdr->type = type;
 800de70:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800de72:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800de74:	f853 6b04 	ldr.w	r6, [r3], #4
 800de78:	4283      	cmp	r3, r0
 800de7a:	f841 6b04 	str.w	r6, [r1], #4
 800de7e:	d1f9      	bne.n	800de74 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800de80:	ae06      	add	r6, sp, #24
 800de82:	68d3      	ldr	r3, [r2, #12]
 800de84:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800de88:	4630      	mov	r0, r6
 800de8a:	f000 f8cb 	bl	800e024 <ip4_route>
#endif
  if (netif != NULL) {
 800de8e:	b158      	cbz	r0, 800dea8 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800de90:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800de92:	2301      	movs	r3, #1
 800de94:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 800de96:	70a1      	strb	r1, [r4, #2]
 800de98:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800de9a:	9002      	str	r0, [sp, #8]
 800de9c:	4628      	mov	r0, r5
 800de9e:	e88d 000a 	stmia.w	sp, {r1, r3}
 800dea2:	23ff      	movs	r3, #255	; 0xff
 800dea4:	f000 fa24 	bl	800e2f0 <ip4_output_if>
  }
  pbuf_free(q);
 800dea8:	4628      	mov	r0, r5
 800deaa:	f001 f98b 	bl	800f1c4 <pbuf_free>
}
 800deae:	b007      	add	sp, #28
 800deb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deb2:	bf00      	nop
 800deb4:	08013df0 	.word	0x08013df0
 800deb8:	08013e2b 	.word	0x08013e2b
 800debc:	0801342a 	.word	0x0801342a

0800dec0 <icmp_input>:
  iphdr_in = ip4_current_header();
 800dec0:	4b45      	ldr	r3, [pc, #276]	; (800dfd8 <icmp_input+0x118>)
{
 800dec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800dec6:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 800deca:	b085      	sub	sp, #20
 800decc:	4604      	mov	r4, r0
 800dece:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 800ded0:	f899 5000 	ldrb.w	r5, [r9]
 800ded4:	461f      	mov	r7, r3
 800ded6:	f005 050f 	and.w	r5, r5, #15
 800deda:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800dedc:	2d13      	cmp	r5, #19
 800dede:	d92a      	bls.n	800df36 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 800dee0:	8942      	ldrh	r2, [r0, #10]
 800dee2:	2a03      	cmp	r2, #3
 800dee4:	d927      	bls.n	800df36 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 800dee6:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 800dee8:	7812      	ldrb	r2, [r2, #0]
 800deea:	2a08      	cmp	r2, #8
 800deec:	d123      	bne.n	800df36 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800deee:	6958      	ldr	r0, [r3, #20]
 800def0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800def4:	2ae0      	cmp	r2, #224	; 0xe0
 800def6:	d01e      	beq.n	800df36 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800def8:	6819      	ldr	r1, [r3, #0]
 800defa:	f000 fa0a 	bl	800e312 <ip4_addr_isbroadcast_u32>
 800defe:	4606      	mov	r6, r0
 800df00:	b9c8      	cbnz	r0, 800df36 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800df02:	8923      	ldrh	r3, [r4, #8]
 800df04:	2b07      	cmp	r3, #7
 800df06:	d916      	bls.n	800df36 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800df08:	f105 010e 	add.w	r1, r5, #14
 800df0c:	4620      	mov	r0, r4
 800df0e:	f001 f953 	bl	800f1b8 <pbuf_header>
 800df12:	2800      	cmp	r0, #0
 800df14:	d04f      	beq.n	800dfb6 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800df16:	8921      	ldrh	r1, [r4, #8]
 800df18:	4632      	mov	r2, r6
 800df1a:	2002      	movs	r0, #2
 800df1c:	4429      	add	r1, r5
 800df1e:	b289      	uxth	r1, r1
 800df20:	f001 f9b2 	bl	800f288 <pbuf_alloc>
      if (r == NULL) {
 800df24:	4606      	mov	r6, r0
 800df26:	b130      	cbz	r0, 800df36 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800df28:	8942      	ldrh	r2, [r0, #10]
 800df2a:	f105 0308 	add.w	r3, r5, #8
 800df2e:	429a      	cmp	r2, r3
 800df30:	d207      	bcs.n	800df42 <icmp_input+0x82>
        pbuf_free(r);
 800df32:	f001 f947 	bl	800f1c4 <pbuf_free>
  pbuf_free(p);
 800df36:	4620      	mov	r0, r4
}
 800df38:	b005      	add	sp, #20
 800df3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800df3e:	f001 b941 	b.w	800f1c4 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800df42:	4649      	mov	r1, r9
 800df44:	462a      	mov	r2, r5
 800df46:	6840      	ldr	r0, [r0, #4]
 800df48:	f004 fac5 	bl	80124d6 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800df4c:	4269      	negs	r1, r5
 800df4e:	4630      	mov	r0, r6
 800df50:	f001 f932 	bl	800f1b8 <pbuf_header>
 800df54:	b138      	cbz	r0, 800df66 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800df56:	4b21      	ldr	r3, [pc, #132]	; (800dfdc <icmp_input+0x11c>)
 800df58:	22af      	movs	r2, #175	; 0xaf
 800df5a:	4921      	ldr	r1, [pc, #132]	; (800dfe0 <icmp_input+0x120>)
 800df5c:	4821      	ldr	r0, [pc, #132]	; (800dfe4 <icmp_input+0x124>)
 800df5e:	f004 fb79 	bl	8012654 <iprintf>
        pbuf_free(r);
 800df62:	4630      	mov	r0, r6
 800df64:	e7e5      	b.n	800df32 <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800df66:	4621      	mov	r1, r4
 800df68:	4630      	mov	r0, r6
 800df6a:	f001 fb33 	bl	800f5d4 <pbuf_copy>
 800df6e:	2800      	cmp	r0, #0
 800df70:	d1f7      	bne.n	800df62 <icmp_input+0xa2>
      pbuf_free(p);
 800df72:	4620      	mov	r0, r4
 800df74:	4634      	mov	r4, r6
 800df76:	f001 f925 	bl	800f1c4 <pbuf_free>
    if (pbuf_header(p, (s16_t)hlen)) {
 800df7a:	4629      	mov	r1, r5
 800df7c:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 800df7e:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800df80:	f001 f91a 	bl	800f1b8 <pbuf_header>
 800df84:	4602      	mov	r2, r0
 800df86:	2800      	cmp	r0, #0
 800df88:	d1d5      	bne.n	800df36 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800df8a:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800df94:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800df96:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 800df98:	70b0      	strb	r0, [r6, #2]
 800df9a:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800df9c:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800df9e:	7288      	strb	r0, [r1, #10]
 800dfa0:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dfa2:	2101      	movs	r1, #1
 800dfa4:	9000      	str	r0, [sp, #0]
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	9101      	str	r1, [sp, #4]
 800dfaa:	f8cd 8008 	str.w	r8, [sp, #8]
 800dfae:	490e      	ldr	r1, [pc, #56]	; (800dfe8 <icmp_input+0x128>)
 800dfb0:	f000 f99e 	bl	800e2f0 <ip4_output_if>
 800dfb4:	e7bf      	b.n	800df36 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800dfb6:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 800dfba:	4620      	mov	r0, r4
 800dfbc:	31f2      	adds	r1, #242	; 0xf2
 800dfbe:	b209      	sxth	r1, r1
 800dfc0:	f001 f8fa 	bl	800f1b8 <pbuf_header>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d0d8      	beq.n	800df7a <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dfc8:	4b04      	ldr	r3, [pc, #16]	; (800dfdc <icmp_input+0x11c>)
 800dfca:	22c0      	movs	r2, #192	; 0xc0
 800dfcc:	4907      	ldr	r1, [pc, #28]	; (800dfec <icmp_input+0x12c>)
 800dfce:	4805      	ldr	r0, [pc, #20]	; (800dfe4 <icmp_input+0x124>)
 800dfd0:	f004 fb40 	bl	8012654 <iprintf>
        goto icmperr;
 800dfd4:	e7af      	b.n	800df36 <icmp_input+0x76>
 800dfd6:	bf00      	nop
 800dfd8:	2400178c 	.word	0x2400178c
 800dfdc:	08013df0 	.word	0x08013df0
 800dfe0:	08013d89 	.word	0x08013d89
 800dfe4:	0801342a 	.word	0x0801342a
 800dfe8:	240017a0 	.word	0x240017a0
 800dfec:	08013dbe 	.word	0x08013dbe

0800dff0 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 800dff0:	460a      	mov	r2, r1
 800dff2:	3004      	adds	r0, #4
 800dff4:	2103      	movs	r1, #3
 800dff6:	f7ff bf19 	b.w	800de2c <icmp_send_response.isra.0>

0800dffa <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 800dffa:	460a      	mov	r2, r1
 800dffc:	3004      	adds	r0, #4
 800dffe:	210b      	movs	r1, #11
 800e000:	f7ff bf14 	b.w	800de2c <icmp_send_response.isra.0>

0800e004 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e004:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800e006:	f000 fd37 	bl	800ea78 <mem_init>
  memp_init();
 800e00a:	f000 ff4b 	bl	800eea4 <memp_init>
  pbuf_init();
  netif_init();
 800e00e:	f000 ff96 	bl	800ef3e <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e012:	f004 f933 	bl	801227c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e016:	f001 fbdd 	bl	800f7d4 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800e01a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800e01e:	f004 b903 	b.w	8012228 <sys_timeouts_init>
	...

0800e024 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e024:	4b13      	ldr	r3, [pc, #76]	; (800e074 <ip4_route+0x50>)
{
 800e026:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	b96b      	cbnz	r3, 800e048 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e02c:	4a12      	ldr	r2, [pc, #72]	; (800e078 <ip4_route+0x54>)
 800e02e:	6812      	ldr	r2, [r2, #0]
 800e030:	b1ea      	cbz	r2, 800e06e <ip4_route+0x4a>
 800e032:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 800e036:	f001 0105 	and.w	r1, r1, #5
 800e03a:	2905      	cmp	r1, #5
 800e03c:	d117      	bne.n	800e06e <ip4_route+0x4a>
 800e03e:	6851      	ldr	r1, [r2, #4]
 800e040:	2900      	cmp	r1, #0
 800e042:	bf18      	it	ne
 800e044:	4613      	movne	r3, r2
 800e046:	e012      	b.n	800e06e <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e048:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
 800e04c:	f004 0205 	and.w	r2, r4, #5
 800e050:	2a05      	cmp	r2, #5
 800e052:	d1e9      	bne.n	800e028 <ip4_route+0x4>
 800e054:	685a      	ldr	r2, [r3, #4]
 800e056:	2a00      	cmp	r2, #0
 800e058:	d0e6      	beq.n	800e028 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e05a:	6801      	ldr	r1, [r0, #0]
 800e05c:	689d      	ldr	r5, [r3, #8]
 800e05e:	404a      	eors	r2, r1
 800e060:	422a      	tst	r2, r5
 800e062:	d004      	beq.n	800e06e <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e064:	07a2      	lsls	r2, r4, #30
 800e066:	d4df      	bmi.n	800e028 <ip4_route+0x4>
 800e068:	68da      	ldr	r2, [r3, #12]
 800e06a:	4291      	cmp	r1, r2
 800e06c:	d1dc      	bne.n	800e028 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800e06e:	4618      	mov	r0, r3
 800e070:	bd30      	pop	{r4, r5, pc}
 800e072:	bf00      	nop
 800e074:	24004ca4 	.word	0x24004ca4
 800e078:	24004ca8 	.word	0x24004ca8

0800e07c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e07c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e080:	6847      	ldr	r7, [r0, #4]
{
 800e082:	4605      	mov	r5, r0
 800e084:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 800e086:	f897 9000 	ldrb.w	r9, [r7]
 800e08a:	ea4f 1319 	mov.w	r3, r9, lsr #4
 800e08e:	2b04      	cmp	r3, #4
 800e090:	d005      	beq.n	800e09e <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e092:	4628      	mov	r0, r5
 800e094:	f001 f896 	bl	800f1c4 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800e098:	2000      	movs	r0, #0
 800e09a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e09e:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL(iphdr);
 800e0a0:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e0a4:	f7ff faa5 	bl	800d5f2 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800e0a8:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen *= 4;
 800e0aa:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e0ae:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800e0b0:	4283      	cmp	r3, r0
 800e0b2:	d903      	bls.n	800e0bc <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 800e0b4:	4601      	mov	r1, r0
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f001 f9c6 	bl	800f448 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e0bc:	896b      	ldrh	r3, [r5, #10]
 800e0be:	454b      	cmp	r3, r9
 800e0c0:	d3e7      	bcc.n	800e092 <ip4_input+0x16>
 800e0c2:	892b      	ldrh	r3, [r5, #8]
 800e0c4:	42a3      	cmp	r3, r4
 800e0c6:	d3e4      	bcc.n	800e092 <ip4_input+0x16>
 800e0c8:	f1b9 0f13 	cmp.w	r9, #19
 800e0cc:	d9e1      	bls.n	800e092 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	4c49      	ldr	r4, [pc, #292]	; (800e1f8 <ip4_input+0x17c>)
 800e0d2:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e0d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e0d8:	68fa      	ldr	r2, [r7, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e0da:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e0dc:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e0de:	d139      	bne.n	800e154 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e0e0:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 800e0e4:	07da      	lsls	r2, r3, #31
 800e0e6:	d503      	bpl.n	800e0f0 <ip4_input+0x74>
 800e0e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d158      	bne.n	800e1a2 <ip4_input+0x126>
      netif = NULL;
 800e0f0:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0f2:	4641      	mov	r1, r8
 800e0f4:	6920      	ldr	r0, [r4, #16]
 800e0f6:	f000 f90c 	bl	800e312 <ip4_addr_isbroadcast_u32>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d1c9      	bne.n	800e092 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e0fe:	6923      	ldr	r3, [r4, #16]
 800e100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e104:	2be0      	cmp	r3, #224	; 0xe0
 800e106:	d0c4      	beq.n	800e092 <ip4_input+0x16>
  if (netif == NULL) {
 800e108:	2e00      	cmp	r6, #0
 800e10a:	d0c2      	beq.n	800e092 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e10c:	88fb      	ldrh	r3, [r7, #6]
 800e10e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e112:	b133      	cbz	r3, 800e122 <ip4_input+0xa6>
    p = ip4_reass(p);
 800e114:	4628      	mov	r0, r5
 800e116:	f000 fa2b 	bl	800e570 <ip4_reass>
    if (p == NULL) {
 800e11a:	4605      	mov	r5, r0
 800e11c:	2800      	cmp	r0, #0
 800e11e:	d0bb      	beq.n	800e098 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 800e120:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800e122:	60a7      	str	r7, [r4, #8]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800e124:	f1c9 0100 	rsb	r1, r9, #0
 800e128:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 800e12a:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800e12e:	783b      	ldrb	r3, [r7, #0]
 800e130:	f003 030f 	and.w	r3, r3, #15
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800e138:	f001 f83e 	bl	800f1b8 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800e13c:	7a7b      	ldrb	r3, [r7, #9]
 800e13e:	2b06      	cmp	r3, #6
 800e140:	d03d      	beq.n	800e1be <ip4_input+0x142>
 800e142:	2b11      	cmp	r3, #17
 800e144:	d02f      	beq.n	800e1a6 <ip4_input+0x12a>
 800e146:	2b01      	cmp	r3, #1
 800e148:	d13e      	bne.n	800e1c8 <ip4_input+0x14c>
      icmp_input(p, inp);
 800e14a:	4641      	mov	r1, r8
 800e14c:	4628      	mov	r0, r5
 800e14e:	f7ff feb7 	bl	800dec0 <icmp_input>
      break;
 800e152:	e02c      	b.n	800e1ae <ip4_input+0x132>
 800e154:	4646      	mov	r6, r8
 800e156:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 800e15a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800e1fc <ip4_input+0x180>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e15e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800e162:	07db      	lsls	r3, r3, #31
 800e164:	d404      	bmi.n	800e170 <ip4_input+0xf4>
      if (first) {
 800e166:	f1ba 0f00 	cmp.w	sl, #0
 800e16a:	d10d      	bne.n	800e188 <ip4_input+0x10c>
        netif = netif->next;
 800e16c:	6836      	ldr	r6, [r6, #0]
 800e16e:	e010      	b.n	800e192 <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e170:	6873      	ldr	r3, [r6, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d0f7      	beq.n	800e166 <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e176:	6960      	ldr	r0, [r4, #20]
 800e178:	4283      	cmp	r3, r0
 800e17a:	d0ba      	beq.n	800e0f2 <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e17c:	4631      	mov	r1, r6
 800e17e:	f000 f8c8 	bl	800e312 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e182:	2800      	cmp	r0, #0
 800e184:	d0ef      	beq.n	800e166 <ip4_input+0xea>
 800e186:	e7b4      	b.n	800e0f2 <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800e188:	7d23      	ldrb	r3, [r4, #20]
 800e18a:	2b7f      	cmp	r3, #127	; 0x7f
 800e18c:	d0b0      	beq.n	800e0f0 <ip4_input+0x74>
        netif = netif_list;
 800e18e:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800e192:	4546      	cmp	r6, r8
 800e194:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 800e198:	bf08      	it	eq
 800e19a:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 800e19c:	2e00      	cmp	r6, #0
 800e19e:	d1de      	bne.n	800e15e <ip4_input+0xe2>
 800e1a0:	e7a6      	b.n	800e0f0 <ip4_input+0x74>
 800e1a2:	4646      	mov	r6, r8
 800e1a4:	e7a5      	b.n	800e0f2 <ip4_input+0x76>
      udp_input(p, inp);
 800e1a6:	4641      	mov	r1, r8
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	f004 f869 	bl	8012280 <udp_input>
  ip_data.current_netif = NULL;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 800e1b2:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 800e1b4:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e1b6:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e1b8:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e1ba:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 800e1bc:	e76c      	b.n	800e098 <ip4_input+0x1c>
      tcp_input(p, inp);
 800e1be:	4641      	mov	r1, r8
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	f002 fe45 	bl	8010e50 <tcp_input>
      break;
 800e1c6:	e7f2      	b.n	800e1ae <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e1c8:	4631      	mov	r1, r6
 800e1ca:	6960      	ldr	r0, [r4, #20]
 800e1cc:	f000 f8a1 	bl	800e312 <ip4_addr_isbroadcast_u32>
 800e1d0:	b968      	cbnz	r0, 800e1ee <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e1d2:	6963      	ldr	r3, [r4, #20]
 800e1d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e1d8:	2be0      	cmp	r3, #224	; 0xe0
 800e1da:	d008      	beq.n	800e1ee <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800e1dc:	4649      	mov	r1, r9
 800e1de:	4628      	mov	r0, r5
 800e1e0:	f000 ffed 	bl	800f1be <pbuf_header_force>
        p->payload = iphdr;
 800e1e4:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e1e6:	2102      	movs	r1, #2
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	f7ff ff01 	bl	800dff0 <icmp_dest_unreach>
      pbuf_free(p);
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f000 ffe8 	bl	800f1c4 <pbuf_free>
 800e1f4:	e7db      	b.n	800e1ae <ip4_input+0x132>
 800e1f6:	bf00      	nop
 800e1f8:	2400178c 	.word	0x2400178c
 800e1fc:	24004ca4 	.word	0x24004ca4

0800e200 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800e200:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e204:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e206:	89c3      	ldrh	r3, [r0, #14]
{
 800e208:	4605      	mov	r5, r0
 800e20a:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e20c:	2b01      	cmp	r3, #1
{
 800e20e:	4616      	mov	r6, r2
 800e210:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e214:	d006      	beq.n	800e224 <ip4_output_if_src+0x24>
 800e216:	4b30      	ldr	r3, [pc, #192]	; (800e2d8 <ip4_output_if_src+0xd8>)
 800e218:	f240 3233 	movw	r2, #819	; 0x333
 800e21c:	492f      	ldr	r1, [pc, #188]	; (800e2dc <ip4_output_if_src+0xdc>)
 800e21e:	4830      	ldr	r0, [pc, #192]	; (800e2e0 <ip4_output_if_src+0xe0>)
 800e220:	f004 fa18 	bl	8012654 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e224:	2e00      	cmp	r6, #0
 800e226:	d047      	beq.n	800e2b8 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800e228:	2114      	movs	r1, #20
 800e22a:	4628      	mov	r0, r5
 800e22c:	f000 ffc4 	bl	800f1b8 <pbuf_header>
 800e230:	2800      	cmp	r0, #0
 800e232:	d14e      	bne.n	800e2d2 <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e234:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800e236:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e238:	2b13      	cmp	r3, #19
 800e23a:	d806      	bhi.n	800e24a <ip4_output_if_src+0x4a>
 800e23c:	4b26      	ldr	r3, [pc, #152]	; (800e2d8 <ip4_output_if_src+0xd8>)
 800e23e:	f240 3261 	movw	r2, #865	; 0x361
 800e242:	4928      	ldr	r1, [pc, #160]	; (800e2e4 <ip4_output_if_src+0xe4>)
 800e244:	4826      	ldr	r0, [pc, #152]	; (800e2e0 <ip4_output_if_src+0xe0>)
 800e246:	f004 fa05 	bl	8012654 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 800e24a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800e24e:	7227      	strb	r7, [r4, #8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e250:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 800e252:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800e254:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e256:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800e2ec <ip4_output_if_src+0xec>
    ip4_addr_copy(iphdr->dest, *dest);
 800e25a:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e25c:	2345      	movs	r3, #69	; 0x45
 800e25e:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800e260:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800e264:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e266:	8928      	ldrh	r0, [r5, #8]
 800e268:	f7ff f9c3 	bl	800d5f2 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800e26c:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e26e:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800e270:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e272:	f8b9 0000 	ldrh.w	r0, [r9]
 800e276:	f7ff f9bc 	bl	800d5f2 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e27a:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e27e:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800e280:	3301      	adds	r3, #1
 800e282:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800e286:	f1ba 0f00 	cmp.w	sl, #0
 800e28a:	d112      	bne.n	800e2b2 <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e28c:	4b16      	ldr	r3, [pc, #88]	; (800e2e8 <ip4_output_if_src+0xe8>)
 800e28e:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e290:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e292:	72a7      	strb	r7, [r4, #10]
 800e294:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e296:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 800e29a:	b19b      	cbz	r3, 800e2c4 <ip4_output_if_src+0xc4>
 800e29c:	892a      	ldrh	r2, [r5, #8]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d910      	bls.n	800e2c4 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800e2a2:	4632      	mov	r2, r6
 800e2a4:	4641      	mov	r1, r8
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	f000 fb0c 	bl	800e8c4 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800e2ac:	b002      	add	sp, #8
 800e2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800e2b2:	f8da 3000 	ldr.w	r3, [sl]
 800e2b6:	e7eb      	b.n	800e290 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e2b8:	686b      	ldr	r3, [r5, #4]
 800e2ba:	ae02      	add	r6, sp, #8
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	f846 3d04 	str.w	r3, [r6, #-4]!
 800e2c2:	e7e8      	b.n	800e296 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800e2c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e2c8:	4632      	mov	r2, r6
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	4640      	mov	r0, r8
 800e2ce:	4798      	blx	r3
 800e2d0:	e7ec      	b.n	800e2ac <ip4_output_if_src+0xac>
      return ERR_BUF;
 800e2d2:	f06f 0001 	mvn.w	r0, #1
 800e2d6:	e7e9      	b.n	800e2ac <ip4_output_if_src+0xac>
 800e2d8:	08013e57 	.word	0x08013e57
 800e2dc:	08013e91 	.word	0x08013e91
 800e2e0:	0801342a 	.word	0x0801342a
 800e2e4:	08013e9d 	.word	0x08013e9d
 800e2e8:	08013ecc 	.word	0x08013ecc
 800e2ec:	240001ce 	.word	0x240001ce

0800e2f0 <ip4_output_if>:
{
 800e2f0:	b4f0      	push	{r4, r5, r6, r7}
 800e2f2:	9c06      	ldr	r4, [sp, #24]
 800e2f4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800e2f8:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e2fc:	b11a      	cbz	r2, 800e306 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800e2fe:	b109      	cbz	r1, 800e304 <ip4_output_if+0x14>
 800e300:	680f      	ldr	r7, [r1, #0]
 800e302:	b907      	cbnz	r7, 800e306 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800e304:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e306:	9406      	str	r4, [sp, #24]
 800e308:	9605      	str	r6, [sp, #20]
 800e30a:	9504      	str	r5, [sp, #16]
}
 800e30c:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e30e:	f7ff bf77 	b.w	800e200 <ip4_output_if_src>

0800e312 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e312:	1e43      	subs	r3, r0, #1
 800e314:	3303      	adds	r3, #3
 800e316:	d811      	bhi.n	800e33c <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e318:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800e31c:	f013 0302 	ands.w	r3, r3, #2
 800e320:	d00e      	beq.n	800e340 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e322:	684a      	ldr	r2, [r1, #4]
 800e324:	4290      	cmp	r0, r2
 800e326:	d00b      	beq.n	800e340 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e328:	688b      	ldr	r3, [r1, #8]
 800e32a:	4042      	eors	r2, r0
 800e32c:	421a      	tst	r2, r3
 800e32e:	d107      	bne.n	800e340 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e330:	43db      	mvns	r3, r3
 800e332:	4383      	bics	r3, r0
    return 1;
 800e334:	bf0c      	ite	eq
 800e336:	2001      	moveq	r0, #1
 800e338:	2000      	movne	r0, #0
 800e33a:	4770      	bx	lr
 800e33c:	2001      	movs	r0, #1
 800e33e:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800e340:	2000      	movs	r0, #0
  }
}
 800e342:	4770      	bx	lr

0800e344 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e344:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e346:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <ip_reass_dequeue_datagram+0x34>)
{
 800e348:	4604      	mov	r4, r0
 800e34a:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	4282      	cmp	r2, r0
 800e350:	d107      	bne.n	800e362 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e352:	6802      	ldr	r2, [r0, #0]
 800e354:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e356:	4621      	mov	r1, r4
 800e358:	2004      	movs	r0, #4
}
 800e35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800e35e:	f000 bdcb 	b.w	800eef8 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e362:	b931      	cbnz	r1, 800e372 <ip_reass_dequeue_datagram+0x2e>
 800e364:	4b05      	ldr	r3, [pc, #20]	; (800e37c <ip_reass_dequeue_datagram+0x38>)
 800e366:	f240 1245 	movw	r2, #325	; 0x145
 800e36a:	4905      	ldr	r1, [pc, #20]	; (800e380 <ip_reass_dequeue_datagram+0x3c>)
 800e36c:	4805      	ldr	r0, [pc, #20]	; (800e384 <ip_reass_dequeue_datagram+0x40>)
 800e36e:	f004 f971 	bl	8012654 <iprintf>
    prev->next = ipr->next;
 800e372:	6823      	ldr	r3, [r4, #0]
 800e374:	602b      	str	r3, [r5, #0]
 800e376:	e7ee      	b.n	800e356 <ip_reass_dequeue_datagram+0x12>
 800e378:	240001d4 	.word	0x240001d4
 800e37c:	08013fb5 	.word	0x08013fb5
 800e380:	08013ff4 	.word	0x08013ff4
 800e384:	0801342a 	.word	0x0801342a

0800e388 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e388:	4281      	cmp	r1, r0
{
 800e38a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38e:	4605      	mov	r5, r0
 800e390:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e392:	d105      	bne.n	800e3a0 <ip_reass_free_complete_datagram+0x18>
 800e394:	4b2f      	ldr	r3, [pc, #188]	; (800e454 <ip_reass_free_complete_datagram+0xcc>)
 800e396:	22ab      	movs	r2, #171	; 0xab
 800e398:	492f      	ldr	r1, [pc, #188]	; (800e458 <ip_reass_free_complete_datagram+0xd0>)
 800e39a:	4830      	ldr	r0, [pc, #192]	; (800e45c <ip_reass_free_complete_datagram+0xd4>)
 800e39c:	f004 f95a 	bl	8012654 <iprintf>
  if (prev != NULL) {
 800e3a0:	b147      	cbz	r7, 800e3b4 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	429d      	cmp	r5, r3
 800e3a6:	d005      	beq.n	800e3b4 <ip_reass_free_complete_datagram+0x2c>
 800e3a8:	4b2a      	ldr	r3, [pc, #168]	; (800e454 <ip_reass_free_complete_datagram+0xcc>)
 800e3aa:	22ad      	movs	r2, #173	; 0xad
 800e3ac:	492c      	ldr	r1, [pc, #176]	; (800e460 <ip_reass_free_complete_datagram+0xd8>)
 800e3ae:	482b      	ldr	r0, [pc, #172]	; (800e45c <ip_reass_free_complete_datagram+0xd4>)
 800e3b0:	f004 f950 	bl	8012654 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e3b4:	686e      	ldr	r6, [r5, #4]
 800e3b6:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800e3b8:	889a      	ldrh	r2, [r3, #4]
 800e3ba:	bb92      	cbnz	r2, 800e422 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800e3bc:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e3be:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 800e3c2:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e3c4:	f105 0208 	add.w	r2, r5, #8
 800e3c8:	f852 0b04 	ldr.w	r0, [r2], #4
 800e3cc:	428a      	cmp	r2, r1
 800e3ce:	f843 0b04 	str.w	r0, [r3], #4
 800e3d2:	d1f9      	bne.n	800e3c8 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	f7ff fe0f 	bl	800dffa <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e3dc:	4630      	mov	r0, r6
 800e3de:	f001 f8a3 	bl	800f528 <pbuf_clen>
 800e3e2:	4604      	mov	r4, r0
    pbuf_free(p);
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	f000 feed 	bl	800f1c4 <pbuf_free>
  p = ipr->p;
 800e3ea:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3ec:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800e454 <ip_reass_free_complete_datagram+0xcc>
 800e3f0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800e46c <ip_reass_free_complete_datagram+0xe4>
 800e3f4:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e45c <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800e3f8:	b9ae      	cbnz	r6, 800e426 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800e3fa:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800e3fc:	4d19      	ldr	r5, [pc, #100]	; (800e464 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800e3fe:	4639      	mov	r1, r7
 800e400:	f7ff ffa0 	bl	800e344 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800e404:	882b      	ldrh	r3, [r5, #0]
 800e406:	42a3      	cmp	r3, r4
 800e408:	d205      	bcs.n	800e416 <ip_reass_free_complete_datagram+0x8e>
 800e40a:	4b12      	ldr	r3, [pc, #72]	; (800e454 <ip_reass_free_complete_datagram+0xcc>)
 800e40c:	22d2      	movs	r2, #210	; 0xd2
 800e40e:	4916      	ldr	r1, [pc, #88]	; (800e468 <ip_reass_free_complete_datagram+0xe0>)
 800e410:	4812      	ldr	r0, [pc, #72]	; (800e45c <ip_reass_free_complete_datagram+0xd4>)
 800e412:	f004 f91f 	bl	8012654 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800e416:	882b      	ldrh	r3, [r5, #0]
}
 800e418:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 800e41a:	1b1b      	subs	r3, r3, r4
 800e41c:	802b      	strh	r3, [r5, #0]
}
 800e41e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800e422:	2400      	movs	r4, #0
 800e424:	e7e1      	b.n	800e3ea <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800e426:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 800e428:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 800e42a:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800e42e:	f001 f87b 	bl	800f528 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e432:	4404      	add	r4, r0
 800e434:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800e438:	db05      	blt.n	800e446 <ip_reass_free_complete_datagram+0xbe>
 800e43a:	4643      	mov	r3, r8
 800e43c:	22cc      	movs	r2, #204	; 0xcc
 800e43e:	4649      	mov	r1, r9
 800e440:	4650      	mov	r0, sl
 800e442:	f004 f907 	bl	8012654 <iprintf>
    pbuf_free(pcur);
 800e446:	4630      	mov	r0, r6
    pbufs_freed += clen;
 800e448:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 800e44a:	f000 febb 	bl	800f1c4 <pbuf_free>
    p = iprh->next_pbuf;
 800e44e:	465e      	mov	r6, fp
 800e450:	e7d2      	b.n	800e3f8 <ip_reass_free_complete_datagram+0x70>
 800e452:	bf00      	nop
 800e454:	08013fb5 	.word	0x08013fb5
 800e458:	0801400d 	.word	0x0801400d
 800e45c:	0801342a 	.word	0x0801342a
 800e460:	08014019 	.word	0x08014019
 800e464:	240001d0 	.word	0x240001d0
 800e468:	08014048 	.word	0x08014048
 800e46c:	0801402b 	.word	0x0801402b

0800e470 <ip_reass_remove_oldest_datagram>:
{
 800e470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e474:	4606      	mov	r6, r0
 800e476:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800e478:	2500      	movs	r5, #0
    r = reassdatagrams;
 800e47a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800e4e4 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800e47e:	2400      	movs	r4, #0
    r = reassdatagrams;
 800e480:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800e484:	4621      	mov	r1, r4
    prev = NULL;
 800e486:	46a6      	mov	lr, r4
    oldest = NULL;
 800e488:	4620      	mov	r0, r4
    while (r != NULL) {
 800e48a:	b953      	cbnz	r3, 800e4a2 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800e48c:	b110      	cbz	r0, 800e494 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e48e:	f7ff ff7b 	bl	800e388 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800e492:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e494:	42bd      	cmp	r5, r7
 800e496:	da01      	bge.n	800e49c <ip_reass_remove_oldest_datagram+0x2c>
 800e498:	2c01      	cmp	r4, #1
 800e49a:	dcf0      	bgt.n	800e47e <ip_reass_remove_oldest_datagram+0xe>
}
 800e49c:	4628      	mov	r0, r5
 800e49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e4a2:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800e4a6:	695a      	ldr	r2, [r3, #20]
 800e4a8:	4562      	cmp	r2, ip
 800e4aa:	d109      	bne.n	800e4c0 <ip_reass_remove_oldest_datagram+0x50>
 800e4ac:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800e4b0:	699a      	ldr	r2, [r3, #24]
 800e4b2:	4562      	cmp	r2, ip
 800e4b4:	d104      	bne.n	800e4c0 <ip_reass_remove_oldest_datagram+0x50>
 800e4b6:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800e4ba:	88b2      	ldrh	r2, [r6, #4]
 800e4bc:	4594      	cmp	ip, r2
 800e4be:	d008      	beq.n	800e4d2 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800e4c0:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800e4c2:	b160      	cbz	r0, 800e4de <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800e4c4:	7fc2      	ldrb	r2, [r0, #31]
 800e4c6:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 800e4ca:	4594      	cmp	ip, r2
 800e4cc:	bf9c      	itt	ls
 800e4ce:	4671      	movls	r1, lr
 800e4d0:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	2a00      	cmp	r2, #0
 800e4d6:	bf18      	it	ne
 800e4d8:	469e      	movne	lr, r3
 800e4da:	4613      	mov	r3, r2
 800e4dc:	e7d5      	b.n	800e48a <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800e4de:	4671      	mov	r1, lr
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	e7f6      	b.n	800e4d2 <ip_reass_remove_oldest_datagram+0x62>
 800e4e4:	240001d4 	.word	0x240001d4

0800e4e8 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800e4e8:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	b930      	cbnz	r0, 800e4fc <ip_frag_free_pbuf_custom_ref+0x14>
 800e4ee:	4b06      	ldr	r3, [pc, #24]	; (800e508 <ip_frag_free_pbuf_custom_ref+0x20>)
 800e4f0:	f240 22ae 	movw	r2, #686	; 0x2ae
 800e4f4:	4905      	ldr	r1, [pc, #20]	; (800e50c <ip_frag_free_pbuf_custom_ref+0x24>)
 800e4f6:	4806      	ldr	r0, [pc, #24]	; (800e510 <ip_frag_free_pbuf_custom_ref+0x28>)
 800e4f8:	f004 f8ac 	bl	8012654 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e4fc:	4621      	mov	r1, r4
 800e4fe:	2005      	movs	r0, #5
}
 800e500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800e504:	f000 bcf8 	b.w	800eef8 <memp_free>
 800e508:	08013fb5 	.word	0x08013fb5
 800e50c:	0801469f 	.word	0x0801469f
 800e510:	0801342a 	.word	0x0801342a

0800e514 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e514:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e516:	4604      	mov	r4, r0
 800e518:	b930      	cbnz	r0, 800e528 <ipfrag_free_pbuf_custom+0x14>
 800e51a:	4b08      	ldr	r3, [pc, #32]	; (800e53c <ipfrag_free_pbuf_custom+0x28>)
 800e51c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800e520:	4907      	ldr	r1, [pc, #28]	; (800e540 <ipfrag_free_pbuf_custom+0x2c>)
 800e522:	4808      	ldr	r0, [pc, #32]	; (800e544 <ipfrag_free_pbuf_custom+0x30>)
 800e524:	f004 f896 	bl	8012654 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800e528:	6960      	ldr	r0, [r4, #20]
 800e52a:	b108      	cbz	r0, 800e530 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800e52c:	f000 fe4a 	bl	800f1c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e530:	4620      	mov	r0, r4
}
 800e532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800e536:	f7ff bfd7 	b.w	800e4e8 <ip_frag_free_pbuf_custom_ref>
 800e53a:	bf00      	nop
 800e53c:	08013fb5 	.word	0x08013fb5
 800e540:	08014063 	.word	0x08014063
 800e544:	0801342a 	.word	0x0801342a

0800e548 <ip_reass_tmr>:
{
 800e548:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800e54a:	4b08      	ldr	r3, [pc, #32]	; (800e56c <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 800e54c:	2400      	movs	r4, #0
  r = reassdatagrams;
 800e54e:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800e550:	b900      	cbnz	r0, 800e554 <ip_reass_tmr+0xc>
}
 800e552:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800e554:	7fc3      	ldrb	r3, [r0, #31]
 800e556:	6805      	ldr	r5, [r0, #0]
 800e558:	b123      	cbz	r3, 800e564 <ip_reass_tmr+0x1c>
      r->timer--;
 800e55a:	3b01      	subs	r3, #1
 800e55c:	4604      	mov	r4, r0
 800e55e:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 800e560:	4628      	mov	r0, r5
 800e562:	e7f5      	b.n	800e550 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 800e564:	4621      	mov	r1, r4
 800e566:	f7ff ff0f 	bl	800e388 <ip_reass_free_complete_datagram>
 800e56a:	e7f9      	b.n	800e560 <ip_reass_tmr+0x18>
 800e56c:	240001d4 	.word	0x240001d4

0800e570 <ip4_reass>:
{
 800e570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 800e574:	6845      	ldr	r5, [r0, #4]
{
 800e576:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800e578:	782b      	ldrb	r3, [r5, #0]
 800e57a:	f003 030f 	and.w	r3, r3, #15
 800e57e:	2b05      	cmp	r3, #5
 800e580:	f040 808c 	bne.w	800e69c <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e584:	88e8      	ldrh	r0, [r5, #6]
 800e586:	f7ff f834 	bl	800d5f2 <lwip_htons>
 800e58a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e58e:	4cb2      	ldr	r4, [pc, #712]	; (800e858 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e590:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e594:	8868      	ldrh	r0, [r5, #2]
 800e596:	f7ff f82c 	bl	800d5f2 <lwip_htons>
 800e59a:	782b      	ldrb	r3, [r5, #0]
 800e59c:	f003 030f 	and.w	r3, r3, #15
 800e5a0:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800e5a4:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800e5a6:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e5a8:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800e5aa:	f000 ffbd 	bl	800f528 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e5ae:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 800e5b0:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e5b2:	4403      	add	r3, r0
 800e5b4:	2b0a      	cmp	r3, #10
 800e5b6:	dc68      	bgt.n	800e68a <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e5b8:	4ea8      	ldr	r6, [pc, #672]	; (800e85c <ip4_reass+0x2ec>)
 800e5ba:	6834      	ldr	r4, [r6, #0]
 800e5bc:	2c00      	cmp	r4, #0
 800e5be:	d172      	bne.n	800e6a6 <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e5c0:	2004      	movs	r0, #4
 800e5c2:	f000 fc7d 	bl	800eec0 <memp_malloc>
  if (ipr == NULL) {
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	b958      	cbnz	r0, 800e5e2 <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e5ca:	4651      	mov	r1, sl
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	f7ff ff4f 	bl	800e470 <ip_reass_remove_oldest_datagram>
 800e5d2:	4582      	cmp	sl, r0
 800e5d4:	dc62      	bgt.n	800e69c <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e5d6:	2004      	movs	r0, #4
 800e5d8:	f000 fc72 	bl	800eec0 <memp_malloc>
    if (ipr == NULL)
 800e5dc:	4604      	mov	r4, r0
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d05c      	beq.n	800e69c <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e5e2:	2220      	movs	r2, #32
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f003 ff80 	bl	80124ec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e5ec:	2303      	movs	r3, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e5ee:	f104 0208 	add.w	r2, r4, #8
 800e5f2:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800e5f6:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800e5f8:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800e5fa:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800e5fc:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e5fe:	462b      	mov	r3, r5
 800e600:	f853 0b04 	ldr.w	r0, [r3], #4
 800e604:	428b      	cmp	r3, r1
 800e606:	f842 0b04 	str.w	r0, [r2], #4
 800e60a:	d1f9      	bne.n	800e600 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e60c:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 800e610:	f01b 0b20 	ands.w	fp, fp, #32
 800e614:	d108      	bne.n	800e628 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 800e616:	9b01      	ldr	r3, [sp, #4]
 800e618:	444b      	add	r3, r9
 800e61a:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e61c:	4599      	cmp	r9, r3
 800e61e:	d83d      	bhi.n	800e69c <ip4_reass+0x12c>
 800e620:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e624:	4293      	cmp	r3, r2
 800e626:	d839      	bhi.n	800e69c <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 800e628:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e62a:	8868      	ldrh	r0, [r5, #2]
 800e62c:	f7fe ffe1 	bl	800d5f2 <lwip_htons>
 800e630:	f895 8000 	ldrb.w	r8, [r5]
 800e634:	f008 080f 	and.w	r8, r8, #15
 800e638:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e63c:	88e8      	ldrh	r0, [r5, #6]
 800e63e:	f7fe ffd8 	bl	800d5f2 <lwip_htons>
 800e642:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e646:	fa1f f888 	uxth.w	r8, r8
  for (q = ipr->p; q != NULL;) {
 800e64a:	f8d4 e004 	ldr.w	lr, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e64e:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800e650:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 800e652:	2500      	movs	r5, #0
  for (q = ipr->p; q != NULL;) {
 800e654:	4672      	mov	r2, lr
  iprh->end = offset + len;
 800e656:	eb08 0300 	add.w	r3, r8, r0
  int valid = 1;
 800e65a:	f04f 0801 	mov.w	r8, #1
  iprh->next_pbuf = NULL;
 800e65e:	7035      	strb	r5, [r6, #0]
  iprh->end = offset + len;
 800e660:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 800e662:	7075      	strb	r5, [r6, #1]
 800e664:	70b5      	strb	r5, [r6, #2]
 800e666:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800e668:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 800e66a:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 800e66c:	bb52      	cbnz	r2, 800e6c4 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 800e66e:	2d00      	cmp	r5, #0
 800e670:	f040 8092 	bne.w	800e798 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e674:	f1be 0f00 	cmp.w	lr, #0
 800e678:	d07d      	beq.n	800e776 <ip4_reass+0x206>
 800e67a:	4b79      	ldr	r3, [pc, #484]	; (800e860 <ip4_reass+0x2f0>)
 800e67c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800e680:	4978      	ldr	r1, [pc, #480]	; (800e864 <ip4_reass+0x2f4>)
 800e682:	4879      	ldr	r0, [pc, #484]	; (800e868 <ip4_reass+0x2f8>)
 800e684:	f003 ffe6 	bl	8012654 <iprintf>
 800e688:	e075      	b.n	800e776 <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e68a:	4601      	mov	r1, r0
 800e68c:	4628      	mov	r0, r5
 800e68e:	f7ff feef 	bl	800e470 <ip_reass_remove_oldest_datagram>
 800e692:	b118      	cbz	r0, 800e69c <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e694:	8823      	ldrh	r3, [r4, #0]
 800e696:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e698:	2b0a      	cmp	r3, #10
 800e69a:	dd8d      	ble.n	800e5b8 <ip4_reass+0x48>
  pbuf_free(p);
 800e69c:	4638      	mov	r0, r7
 800e69e:	f000 fd91 	bl	800f1c4 <pbuf_free>
  return NULL;
 800e6a2:	2500      	movs	r5, #0
 800e6a4:	e0d4      	b.n	800e850 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e6a6:	68eb      	ldr	r3, [r5, #12]
 800e6a8:	6962      	ldr	r2, [r4, #20]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d108      	bne.n	800e6c0 <ip4_reass+0x150>
 800e6ae:	692b      	ldr	r3, [r5, #16]
 800e6b0:	69a2      	ldr	r2, [r4, #24]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d104      	bne.n	800e6c0 <ip4_reass+0x150>
 800e6b6:	89a2      	ldrh	r2, [r4, #12]
 800e6b8:	88ab      	ldrh	r3, [r5, #4]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	f000 80dc 	beq.w	800e878 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e6c0:	6824      	ldr	r4, [r4, #0]
 800e6c2:	e77b      	b.n	800e5bc <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800e6c4:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 800e6c8:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800e6cc:	4288      	cmp	r0, r1
 800e6ce:	d254      	bcs.n	800e77a <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 800e6d0:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800e6d2:	2d00      	cmp	r5, #0
 800e6d4:	d04d      	beq.n	800e772 <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e6d6:	88ea      	ldrh	r2, [r5, #6]
 800e6d8:	4290      	cmp	r0, r2
 800e6da:	f0c0 8091 	bcc.w	800e800 <ip4_reass+0x290>
 800e6de:	428b      	cmp	r3, r1
 800e6e0:	f200 808e 	bhi.w	800e800 <ip4_reass+0x290>
        if (iprh_prev->end != iprh->start) {
 800e6e4:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 800e6e6:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800e6e8:	f040 80e4 	bne.w	800e8b4 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e6ec:	f1bb 0f00 	cmp.w	fp, #0
 800e6f0:	d004      	beq.n	800e6fc <ip4_reass+0x18c>
 800e6f2:	7fa3      	ldrb	r3, [r4, #30]
 800e6f4:	f013 0301 	ands.w	r3, r3, #1
 800e6f8:	f000 80da 	beq.w	800e8b0 <ip4_reass+0x340>
    if (valid) {
 800e6fc:	f1b8 0f00 	cmp.w	r8, #0
 800e700:	d159      	bne.n	800e7b6 <ip4_reass+0x246>
          q = iprh->next_pbuf;
 800e702:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e706:	4e54      	ldr	r6, [pc, #336]	; (800e858 <ip4_reass+0x2e8>)
 800e708:	8833      	ldrh	r3, [r6, #0]
 800e70a:	449a      	add	sl, r3
 800e70c:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 800e710:	f1bb 0f00 	cmp.w	fp, #0
 800e714:	d107      	bne.n	800e726 <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800e716:	9b01      	ldr	r3, [sp, #4]
 800e718:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e71a:	7fa3      	ldrb	r3, [r4, #30]
 800e71c:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800e720:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e724:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e726:	f1b8 0f01 	cmp.w	r8, #1
 800e72a:	d1ba      	bne.n	800e6a2 <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 800e72c:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e72e:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 800e732:	3314      	adds	r3, #20
 800e734:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800e736:	6863      	ldr	r3, [r4, #4]
 800e738:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e73a:	f104 0308 	add.w	r3, r4, #8
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800e73e:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e740:	462a      	mov	r2, r5
 800e742:	f853 0b04 	ldr.w	r0, [r3], #4
 800e746:	428b      	cmp	r3, r1
 800e748:	f842 0b04 	str.w	r0, [r2], #4
 800e74c:	d1f9      	bne.n	800e742 <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800e74e:	8ba0      	ldrh	r0, [r4, #28]
 800e750:	f7fe ff4f 	bl	800d5f2 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800e754:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800e756:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e758:	71ab      	strb	r3, [r5, #6]
 800e75a:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e75c:	72ab      	strb	r3, [r5, #10]
 800e75e:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800e760:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800e762:	2f00      	cmp	r7, #0
 800e764:	d157      	bne.n	800e816 <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 800e766:	4b3d      	ldr	r3, [pc, #244]	; (800e85c <ip4_reass+0x2ec>)
 800e768:	6819      	ldr	r1, [r3, #0]
 800e76a:	428c      	cmp	r4, r1
 800e76c:	d165      	bne.n	800e83a <ip4_reass+0x2ca>
      ipr_prev = NULL;
 800e76e:	4639      	mov	r1, r7
 800e770:	e065      	b.n	800e83e <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 800e772:	428b      	cmp	r3, r1
 800e774:	d844      	bhi.n	800e800 <ip4_reass+0x290>
      ipr->p = new_p;
 800e776:	6067      	str	r7, [r4, #4]
 800e778:	e7b8      	b.n	800e6ec <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 800e77a:	d041      	beq.n	800e800 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 800e77c:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800e780:	4282      	cmp	r2, r0
 800e782:	d83d      	bhi.n	800e800 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 800e784:	b125      	cbz	r5, 800e790 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 800e786:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 800e788:	428a      	cmp	r2, r1
 800e78a:	bf18      	it	ne
 800e78c:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 800e790:	f8dc 2000 	ldr.w	r2, [ip]
 800e794:	4665      	mov	r5, ip
 800e796:	e769      	b.n	800e66c <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e798:	88eb      	ldrh	r3, [r5, #6]
 800e79a:	4283      	cmp	r3, r0
 800e79c:	d906      	bls.n	800e7ac <ip4_reass+0x23c>
 800e79e:	4b30      	ldr	r3, [pc, #192]	; (800e860 <ip4_reass+0x2f0>)
 800e7a0:	f240 12ab 	movw	r2, #427	; 0x1ab
 800e7a4:	4931      	ldr	r1, [pc, #196]	; (800e86c <ip4_reass+0x2fc>)
 800e7a6:	4830      	ldr	r0, [pc, #192]	; (800e868 <ip4_reass+0x2f8>)
 800e7a8:	f003 ff54 	bl	8012654 <iprintf>
      iprh_prev->next_pbuf = new_p;
 800e7ac:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800e7ae:	88ea      	ldrh	r2, [r5, #6]
 800e7b0:	88b3      	ldrh	r3, [r6, #4]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	e798      	b.n	800e6e8 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800e7b6:	6863      	ldr	r3, [r4, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d0a2      	beq.n	800e702 <ip4_reass+0x192>
 800e7bc:	6859      	ldr	r1, [r3, #4]
 800e7be:	888b      	ldrh	r3, [r1, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d19e      	bne.n	800e702 <ip4_reass+0x192>
        q = iprh->next_pbuf;
 800e7c4:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800e7c6:	b99b      	cbnz	r3, 800e7f0 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 800e7c8:	42b1      	cmp	r1, r6
 800e7ca:	d106      	bne.n	800e7da <ip4_reass+0x26a>
 800e7cc:	4b24      	ldr	r3, [pc, #144]	; (800e860 <ip4_reass+0x2f0>)
 800e7ce:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800e7d2:	4927      	ldr	r1, [pc, #156]	; (800e870 <ip4_reass+0x300>)
 800e7d4:	4824      	ldr	r0, [pc, #144]	; (800e868 <ip4_reass+0x2f8>)
 800e7d6:	f003 ff3d 	bl	8012654 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e7da:	6833      	ldr	r3, [r6, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d092      	beq.n	800e706 <ip4_reass+0x196>
 800e7e0:	4b1f      	ldr	r3, [pc, #124]	; (800e860 <ip4_reass+0x2f0>)
 800e7e2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800e7e6:	4923      	ldr	r1, [pc, #140]	; (800e874 <ip4_reass+0x304>)
 800e7e8:	481f      	ldr	r0, [pc, #124]	; (800e868 <ip4_reass+0x2f8>)
 800e7ea:	f003 ff33 	bl	8012654 <iprintf>
 800e7ee:	e78a      	b.n	800e706 <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 800e7f0:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800e7f2:	88f0      	ldrh	r0, [r6, #6]
 800e7f4:	8893      	ldrh	r3, [r2, #4]
 800e7f6:	4298      	cmp	r0, r3
 800e7f8:	d183      	bne.n	800e702 <ip4_reass+0x192>
          q = iprh->next_pbuf;
 800e7fa:	6813      	ldr	r3, [r2, #0]
 800e7fc:	4616      	mov	r6, r2
 800e7fe:	e7e2      	b.n	800e7c6 <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800e800:	4638      	mov	r0, r7
 800e802:	f000 fe91 	bl	800f528 <pbuf_clen>
 800e806:	4a14      	ldr	r2, [pc, #80]	; (800e858 <ip4_reass+0x2e8>)
 800e808:	8813      	ldrh	r3, [r2, #0]
 800e80a:	1a18      	subs	r0, r3, r0
 800e80c:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 800e80e:	4638      	mov	r0, r7
 800e810:	f000 fcd8 	bl	800f1c4 <pbuf_free>
 800e814:	e742      	b.n	800e69c <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 800e816:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 800e81a:	f06f 0113 	mvn.w	r1, #19
 800e81e:	4638      	mov	r0, r7
 800e820:	f000 fcca 	bl	800f1b8 <pbuf_header>
      pbuf_cat(p, r);
 800e824:	4639      	mov	r1, r7
 800e826:	4628      	mov	r0, r5
 800e828:	f000 fe9a 	bl	800f560 <pbuf_cat>
      r = iprh->next_pbuf;
 800e82c:	f8d8 7000 	ldr.w	r7, [r8]
 800e830:	e797      	b.n	800e762 <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 800e832:	680b      	ldr	r3, [r1, #0]
 800e834:	429c      	cmp	r4, r3
 800e836:	d002      	beq.n	800e83e <ip4_reass+0x2ce>
 800e838:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e83a:	2900      	cmp	r1, #0
 800e83c:	d1f9      	bne.n	800e832 <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e83e:	4620      	mov	r0, r4
 800e840:	f7ff fd80 	bl	800e344 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800e844:	4628      	mov	r0, r5
 800e846:	f000 fe6f 	bl	800f528 <pbuf_clen>
 800e84a:	8833      	ldrh	r3, [r6, #0]
 800e84c:	1a18      	subs	r0, r3, r0
 800e84e:	8030      	strh	r0, [r6, #0]
}
 800e850:	4628      	mov	r0, r5
 800e852:	b003      	add	sp, #12
 800e854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e858:	240001d0 	.word	0x240001d0
 800e85c:	240001d4 	.word	0x240001d4
 800e860:	08013fb5 	.word	0x08013fb5
 800e864:	08013f4f 	.word	0x08013f4f
 800e868:	0801342a 	.word	0x0801342a
 800e86c:	08013f31 	.word	0x08013f31
 800e870:	08013f86 	.word	0x08013f86
 800e874:	08013f93 	.word	0x08013f93
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e878:	88e8      	ldrh	r0, [r5, #6]
 800e87a:	f7fe feba 	bl	800d5f2 <lwip_htons>
 800e87e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800e882:	2800      	cmp	r0, #0
 800e884:	f47f aec2 	bne.w	800e60c <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e888:	89e0      	ldrh	r0, [r4, #14]
 800e88a:	f7fe feb2 	bl	800d5f2 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e88e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800e892:	2800      	cmp	r0, #0
 800e894:	f43f aeba 	beq.w	800e60c <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e898:	462b      	mov	r3, r5
 800e89a:	f104 0208 	add.w	r2, r4, #8
 800e89e:	f105 0114 	add.w	r1, r5, #20
 800e8a2:	f853 0b04 	ldr.w	r0, [r3], #4
 800e8a6:	428b      	cmp	r3, r1
 800e8a8:	f842 0b04 	str.w	r0, [r2], #4
 800e8ac:	d1f9      	bne.n	800e8a2 <ip4_reass+0x332>
 800e8ae:	e6ad      	b.n	800e60c <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e8b0:	4698      	mov	r8, r3
 800e8b2:	e728      	b.n	800e706 <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e8b4:	f1bb 0f00 	cmp.w	fp, #0
 800e8b8:	f43f af23 	beq.w	800e702 <ip4_reass+0x192>
 800e8bc:	f04f 0800 	mov.w	r8, #0
 800e8c0:	e717      	b.n	800e6f2 <ip4_reass+0x182>
 800e8c2:	bf00      	nop

0800e8c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800e8c8:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
 800e8cc:	2308      	movs	r3, #8
{
 800e8ce:	b08b      	sub	sp, #44	; 0x2c
 800e8d0:	4607      	mov	r7, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800e8d2:	f1a8 0814 	sub.w	r8, r8, #20
{
 800e8d6:	468b      	mov	fp, r1
 800e8d8:	9208      	str	r2, [sp, #32]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800e8da:	fb98 f8f3 	sdiv	r8, r8, r3
 800e8de:	fa1f f388 	uxth.w	r3, r8
 800e8e2:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e8e4:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800e8e6:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 800e8e8:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800e8ea:	f006 060f 	and.w	r6, r6, #15
 800e8ee:	00b6      	lsls	r6, r6, #2
 800e8f0:	2e14      	cmp	r6, #20
 800e8f2:	d00b      	beq.n	800e90c <ip4_frag+0x48>
 800e8f4:	4b5a      	ldr	r3, [pc, #360]	; (800ea60 <ip4_frag+0x19c>)
 800e8f6:	f240 22e1 	movw	r2, #737	; 0x2e1
 800e8fa:	495a      	ldr	r1, [pc, #360]	; (800ea64 <ip4_frag+0x1a0>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800e8fc:	485a      	ldr	r0, [pc, #360]	; (800ea68 <ip4_frag+0x1a4>)
 800e8fe:	f003 fea9 	bl	8012654 <iprintf>
 800e902:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800e906:	b00b      	add	sp, #44	; 0x2c
 800e908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e90c:	9b02      	ldr	r3, [sp, #8]
 800e90e:	88d8      	ldrh	r0, [r3, #6]
 800e910:	f7fe fe6f 	bl	800d5f2 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800e914:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800e918:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 800e91c:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800e91e:	d004      	beq.n	800e92a <ip4_frag+0x66>
 800e920:	4b4f      	ldr	r3, [pc, #316]	; (800ea60 <ip4_frag+0x19c>)
 800e922:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e926:	4951      	ldr	r1, [pc, #324]	; (800ea6c <ip4_frag+0x1a8>)
 800e928:	e7e8      	b.n	800e8fc <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 800e92a:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 800e92c:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 800e930:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800e932:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800e936:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 800e938:	9307      	str	r3, [sp, #28]
  while (left) {
 800e93a:	b90d      	cbnz	r5, 800e940 <ip4_frag+0x7c>
  return ERR_OK;
 800e93c:	4628      	mov	r0, r5
 800e93e:	e7e2      	b.n	800e906 <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 800e940:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e942:	2200      	movs	r2, #0
 800e944:	2114      	movs	r1, #20
 800e946:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 800e948:	42ab      	cmp	r3, r5
 800e94a:	bfa8      	it	ge
 800e94c:	462b      	movge	r3, r5
 800e94e:	b29b      	uxth	r3, r3
 800e950:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e952:	f000 fc99 	bl	800f288 <pbuf_alloc>
    if (rambuf == NULL) {
 800e956:	4680      	mov	r8, r0
 800e958:	b370      	cbz	r0, 800e9b8 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e95a:	897b      	ldrh	r3, [r7, #10]
 800e95c:	2b13      	cmp	r3, #19
 800e95e:	d806      	bhi.n	800e96e <ip4_frag+0xaa>
 800e960:	4b3f      	ldr	r3, [pc, #252]	; (800ea60 <ip4_frag+0x19c>)
 800e962:	f240 3209 	movw	r2, #777	; 0x309
 800e966:	4942      	ldr	r1, [pc, #264]	; (800ea70 <ip4_frag+0x1ac>)
 800e968:	483f      	ldr	r0, [pc, #252]	; (800ea68 <ip4_frag+0x1a4>)
 800e96a:	f003 fe73 	bl	8012654 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e96e:	9b02      	ldr	r3, [sp, #8]
 800e970:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e974:	4619      	mov	r1, r3
 800e976:	3114      	adds	r1, #20
 800e978:	f853 0b04 	ldr.w	r0, [r3], #4
 800e97c:	428b      	cmp	r3, r1
 800e97e:	f842 0b04 	str.w	r0, [r2], #4
 800e982:	d1f9      	bne.n	800e978 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e984:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 800e988:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e98c:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 800e98e:	f1b9 0f00 	cmp.w	r9, #0
 800e992:	d037      	beq.n	800ea04 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 800e994:	897c      	ldrh	r4, [r7, #10]
 800e996:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e998:	b2a4      	uxth	r4, r4
 800e99a:	454c      	cmp	r4, r9
 800e99c:	bf28      	it	cs
 800e99e:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 800e9a0:	b914      	cbnz	r4, 800e9a8 <ip4_frag+0xe4>
        p = p->next;
 800e9a2:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800e9a4:	2600      	movs	r6, #0
 800e9a6:	e7f2      	b.n	800e98e <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800e9a8:	2005      	movs	r0, #5
 800e9aa:	f000 fa89 	bl	800eec0 <memp_malloc>
      if (pcr == NULL) {
 800e9ae:	4682      	mov	sl, r0
 800e9b0:	b928      	cbnz	r0, 800e9be <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800e9b2:	4640      	mov	r0, r8
 800e9b4:	f000 fc06 	bl	800f1c4 <pbuf_free>
  return ERR_MEM;
 800e9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9bc:	e7a3      	b.n	800e906 <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e9be:	9401      	str	r4, [sp, #4]
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4621      	mov	r1, r4
 800e9c6:	4433      	add	r3, r6
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2004      	movs	r0, #4
 800e9ce:	f000 fbbb 	bl	800f148 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800e9d2:	b918      	cbnz	r0, 800e9dc <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e9d4:	4650      	mov	r0, sl
 800e9d6:	f7ff fd87 	bl	800e4e8 <ip_frag_free_pbuf_custom_ref>
 800e9da:	e7ea      	b.n	800e9b2 <ip4_frag+0xee>
 800e9dc:	9009      	str	r0, [sp, #36]	; 0x24
      left_to_copy -= newpbuflen;
 800e9de:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 800e9e2:	4638      	mov	r0, r7
 800e9e4:	f000 fda8 	bl	800f538 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e9e8:	4b22      	ldr	r3, [pc, #136]	; (800ea74 <ip4_frag+0x1b0>)
      left_to_copy -= newpbuflen;
 800e9ea:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 800e9ee:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e9f2:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 800e9f6:	4640      	mov	r0, r8
 800e9f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9fa:	f000 fdb1 	bl	800f560 <pbuf_cat>
      if (left_to_copy) {
 800e9fe:	f1b9 0f00 	cmp.w	r9, #0
 800ea02:	d1ce      	bne.n	800e9a2 <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 800ea04:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 800ea06:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 800ea08:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800ea0c:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    poff += newpbuflen;
 800ea10:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 800ea12:	3b13      	subs	r3, #19
    if (!last) {
 800ea14:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800ea16:	bfa8      	it	ge
 800ea18:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ea1c:	f7fe fde9 	bl	800d5f2 <lwip_htons>
 800ea20:	9b03      	ldr	r3, [sp, #12]
 800ea22:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800ea24:	9b05      	ldr	r3, [sp, #20]
 800ea26:	f103 0014 	add.w	r0, r3, #20
 800ea2a:	b280      	uxth	r0, r0
 800ea2c:	f7fe fde1 	bl	800d5f2 <lwip_htons>
 800ea30:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800ea32:	9a03      	ldr	r2, [sp, #12]
    netif->output(netif, rambuf, dest);
 800ea34:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800ea36:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ea38:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800ea3a:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 800ea3c:	7293      	strb	r3, [r2, #10]
 800ea3e:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 800ea40:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ea44:	9a08      	ldr	r2, [sp, #32]
 800ea46:	4798      	blx	r3
    pbuf_free(rambuf);
 800ea48:	4640      	mov	r0, r8
 800ea4a:	f000 fbbb 	bl	800f1c4 <pbuf_free>
    left -= fragsize;
 800ea4e:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 800ea50:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 800ea52:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800ea54:	9b04      	ldr	r3, [sp, #16]
 800ea56:	4413      	add	r3, r2
    left -= fragsize;
 800ea58:	b2ad      	uxth	r5, r5
    ofo += nfb;
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	9304      	str	r3, [sp, #16]
 800ea5e:	e76c      	b.n	800e93a <ip4_frag+0x76>
 800ea60:	08013fb5 	.word	0x08013fb5
 800ea64:	08013ed0 	.word	0x08013ed0
 800ea68:	0801342a 	.word	0x0801342a
 800ea6c:	08013ef7 	.word	0x08013ef7
 800ea70:	08013f11 	.word	0x08013f11
 800ea74:	0800e515 	.word	0x0800e515

0800ea78 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ea78:	4b0b      	ldr	r3, [pc, #44]	; (800eaa8 <mem_init+0x30>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 800ea7a:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ea7c:	4a0b      	ldr	r2, [pc, #44]	; (800eaac <mem_init+0x34>)
 800ea7e:	f023 0303 	bic.w	r3, r3, #3
 800ea82:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 800ea84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 800ea88:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ea8a:	1898      	adds	r0, r3, r2
  mem->used = 0;
 800ea8c:	7119      	strb	r1, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ea8e:	4908      	ldr	r1, [pc, #32]	; (800eab0 <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 800ea90:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ea92:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 800ea94:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 800ea96:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ea9a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ea9e:	4a05      	ldr	r2, [pc, #20]	; (800eab4 <mem_init+0x3c>)
  ram_end->used = 1;
 800eaa0:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 800eaa4:	6013      	str	r3, [r2, #0]
 800eaa6:	4770      	bx	lr
 800eaa8:	240017a7 	.word	0x240017a7
 800eaac:	240001dc 	.word	0x240001dc
 800eab0:	240001e0 	.word	0x240001e0
 800eab4:	240001d8 	.word	0x240001d8

0800eab8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800eab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800eabc:	4604      	mov	r4, r0
 800eabe:	2800      	cmp	r0, #0
 800eac0:	f000 8089 	beq.w	800ebd6 <mem_free+0x11e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800eac4:	0783      	lsls	r3, r0, #30
 800eac6:	d006      	beq.n	800ead6 <mem_free+0x1e>
 800eac8:	4b44      	ldr	r3, [pc, #272]	; (800ebdc <mem_free+0x124>)
 800eaca:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800eace:	4944      	ldr	r1, [pc, #272]	; (800ebe0 <mem_free+0x128>)
 800ead0:	4844      	ldr	r0, [pc, #272]	; (800ebe4 <mem_free+0x12c>)
 800ead2:	f003 fdbf 	bl	8012654 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ead6:	4f44      	ldr	r7, [pc, #272]	; (800ebe8 <mem_free+0x130>)
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	429c      	cmp	r4, r3
 800eadc:	d303      	bcc.n	800eae6 <mem_free+0x2e>
 800eade:	4b43      	ldr	r3, [pc, #268]	; (800ebec <mem_free+0x134>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	429c      	cmp	r4, r3
 800eae4:	d306      	bcc.n	800eaf4 <mem_free+0x3c>
 800eae6:	4b3d      	ldr	r3, [pc, #244]	; (800ebdc <mem_free+0x124>)
 800eae8:	f240 12af 	movw	r2, #431	; 0x1af
 800eaec:	4940      	ldr	r1, [pc, #256]	; (800ebf0 <mem_free+0x138>)
 800eaee:	483d      	ldr	r0, [pc, #244]	; (800ebe4 <mem_free+0x12c>)
 800eaf0:	f003 fdb0 	bl	8012654 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	429c      	cmp	r4, r3
 800eaf8:	d36d      	bcc.n	800ebd6 <mem_free+0x11e>
 800eafa:	4b3c      	ldr	r3, [pc, #240]	; (800ebec <mem_free+0x134>)
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	4698      	mov	r8, r3
 800eb00:	4294      	cmp	r4, r2
 800eb02:	d268      	bcs.n	800ebd6 <mem_free+0x11e>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800eb04:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800eb08:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800eb0c:	b933      	cbnz	r3, 800eb1c <mem_free+0x64>
 800eb0e:	4b33      	ldr	r3, [pc, #204]	; (800ebdc <mem_free+0x124>)
 800eb10:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800eb14:	4937      	ldr	r1, [pc, #220]	; (800ebf4 <mem_free+0x13c>)
 800eb16:	4833      	ldr	r0, [pc, #204]	; (800ebe4 <mem_free+0x12c>)
 800eb18:	f003 fd9c 	bl	8012654 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800eb1c:	2300      	movs	r3, #0

  if (mem < lfree) {
 800eb1e:	4e36      	ldr	r6, [pc, #216]	; (800ebf8 <mem_free+0x140>)
  mem->used = 0;
 800eb20:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800eb24:	6833      	ldr	r3, [r6, #0]
 800eb26:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eb28:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800eb2a:	bf38      	it	cc
 800eb2c:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eb2e:	429d      	cmp	r5, r3
 800eb30:	d206      	bcs.n	800eb40 <mem_free+0x88>
 800eb32:	4b2a      	ldr	r3, [pc, #168]	; (800ebdc <mem_free+0x124>)
 800eb34:	f240 125d 	movw	r2, #349	; 0x15d
 800eb38:	4930      	ldr	r1, [pc, #192]	; (800ebfc <mem_free+0x144>)
 800eb3a:	482a      	ldr	r0, [pc, #168]	; (800ebe4 <mem_free+0x12c>)
 800eb3c:	f003 fd8a 	bl	8012654 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800eb40:	f8d8 3000 	ldr.w	r3, [r8]
 800eb44:	429d      	cmp	r5, r3
 800eb46:	d306      	bcc.n	800eb56 <mem_free+0x9e>
 800eb48:	4b24      	ldr	r3, [pc, #144]	; (800ebdc <mem_free+0x124>)
 800eb4a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800eb4e:	492c      	ldr	r1, [pc, #176]	; (800ec00 <mem_free+0x148>)
 800eb50:	4824      	ldr	r0, [pc, #144]	; (800ebe4 <mem_free+0x12c>)
 800eb52:	f003 fd7f 	bl	8012654 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eb56:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800eb5a:	b133      	cbz	r3, 800eb6a <mem_free+0xb2>
 800eb5c:	4b1f      	ldr	r3, [pc, #124]	; (800ebdc <mem_free+0x124>)
 800eb5e:	f240 125f 	movw	r2, #351	; 0x15f
 800eb62:	4928      	ldr	r1, [pc, #160]	; (800ec04 <mem_free+0x14c>)
 800eb64:	481f      	ldr	r0, [pc, #124]	; (800ebe4 <mem_free+0x12c>)
 800eb66:	f003 fd75 	bl	8012654 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800eb6a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800eb6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eb72:	d906      	bls.n	800eb82 <mem_free+0xca>
 800eb74:	4b19      	ldr	r3, [pc, #100]	; (800ebdc <mem_free+0x124>)
 800eb76:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800eb7a:	4923      	ldr	r1, [pc, #140]	; (800ec08 <mem_free+0x150>)
 800eb7c:	4819      	ldr	r0, [pc, #100]	; (800ebe4 <mem_free+0x12c>)
 800eb7e:	f003 fd69 	bl	8012654 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800eb88:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eb8a:	4295      	cmp	r5, r2
 800eb8c:	d011      	beq.n	800ebb2 <mem_free+0xfa>
 800eb8e:	7910      	ldrb	r0, [r2, #4]
 800eb90:	b978      	cbnz	r0, 800ebb2 <mem_free+0xfa>
 800eb92:	f8d8 0000 	ldr.w	r0, [r8]
 800eb96:	4282      	cmp	r2, r0
 800eb98:	d00b      	beq.n	800ebb2 <mem_free+0xfa>
    if (lfree == nmem) {
 800eb9a:	6830      	ldr	r0, [r6, #0]
 800eb9c:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800eb9e:	5a5a      	ldrh	r2, [r3, r1]
 800eba0:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800eba4:	5a5a      	ldrh	r2, [r3, r1]
 800eba6:	eba5 0103 	sub.w	r1, r5, r3
      lfree = mem;
 800ebaa:	bf08      	it	eq
 800ebac:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800ebae:	441a      	add	r2, r3
 800ebb0:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800ebb2:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 800ebb6:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800ebb8:	428d      	cmp	r5, r1
 800ebba:	d00c      	beq.n	800ebd6 <mem_free+0x11e>
 800ebbc:	7908      	ldrb	r0, [r1, #4]
 800ebbe:	b950      	cbnz	r0, 800ebd6 <mem_free+0x11e>
    if (lfree == mem) {
 800ebc0:	6830      	ldr	r0, [r6, #0]
 800ebc2:	4285      	cmp	r5, r0
      lfree = pmem;
 800ebc4:	bf08      	it	eq
 800ebc6:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 800ebc8:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800ebcc:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800ebce:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800ebd2:	440b      	add	r3, r1
 800ebd4:	805a      	strh	r2, [r3, #2]
 800ebd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebda:	bf00      	nop
 800ebdc:	0801406f 	.word	0x0801406f
 800ebe0:	080140a4 	.word	0x080140a4
 800ebe4:	0801342a 	.word	0x0801342a
 800ebe8:	240001dc 	.word	0x240001dc
 800ebec:	240001e0 	.word	0x240001e0
 800ebf0:	080140c5 	.word	0x080140c5
 800ebf4:	080140dc 	.word	0x080140dc
 800ebf8:	240001d8 	.word	0x240001d8
 800ebfc:	080140f0 	.word	0x080140f0
 800ec00:	08014107 	.word	0x08014107
 800ec04:	08014121 	.word	0x08014121
 800ec08:	0801413c 	.word	0x0801413c

0800ec0c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ec0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ec0e:	3103      	adds	r1, #3
 800ec10:	f64f 75fc 	movw	r5, #65532	; 0xfffc
{
 800ec14:	4604      	mov	r4, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ec16:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 800ec18:	2d0b      	cmp	r5, #11
 800ec1a:	d904      	bls.n	800ec26 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800ec1c:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800ec20:	d902      	bls.n	800ec28 <mem_trim+0x1c>
    return NULL;
 800ec22:	2400      	movs	r4, #0
 800ec24:	e059      	b.n	800ecda <mem_trim+0xce>
    newsize = MIN_SIZE_ALIGNED;
 800ec26:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ec28:	4e2d      	ldr	r6, [pc, #180]	; (800ece0 <mem_trim+0xd4>)
 800ec2a:	6832      	ldr	r2, [r6, #0]
 800ec2c:	42a2      	cmp	r2, r4
 800ec2e:	d803      	bhi.n	800ec38 <mem_trim+0x2c>
 800ec30:	4b2c      	ldr	r3, [pc, #176]	; (800ece4 <mem_trim+0xd8>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	429c      	cmp	r4, r3
 800ec36:	d306      	bcc.n	800ec46 <mem_trim+0x3a>
 800ec38:	4b2b      	ldr	r3, [pc, #172]	; (800ece8 <mem_trim+0xdc>)
 800ec3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ec3e:	492b      	ldr	r1, [pc, #172]	; (800ecec <mem_trim+0xe0>)
 800ec40:	482b      	ldr	r0, [pc, #172]	; (800ecf0 <mem_trim+0xe4>)
 800ec42:	f003 fd07 	bl	8012654 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ec46:	6833      	ldr	r3, [r6, #0]
 800ec48:	429c      	cmp	r4, r3
 800ec4a:	d346      	bcc.n	800ecda <mem_trim+0xce>
 800ec4c:	4a25      	ldr	r2, [pc, #148]	; (800ece4 <mem_trim+0xd8>)
 800ec4e:	6812      	ldr	r2, [r2, #0]
 800ec50:	4294      	cmp	r4, r2
 800ec52:	d242      	bcs.n	800ecda <mem_trim+0xce>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ec54:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ec58:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ec5c:	1ad2      	subs	r2, r2, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ec5e:	f1a0 0108 	sub.w	r1, r0, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ec62:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ec64:	1a89      	subs	r1, r1, r2
 800ec66:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ec68:	42a9      	cmp	r1, r5
 800ec6a:	d219      	bcs.n	800eca0 <mem_trim+0x94>
 800ec6c:	4b1e      	ldr	r3, [pc, #120]	; (800ece8 <mem_trim+0xdc>)
 800ec6e:	f240 2206 	movw	r2, #518	; 0x206
 800ec72:	4920      	ldr	r1, [pc, #128]	; (800ecf4 <mem_trim+0xe8>)
 800ec74:	481e      	ldr	r0, [pc, #120]	; (800ecf0 <mem_trim+0xe4>)
 800ec76:	f003 fced 	bl	8012654 <iprintf>
 800ec7a:	e7d2      	b.n	800ec22 <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ec7c:	f105 0614 	add.w	r6, r5, #20
 800ec80:	428e      	cmp	r6, r1
 800ec82:	d82a      	bhi.n	800ecda <mem_trim+0xce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ec84:	f102 0108 	add.w	r1, r2, #8
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 800ec88:	4e1b      	ldr	r6, [pc, #108]	; (800ecf8 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ec8a:	440d      	add	r5, r1
    if (mem2 < lfree) {
 800ec8c:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ec8e:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ec90:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 800ec92:	42b9      	cmp	r1, r7
      lfree = mem2;
 800ec94:	bf38      	it	cc
 800ec96:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 800ec98:	2600      	movs	r6, #0
 800ec9a:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 800ec9c:	5358      	strh	r0, [r3, r5]
 800ec9e:	e013      	b.n	800ecc8 <mem_trim+0xbc>
  if (newsize == size) {
 800eca0:	d01b      	beq.n	800ecda <mem_trim+0xce>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 800eca2:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 800eca4:	7937      	ldrb	r7, [r6, #4]
 800eca6:	2f00      	cmp	r7, #0
 800eca8:	d1e8      	bne.n	800ec7c <mem_trim+0x70>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ecaa:	f102 0108 	add.w	r1, r2, #8
    next = mem2->next;
 800ecae:	5a1f      	ldrh	r7, [r3, r0]
    if (lfree == mem2) {
 800ecb0:	4811      	ldr	r0, [pc, #68]	; (800ecf8 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ecb2:	440d      	add	r5, r1
    if (lfree == mem2) {
 800ecb4:	6801      	ldr	r1, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ecb6:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 800ecb8:	428e      	cmp	r6, r1
 800ecba:	eb03 0105 	add.w	r1, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 800ecbe:	bf08      	it	eq
 800ecc0:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 800ecc2:	2000      	movs	r0, #0
 800ecc4:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 800ecc6:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 800ecc8:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 800ecca:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ecce:	5b5a      	ldrh	r2, [r3, r5]
 800ecd0:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 800ecd4:	d001      	beq.n	800ecda <mem_trim+0xce>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ecd6:	4413      	add	r3, r2
 800ecd8:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800ecda:	4620      	mov	r0, r4
 800ecdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecde:	bf00      	nop
 800ece0:	240001dc 	.word	0x240001dc
 800ece4:	240001e0 	.word	0x240001e0
 800ece8:	0801406f 	.word	0x0801406f
 800ecec:	08014201 	.word	0x08014201
 800ecf0:	0801342a 	.word	0x0801342a
 800ecf4:	08014218 	.word	0x08014218
 800ecf8:	240001d8 	.word	0x240001d8

0800ecfc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800ecfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800ed00:	b148      	cbz	r0, 800ed16 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800ed02:	3003      	adds	r0, #3
 800ed04:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800ed08:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 800ed0a:	2d0b      	cmp	r5, #11
 800ed0c:	d905      	bls.n	800ed1a <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800ed0e:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800ed12:	d903      	bls.n	800ed1c <mem_malloc+0x20>
    return NULL;
 800ed14:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 800ed16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 800ed1a:	250c      	movs	r5, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ed1c:	4837      	ldr	r0, [pc, #220]	; (800edfc <mem_malloc+0x100>)
 800ed1e:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
 800ed22:	4e37      	ldr	r6, [pc, #220]	; (800ee00 <mem_malloc+0x104>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ed24:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ed28:	6807      	ldr	r7, [r0, #0]
 800ed2a:	6831      	ldr	r1, [r6, #0]
 800ed2c:	1a7b      	subs	r3, r7, r1
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	4543      	cmp	r3, r8
 800ed32:	d2ef      	bcs.n	800ed14 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 800ed34:	18cc      	adds	r4, r1, r3
 800ed36:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 800ed3a:	f894 c004 	ldrb.w	ip, [r4, #4]
 800ed3e:	f1bc 0f00 	cmp.w	ip, #0
 800ed42:	d158      	bne.n	800edf6 <mem_malloc+0xfa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ed44:	eba9 0203 	sub.w	r2, r9, r3
 800ed48:	4472      	add	r2, lr
      if ((!mem->used) &&
 800ed4a:	4295      	cmp	r5, r2
 800ed4c:	d853      	bhi.n	800edf6 <mem_malloc+0xfa>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ed4e:	f105 0814 	add.w	r8, r5, #20
 800ed52:	4542      	cmp	r2, r8
 800ed54:	d349      	bcc.n	800edea <mem_malloc+0xee>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800ed56:	f105 0208 	add.w	r2, r5, #8
 800ed5a:	441a      	add	r2, r3
 800ed5c:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800ed5e:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 800ed62:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 800ed66:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 800ed6a:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 800ed6e:	2301      	movs	r3, #1
          mem->next = ptr2;
 800ed70:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 800ed72:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ed74:	5a8b      	ldrh	r3, [r1, r2]
 800ed76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed7a:	d001      	beq.n	800ed80 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ed7c:	4419      	add	r1, r3
 800ed7e:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 800ed80:	42a7      	cmp	r7, r4
 800ed82:	4f20      	ldr	r7, [pc, #128]	; (800ee04 <mem_malloc+0x108>)
 800ed84:	d111      	bne.n	800edaa <mem_malloc+0xae>
          while (cur->used && cur != ram_end) {
 800ed86:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 800ed88:	4623      	mov	r3, r4
 800ed8a:	6836      	ldr	r6, [r6, #0]
          while (cur->used && cur != ram_end) {
 800ed8c:	791a      	ldrb	r2, [r3, #4]
 800ed8e:	b10a      	cbz	r2, 800ed94 <mem_malloc+0x98>
 800ed90:	428b      	cmp	r3, r1
 800ed92:	d12d      	bne.n	800edf0 <mem_malloc+0xf4>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ed94:	428b      	cmp	r3, r1
          lfree = cur;
 800ed96:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ed98:	d007      	beq.n	800edaa <mem_malloc+0xae>
 800ed9a:	b132      	cbz	r2, 800edaa <mem_malloc+0xae>
 800ed9c:	4b1a      	ldr	r3, [pc, #104]	; (800ee08 <mem_malloc+0x10c>)
 800ed9e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800eda2:	491a      	ldr	r1, [pc, #104]	; (800ee0c <mem_malloc+0x110>)
 800eda4:	481a      	ldr	r0, [pc, #104]	; (800ee10 <mem_malloc+0x114>)
 800eda6:	f003 fc55 	bl	8012654 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800edaa:	3508      	adds	r5, #8
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	4425      	add	r5, r4
 800edb0:	42ab      	cmp	r3, r5
 800edb2:	d206      	bcs.n	800edc2 <mem_malloc+0xc6>
 800edb4:	4b14      	ldr	r3, [pc, #80]	; (800ee08 <mem_malloc+0x10c>)
 800edb6:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800edba:	4916      	ldr	r1, [pc, #88]	; (800ee14 <mem_malloc+0x118>)
 800edbc:	4814      	ldr	r0, [pc, #80]	; (800ee10 <mem_malloc+0x114>)
 800edbe:	f003 fc49 	bl	8012654 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800edc2:	07a3      	lsls	r3, r4, #30
 800edc4:	d00d      	beq.n	800ede2 <mem_malloc+0xe6>
 800edc6:	4b10      	ldr	r3, [pc, #64]	; (800ee08 <mem_malloc+0x10c>)
 800edc8:	f240 22d6 	movw	r2, #726	; 0x2d6
 800edcc:	4912      	ldr	r1, [pc, #72]	; (800ee18 <mem_malloc+0x11c>)
 800edce:	4810      	ldr	r0, [pc, #64]	; (800ee10 <mem_malloc+0x114>)
 800edd0:	f003 fc40 	bl	8012654 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800edd4:	4b0c      	ldr	r3, [pc, #48]	; (800ee08 <mem_malloc+0x10c>)
 800edd6:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800edda:	4910      	ldr	r1, [pc, #64]	; (800ee1c <mem_malloc+0x120>)
 800eddc:	480c      	ldr	r0, [pc, #48]	; (800ee10 <mem_malloc+0x114>)
 800edde:	f003 fc39 	bl	8012654 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800ede2:	f104 0008 	add.w	r0, r4, #8
 800ede6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800edea:	2301      	movs	r3, #1
 800edec:	7123      	strb	r3, [r4, #4]
 800edee:	e7c7      	b.n	800ed80 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 800edf0:	881b      	ldrh	r3, [r3, #0]
 800edf2:	4433      	add	r3, r6
 800edf4:	e7ca      	b.n	800ed8c <mem_malloc+0x90>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800edf6:	4673      	mov	r3, lr
 800edf8:	e79a      	b.n	800ed30 <mem_malloc+0x34>
 800edfa:	bf00      	nop
 800edfc:	240001d8 	.word	0x240001d8
 800ee00:	240001dc 	.word	0x240001dc
 800ee04:	240001e0 	.word	0x240001e0
 800ee08:	0801406f 	.word	0x0801406f
 800ee0c:	08014166 	.word	0x08014166
 800ee10:	0801342a 	.word	0x0801342a
 800ee14:	0801417f 	.word	0x0801417f
 800ee18:	080141af 	.word	0x080141af
 800ee1c:	080141de 	.word	0x080141de

0800ee20 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 800ee20:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ee22:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ee24:	b154      	cbz	r4, 800ee3c <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ee2a:	07a3      	lsls	r3, r4, #30
 800ee2c:	d006      	beq.n	800ee3c <do_memp_malloc_pool.isra.0+0x1c>
 800ee2e:	4b04      	ldr	r3, [pc, #16]	; (800ee40 <do_memp_malloc_pool.isra.0+0x20>)
 800ee30:	f240 1249 	movw	r2, #329	; 0x149
 800ee34:	4903      	ldr	r1, [pc, #12]	; (800ee44 <do_memp_malloc_pool.isra.0+0x24>)
 800ee36:	4804      	ldr	r0, [pc, #16]	; (800ee48 <do_memp_malloc_pool.isra.0+0x28>)
 800ee38:	f003 fc0c 	bl	8012654 <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	bd10      	pop	{r4, pc}
 800ee40:	08014258 	.word	0x08014258
 800ee44:	0801428e 	.word	0x0801428e
 800ee48:	0801342a 	.word	0x0801342a

0800ee4c <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800ee4c:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ee4e:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800ee50:	4605      	mov	r5, r0
 800ee52:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800ee54:	d006      	beq.n	800ee64 <do_memp_free_pool.isra.1+0x18>
 800ee56:	4b06      	ldr	r3, [pc, #24]	; (800ee70 <do_memp_free_pool.isra.1+0x24>)
 800ee58:	f240 129d 	movw	r2, #413	; 0x19d
 800ee5c:	4905      	ldr	r1, [pc, #20]	; (800ee74 <do_memp_free_pool.isra.1+0x28>)
 800ee5e:	4806      	ldr	r0, [pc, #24]	; (800ee78 <do_memp_free_pool.isra.1+0x2c>)
 800ee60:	f003 fbf8 	bl	8012654 <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ee64:	682b      	ldr	r3, [r5, #0]
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800ee6a:	601c      	str	r4, [r3, #0]
 800ee6c:	bd38      	pop	{r3, r4, r5, pc}
 800ee6e:	bf00      	nop
 800ee70:	08014258 	.word	0x08014258
 800ee74:	08014238 	.word	0x08014238
 800ee78:	0801342a 	.word	0x0801342a

0800ee7c <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ee7c:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800ee7e:	2200      	movs	r2, #0
 800ee80:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ee82:	3303      	adds	r3, #3
{
 800ee84:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ee86:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800ee8a:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800ee8c:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800ee8e:	42a2      	cmp	r2, r4
 800ee90:	db00      	blt.n	800ee94 <memp_init_pool+0x18>
}
 800ee92:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800ee94:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800ee96:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800ee98:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ee9a:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800ee9c:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ee9e:	442b      	add	r3, r5
 800eea0:	e7f5      	b.n	800ee8e <memp_init_pool+0x12>
	...

0800eea4 <memp_init>:
{
 800eea4:	b538      	push	{r3, r4, r5, lr}
 800eea6:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 800eea8:	4d04      	ldr	r5, [pc, #16]	; (800eebc <memp_init+0x18>)
 800eeaa:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800eeae:	3401      	adds	r4, #1
 800eeb0:	f7ff ffe4 	bl	800ee7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800eeb4:	2c09      	cmp	r4, #9
 800eeb6:	d1f8      	bne.n	800eeaa <memp_init+0x6>
}
 800eeb8:	bd38      	pop	{r3, r4, r5, pc}
 800eeba:	bf00      	nop
 800eebc:	08014358 	.word	0x08014358

0800eec0 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800eec0:	2808      	cmp	r0, #8
{
 800eec2:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800eec4:	d807      	bhi.n	800eed6 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800eec6:	4b08      	ldr	r3, [pc, #32]	; (800eee8 <memp_malloc+0x28>)
 800eec8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800eecc:	6898      	ldr	r0, [r3, #8]
}
 800eece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800eed2:	f7ff bfa5 	b.w	800ee20 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800eed6:	4b05      	ldr	r3, [pc, #20]	; (800eeec <memp_malloc+0x2c>)
 800eed8:	f240 1287 	movw	r2, #391	; 0x187
 800eedc:	4904      	ldr	r1, [pc, #16]	; (800eef0 <memp_malloc+0x30>)
 800eede:	4805      	ldr	r0, [pc, #20]	; (800eef4 <memp_malloc+0x34>)
 800eee0:	f003 fbb8 	bl	8012654 <iprintf>
}
 800eee4:	2000      	movs	r0, #0
 800eee6:	bd08      	pop	{r3, pc}
 800eee8:	08014358 	.word	0x08014358
 800eeec:	08014258 	.word	0x08014258
 800eef0:	0801433b 	.word	0x0801433b
 800eef4:	0801342a 	.word	0x0801342a

0800eef8 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800eef8:	2808      	cmp	r0, #8
 800eefa:	d906      	bls.n	800ef0a <memp_free+0x12>
 800eefc:	4b07      	ldr	r3, [pc, #28]	; (800ef1c <memp_free+0x24>)
 800eefe:	f240 12db 	movw	r2, #475	; 0x1db
 800ef02:	4907      	ldr	r1, [pc, #28]	; (800ef20 <memp_free+0x28>)
 800ef04:	4807      	ldr	r0, [pc, #28]	; (800ef24 <memp_free+0x2c>)
 800ef06:	f003 bba5 	b.w	8012654 <iprintf>

  if (mem == NULL) {
 800ef0a:	b129      	cbz	r1, 800ef18 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ef0c:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <memp_free+0x30>)
 800ef0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ef12:	3008      	adds	r0, #8
 800ef14:	f7ff bf9a 	b.w	800ee4c <do_memp_free_pool.isra.1>
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	08014258 	.word	0x08014258
 800ef20:	08014320 	.word	0x08014320
 800ef24:	0801342a 	.word	0x0801342a
 800ef28:	08014358 	.word	0x08014358

0800ef2c <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ef2c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
netif_issue_reports(struct netif* netif, u8_t report_type)
 800ef30:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ef32:	071b      	lsls	r3, r3, #28
 800ef34:	d502      	bpl.n	800ef3c <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800ef36:	3104      	adds	r1, #4
 800ef38:	f7fe bd1c 	b.w	800d974 <etharp_request>
 800ef3c:	4770      	bx	lr

0800ef3e <netif_init>:
{
 800ef3e:	4770      	bx	lr

0800ef40 <netif_set_ipaddr>:
{
 800ef40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef42:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800ef44:	460c      	mov	r4, r1
 800ef46:	b1b9      	cbz	r1, 800ef78 <netif_set_ipaddr+0x38>
 800ef48:	680b      	ldr	r3, [r1, #0]
 800ef4a:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800ef4c:	9a01      	ldr	r2, [sp, #4]
 800ef4e:	686b      	ldr	r3, [r5, #4]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d00f      	beq.n	800ef74 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ef54:	1d2e      	adds	r6, r5, #4
 800ef56:	a901      	add	r1, sp, #4
 800ef58:	4630      	mov	r0, r6
 800ef5a:	f001 f9c9 	bl	80102f0 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ef5e:	a901      	add	r1, sp, #4
 800ef60:	4630      	mov	r0, r6
 800ef62:	f003 fa25 	bl	80123b0 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ef66:	b104      	cbz	r4, 800ef6a <netif_set_ipaddr+0x2a>
 800ef68:	6824      	ldr	r4, [r4, #0]
 800ef6a:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ef6c:	b114      	cbz	r4, 800ef74 <netif_set_ipaddr+0x34>
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f7ff ffdc 	bl	800ef2c <netif_issue_reports.part.0>
}
 800ef74:	b002      	add	sp, #8
 800ef76:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800ef78:	4b01      	ldr	r3, [pc, #4]	; (800ef80 <netif_set_ipaddr+0x40>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	e7e5      	b.n	800ef4a <netif_set_ipaddr+0xa>
 800ef7e:	bf00      	nop
 800ef80:	08013ecc 	.word	0x08013ecc

0800ef84 <netif_set_addr>:
{
 800ef84:	b570      	push	{r4, r5, r6, lr}
 800ef86:	4606      	mov	r6, r0
 800ef88:	4615      	mov	r5, r2
 800ef8a:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 800ef8c:	b109      	cbz	r1, 800ef92 <netif_set_addr+0xe>
 800ef8e:	680b      	ldr	r3, [r1, #0]
 800ef90:	b94b      	cbnz	r3, 800efa6 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 800ef92:	4630      	mov	r0, r6
 800ef94:	f7ff ffd4 	bl	800ef40 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ef98:	b105      	cbz	r5, 800ef9c <netif_set_addr+0x18>
 800ef9a:	682d      	ldr	r5, [r5, #0]
 800ef9c:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ef9e:	b104      	cbz	r4, 800efa2 <netif_set_addr+0x1e>
 800efa0:	6824      	ldr	r4, [r4, #0]
 800efa2:	60f4      	str	r4, [r6, #12]
 800efa4:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800efa6:	b102      	cbz	r2, 800efaa <netif_set_addr+0x26>
 800efa8:	6815      	ldr	r5, [r2, #0]
 800efaa:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800efac:	b104      	cbz	r4, 800efb0 <netif_set_addr+0x2c>
 800efae:	6824      	ldr	r4, [r4, #0]
 800efb0:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 800efb2:	4630      	mov	r0, r6
}
 800efb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 800efb8:	f7ff bfc2 	b.w	800ef40 <netif_set_ipaddr>

0800efbc <netif_add>:
{
 800efbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800efc2:	4604      	mov	r4, r0
 800efc4:	460f      	mov	r7, r1
 800efc6:	4690      	mov	r8, r2
 800efc8:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 800efca:	b92e      	cbnz	r6, 800efd8 <netif_add+0x1c>
 800efcc:	4b15      	ldr	r3, [pc, #84]	; (800f024 <netif_add+0x68>)
 800efce:	22fb      	movs	r2, #251	; 0xfb
 800efd0:	4915      	ldr	r1, [pc, #84]	; (800f028 <netif_add+0x6c>)
 800efd2:	4816      	ldr	r0, [pc, #88]	; (800f02c <netif_add+0x70>)
 800efd4:	f003 fb3e 	bl	8012654 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800efd8:	2303      	movs	r3, #3
  netif->num = netif_num++;
 800efda:	4a15      	ldr	r2, [pc, #84]	; (800f030 <netif_add+0x74>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800efdc:	2500      	movs	r5, #0
  netif_set_addr(netif, ipaddr, netmask, gw);
 800efde:	4620      	mov	r0, r4
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800efe0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 800efe4:	9b08      	ldr	r3, [sp, #32]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800efe6:	6065      	str	r5, [r4, #4]
  netif->state = state;
 800efe8:	6223      	str	r3, [r4, #32]
  netif->num = netif_num++;
 800efea:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 800efec:	60a5      	str	r5, [r4, #8]
  netif->num = netif_num++;
 800efee:	1c59      	adds	r1, r3, #1
 800eff0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 800eff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 800eff6:	7011      	strb	r1, [r2, #0]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800eff8:	4642      	mov	r2, r8
  netif->input = input;
 800effa:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800effc:	4639      	mov	r1, r7
  ip_addr_set_zero_ip4(&netif->gw);
 800effe:	60e5      	str	r5, [r4, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f000:	464b      	mov	r3, r9
  netif->flags = 0;
 800f002:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  netif->link_callback = NULL;
 800f006:	61e5      	str	r5, [r4, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f008:	f7ff ffbc 	bl	800ef84 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800f00c:	4620      	mov	r0, r4
 800f00e:	47b0      	blx	r6
 800f010:	b930      	cbnz	r0, 800f020 <netif_add+0x64>
  netif->next = netif_list;
 800f012:	4b08      	ldr	r3, [pc, #32]	; (800f034 <netif_add+0x78>)
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800f018:	601c      	str	r4, [r3, #0]
}
 800f01a:	4620      	mov	r0, r4
 800f01c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800f020:	462c      	mov	r4, r5
 800f022:	e7fa      	b.n	800f01a <netif_add+0x5e>
 800f024:	0801437c 	.word	0x0801437c
 800f028:	080143b3 	.word	0x080143b3
 800f02c:	0801342a 	.word	0x0801342a
 800f030:	24000208 	.word	0x24000208
 800f034:	24004ca4 	.word	0x24004ca4

0800f038 <netif_set_default>:
  netif_default = netif;
 800f038:	4b01      	ldr	r3, [pc, #4]	; (800f040 <netif_set_default+0x8>)
 800f03a:	6018      	str	r0, [r3, #0]
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop
 800f040:	24004ca8 	.word	0x24004ca8

0800f044 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f044:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 800f048:	07d1      	lsls	r1, r2, #31
 800f04a:	d409      	bmi.n	800f060 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 800f04c:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f050:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800f052:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f056:	d503      	bpl.n	800f060 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f058:	6843      	ldr	r3, [r0, #4]
 800f05a:	b10b      	cbz	r3, 800f060 <netif_set_up+0x1c>
 800f05c:	f7ff bf66 	b.w	800ef2c <netif_issue_reports.part.0>
 800f060:	4770      	bx	lr

0800f062 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800f062:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800f066:	07d9      	lsls	r1, r3, #31
 800f068:	d507      	bpl.n	800f07a <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 800f06a:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f06e:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 800f070:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f074:	d501      	bpl.n	800f07a <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 800f076:	f7fe bbcb 	b.w	800d810 <etharp_cleanup_netif>
 800f07a:	4770      	bx	lr

0800f07c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f07c:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f07e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 800f082:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f084:	075a      	lsls	r2, r3, #29
 800f086:	d40f      	bmi.n	800f0a8 <netif_set_link_up+0x2c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f088:	f043 0204 	orr.w	r2, r3, #4

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800f08c:	07db      	lsls	r3, r3, #31
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f08e:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_UP) {
 800f092:	d503      	bpl.n	800f09c <netif_set_link_up+0x20>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f094:	6843      	ldr	r3, [r0, #4]
 800f096:	b10b      	cbz	r3, 800f09c <netif_set_link_up+0x20>
 800f098:	f7ff ff48 	bl	800ef2c <netif_issue_reports.part.0>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
    }
    NETIF_LINK_CALLBACK(netif);
 800f09c:	69e3      	ldr	r3, [r4, #28]
 800f09e:	b11b      	cbz	r3, 800f0a8 <netif_set_link_up+0x2c>
 800f0a0:	4620      	mov	r0, r4
  }
}
 800f0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800f0a6:	4718      	bx	r3
 800f0a8:	bd10      	pop	{r4, pc}
	...

0800f0ac <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f0ac:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d12f      	bne.n	800f114 <pbuf_header_impl+0x68>
 800f0b4:	4b1f      	ldr	r3, [pc, #124]	; (800f134 <pbuf_header_impl+0x88>)
 800f0b6:	f240 223f 	movw	r2, #575	; 0x23f
 800f0ba:	491f      	ldr	r1, [pc, #124]	; (800f138 <pbuf_header_impl+0x8c>)
 800f0bc:	481f      	ldr	r0, [pc, #124]	; (800f13c <pbuf_header_impl+0x90>)
 800f0be:	f003 fac9 	bl	8012654 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800f0c2:	2000      	movs	r0, #0
 800f0c4:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 800f0c6:	b288      	uxth	r0, r1
  type = p->type;
 800f0c8:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 800f0ca:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800f0cc:	b10d      	cbz	r5, 800f0d2 <pbuf_header_impl+0x26>
 800f0ce:	2d03      	cmp	r5, #3
 800f0d0:	d106      	bne.n	800f0e0 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 800f0d2:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f0d4:	f104 0210 	add.w	r2, r4, #16
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d20a      	bcs.n	800f0f2 <pbuf_header_impl+0x46>
      return 1;
 800f0dc:	2001      	movs	r0, #1
 800f0de:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800f0e0:	3d01      	subs	r5, #1
 800f0e2:	2d01      	cmp	r5, #1
 800f0e4:	d811      	bhi.n	800f10a <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800f0e6:	2900      	cmp	r1, #0
 800f0e8:	da0c      	bge.n	800f104 <pbuf_header_impl+0x58>
 800f0ea:	8962      	ldrh	r2, [r4, #10]
 800f0ec:	4282      	cmp	r2, r0
 800f0ee:	d3f5      	bcc.n	800f0dc <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800f0f0:	1a5b      	subs	r3, r3, r1
  p->len += header_size_increment;
 800f0f2:	b289      	uxth	r1, r1
  p->tot_len += header_size_increment;
 800f0f4:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 800f0f6:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 800f0f8:	8963      	ldrh	r3, [r4, #10]
 800f0fa:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 800f0fc:	4401      	add	r1, r0
  p->len += header_size_increment;
 800f0fe:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 800f100:	8121      	strh	r1, [r4, #8]
 800f102:	e7de      	b.n	800f0c2 <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 800f104:	2a00      	cmp	r2, #0
 800f106:	d1f3      	bne.n	800f0f0 <pbuf_header_impl+0x44>
 800f108:	e7e8      	b.n	800f0dc <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 800f10a:	4b0a      	ldr	r3, [pc, #40]	; (800f134 <pbuf_header_impl+0x88>)
 800f10c:	f240 2277 	movw	r2, #631	; 0x277
 800f110:	490b      	ldr	r1, [pc, #44]	; (800f140 <pbuf_header_impl+0x94>)
 800f112:	e00b      	b.n	800f12c <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 800f114:	2900      	cmp	r1, #0
 800f116:	d0d4      	beq.n	800f0c2 <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 800f118:	dad5      	bge.n	800f0c6 <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 800f11a:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f11c:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 800f11e:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f120:	4283      	cmp	r3, r0
 800f122:	d2d1      	bcs.n	800f0c8 <pbuf_header_impl+0x1c>
 800f124:	4b03      	ldr	r3, [pc, #12]	; (800f134 <pbuf_header_impl+0x88>)
 800f126:	f240 2247 	movw	r2, #583	; 0x247
 800f12a:	4906      	ldr	r1, [pc, #24]	; (800f144 <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 800f12c:	4803      	ldr	r0, [pc, #12]	; (800f13c <pbuf_header_impl+0x90>)
 800f12e:	f003 fa91 	bl	8012654 <iprintf>
 800f132:	e7d3      	b.n	800f0dc <pbuf_header_impl+0x30>
 800f134:	0801462f 	.word	0x0801462f
 800f138:	0801469f 	.word	0x0801469f
 800f13c:	0801342a 	.word	0x0801342a
 800f140:	08014683 	.word	0x08014683
 800f144:	08014665 	.word	0x08014665

0800f148 <pbuf_alloced_custom>:
{
 800f148:	b570      	push	{r4, r5, r6, lr}
 800f14a:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 800f14c:	2804      	cmp	r0, #4
 800f14e:	d81e      	bhi.n	800f18e <pbuf_alloced_custom+0x46>
 800f150:	e8df f000 	tbb	[pc, r0]
 800f154:	1b280326 	.word	0x1b280326
 800f158:	1b          	.byte	0x1b
 800f159:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f15a:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f15c:	3403      	adds	r4, #3
 800f15e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800f162:	f024 0403 	bic.w	r4, r4, #3
 800f166:	190e      	adds	r6, r1, r4
 800f168:	4286      	cmp	r6, r0
 800f16a:	f04f 0000 	mov.w	r0, #0
 800f16e:	d80b      	bhi.n	800f188 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 800f170:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 800f172:	b1cd      	cbz	r5, 800f1a8 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f174:	442c      	add	r4, r5
 800f176:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800f178:	2002      	movs	r0, #2
  p->pbuf.type = type;
 800f17a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800f17c:	2201      	movs	r2, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 800f17e:	8119      	strh	r1, [r3, #8]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800f180:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 800f182:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 800f184:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 800f186:	81da      	strh	r2, [r3, #14]
}
 800f188:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 800f18a:	2400      	movs	r4, #0
    break;
 800f18c:	e7e6      	b.n	800f15c <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800f18e:	4b07      	ldr	r3, [pc, #28]	; (800f1ac <pbuf_alloced_custom+0x64>)
 800f190:	f240 12c5 	movw	r2, #453	; 0x1c5
 800f194:	4906      	ldr	r1, [pc, #24]	; (800f1b0 <pbuf_alloced_custom+0x68>)
 800f196:	4807      	ldr	r0, [pc, #28]	; (800f1b4 <pbuf_alloced_custom+0x6c>)
 800f198:	f003 fa5c 	bl	8012654 <iprintf>
    return NULL;
 800f19c:	2000      	movs	r0, #0
 800f19e:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f1a0:	2436      	movs	r4, #54	; 0x36
 800f1a2:	e7db      	b.n	800f15c <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f1a4:	240e      	movs	r4, #14
 800f1a6:	e7d9      	b.n	800f15c <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 800f1a8:	605d      	str	r5, [r3, #4]
 800f1aa:	e7e5      	b.n	800f178 <pbuf_alloced_custom+0x30>
 800f1ac:	0801462f 	.word	0x0801462f
 800f1b0:	08014472 	.word	0x08014472
 800f1b4:	0801342a 	.word	0x0801342a

0800f1b8 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f7ff bf77 	b.w	800f0ac <pbuf_header_impl>

0800f1be <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f7ff bf74 	b.w	800f0ac <pbuf_header_impl>

0800f1c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	b950      	cbnz	r0, 800f1e2 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f1cc:	4626      	mov	r6, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800f1ce:	4b28      	ldr	r3, [pc, #160]	; (800f270 <pbuf_free+0xac>)
 800f1d0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f1d4:	4927      	ldr	r1, [pc, #156]	; (800f274 <pbuf_free+0xb0>)
 800f1d6:	4828      	ldr	r0, [pc, #160]	; (800f278 <pbuf_free+0xb4>)
 800f1d8:	f003 fa3c 	bl	8012654 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800f1dc:	4630      	mov	r0, r6
 800f1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 800f1e2:	7b03      	ldrb	r3, [r0, #12]
 800f1e4:	2b03      	cmp	r3, #3
 800f1e6:	d906      	bls.n	800f1f6 <pbuf_free+0x32>
 800f1e8:	4b21      	ldr	r3, [pc, #132]	; (800f270 <pbuf_free+0xac>)
 800f1ea:	f240 22de 	movw	r2, #734	; 0x2de
 800f1ee:	4923      	ldr	r1, [pc, #140]	; (800f27c <pbuf_free+0xb8>)
 800f1f0:	4821      	ldr	r0, [pc, #132]	; (800f278 <pbuf_free+0xb4>)
 800f1f2:	f003 fa2f 	bl	8012654 <iprintf>
{
 800f1f6:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f1f8:	4f1d      	ldr	r7, [pc, #116]	; (800f270 <pbuf_free+0xac>)
 800f1fa:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800f284 <pbuf_free+0xc0>
 800f1fe:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800f278 <pbuf_free+0xb4>
 800f202:	b2ee      	uxtb	r6, r5
  while (p != NULL) {
 800f204:	2c00      	cmp	r4, #0
 800f206:	d0e9      	beq.n	800f1dc <pbuf_free+0x18>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f208:	89e3      	ldrh	r3, [r4, #14]
 800f20a:	b933      	cbnz	r3, 800f21a <pbuf_free+0x56>
 800f20c:	463b      	mov	r3, r7
 800f20e:	f240 22eb 	movw	r2, #747	; 0x2eb
 800f212:	4649      	mov	r1, r9
 800f214:	4640      	mov	r0, r8
 800f216:	f003 fa1d 	bl	8012654 <iprintf>
    ref = --(p->ref);
 800f21a:	89e3      	ldrh	r3, [r4, #14]
 800f21c:	3b01      	subs	r3, #1
 800f21e:	b29b      	uxth	r3, r3
 800f220:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1da      	bne.n	800f1dc <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f226:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800f228:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f22a:	079b      	lsls	r3, r3, #30
 800f22c:	d50e      	bpl.n	800f24c <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f22e:	6923      	ldr	r3, [r4, #16]
 800f230:	b933      	cbnz	r3, 800f240 <pbuf_free+0x7c>
 800f232:	463b      	mov	r3, r7
 800f234:	f240 22f9 	movw	r2, #761	; 0x2f9
 800f238:	4911      	ldr	r1, [pc, #68]	; (800f280 <pbuf_free+0xbc>)
 800f23a:	4640      	mov	r0, r8
 800f23c:	f003 fa0a 	bl	8012654 <iprintf>
        pc->custom_free_function(p);
 800f240:	6923      	ldr	r3, [r4, #16]
 800f242:	4620      	mov	r0, r4
 800f244:	4798      	blx	r3
 800f246:	3501      	adds	r5, #1
      p = q;
 800f248:	4634      	mov	r4, r6
 800f24a:	e7da      	b.n	800f202 <pbuf_free+0x3e>
      type = p->type;
 800f24c:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 800f24e:	2b03      	cmp	r3, #3
 800f250:	d104      	bne.n	800f25c <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 800f252:	4621      	mov	r1, r4
 800f254:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 800f256:	f7ff fe4f 	bl	800eef8 <memp_free>
 800f25a:	e7f4      	b.n	800f246 <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800f25c:	3b01      	subs	r3, #1
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d802      	bhi.n	800f268 <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 800f262:	4621      	mov	r1, r4
 800f264:	2007      	movs	r0, #7
 800f266:	e7f6      	b.n	800f256 <pbuf_free+0x92>
          mem_free(p);
 800f268:	4620      	mov	r0, r4
 800f26a:	f7ff fc25 	bl	800eab8 <mem_free>
 800f26e:	e7ea      	b.n	800f246 <pbuf_free+0x82>
 800f270:	0801462f 	.word	0x0801462f
 800f274:	0801469f 	.word	0x0801469f
 800f278:	0801342a 	.word	0x0801342a
 800f27c:	080145e3 	.word	0x080145e3
 800f280:	0801460e 	.word	0x0801460e
 800f284:	080145f8 	.word	0x080145f8

0800f288 <pbuf_alloc>:
{
 800f288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	460e      	mov	r6, r1
 800f28e:	4617      	mov	r7, r2
  switch (layer) {
 800f290:	2804      	cmp	r0, #4
 800f292:	d80e      	bhi.n	800f2b2 <pbuf_alloc+0x2a>
 800f294:	e8df f000 	tbb	[pc, r0]
 800f298:	0b170315 	.word	0x0b170315
 800f29c:	0b          	.byte	0x0b
 800f29d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f29e:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 800f2a0:	2f03      	cmp	r7, #3
 800f2a2:	f200 80bb 	bhi.w	800f41c <pbuf_alloc+0x194>
 800f2a6:	e8df f007 	tbb	[pc, r7]
 800f2aa:	ac91      	.short	0xac91
 800f2ac:	10ac      	.short	0x10ac
    offset = 0;
 800f2ae:	2500      	movs	r5, #0
    break;
 800f2b0:	e7f6      	b.n	800f2a0 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800f2b2:	4b5d      	ldr	r3, [pc, #372]	; (800f428 <pbuf_alloc+0x1a0>)
 800f2b4:	f44f 728b 	mov.w	r2, #278	; 0x116
 800f2b8:	495c      	ldr	r1, [pc, #368]	; (800f42c <pbuf_alloc+0x1a4>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f2ba:	485d      	ldr	r0, [pc, #372]	; (800f430 <pbuf_alloc+0x1a8>)
 800f2bc:	f003 f9ca 	bl	8012654 <iprintf>
 800f2c0:	e04a      	b.n	800f358 <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f2c2:	2536      	movs	r5, #54	; 0x36
 800f2c4:	e7ec      	b.n	800f2a0 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f2c6:	250e      	movs	r5, #14
 800f2c8:	e7ea      	b.n	800f2a0 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f2ca:	2008      	movs	r0, #8
 800f2cc:	f7ff fdf8 	bl	800eec0 <memp_malloc>
    if (p == NULL) {
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	b928      	cbnz	r0, 800f2e0 <pbuf_alloc+0x58>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	4b57      	ldr	r3, [pc, #348]	; (800f434 <pbuf_alloc+0x1ac>)
 800f2d8:	701a      	strb	r2, [r3, #0]
}
 800f2da:	4620      	mov	r0, r4
 800f2dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 800f2e0:	2303      	movs	r3, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f2e2:	f500 7718 	add.w	r7, r0, #608	; 0x260
    p->tot_len = length;
 800f2e6:	8106      	strh	r6, [r0, #8]
    p->type = type;
 800f2e8:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f2ee:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f2f0:	3503      	adds	r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f2f2:	3313      	adds	r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f2f4:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f2f8:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f2fc:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f300:	6043      	str	r3, [r0, #4]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f302:	42b5      	cmp	r5, r6
 800f304:	bf28      	it	cs
 800f306:	4635      	movcs	r5, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f308:	442b      	add	r3, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f30a:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f30c:	429f      	cmp	r7, r3
 800f30e:	d206      	bcs.n	800f31e <pbuf_alloc+0x96>
 800f310:	4b45      	ldr	r3, [pc, #276]	; (800f428 <pbuf_alloc+0x1a0>)
 800f312:	f44f 7298 	mov.w	r2, #304	; 0x130
 800f316:	4948      	ldr	r1, [pc, #288]	; (800f438 <pbuf_alloc+0x1b0>)
 800f318:	4845      	ldr	r0, [pc, #276]	; (800f430 <pbuf_alloc+0x1a8>)
 800f31a:	f003 f99b 	bl	8012654 <iprintf>
    p->ref = 1;
 800f31e:	2301      	movs	r3, #1
    while (rem_len > 0) {
 800f320:	46a3      	mov	fp, r4
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f322:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800f428 <pbuf_alloc+0x1a0>
    p->ref = 1;
 800f326:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 800f328:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f32a:	f8df a118 	ldr.w	sl, [pc, #280]	; 800f444 <pbuf_alloc+0x1bc>
    rem_len = length - p->len;
 800f32e:	1af6      	subs	r6, r6, r3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f330:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800f430 <pbuf_alloc+0x1a8>
    while (rem_len > 0) {
 800f334:	2e00      	cmp	r6, #0
 800f336:	dc04      	bgt.n	800f342 <pbuf_alloc+0xba>
  p->ref = 1;
 800f338:	2301      	movs	r3, #1
 800f33a:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 800f33c:	2300      	movs	r3, #0
 800f33e:	7363      	strb	r3, [r4, #13]
  return p;
 800f340:	e7cb      	b.n	800f2da <pbuf_alloc+0x52>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f342:	2008      	movs	r0, #8
 800f344:	f7ff fdbc 	bl	800eec0 <memp_malloc>
      if (q == NULL) {
 800f348:	4605      	mov	r5, r0
 800f34a:	b938      	cbnz	r0, 800f35c <pbuf_alloc+0xd4>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800f34c:	2201      	movs	r2, #1
 800f34e:	4b39      	ldr	r3, [pc, #228]	; (800f434 <pbuf_alloc+0x1ac>)
        pbuf_free(p);
 800f350:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800f352:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 800f354:	f7ff ff36 	bl	800f1c4 <pbuf_free>
    return NULL;
 800f358:	2400      	movs	r4, #0
 800f35a:	e7be      	b.n	800f2da <pbuf_alloc+0x52>
      q->type = type;
 800f35c:	2303      	movs	r3, #3
 800f35e:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 800f360:	2300      	movs	r3, #0
 800f362:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 800f364:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f366:	f64f 73ff 	movw	r3, #65535	; 0xffff
      r->next = q;
 800f36a:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f36e:	429e      	cmp	r6, r3
 800f370:	d106      	bne.n	800f380 <pbuf_alloc+0xf8>
 800f372:	4643      	mov	r3, r8
 800f374:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800f378:	4651      	mov	r1, sl
 800f37a:	4648      	mov	r0, r9
 800f37c:	f003 f96a 	bl	8012654 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800f380:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800f382:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 800f386:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800f388:	bf28      	it	cs
 800f38a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800f38e:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800f390:	f105 0310 	add.w	r3, r5, #16
 800f394:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f396:	079b      	lsls	r3, r3, #30
 800f398:	d006      	beq.n	800f3a8 <pbuf_alloc+0x120>
 800f39a:	4643      	mov	r3, r8
 800f39c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800f3a0:	4926      	ldr	r1, [pc, #152]	; (800f43c <pbuf_alloc+0x1b4>)
 800f3a2:	4648      	mov	r0, r9
 800f3a4:	f003 f956 	bl	8012654 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f3a8:	8962      	ldrh	r2, [r4, #10]
 800f3aa:	6863      	ldr	r3, [r4, #4]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	429f      	cmp	r7, r3
 800f3b0:	d206      	bcs.n	800f3c0 <pbuf_alloc+0x138>
 800f3b2:	4643      	mov	r3, r8
 800f3b4:	f240 1255 	movw	r2, #341	; 0x155
 800f3b8:	491f      	ldr	r1, [pc, #124]	; (800f438 <pbuf_alloc+0x1b0>)
 800f3ba:	4648      	mov	r0, r9
 800f3bc:	f003 f94a 	bl	8012654 <iprintf>
      q->ref = 1;
 800f3c0:	2301      	movs	r3, #1
      rem_len -= q->len;
 800f3c2:	46ab      	mov	fp, r5
      q->ref = 1;
 800f3c4:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 800f3c6:	896b      	ldrh	r3, [r5, #10]
 800f3c8:	1af6      	subs	r6, r6, r3
 800f3ca:	e7b3      	b.n	800f334 <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800f3cc:	f105 0013 	add.w	r0, r5, #19
 800f3d0:	1cf3      	adds	r3, r6, #3
 800f3d2:	f020 0003 	bic.w	r0, r0, #3
 800f3d6:	f023 0303 	bic.w	r3, r3, #3
 800f3da:	4418      	add	r0, r3
 800f3dc:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800f3de:	4298      	cmp	r0, r3
 800f3e0:	d3ba      	bcc.n	800f358 <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 800f3e2:	f7ff fc8b 	bl	800ecfc <mem_malloc>
    if (p == NULL) {
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	d0b5      	beq.n	800f358 <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800f3ec:	4405      	add	r5, r0
    p->next = NULL;
 800f3ee:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800f3f0:	8106      	strh	r6, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800f3f2:	3513      	adds	r5, #19
    p->len = p->tot_len = length;
 800f3f4:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800f3f6:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800f3f8:	f025 0503 	bic.w	r5, r5, #3
    p->type = type;
 800f3fc:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800f3fe:	6045      	str	r5, [r0, #4]
 800f400:	e79a      	b.n	800f338 <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f402:	2007      	movs	r0, #7
 800f404:	f7ff fd5c 	bl	800eec0 <memp_malloc>
    if (p == NULL) {
 800f408:	4604      	mov	r4, r0
 800f40a:	2800      	cmp	r0, #0
 800f40c:	d0a4      	beq.n	800f358 <pbuf_alloc+0xd0>
    p->payload = NULL;
 800f40e:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800f410:	8106      	strh	r6, [r0, #8]
 800f412:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 800f414:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 800f416:	6003      	str	r3, [r0, #0]
    p->type = type;
 800f418:	7307      	strb	r7, [r0, #12]
    break;
 800f41a:	e78d      	b.n	800f338 <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f41c:	4b02      	ldr	r3, [pc, #8]	; (800f428 <pbuf_alloc+0x1a0>)
 800f41e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800f422:	4907      	ldr	r1, [pc, #28]	; (800f440 <pbuf_alloc+0x1b8>)
 800f424:	e749      	b.n	800f2ba <pbuf_alloc+0x32>
 800f426:	bf00      	nop
 800f428:	0801462f 	.word	0x0801462f
 800f42c:	080143ca 	.word	0x080143ca
 800f430:	0801342a 	.word	0x0801342a
 800f434:	24004cac 	.word	0x24004cac
 800f438:	080143e5 	.word	0x080143e5
 800f43c:	0801442a 	.word	0x0801442a
 800f440:	08014457 	.word	0x08014457
 800f444:	08014416 	.word	0x08014416

0800f448 <pbuf_realloc>:
{
 800f448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f44c:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f44e:	4604      	mov	r4, r0
 800f450:	b930      	cbnz	r0, 800f460 <pbuf_realloc+0x18>
 800f452:	4b2e      	ldr	r3, [pc, #184]	; (800f50c <pbuf_realloc+0xc4>)
 800f454:	f240 12f3 	movw	r2, #499	; 0x1f3
 800f458:	492d      	ldr	r1, [pc, #180]	; (800f510 <pbuf_realloc+0xc8>)
 800f45a:	482e      	ldr	r0, [pc, #184]	; (800f514 <pbuf_realloc+0xcc>)
 800f45c:	f003 f8fa 	bl	8012654 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800f460:	7b23      	ldrb	r3, [r4, #12]
 800f462:	2b03      	cmp	r3, #3
 800f464:	d906      	bls.n	800f474 <pbuf_realloc+0x2c>
 800f466:	4b29      	ldr	r3, [pc, #164]	; (800f50c <pbuf_realloc+0xc4>)
 800f468:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f46c:	492a      	ldr	r1, [pc, #168]	; (800f518 <pbuf_realloc+0xd0>)
 800f46e:	4829      	ldr	r0, [pc, #164]	; (800f514 <pbuf_realloc+0xcc>)
 800f470:	f003 f8f0 	bl	8012654 <iprintf>
  if (new_len >= p->tot_len) {
 800f474:	8926      	ldrh	r6, [r4, #8]
 800f476:	42ae      	cmp	r6, r5
 800f478:	d945      	bls.n	800f506 <pbuf_realloc+0xbe>
  grow = new_len - p->tot_len;
 800f47a:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800f47c:	4f23      	ldr	r7, [pc, #140]	; (800f50c <pbuf_realloc+0xc4>)
 800f47e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800f524 <pbuf_realloc+0xdc>
 800f482:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800f514 <pbuf_realloc+0xcc>
  while (rem_len > q->len) {
 800f486:	8963      	ldrh	r3, [r4, #10]
 800f488:	429d      	cmp	r5, r3
 800f48a:	d819      	bhi.n	800f4c0 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800f48c:	7b22      	ldrb	r2, [r4, #12]
 800f48e:	2a00      	cmp	r2, #0
 800f490:	d131      	bne.n	800f4f6 <pbuf_realloc+0xae>
 800f492:	429d      	cmp	r5, r3
 800f494:	d02f      	beq.n	800f4f6 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f496:	7b63      	ldrb	r3, [r4, #13]
 800f498:	079b      	lsls	r3, r3, #30
 800f49a:	d42c      	bmi.n	800f4f6 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800f49c:	6861      	ldr	r1, [r4, #4]
 800f49e:	4620      	mov	r0, r4
 800f4a0:	1b09      	subs	r1, r1, r4
 800f4a2:	4429      	add	r1, r5
 800f4a4:	b289      	uxth	r1, r1
 800f4a6:	f7ff fbb1 	bl	800ec0c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	bb18      	cbnz	r0, 800f4f6 <pbuf_realloc+0xae>
 800f4ae:	4b17      	ldr	r3, [pc, #92]	; (800f50c <pbuf_realloc+0xc4>)
 800f4b0:	f240 221d 	movw	r2, #541	; 0x21d
 800f4b4:	4919      	ldr	r1, [pc, #100]	; (800f51c <pbuf_realloc+0xd4>)
 800f4b6:	4817      	ldr	r0, [pc, #92]	; (800f514 <pbuf_realloc+0xcc>)
 800f4b8:	f003 f8cc 	bl	8012654 <iprintf>
  q->len = rem_len;
 800f4bc:	8164      	strh	r4, [r4, #10]
 800f4be:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 800f4c0:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800f4c2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f4c6:	429e      	cmp	r6, r3
    rem_len -= q->len;
 800f4c8:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800f4ca:	dd06      	ble.n	800f4da <pbuf_realloc+0x92>
 800f4cc:	463b      	mov	r3, r7
 800f4ce:	f240 220b 	movw	r2, #523	; 0x20b
 800f4d2:	4649      	mov	r1, r9
 800f4d4:	4640      	mov	r0, r8
 800f4d6:	f003 f8bd 	bl	8012654 <iprintf>
    q->tot_len += (u16_t)grow;
 800f4da:	8923      	ldrh	r3, [r4, #8]
 800f4dc:	4433      	add	r3, r6
 800f4de:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800f4e0:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f4e2:	2c00      	cmp	r4, #0
 800f4e4:	d1cf      	bne.n	800f486 <pbuf_realloc+0x3e>
 800f4e6:	463b      	mov	r3, r7
 800f4e8:	f240 220f 	movw	r2, #527	; 0x20f
 800f4ec:	490c      	ldr	r1, [pc, #48]	; (800f520 <pbuf_realloc+0xd8>)
 800f4ee:	4640      	mov	r0, r8
 800f4f0:	f003 f8b0 	bl	8012654 <iprintf>
 800f4f4:	e7c7      	b.n	800f486 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 800f4f6:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800f4f8:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800f4fa:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800f4fc:	b108      	cbz	r0, 800f502 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 800f4fe:	f7ff fe61 	bl	800f1c4 <pbuf_free>
  q->next = NULL;
 800f502:	2300      	movs	r3, #0
 800f504:	6023      	str	r3, [r4, #0]
 800f506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f50a:	bf00      	nop
 800f50c:	0801462f 	.word	0x0801462f
 800f510:	08014691 	.word	0x08014691
 800f514:	0801342a 	.word	0x0801342a
 800f518:	080146a9 	.word	0x080146a9
 800f51c:	080146ed 	.word	0x080146ed
 800f520:	080146d5 	.word	0x080146d5
 800f524:	080146c4 	.word	0x080146c4

0800f528 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f528:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800f52a:	2200      	movs	r2, #0
 800f52c:	b290      	uxth	r0, r2
 800f52e:	3201      	adds	r2, #1
 800f530:	b903      	cbnz	r3, 800f534 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800f532:	4770      	bx	lr
    p = p->next;
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	e7f9      	b.n	800f52c <pbuf_clen+0x4>

0800f538 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800f538:	b158      	cbz	r0, 800f552 <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 800f53a:	89c3      	ldrh	r3, [r0, #14]
 800f53c:	3301      	adds	r3, #1
 800f53e:	b29b      	uxth	r3, r3
 800f540:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f542:	b933      	cbnz	r3, 800f552 <pbuf_ref+0x1a>
 800f544:	4b03      	ldr	r3, [pc, #12]	; (800f554 <pbuf_ref+0x1c>)
 800f546:	f240 3239 	movw	r2, #825	; 0x339
 800f54a:	4903      	ldr	r1, [pc, #12]	; (800f558 <pbuf_ref+0x20>)
 800f54c:	4803      	ldr	r0, [pc, #12]	; (800f55c <pbuf_ref+0x24>)
 800f54e:	f003 b881 	b.w	8012654 <iprintf>
 800f552:	4770      	bx	lr
 800f554:	0801462f 	.word	0x0801462f
 800f558:	08014709 	.word	0x08014709
 800f55c:	0801342a 	.word	0x0801342a

0800f560 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f564:	4604      	mov	r4, r0
 800f566:	b100      	cbz	r0, 800f56a <pbuf_cat+0xa>
 800f568:	b969      	cbnz	r1, 800f586 <pbuf_cat+0x26>
 800f56a:	4b15      	ldr	r3, [pc, #84]	; (800f5c0 <pbuf_cat+0x60>)
 800f56c:	f240 324d 	movw	r2, #845	; 0x34d
 800f570:	4914      	ldr	r1, [pc, #80]	; (800f5c4 <pbuf_cat+0x64>)
 800f572:	4815      	ldr	r0, [pc, #84]	; (800f5c8 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f578:	f003 b86c 	b.w	8012654 <iprintf>
    p->tot_len += t->tot_len;
 800f57c:	8923      	ldrh	r3, [r4, #8]
 800f57e:	8929      	ldrh	r1, [r5, #8]
 800f580:	440b      	add	r3, r1
 800f582:	8123      	strh	r3, [r4, #8]
 800f584:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800f586:	6822      	ldr	r2, [r4, #0]
 800f588:	2a00      	cmp	r2, #0
 800f58a:	d1f7      	bne.n	800f57c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f58c:	8922      	ldrh	r2, [r4, #8]
 800f58e:	8963      	ldrh	r3, [r4, #10]
 800f590:	429a      	cmp	r2, r3
 800f592:	d006      	beq.n	800f5a2 <pbuf_cat+0x42>
 800f594:	4b0a      	ldr	r3, [pc, #40]	; (800f5c0 <pbuf_cat+0x60>)
 800f596:	f240 3255 	movw	r2, #853	; 0x355
 800f59a:	490c      	ldr	r1, [pc, #48]	; (800f5cc <pbuf_cat+0x6c>)
 800f59c:	480a      	ldr	r0, [pc, #40]	; (800f5c8 <pbuf_cat+0x68>)
 800f59e:	f003 f859 	bl	8012654 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	b133      	cbz	r3, 800f5b4 <pbuf_cat+0x54>
 800f5a6:	4b06      	ldr	r3, [pc, #24]	; (800f5c0 <pbuf_cat+0x60>)
 800f5a8:	f240 3256 	movw	r2, #854	; 0x356
 800f5ac:	4908      	ldr	r1, [pc, #32]	; (800f5d0 <pbuf_cat+0x70>)
 800f5ae:	4806      	ldr	r0, [pc, #24]	; (800f5c8 <pbuf_cat+0x68>)
 800f5b0:	f003 f850 	bl	8012654 <iprintf>
  p->tot_len += t->tot_len;
 800f5b4:	892a      	ldrh	r2, [r5, #8]
 800f5b6:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800f5b8:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 800f5ba:	4413      	add	r3, r2
 800f5bc:	8123      	strh	r3, [r4, #8]
  p->next = t;
 800f5be:	bd70      	pop	{r4, r5, r6, pc}
 800f5c0:	0801462f 	.word	0x0801462f
 800f5c4:	08014496 	.word	0x08014496
 800f5c8:	0801342a 	.word	0x0801342a
 800f5cc:	080144cb 	.word	0x080144cb
 800f5d0:	080144f8 	.word	0x080144f8

0800f5d4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f5d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d8:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f5da:	4605      	mov	r5, r0
 800f5dc:	b120      	cbz	r0, 800f5e8 <pbuf_copy+0x14>
 800f5de:	b119      	cbz	r1, 800f5e8 <pbuf_copy+0x14>
 800f5e0:	8902      	ldrh	r2, [r0, #8]
 800f5e2:	890b      	ldrh	r3, [r1, #8]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d20a      	bcs.n	800f5fe <pbuf_copy+0x2a>
 800f5e8:	4b38      	ldr	r3, [pc, #224]	; (800f6cc <pbuf_copy+0xf8>)
 800f5ea:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f5ee:	4938      	ldr	r1, [pc, #224]	; (800f6d0 <pbuf_copy+0xfc>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800f5f0:	4838      	ldr	r0, [pc, #224]	; (800f6d4 <pbuf_copy+0x100>)
 800f5f2:	f003 f82f 	bl	8012654 <iprintf>
 800f5f6:	f06f 000f 	mvn.w	r0, #15
 800f5fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5fe:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f602:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800f6cc <pbuf_copy+0xf8>
 800f606:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 800f6e4 <pbuf_copy+0x110>
 800f60a:	465f      	mov	r7, fp
 800f60c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800f6d4 <pbuf_copy+0x100>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f610:	896e      	ldrh	r6, [r5, #10]
 800f612:	8963      	ldrh	r3, [r4, #10]
 800f614:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800f616:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f618:	eba3 030b 	sub.w	r3, r3, fp
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800f61c:	6861      	ldr	r1, [r4, #4]
 800f61e:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f620:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800f622:	4459      	add	r1, fp
      len = p_from->len - offset_from;
 800f624:	bfac      	ite	ge
 800f626:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 800f628:	b2b6      	uxthlt	r6, r6
    offset_to += len;
 800f62a:	4437      	add	r7, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800f62c:	4632      	mov	r2, r6
 800f62e:	f002 ff52 	bl	80124d6 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f632:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800f634:	b2bf      	uxth	r7, r7
    offset_from += len;
 800f636:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f638:	42bb      	cmp	r3, r7
    offset_from += len;
 800f63a:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f63e:	d206      	bcs.n	800f64e <pbuf_copy+0x7a>
 800f640:	4643      	mov	r3, r8
 800f642:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f646:	4651      	mov	r1, sl
 800f648:	4648      	mov	r0, r9
 800f64a:	f003 f803 	bl	8012654 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f64e:	8963      	ldrh	r3, [r4, #10]
 800f650:	455b      	cmp	r3, fp
 800f652:	d206      	bcs.n	800f662 <pbuf_copy+0x8e>
 800f654:	4643      	mov	r3, r8
 800f656:	f240 32ce 	movw	r2, #974	; 0x3ce
 800f65a:	491f      	ldr	r1, [pc, #124]	; (800f6d8 <pbuf_copy+0x104>)
 800f65c:	4648      	mov	r0, r9
 800f65e:	f002 fff9 	bl	8012654 <iprintf>
    if (offset_from >= p_from->len) {
 800f662:	8963      	ldrh	r3, [r4, #10]
 800f664:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 800f666:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800f668:	bf9c      	itt	ls
 800f66a:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800f66c:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 800f670:	42bb      	cmp	r3, r7
 800f672:	d11e      	bne.n	800f6b2 <pbuf_copy+0xde>
      p_to = p_to->next;
 800f674:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800f676:	b9dd      	cbnz	r5, 800f6b0 <pbuf_copy+0xdc>
 800f678:	b1bc      	cbz	r4, 800f6aa <pbuf_copy+0xd6>
 800f67a:	4b14      	ldr	r3, [pc, #80]	; (800f6cc <pbuf_copy+0xf8>)
 800f67c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f680:	4916      	ldr	r1, [pc, #88]	; (800f6dc <pbuf_copy+0x108>)
 800f682:	e7b5      	b.n	800f5f0 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f684:	8962      	ldrh	r2, [r4, #10]
 800f686:	8923      	ldrh	r3, [r4, #8]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d114      	bne.n	800f6b6 <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f68c:	6823      	ldr	r3, [r4, #0]
 800f68e:	b193      	cbz	r3, 800f6b6 <pbuf_copy+0xe2>
 800f690:	4b0e      	ldr	r3, [pc, #56]	; (800f6cc <pbuf_copy+0xf8>)
 800f692:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f696:	4912      	ldr	r1, [pc, #72]	; (800f6e0 <pbuf_copy+0x10c>)
 800f698:	480e      	ldr	r0, [pc, #56]	; (800f6d4 <pbuf_copy+0x100>)
 800f69a:	f002 ffdb 	bl	8012654 <iprintf>
 800f69e:	f06f 0005 	mvn.w	r0, #5
 800f6a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f6a6:	2c00      	cmp	r4, #0
 800f6a8:	d1b2      	bne.n	800f610 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 800f6b0:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f6b2:	2c00      	cmp	r4, #0
 800f6b4:	d1e6      	bne.n	800f684 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f6b6:	896a      	ldrh	r2, [r5, #10]
 800f6b8:	892b      	ldrh	r3, [r5, #8]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d1f3      	bne.n	800f6a6 <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f6be:	682b      	ldr	r3, [r5, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d0f0      	beq.n	800f6a6 <pbuf_copy+0xd2>
 800f6c4:	4b01      	ldr	r3, [pc, #4]	; (800f6cc <pbuf_copy+0xf8>)
 800f6c6:	f240 32e3 	movw	r2, #995	; 0x3e3
 800f6ca:	e7e4      	b.n	800f696 <pbuf_copy+0xc2>
 800f6cc:	0801462f 	.word	0x0801462f
 800f6d0:	08014508 	.word	0x08014508
 800f6d4:	0801342a 	.word	0x0801342a
 800f6d8:	0801454f 	.word	0x0801454f
 800f6dc:	0801456a 	.word	0x0801456a
 800f6e0:	08014577 	.word	0x08014577
 800f6e4:	08014538 	.word	0x08014538

0800f6e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ec:	460f      	mov	r7, r1
 800f6ee:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f6f0:	4606      	mov	r6, r0
 800f6f2:	b950      	cbnz	r0, 800f70a <pbuf_copy_partial+0x22>
 800f6f4:	4635      	mov	r5, r6
 800f6f6:	4b1b      	ldr	r3, [pc, #108]	; (800f764 <pbuf_copy_partial+0x7c>)
 800f6f8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f6fc:	491a      	ldr	r1, [pc, #104]	; (800f768 <pbuf_copy_partial+0x80>)
 800f6fe:	481b      	ldr	r0, [pc, #108]	; (800f76c <pbuf_copy_partial+0x84>)
 800f700:	f002 ffa8 	bl	8012654 <iprintf>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800f704:	4628      	mov	r0, r5
 800f706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f70a:	b169      	cbz	r1, 800f728 <pbuf_copy_partial+0x40>
 800f70c:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f70e:	f1b8 0f00 	cmp.w	r8, #0
 800f712:	d0f7      	beq.n	800f704 <pbuf_copy_partial+0x1c>
 800f714:	2e00      	cmp	r6, #0
 800f716:	d0f5      	beq.n	800f704 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800f718:	b17b      	cbz	r3, 800f73a <pbuf_copy_partial+0x52>
 800f71a:	8971      	ldrh	r1, [r6, #10]
 800f71c:	428b      	cmp	r3, r1
 800f71e:	d30c      	bcc.n	800f73a <pbuf_copy_partial+0x52>
      offset -= p->len;
 800f720:	1a5b      	subs	r3, r3, r1
 800f722:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f724:	6836      	ldr	r6, [r6, #0]
 800f726:	e7f2      	b.n	800f70e <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f728:	4b0e      	ldr	r3, [pc, #56]	; (800f764 <pbuf_copy_partial+0x7c>)
 800f72a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f72e:	4910      	ldr	r1, [pc, #64]	; (800f770 <pbuf_copy_partial+0x88>)
 800f730:	463d      	mov	r5, r7
 800f732:	480e      	ldr	r0, [pc, #56]	; (800f76c <pbuf_copy_partial+0x84>)
 800f734:	f002 ff8e 	bl	8012654 <iprintf>
 800f738:	e7e4      	b.n	800f704 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 800f73a:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800f73c:	1978      	adds	r0, r7, r5
 800f73e:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 800f740:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800f742:	4419      	add	r1, r3
      buf_copy_len = p->len - offset;
 800f744:	b2a4      	uxth	r4, r4
 800f746:	4544      	cmp	r4, r8
 800f748:	bf28      	it	cs
 800f74a:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800f74c:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 800f74e:	4425      	add	r5, r4
      len -= buf_copy_len;
 800f750:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800f754:	f002 febf 	bl	80124d6 <memcpy>
      copied_total += buf_copy_len;
 800f758:	b2ad      	uxth	r5, r5
      offset = 0;
 800f75a:	2300      	movs	r3, #0
      len -= buf_copy_len;
 800f75c:	fa1f f884 	uxth.w	r8, r4
 800f760:	e7e0      	b.n	800f724 <pbuf_copy_partial+0x3c>
 800f762:	bf00      	nop
 800f764:	0801462f 	.word	0x0801462f
 800f768:	080145a1 	.word	0x080145a1
 800f76c:	0801342a 	.word	0x0801342a
 800f770:	080145c0 	.word	0x080145c0

0800f774 <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f774:	b510      	push	{r4, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f776:	4604      	mov	r4, r0
 800f778:	b930      	cbnz	r0, 800f788 <tcp_close_shutdown_fin+0x14>
 800f77a:	4b13      	ldr	r3, [pc, #76]	; (800f7c8 <tcp_close_shutdown_fin+0x54>)
 800f77c:	f240 124d 	movw	r2, #333	; 0x14d
 800f780:	4912      	ldr	r1, [pc, #72]	; (800f7cc <tcp_close_shutdown_fin+0x58>)
 800f782:	4813      	ldr	r0, [pc, #76]	; (800f7d0 <tcp_close_shutdown_fin+0x5c>)
 800f784:	f002 ff66 	bl	8012654 <iprintf>

  switch (pcb->state) {
 800f788:	7d23      	ldrb	r3, [r4, #20]
 800f78a:	2b04      	cmp	r3, #4
 800f78c:	d003      	beq.n	800f796 <tcp_close_shutdown_fin+0x22>
 800f78e:	2b07      	cmp	r3, #7
 800f790:	d00c      	beq.n	800f7ac <tcp_close_shutdown_fin+0x38>
 800f792:	2b03      	cmp	r3, #3
 800f794:	d108      	bne.n	800f7a8 <tcp_close_shutdown_fin+0x34>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800f796:	4620      	mov	r0, r4
 800f798:	f002 f998 	bl	8011acc <tcp_send_fin>
    if (err == ERR_OK) {
 800f79c:	b988      	cbnz	r0, 800f7c2 <tcp_close_shutdown_fin+0x4e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800f79e:	2305      	movs	r3, #5
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800f7a0:	7523      	strb	r3, [r4, #20]
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f002 f9ea 	bl	8011b7c <tcp_output>
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f002 f98d 	bl	8011acc <tcp_send_fin>
    if (err == ERR_OK) {
 800f7b2:	b930      	cbnz	r0, 800f7c2 <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 800f7b4:	2309      	movs	r3, #9
 800f7b6:	e7f3      	b.n	800f7a0 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800f7b8:	7ea3      	ldrb	r3, [r4, #26]
 800f7ba:	f043 0308 	orr.w	r3, r3, #8
 800f7be:	76a3      	strb	r3, [r4, #26]
 800f7c0:	e7f2      	b.n	800f7a8 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800f7c2:	1c43      	adds	r3, r0, #1
 800f7c4:	d0f8      	beq.n	800f7b8 <tcp_close_shutdown_fin+0x44>
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 800f7c6:	bd10      	pop	{r4, pc}
 800f7c8:	08014772 	.word	0x08014772
 800f7cc:	080147a7 	.word	0x080147a7
 800f7d0:	0801342a 	.word	0x0801342a

0800f7d4 <tcp_init>:
{
 800f7d4:	4770      	bx	lr
	...

0800f7d8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f7d8:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f7da:	8d01      	ldrh	r1, [r0, #40]	; 0x28
{
 800f7dc:	4604      	mov	r4, r0

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f7de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f7e0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f7e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f7e4:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f7e6:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f7ea:	4428      	add	r0, r5
 800f7ec:	bf94      	ite	ls
 800f7ee:	1a82      	subls	r2, r0, r2
 800f7f0:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 800f7f4:	2a00      	cmp	r2, #0
 800f7f6:	db01      	blt.n	800f7fc <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f7f8:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f7fa:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f7fc:	1aea      	subs	r2, r5, r3
 800f7fe:	2a00      	cmp	r2, #0
 800f800:	dd02      	ble.n	800f808 <tcp_update_rcv_ann_wnd+0x30>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f802:	2000      	movs	r0, #0
 800f804:	8560      	strh	r0, [r4, #42]	; 0x2a
 800f806:	bd38      	pop	{r3, r4, r5, pc}
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f808:	1b5d      	subs	r5, r3, r5
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f80a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800f80e:	d306      	bcc.n	800f81e <tcp_update_rcv_ann_wnd+0x46>
 800f810:	4b04      	ldr	r3, [pc, #16]	; (800f824 <tcp_update_rcv_ann_wnd+0x4c>)
 800f812:	f44f 7242 	mov.w	r2, #776	; 0x308
 800f816:	4904      	ldr	r1, [pc, #16]	; (800f828 <tcp_update_rcv_ann_wnd+0x50>)
 800f818:	4804      	ldr	r0, [pc, #16]	; (800f82c <tcp_update_rcv_ann_wnd+0x54>)
 800f81a:	f002 ff1b 	bl	8012654 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f81e:	8565      	strh	r5, [r4, #42]	; 0x2a
    }
    return 0;
 800f820:	2000      	movs	r0, #0
  }
}
 800f822:	bd38      	pop	{r3, r4, r5, pc}
 800f824:	08014772 	.word	0x08014772
 800f828:	080149bc 	.word	0x080149bc
 800f82c:	0801342a 	.word	0x0801342a

0800f830 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f830:	b538      	push	{r3, r4, r5, lr}
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f832:	7d03      	ldrb	r3, [r0, #20]
{
 800f834:	4604      	mov	r4, r0
 800f836:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d106      	bne.n	800f84a <tcp_recved+0x1a>
 800f83c:	4b17      	ldr	r3, [pc, #92]	; (800f89c <tcp_recved+0x6c>)
 800f83e:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f842:	4917      	ldr	r1, [pc, #92]	; (800f8a0 <tcp_recved+0x70>)
 800f844:	4817      	ldr	r0, [pc, #92]	; (800f8a4 <tcp_recved+0x74>)
 800f846:	f002 ff05 	bl	8012654 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800f84a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800f84c:	4429      	add	r1, r5
 800f84e:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800f850:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 800f854:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800f856:	d911      	bls.n	800f87c <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f858:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800f85c:	8523      	strh	r3, [r4, #40]	; 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f85e:	4620      	mov	r0, r4
 800f860:	f7ff ffba 	bl	800f7d8 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f864:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800f868:	db17      	blt.n	800f89a <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 800f86a:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 800f86c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800f86e:	f043 0302 	orr.w	r3, r3, #2
 800f872:	76a3      	strb	r3, [r4, #26]
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 800f878:	f002 b980 	b.w	8011b7c <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 800f87c:	2900      	cmp	r1, #0
 800f87e:	d1ee      	bne.n	800f85e <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800f880:	7d23      	ldrb	r3, [r4, #20]
 800f882:	2b07      	cmp	r3, #7
 800f884:	d0e8      	beq.n	800f858 <tcp_recved+0x28>
 800f886:	2b09      	cmp	r3, #9
 800f888:	d0e6      	beq.n	800f858 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800f88a:	4b04      	ldr	r3, [pc, #16]	; (800f89c <tcp_recved+0x6c>)
 800f88c:	f240 322d 	movw	r2, #813	; 0x32d
 800f890:	4905      	ldr	r1, [pc, #20]	; (800f8a8 <tcp_recved+0x78>)
 800f892:	4804      	ldr	r0, [pc, #16]	; (800f8a4 <tcp_recved+0x74>)
 800f894:	f002 fede 	bl	8012654 <iprintf>
 800f898:	e7e1      	b.n	800f85e <tcp_recved+0x2e>
 800f89a:	bd38      	pop	{r3, r4, r5, pc}
 800f89c:	08014772 	.word	0x08014772
 800f8a0:	08014823 	.word	0x08014823
 800f8a4:	0801342a 	.word	0x0801342a
 800f8a8:	08014849 	.word	0x08014849

0800f8ac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f8ac:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	b148      	cbz	r0, 800f8c6 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800f8b2:	6840      	ldr	r0, [r0, #4]
 800f8b4:	b108      	cbz	r0, 800f8ba <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800f8b6:	f7ff fc85 	bl	800f1c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f8ba:	4621      	mov	r1, r4
 800f8bc:	2003      	movs	r0, #3
  }
}
 800f8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800f8c2:	f7ff bb19 	b.w	800eef8 <memp_free>
 800f8c6:	bd10      	pop	{r4, pc}

0800f8c8 <tcp_segs_free>:
{
 800f8c8:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800f8ca:	b900      	cbnz	r0, 800f8ce <tcp_segs_free+0x6>
}
 800f8cc:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800f8ce:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800f8d0:	f7ff ffec 	bl	800f8ac <tcp_seg_free>
    seg = next;
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	e7f8      	b.n	800f8ca <tcp_segs_free+0x2>

0800f8d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f8d8:	b538      	push	{r3, r4, r5, lr}
 800f8da:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f8dc:	2003      	movs	r0, #3
 800f8de:	f7ff faef 	bl	800eec0 <memp_malloc>
  if (cseg == NULL) {
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	b160      	cbz	r0, 800f900 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	462b      	mov	r3, r5
 800f8ea:	f104 0210 	add.w	r2, r4, #16
 800f8ee:	f850 1b04 	ldr.w	r1, [r0], #4
 800f8f2:	4290      	cmp	r0, r2
 800f8f4:	f843 1b04 	str.w	r1, [r3], #4
 800f8f8:	d1f9      	bne.n	800f8ee <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 800f8fa:	6868      	ldr	r0, [r5, #4]
 800f8fc:	f7ff fe1c 	bl	800f538 <pbuf_ref>
  return cseg;
}
 800f900:	4628      	mov	r0, r5
 800f902:	bd38      	pop	{r3, r4, r5, pc}

0800f904 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f904:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800f906:	7d03      	ldrb	r3, [r0, #20]
{
 800f908:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d919      	bls.n	800f942 <tcp_pcb_purge+0x3e>
 800f90e:	2b0a      	cmp	r3, #10
 800f910:	d017      	beq.n	800f942 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f912:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800f914:	b118      	cbz	r0, 800f91e <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f916:	f7ff fc55 	bl	800f1c4 <pbuf_free>
      pcb->refused_data = NULL;
 800f91a:	2300      	movs	r3, #0
 800f91c:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800f91e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 800f920:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 800f922:	f7ff ffd1 	bl	800f8c8 <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f926:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 800f92a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 800f92c:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 800f92e:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 800f930:	f7ff ffca 	bl	800f8c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f934:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f936:	f7ff ffc7 	bl	800f8c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f93a:	66a5      	str	r5, [r4, #104]	; 0x68
 800f93c:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f93e:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 800f942:	bd38      	pop	{r3, r4, r5, pc}

0800f944 <tcp_slowtmr>:
{
 800f944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800f948:	4eb0      	ldr	r6, [pc, #704]	; (800fc0c <tcp_slowtmr+0x2c8>)
{
 800f94a:	b085      	sub	sp, #20
      tcp_active_pcbs_changed = 0;
 800f94c:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 800fc40 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 800f950:	6833      	ldr	r3, [r6, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 800f956:	4bae      	ldr	r3, [pc, #696]	; (800fc10 <tcp_slowtmr+0x2cc>)
 800f958:	781a      	ldrb	r2, [r3, #0]
 800f95a:	9302      	str	r3, [sp, #8]
 800f95c:	3201      	adds	r2, #1
 800f95e:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 800f960:	4fac      	ldr	r7, [pc, #688]	; (800fc14 <tcp_slowtmr+0x2d0>)
  prev = NULL;
 800f962:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f966:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 800fc44 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 800f96a:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800f96c:	b96c      	cbnz	r4, 800f98a <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 800f96e:	4faa      	ldr	r7, [pc, #680]	; (800fc18 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f970:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 800fc44 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 800f974:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f976:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 800fc48 <tcp_slowtmr+0x304>
 800f97a:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 800fc20 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 800f97e:	2d00      	cmp	r5, #0
 800f980:	f040 8185 	bne.w	800fc8e <tcp_slowtmr+0x34a>
}
 800f984:	b005      	add	sp, #20
 800f986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f98a:	7d23      	ldrb	r3, [r4, #20]
 800f98c:	b933      	cbnz	r3, 800f99c <tcp_slowtmr+0x58>
 800f98e:	464b      	mov	r3, r9
 800f990:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800f994:	49a1      	ldr	r1, [pc, #644]	; (800fc1c <tcp_slowtmr+0x2d8>)
 800f996:	48a2      	ldr	r0, [pc, #648]	; (800fc20 <tcp_slowtmr+0x2dc>)
 800f998:	f002 fe5c 	bl	8012654 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f99c:	7d23      	ldrb	r3, [r4, #20]
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d106      	bne.n	800f9b0 <tcp_slowtmr+0x6c>
 800f9a2:	464b      	mov	r3, r9
 800f9a4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f9a8:	499e      	ldr	r1, [pc, #632]	; (800fc24 <tcp_slowtmr+0x2e0>)
 800f9aa:	489d      	ldr	r0, [pc, #628]	; (800fc20 <tcp_slowtmr+0x2dc>)
 800f9ac:	f002 fe52 	bl	8012654 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f9b0:	7d23      	ldrb	r3, [r4, #20]
 800f9b2:	2b0a      	cmp	r3, #10
 800f9b4:	d106      	bne.n	800f9c4 <tcp_slowtmr+0x80>
 800f9b6:	464b      	mov	r3, r9
 800f9b8:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800f9bc:	499a      	ldr	r1, [pc, #616]	; (800fc28 <tcp_slowtmr+0x2e4>)
 800f9be:	4898      	ldr	r0, [pc, #608]	; (800fc20 <tcp_slowtmr+0x2dc>)
 800f9c0:	f002 fe48 	bl	8012654 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f9c4:	9b02      	ldr	r3, [sp, #8]
 800f9c6:	7f62      	ldrb	r2, [r4, #29]
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d104      	bne.n	800f9d8 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 800f9ce:	68e5      	ldr	r5, [r4, #12]
 800f9d0:	4644      	mov	r4, r8
      continue;
 800f9d2:	46a0      	mov	r8, r4
 800f9d4:	462c      	mov	r4, r5
 800f9d6:	e7c9      	b.n	800f96c <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f9d8:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800f9da:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f9dc:	2902      	cmp	r1, #2
 800f9de:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800f9e2:	d102      	bne.n	800f9ea <tcp_slowtmr+0xa6>
 800f9e4:	2a05      	cmp	r2, #5
 800f9e6:	f200 80e6 	bhi.w	800fbb6 <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800f9ea:	2a0b      	cmp	r2, #11
 800f9ec:	f200 80e3 	bhi.w	800fbb6 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 800f9f0:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 800f9f4:	f1bb 0f00 	cmp.w	fp, #0
 800f9f8:	f000 80a6 	beq.w	800fb48 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800f9fc:	488b      	ldr	r0, [pc, #556]	; (800fc2c <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 800f9fe:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800fa02:	4483      	add	fp, r0
 800fa04:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 800fa08:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 800fa0a:	bf84      	itt	hi
 800fa0c:	3301      	addhi	r3, #1
 800fa0e:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 800fa12:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800fa16:	4293      	cmp	r3, r2
 800fa18:	f080 8085 	bcs.w	800fb26 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 800fa1c:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 800fa20:	7d23      	ldrb	r3, [r4, #20]
 800fa22:	2b06      	cmp	r3, #6
 800fa24:	d10b      	bne.n	800fa3e <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 800fa26:	7ea2      	ldrb	r2, [r4, #26]
 800fa28:	06d2      	lsls	r2, r2, #27
 800fa2a:	d508      	bpl.n	800fa3e <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa2c:	6832      	ldr	r2, [r6, #0]
 800fa2e:	6a21      	ldr	r1, [r4, #32]
 800fa30:	1a52      	subs	r2, r2, r1
 800fa32:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800fa34:	bf84      	itt	hi
 800fa36:	f10b 0b01 	addhi.w	fp, fp, #1
 800fa3a:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fa3e:	7a25      	ldrb	r5, [r4, #8]
 800fa40:	f015 0508 	ands.w	r5, r5, #8
 800fa44:	d019      	beq.n	800fa7a <tcp_slowtmr+0x136>
 800fa46:	2b04      	cmp	r3, #4
 800fa48:	d002      	beq.n	800fa50 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 800fa4a:	2b07      	cmp	r3, #7
 800fa4c:	f040 80c8 	bne.w	800fbe0 <tcp_slowtmr+0x29c>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800fa50:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800fa54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa58:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800fa5a:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa5e:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800fa60:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa64:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800fa66:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa6a:	4291      	cmp	r1, r2
 800fa6c:	f240 80a6 	bls.w	800fbbc <tcp_slowtmr+0x278>
        ++pcb_remove;
 800fa70:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800fa74:	2501      	movs	r5, #1
        ++pcb_remove;
 800fa76:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 800fa7a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800fa7c:	b168      	cbz	r0, 800fa9a <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800fa7e:	6833      	ldr	r3, [r6, #0]
 800fa80:	6a22      	ldr	r2, [r4, #32]
 800fa82:	1a9a      	subs	r2, r3, r2
 800fa84:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800fa88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800fa8c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800fa90:	d303      	bcc.n	800fa9a <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 800fa92:	f7ff ff19 	bl	800f8c8 <tcp_segs_free>
      pcb->ooseq = NULL;
 800fa96:	2300      	movs	r3, #0
 800fa98:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 800fa9a:	7d23      	ldrb	r3, [r4, #20]
 800fa9c:	2b03      	cmp	r3, #3
 800fa9e:	f040 80a1 	bne.w	800fbe4 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800faa2:	6833      	ldr	r3, [r6, #0]
 800faa4:	6a22      	ldr	r2, [r4, #32]
 800faa6:	1a9b      	subs	r3, r3, r2
 800faa8:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800faaa:	d803      	bhi.n	800fab4 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 800faac:	f1bb 0f00 	cmp.w	fp, #0
 800fab0:	f000 80cc 	beq.w	800fc4c <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 800fab4:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800fab6:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800faba:	f7ff ff23 	bl	800f904 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fabe:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 800fac0:	f1b8 0f00 	cmp.w	r8, #0
 800fac4:	f000 8096 	beq.w	800fbf4 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fac8:	429c      	cmp	r4, r3
 800faca:	d106      	bne.n	800fada <tcp_slowtmr+0x196>
 800facc:	464b      	mov	r3, r9
 800face:	f240 4289 	movw	r2, #1161	; 0x489
 800fad2:	4957      	ldr	r1, [pc, #348]	; (800fc30 <tcp_slowtmr+0x2ec>)
 800fad4:	4852      	ldr	r0, [pc, #328]	; (800fc20 <tcp_slowtmr+0x2dc>)
 800fad6:	f002 fdbd 	bl	8012654 <iprintf>
        prev->next = pcb->next;
 800fada:	68e3      	ldr	r3, [r4, #12]
 800fadc:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 800fae0:	b14d      	cbz	r5, 800faf6 <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fae2:	8b23      	ldrh	r3, [r4, #24]
 800fae4:	4622      	mov	r2, r4
 800fae6:	9301      	str	r3, [sp, #4]
 800fae8:	8ae3      	ldrh	r3, [r4, #22]
 800faea:	9300      	str	r3, [sp, #0]
 800faec:	1d23      	adds	r3, r4, #4
 800faee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800faf0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800faf2:	f002 f9c1 	bl	8011e78 <tcp_rst>
      err_arg = pcb->callback_arg;
 800faf6:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 800faf8:	4621      	mov	r1, r4
 800fafa:	2001      	movs	r0, #1
      pcb = pcb->next;
 800fafc:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800fafe:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800fb00:	f7ff f9fa 	bl	800eef8 <memp_free>
      tcp_active_pcbs_changed = 0;
 800fb04:	2200      	movs	r2, #0
 800fb06:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fb0a:	f1bb 0f00 	cmp.w	fp, #0
 800fb0e:	d004      	beq.n	800fb1a <tcp_slowtmr+0x1d6>
 800fb10:	9b03      	ldr	r3, [sp, #12]
 800fb12:	f06f 010c 	mvn.w	r1, #12
 800fb16:	4618      	mov	r0, r3
 800fb18:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800fb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f43f af56 	beq.w	800f9d0 <tcp_slowtmr+0x8c>
 800fb24:	e71c      	b.n	800f960 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800fb26:	4620      	mov	r0, r4
 800fb28:	f002 fa96 	bl	8012058 <tcp_zero_window_probe>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	f47f af75 	bne.w	800fa1c <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fb32:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 800fb36:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fb3a:	2b06      	cmp	r3, #6
 800fb3c:	f63f af6e 	bhi.w	800fa1c <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 800fb40:	3301      	adds	r3, #1
 800fb42:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800fb46:	e769      	b.n	800fa1c <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 800fb48:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800fb4c:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 800fb4e:	bfa4      	itt	ge
 800fb50:	3301      	addge	r3, #1
 800fb52:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800fb54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f43f af60 	beq.w	800fa1c <tcp_slowtmr+0xd8>
 800fb5c:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 800fb60:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800fb64:	4298      	cmp	r0, r3
 800fb66:	f6ff af59 	blt.w	800fa1c <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 800fb6a:	2902      	cmp	r1, #2
 800fb6c:	d00a      	beq.n	800fb84 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fb6e:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800fb72:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800fb76:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800fb7a:	492e      	ldr	r1, [pc, #184]	; (800fc34 <tcp_slowtmr+0x2f0>)
 800fb7c:	5c8a      	ldrb	r2, [r1, r2]
 800fb7e:	4093      	lsls	r3, r2
 800fb80:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 800fb84:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fb86:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fb8a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          tcp_rexmit_rto(pcb);
 800fb8c:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800fb8e:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fb90:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->cwnd = pcb->mss;
 800fb94:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	bf28      	it	cs
 800fb9c:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fb9e:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 800fba0:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fba2:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 800fba4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fba8:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 800fbaa:	bf38      	it	cc
 800fbac:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 800fbb0:	f002 f9bc 	bl	8011f2c <tcp_rexmit_rto>
 800fbb4:	e734      	b.n	800fa20 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 800fbb6:	f04f 0b01 	mov.w	fp, #1
 800fbba:	e731      	b.n	800fa20 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fbbc:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800fbc0:	4a1d      	ldr	r2, [pc, #116]	; (800fc38 <tcp_slowtmr+0x2f4>)
 800fbc2:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 800fbc6:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbca:	4299      	cmp	r1, r3
 800fbcc:	d908      	bls.n	800fbe0 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f002 fa18 	bl	8012004 <tcp_keepalive>
        if (err == ERR_OK) {
 800fbd4:	b920      	cbnz	r0, 800fbe0 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 800fbd6:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800fbda:	3301      	adds	r3, #1
 800fbdc:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 800fbe0:	2500      	movs	r5, #0
 800fbe2:	e74a      	b.n	800fa7a <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 800fbe4:	2b09      	cmp	r3, #9
 800fbe6:	f47f af61 	bne.w	800faac <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fbea:	6833      	ldr	r3, [r6, #0]
 800fbec:	6a22      	ldr	r2, [r4, #32]
 800fbee:	1a9b      	subs	r3, r3, r2
 800fbf0:	2bf0      	cmp	r3, #240	; 0xf0
 800fbf2:	e75a      	b.n	800faaa <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fbf4:	429c      	cmp	r4, r3
 800fbf6:	d006      	beq.n	800fc06 <tcp_slowtmr+0x2c2>
 800fbf8:	464b      	mov	r3, r9
 800fbfa:	f240 428d 	movw	r2, #1165	; 0x48d
 800fbfe:	490f      	ldr	r1, [pc, #60]	; (800fc3c <tcp_slowtmr+0x2f8>)
 800fc00:	4807      	ldr	r0, [pc, #28]	; (800fc20 <tcp_slowtmr+0x2dc>)
 800fc02:	f002 fd27 	bl	8012654 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fc06:	68e3      	ldr	r3, [r4, #12]
 800fc08:	603b      	str	r3, [r7, #0]
 800fc0a:	e769      	b.n	800fae0 <tcp_slowtmr+0x19c>
 800fc0c:	24004cb8 	.word	0x24004cb8
 800fc10:	2400020a 	.word	0x2400020a
 800fc14:	24004cb4 	.word	0x24004cb4
 800fc18:	24004cc4 	.word	0x24004cc4
 800fc1c:	0801486a 	.word	0x0801486a
 800fc20:	0801342a 	.word	0x0801342a
 800fc24:	08014894 	.word	0x08014894
 800fc28:	080148be 	.word	0x080148be
 800fc2c:	0801481c 	.word	0x0801481c
 800fc30:	080148eb 	.word	0x080148eb
 800fc34:	0801474c 	.word	0x0801474c
 800fc38:	000124f8 	.word	0x000124f8
 800fc3c:	08014916 	.word	0x08014916
 800fc40:	24004cb0 	.word	0x24004cb0
 800fc44:	08014772 	.word	0x08014772
 800fc48:	08014940 	.word	0x08014940
      ++prev->polltmr;
 800fc4c:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800fc4e:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 800fc50:	3301      	adds	r3, #1
      pcb = pcb->next;
 800fc52:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800fc54:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800fc56:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800fc58:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800fc5a:	f63f aeba 	bhi.w	800f9d2 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800fc5e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800fc62:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 800fc66:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 800fc6a:	b173      	cbz	r3, 800fc8a <tcp_slowtmr+0x346>
 800fc6c:	4621      	mov	r1, r4
 800fc6e:	6920      	ldr	r0, [r4, #16]
 800fc70:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800fc72:	f89a 3000 	ldrb.w	r3, [sl]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f47f ae72 	bne.w	800f960 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	f47f aea8 	bne.w	800f9d2 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 800fc82:	4620      	mov	r0, r4
 800fc84:	f001 ff7a 	bl	8011b7c <tcp_output>
 800fc88:	e6a3      	b.n	800f9d2 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800fc8a:	4658      	mov	r0, fp
 800fc8c:	e7f1      	b.n	800fc72 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fc8e:	7d2b      	ldrb	r3, [r5, #20]
 800fc90:	2b0a      	cmp	r3, #10
 800fc92:	d006      	beq.n	800fca2 <tcp_slowtmr+0x35e>
 800fc94:	4643      	mov	r3, r8
 800fc96:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800fc9a:	4651      	mov	r1, sl
 800fc9c:	4648      	mov	r0, r9
 800fc9e:	f002 fcd9 	bl	8012654 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fca2:	6833      	ldr	r3, [r6, #0]
 800fca4:	6a2a      	ldr	r2, [r5, #32]
 800fca6:	1a9b      	subs	r3, r3, r2
 800fca8:	2bf0      	cmp	r3, #240	; 0xf0
 800fcaa:	d816      	bhi.n	800fcda <tcp_slowtmr+0x396>
      pcb = pcb->next;
 800fcac:	462c      	mov	r4, r5
 800fcae:	68ed      	ldr	r5, [r5, #12]
 800fcb0:	e665      	b.n	800f97e <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	429d      	cmp	r5, r3
 800fcb6:	d106      	bne.n	800fcc6 <tcp_slowtmr+0x382>
 800fcb8:	4643      	mov	r3, r8
 800fcba:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800fcbe:	4910      	ldr	r1, [pc, #64]	; (800fd00 <tcp_slowtmr+0x3bc>)
 800fcc0:	4648      	mov	r0, r9
 800fcc2:	f002 fcc7 	bl	8012654 <iprintf>
        prev->next = pcb->next;
 800fcc6:	68eb      	ldr	r3, [r5, #12]
 800fcc8:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800fcca:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800fcce:	4629      	mov	r1, r5
 800fcd0:	2001      	movs	r0, #1
 800fcd2:	f7ff f911 	bl	800eef8 <memp_free>
      pcb = pcb->next;
 800fcd6:	465d      	mov	r5, fp
 800fcd8:	e651      	b.n	800f97e <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 800fcda:	4628      	mov	r0, r5
 800fcdc:	f7ff fe12 	bl	800f904 <tcp_pcb_purge>
      if (prev != NULL) {
 800fce0:	2c00      	cmp	r4, #0
 800fce2:	d1e6      	bne.n	800fcb2 <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	429d      	cmp	r5, r3
 800fce8:	d006      	beq.n	800fcf8 <tcp_slowtmr+0x3b4>
 800fcea:	4643      	mov	r3, r8
 800fcec:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800fcf0:	4904      	ldr	r1, [pc, #16]	; (800fd04 <tcp_slowtmr+0x3c0>)
 800fcf2:	4648      	mov	r0, r9
 800fcf4:	f002 fcae 	bl	8012654 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fcf8:	68eb      	ldr	r3, [r5, #12]
 800fcfa:	603b      	str	r3, [r7, #0]
 800fcfc:	e7e5      	b.n	800fcca <tcp_slowtmr+0x386>
 800fcfe:	bf00      	nop
 800fd00:	0801496f 	.word	0x0801496f
 800fd04:	08014996 	.word	0x08014996

0800fd08 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 800fd08:	6803      	ldr	r3, [r0, #0]
 800fd0a:	428b      	cmp	r3, r1
{
 800fd0c:	b510      	push	{r4, lr}
 800fd0e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 800fd10:	d137      	bne.n	800fd82 <tcp_pcb_remove+0x7a>
 800fd12:	68cb      	ldr	r3, [r1, #12]
 800fd14:	6003      	str	r3, [r0, #0]
 800fd16:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800fd18:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800fd1a:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800fd1c:	f7ff fdf2 	bl	800f904 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800fd20:	7d23      	ldrb	r3, [r4, #20]
 800fd22:	2b0a      	cmp	r3, #10
 800fd24:	d00a      	beq.n	800fd3c <tcp_pcb_remove+0x34>
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d008      	beq.n	800fd3c <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800fd2a:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800fd2c:	07da      	lsls	r2, r3, #31
 800fd2e:	d505      	bpl.n	800fd3c <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 800fd30:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800fd34:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 800fd36:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800fd38:	f001 ff20 	bl	8011b7c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fd3c:	7d23      	ldrb	r3, [r4, #20]
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d01a      	beq.n	800fd78 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fd42:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800fd44:	b133      	cbz	r3, 800fd54 <tcp_pcb_remove+0x4c>
 800fd46:	4b13      	ldr	r3, [pc, #76]	; (800fd94 <tcp_pcb_remove+0x8c>)
 800fd48:	f240 7253 	movw	r2, #1875	; 0x753
 800fd4c:	4912      	ldr	r1, [pc, #72]	; (800fd98 <tcp_pcb_remove+0x90>)
 800fd4e:	4813      	ldr	r0, [pc, #76]	; (800fd9c <tcp_pcb_remove+0x94>)
 800fd50:	f002 fc80 	bl	8012654 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fd54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fd56:	b133      	cbz	r3, 800fd66 <tcp_pcb_remove+0x5e>
 800fd58:	4b0e      	ldr	r3, [pc, #56]	; (800fd94 <tcp_pcb_remove+0x8c>)
 800fd5a:	f240 7254 	movw	r2, #1876	; 0x754
 800fd5e:	4910      	ldr	r1, [pc, #64]	; (800fda0 <tcp_pcb_remove+0x98>)
 800fd60:	480e      	ldr	r0, [pc, #56]	; (800fd9c <tcp_pcb_remove+0x94>)
 800fd62:	f002 fc77 	bl	8012654 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fd66:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fd68:	b133      	cbz	r3, 800fd78 <tcp_pcb_remove+0x70>
 800fd6a:	4b0a      	ldr	r3, [pc, #40]	; (800fd94 <tcp_pcb_remove+0x8c>)
 800fd6c:	f240 7256 	movw	r2, #1878	; 0x756
 800fd70:	490c      	ldr	r1, [pc, #48]	; (800fda4 <tcp_pcb_remove+0x9c>)
 800fd72:	480a      	ldr	r0, [pc, #40]	; (800fd9c <tcp_pcb_remove+0x94>)
 800fd74:	f002 fc6e 	bl	8012654 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fd7c:	82e3      	strh	r3, [r4, #22]
 800fd7e:	bd10      	pop	{r4, pc}
 800fd80:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d0c7      	beq.n	800fd16 <tcp_pcb_remove+0xe>
 800fd86:	68da      	ldr	r2, [r3, #12]
 800fd88:	4294      	cmp	r4, r2
 800fd8a:	d1f9      	bne.n	800fd80 <tcp_pcb_remove+0x78>
 800fd8c:	68e2      	ldr	r2, [r4, #12]
 800fd8e:	60da      	str	r2, [r3, #12]
 800fd90:	e7c1      	b.n	800fd16 <tcp_pcb_remove+0xe>
 800fd92:	bf00      	nop
 800fd94:	08014772 	.word	0x08014772
 800fd98:	080147d4 	.word	0x080147d4
 800fd9c:	0801342a 	.word	0x0801342a
 800fda0:	080147ec 	.word	0x080147ec
 800fda4:	08014805 	.word	0x08014805

0800fda8 <tcp_close_shutdown>:
{
 800fda8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdaa:	7d03      	ldrb	r3, [r0, #20]
 800fdac:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fdae:	2900      	cmp	r1, #0
 800fdb0:	d049      	beq.n	800fe46 <tcp_close_shutdown+0x9e>
 800fdb2:	2b04      	cmp	r3, #4
 800fdb4:	d001      	beq.n	800fdba <tcp_close_shutdown+0x12>
 800fdb6:	2b07      	cmp	r3, #7
 800fdb8:	d145      	bne.n	800fe46 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fdba:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800fdbc:	b91a      	cbnz	r2, 800fdc6 <tcp_close_shutdown+0x1e>
 800fdbe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800fdc0:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 800fdc4:	d03f      	beq.n	800fe46 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fdc6:	7ea3      	ldrb	r3, [r4, #26]
 800fdc8:	06db      	lsls	r3, r3, #27
 800fdca:	d406      	bmi.n	800fdda <tcp_close_shutdown+0x32>
 800fdcc:	4b3f      	ldr	r3, [pc, #252]	; (800fecc <tcp_close_shutdown+0x124>)
 800fdce:	f240 120f 	movw	r2, #271	; 0x10f
 800fdd2:	493f      	ldr	r1, [pc, #252]	; (800fed0 <tcp_close_shutdown+0x128>)
 800fdd4:	483f      	ldr	r0, [pc, #252]	; (800fed4 <tcp_close_shutdown+0x12c>)
 800fdd6:	f002 fc3d 	bl	8012654 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fdda:	8b23      	ldrh	r3, [r4, #24]
 800fddc:	4622      	mov	r2, r4
 800fdde:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fde0:	9301      	str	r3, [sp, #4]
 800fde2:	8ae3      	ldrh	r3, [r4, #22]
 800fde4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	1d23      	adds	r3, r4, #4
 800fdea:	f002 f845 	bl	8011e78 <tcp_rst>
      tcp_pcb_purge(pcb);
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f7ff fd88 	bl	800f904 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fdf4:	4a38      	ldr	r2, [pc, #224]	; (800fed8 <tcp_close_shutdown+0x130>)
 800fdf6:	6813      	ldr	r3, [r2, #0]
 800fdf8:	429c      	cmp	r4, r3
 800fdfa:	d115      	bne.n	800fe28 <tcp_close_shutdown+0x80>
 800fdfc:	68e3      	ldr	r3, [r4, #12]
 800fdfe:	6013      	str	r3, [r2, #0]
 800fe00:	2300      	movs	r3, #0
 800fe02:	2201      	movs	r2, #1
 800fe04:	60e3      	str	r3, [r4, #12]
 800fe06:	4b35      	ldr	r3, [pc, #212]	; (800fedc <tcp_close_shutdown+0x134>)
 800fe08:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800fe0a:	7d23      	ldrb	r3, [r4, #20]
 800fe0c:	2b04      	cmp	r3, #4
 800fe0e:	d113      	bne.n	800fe38 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 800fe10:	230a      	movs	r3, #10
 800fe12:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fe14:	4b32      	ldr	r3, [pc, #200]	; (800fee0 <tcp_close_shutdown+0x138>)
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	601c      	str	r4, [r3, #0]
 800fe1a:	60e2      	str	r2, [r4, #12]
 800fe1c:	f002 f9ce 	bl	80121bc <tcp_timer_needed>
}
 800fe20:	2000      	movs	r0, #0
 800fe22:	b003      	add	sp, #12
 800fe24:	bd30      	pop	{r4, r5, pc}
 800fe26:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d0e9      	beq.n	800fe00 <tcp_close_shutdown+0x58>
 800fe2c:	68da      	ldr	r2, [r3, #12]
 800fe2e:	4294      	cmp	r4, r2
 800fe30:	d1f9      	bne.n	800fe26 <tcp_close_shutdown+0x7e>
 800fe32:	68e2      	ldr	r2, [r4, #12]
 800fe34:	60da      	str	r2, [r3, #12]
 800fe36:	e7e3      	b.n	800fe00 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 800fe38:	4b2a      	ldr	r3, [pc, #168]	; (800fee4 <tcp_close_shutdown+0x13c>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	429c      	cmp	r4, r3
 800fe3e:	d117      	bne.n	800fe70 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 800fe40:	f001 fd04 	bl	801184c <tcp_trigger_input_pcb_close>
 800fe44:	e7ec      	b.n	800fe20 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d020      	beq.n	800fe8c <tcp_close_shutdown+0xe4>
 800fe4a:	d307      	bcc.n	800fe5c <tcp_close_shutdown+0xb4>
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d033      	beq.n	800feb8 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 800fe50:	4620      	mov	r0, r4
}
 800fe52:	b003      	add	sp, #12
 800fe54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 800fe58:	f7ff bc8c 	b.w	800f774 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 800fe5c:	8ae3      	ldrh	r3, [r4, #22]
 800fe5e:	b13b      	cbz	r3, 800fe70 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe60:	4a21      	ldr	r2, [pc, #132]	; (800fee8 <tcp_close_shutdown+0x140>)
 800fe62:	6813      	ldr	r3, [r2, #0]
 800fe64:	429c      	cmp	r4, r3
 800fe66:	d109      	bne.n	800fe7c <tcp_close_shutdown+0xd4>
 800fe68:	68e3      	ldr	r3, [r4, #12]
 800fe6a:	6013      	str	r3, [r2, #0]
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 800fe70:	4621      	mov	r1, r4
 800fe72:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 800fe74:	f7ff f840 	bl	800eef8 <memp_free>
    break;
 800fe78:	e7d2      	b.n	800fe20 <tcp_close_shutdown+0x78>
 800fe7a:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d0f5      	beq.n	800fe6c <tcp_close_shutdown+0xc4>
 800fe80:	68da      	ldr	r2, [r3, #12]
 800fe82:	4294      	cmp	r4, r2
 800fe84:	d1f9      	bne.n	800fe7a <tcp_close_shutdown+0xd2>
 800fe86:	68e2      	ldr	r2, [r4, #12]
 800fe88:	60da      	str	r2, [r3, #12]
 800fe8a:	e7ef      	b.n	800fe6c <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800fe8c:	4917      	ldr	r1, [pc, #92]	; (800feec <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 800fe8e:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800fe90:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800fe94:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fe96:	b94a      	cbnz	r2, 800feac <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fe98:	3301      	adds	r3, #1
 800fe9a:	2b04      	cmp	r3, #4
 800fe9c:	d1f8      	bne.n	800fe90 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fe9e:	4621      	mov	r1, r4
 800fea0:	4813      	ldr	r0, [pc, #76]	; (800fef0 <tcp_close_shutdown+0x148>)
 800fea2:	f7ff ff31 	bl	800fd08 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fea6:	4621      	mov	r1, r4
 800fea8:	2002      	movs	r0, #2
 800feaa:	e7e3      	b.n	800fe74 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 800feac:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800feae:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 800feb0:	bf08      	it	eq
 800feb2:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800feb4:	68d2      	ldr	r2, [r2, #12]
 800feb6:	e7ee      	b.n	800fe96 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800feb8:	4621      	mov	r1, r4
 800feba:	4807      	ldr	r0, [pc, #28]	; (800fed8 <tcp_close_shutdown+0x130>)
 800febc:	f7ff ff24 	bl	800fd08 <tcp_pcb_remove>
 800fec0:	2001      	movs	r0, #1
 800fec2:	4b06      	ldr	r3, [pc, #24]	; (800fedc <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 800fec4:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800fec6:	7018      	strb	r0, [r3, #0]
 800fec8:	e7d4      	b.n	800fe74 <tcp_close_shutdown+0xcc>
 800feca:	bf00      	nop
 800fecc:	08014772 	.word	0x08014772
 800fed0:	08014759 	.word	0x08014759
 800fed4:	0801342a 	.word	0x0801342a
 800fed8:	24004cb4 	.word	0x24004cb4
 800fedc:	24004cb0 	.word	0x24004cb0
 800fee0:	24004cc4 	.word	0x24004cc4
 800fee4:	24004cc8 	.word	0x24004cc8
 800fee8:	24004cc0 	.word	0x24004cc0
 800feec:	080147c4 	.word	0x080147c4
 800fef0:	24004cbc 	.word	0x24004cbc

0800fef4 <tcp_close>:
  if (pcb->state != LISTEN) {
 800fef4:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800fef6:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800fef8:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 800fefa:	bf1e      	ittt	ne
 800fefc:	7e83      	ldrbne	r3, [r0, #26]
 800fefe:	f043 0310 	orrne.w	r3, r3, #16
 800ff02:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800ff04:	f7ff bf50 	b.w	800fda8 <tcp_close_shutdown>

0800ff08 <tcp_recv_null>:
{
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	4608      	mov	r0, r1
  if (p != NULL) {
 800ff0c:	4614      	mov	r4, r2
 800ff0e:	b13a      	cbz	r2, 800ff20 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 800ff10:	8911      	ldrh	r1, [r2, #8]
 800ff12:	f7ff fc8d 	bl	800f830 <tcp_recved>
    pbuf_free(p);
 800ff16:	4620      	mov	r0, r4
 800ff18:	f7ff f954 	bl	800f1c4 <pbuf_free>
}
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1fb      	bne.n	800ff1c <tcp_recv_null+0x14>
}
 800ff24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800ff28:	f7ff bfe4 	b.w	800fef4 <tcp_close>

0800ff2c <tcp_process_refused_data>:
{
 800ff2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 800ff2e:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800ff30:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ff32:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 800ff36:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800ff38:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800ff3a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ff3c:	b1dd      	cbz	r5, 800ff76 <tcp_process_refused_data+0x4a>
 800ff3e:	4601      	mov	r1, r0
 800ff40:	4632      	mov	r2, r6
 800ff42:	6900      	ldr	r0, [r0, #16]
 800ff44:	47a8      	blx	r5
 800ff46:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800ff48:	b9e0      	cbnz	r0, 800ff84 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ff4a:	06bb      	lsls	r3, r7, #26
 800ff4c:	d511      	bpl.n	800ff72 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ff4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800ff50:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ff54:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 800ff58:	bf1c      	itt	ne
 800ff5a:	3301      	addne	r3, #1
 800ff5c:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800ff5e:	b146      	cbz	r6, 800ff72 <tcp_process_refused_data+0x46>
 800ff60:	2300      	movs	r3, #0
 800ff62:	4621      	mov	r1, r4
 800ff64:	6920      	ldr	r0, [r4, #16]
 800ff66:	461a      	mov	r2, r3
 800ff68:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800ff6a:	300d      	adds	r0, #13
 800ff6c:	d101      	bne.n	800ff72 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 800ff6e:	f06f 050c 	mvn.w	r5, #12
}
 800ff72:	4628      	mov	r0, r5
 800ff74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ff76:	4601      	mov	r1, r0
 800ff78:	462b      	mov	r3, r5
 800ff7a:	4632      	mov	r2, r6
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	f7ff ffc3 	bl	800ff08 <tcp_recv_null>
 800ff82:	e7e0      	b.n	800ff46 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 800ff84:	f110 050d 	adds.w	r5, r0, #13
 800ff88:	d0f1      	beq.n	800ff6e <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 800ff8a:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800ff8c:	f06f 0504 	mvn.w	r5, #4
 800ff90:	e7ef      	b.n	800ff72 <tcp_process_refused_data+0x46>
	...

0800ff94 <tcp_fasttmr>:
{
 800ff94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800ff98:	4d1b      	ldr	r5, [pc, #108]	; (8010008 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800ff9a:	4f1c      	ldr	r7, [pc, #112]	; (801000c <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800ff9c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800ff9e:	4e1c      	ldr	r6, [pc, #112]	; (8010010 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800ffa4:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800ffa6:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800ffaa:	b90c      	cbnz	r4, 800ffb0 <tcp_fasttmr+0x1c>
}
 800ffac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800ffb0:	782b      	ldrb	r3, [r5, #0]
 800ffb2:	7f62      	ldrb	r2, [r4, #29]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d024      	beq.n	8010002 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800ffb8:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800ffba:	7ea3      	ldrb	r3, [r4, #26]
 800ffbc:	07d9      	lsls	r1, r3, #31
 800ffbe:	d509      	bpl.n	800ffd4 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800ffc0:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800ffc4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800ffc6:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 800ffc8:	f001 fdd8 	bl	8011b7c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ffcc:	7ea3      	ldrb	r3, [r4, #26]
 800ffce:	f023 0303 	bic.w	r3, r3, #3
 800ffd2:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800ffd4:	7ea3      	ldrb	r3, [r4, #26]
 800ffd6:	071a      	lsls	r2, r3, #28
 800ffd8:	d505      	bpl.n	800ffe6 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800ffda:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800ffde:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 800ffe0:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800ffe2:	f7ff fbc7 	bl	800f774 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800ffe6:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800ffe8:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800ffec:	b13b      	cbz	r3, 800fffe <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800ffee:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800fff0:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800fff4:	f7ff ff9a 	bl	800ff2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fff8:	7833      	ldrb	r3, [r6, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1d2      	bne.n	800ffa4 <tcp_fasttmr+0x10>
{
 800fffe:	464c      	mov	r4, r9
 8010000:	e7d3      	b.n	800ffaa <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8010002:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8010006:	e7fa      	b.n	800fffe <tcp_fasttmr+0x6a>
 8010008:	2400020a 	.word	0x2400020a
 801000c:	24004cb4 	.word	0x24004cb4
 8010010:	24004cb0 	.word	0x24004cb0

08010014 <tcp_tmr>:
{
 8010014:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8010016:	f7ff ffbd 	bl	800ff94 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801001a:	4a06      	ldr	r2, [pc, #24]	; (8010034 <tcp_tmr+0x20>)
 801001c:	7813      	ldrb	r3, [r2, #0]
 801001e:	3301      	adds	r3, #1
 8010020:	b2db      	uxtb	r3, r3
 8010022:	7013      	strb	r3, [r2, #0]
 8010024:	07db      	lsls	r3, r3, #31
 8010026:	d503      	bpl.n	8010030 <tcp_tmr+0x1c>
}
 8010028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801002c:	f7ff bc8a 	b.w	800f944 <tcp_slowtmr>
 8010030:	bd08      	pop	{r3, pc}
 8010032:	bf00      	nop
 8010034:	24000209 	.word	0x24000209

08010038 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010038:	7d03      	ldrb	r3, [r0, #20]
 801003a:	2b01      	cmp	r3, #1
{
 801003c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010040:	4604      	mov	r4, r0
 8010042:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010044:	d106      	bne.n	8010054 <tcp_abandon+0x1c>
 8010046:	4b30      	ldr	r3, [pc, #192]	; (8010108 <tcp_abandon+0xd0>)
 8010048:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801004c:	492f      	ldr	r1, [pc, #188]	; (801010c <tcp_abandon+0xd4>)
 801004e:	4830      	ldr	r0, [pc, #192]	; (8010110 <tcp_abandon+0xd8>)
 8010050:	f002 fb00 	bl	8012654 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8010054:	7d23      	ldrb	r3, [r4, #20]
 8010056:	2b0a      	cmp	r3, #10
 8010058:	d10a      	bne.n	8010070 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801005a:	4621      	mov	r1, r4
 801005c:	482d      	ldr	r0, [pc, #180]	; (8010114 <tcp_abandon+0xdc>)
 801005e:	f7ff fe53 	bl	800fd08 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8010062:	4621      	mov	r1, r4
 8010064:	2001      	movs	r0, #1
}
 8010066:	b002      	add	sp, #8
 8010068:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 801006c:	f7fe bf44 	b.w	800eef8 <memp_free>
    seqno = pcb->snd_nxt;
 8010070:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8010074:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8010078:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 801007c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8010080:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8010082:	b99b      	cbnz	r3, 80100ac <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8010084:	b13d      	cbz	r5, 8010096 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010086:	4a24      	ldr	r2, [pc, #144]	; (8010118 <tcp_abandon+0xe0>)
 8010088:	6813      	ldr	r3, [r2, #0]
 801008a:	429c      	cmp	r4, r3
 801008c:	d106      	bne.n	801009c <tcp_abandon+0x64>
 801008e:	68e3      	ldr	r3, [r4, #12]
 8010090:	6013      	str	r3, [r2, #0]
 8010092:	2500      	movs	r5, #0
 8010094:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8010096:	462e      	mov	r6, r5
 8010098:	e00f      	b.n	80100ba <tcp_abandon+0x82>
 801009a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801009c:	2b00      	cmp	r3, #0
 801009e:	d0f8      	beq.n	8010092 <tcp_abandon+0x5a>
 80100a0:	68da      	ldr	r2, [r3, #12]
 80100a2:	4294      	cmp	r4, r2
 80100a4:	d1f9      	bne.n	801009a <tcp_abandon+0x62>
 80100a6:	68e2      	ldr	r2, [r4, #12]
 80100a8:	60da      	str	r2, [r3, #12]
 80100aa:	e7f2      	b.n	8010092 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80100ac:	4621      	mov	r1, r4
 80100ae:	481b      	ldr	r0, [pc, #108]	; (801011c <tcp_abandon+0xe4>)
 80100b0:	f7ff fe2a 	bl	800fd08 <tcp_pcb_remove>
 80100b4:	2201      	movs	r2, #1
 80100b6:	4b1a      	ldr	r3, [pc, #104]	; (8010120 <tcp_abandon+0xe8>)
 80100b8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80100ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80100bc:	b108      	cbz	r0, 80100c2 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 80100be:	f7ff fc03 	bl	800f8c8 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80100c2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80100c4:	b108      	cbz	r0, 80100ca <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 80100c6:	f7ff fbff 	bl	800f8c8 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80100ca:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80100cc:	b108      	cbz	r0, 80100d2 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 80100ce:	f7ff fbfb 	bl	800f8c8 <tcp_segs_free>
    if (send_rst) {
 80100d2:	b146      	cbz	r6, 80100e6 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80100d4:	8b23      	ldrh	r3, [r4, #24]
 80100d6:	4622      	mov	r2, r4
 80100d8:	9500      	str	r5, [sp, #0]
 80100da:	4651      	mov	r1, sl
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	4648      	mov	r0, r9
 80100e0:	1d23      	adds	r3, r4, #4
 80100e2:	f001 fec9 	bl	8011e78 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 80100e6:	4621      	mov	r1, r4
 80100e8:	2001      	movs	r0, #1
 80100ea:	f7fe ff05 	bl	800eef8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80100ee:	b13f      	cbz	r7, 8010100 <tcp_abandon+0xc8>
 80100f0:	f06f 010c 	mvn.w	r1, #12
 80100f4:	4640      	mov	r0, r8
 80100f6:	463b      	mov	r3, r7
}
 80100f8:	b002      	add	sp, #8
 80100fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80100fe:	4718      	bx	r3
}
 8010100:	b002      	add	sp, #8
 8010102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010106:	bf00      	nop
 8010108:	08014772 	.word	0x08014772
 801010c:	0801471b 	.word	0x0801471b
 8010110:	0801342a 	.word	0x0801342a
 8010114:	24004cc4 	.word	0x24004cc4
 8010118:	24004cc0 	.word	0x24004cc0
 801011c:	24004cb4 	.word	0x24004cb4
 8010120:	24004cb0 	.word	0x24004cb0

08010124 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8010124:	2101      	movs	r1, #1
 8010126:	f7ff bf87 	b.w	8010038 <tcp_abandon>

0801012a <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 801012a:	b538      	push	{r3, r4, r5, lr}
 801012c:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 801012e:	b901      	cbnz	r1, 8010132 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8010130:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010132:	680a      	ldr	r2, [r1, #0]
 8010134:	682b      	ldr	r3, [r5, #0]
 8010136:	68cc      	ldr	r4, [r1, #12]
 8010138:	429a      	cmp	r2, r3
 801013a:	d102      	bne.n	8010142 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 801013c:	4608      	mov	r0, r1
 801013e:	f7ff fff1 	bl	8010124 <tcp_abort>
      pcb = pcb->next;
 8010142:	4621      	mov	r1, r4
 8010144:	e7f3      	b.n	801012e <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

08010148 <tcp_kill_state>:
{
 8010148:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801014a:	f1a0 0308 	sub.w	r3, r0, #8
{
 801014e:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010150:	2b01      	cmp	r3, #1
 8010152:	d906      	bls.n	8010162 <tcp_kill_state+0x1a>
 8010154:	4b0f      	ldr	r3, [pc, #60]	; (8010194 <tcp_kill_state+0x4c>)
 8010156:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801015a:	490f      	ldr	r1, [pc, #60]	; (8010198 <tcp_kill_state+0x50>)
 801015c:	480f      	ldr	r0, [pc, #60]	; (801019c <tcp_kill_state+0x54>)
 801015e:	f002 fa79 	bl	8012654 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010162:	4b0f      	ldr	r3, [pc, #60]	; (80101a0 <tcp_kill_state+0x58>)
  inactivity = 0;
 8010164:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010166:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 8010168:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801016a:	4b0e      	ldr	r3, [pc, #56]	; (80101a4 <tcp_kill_state+0x5c>)
 801016c:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801016e:	b921      	cbnz	r1, 801017a <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8010170:	b170      	cbz	r0, 8010190 <tcp_kill_state+0x48>
}
 8010172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8010176:	f7ff bf5f 	b.w	8010038 <tcp_abandon>
    if (pcb->state == state) {
 801017a:	7d0b      	ldrb	r3, [r1, #20]
 801017c:	42a3      	cmp	r3, r4
 801017e:	d105      	bne.n	801018c <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010180:	6a0b      	ldr	r3, [r1, #32]
 8010182:	1aeb      	subs	r3, r5, r3
 8010184:	429a      	cmp	r2, r3
 8010186:	bf9c      	itt	ls
 8010188:	461a      	movls	r2, r3
 801018a:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801018c:	68c9      	ldr	r1, [r1, #12]
 801018e:	e7ee      	b.n	801016e <tcp_kill_state+0x26>
 8010190:	bd38      	pop	{r3, r4, r5, pc}
 8010192:	bf00      	nop
 8010194:	08014772 	.word	0x08014772
 8010198:	080147b3 	.word	0x080147b3
 801019c:	0801342a 	.word	0x0801342a
 80101a0:	24004cb4 	.word	0x24004cb4
 80101a4:	24004cb8 	.word	0x24004cb8

080101a8 <tcp_alloc>:
{
 80101a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101aa:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101ac:	2001      	movs	r0, #1
 80101ae:	f7fe fe87 	bl	800eec0 <memp_malloc>
 80101b2:	4d3b      	ldr	r5, [pc, #236]	; (80102a0 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 80101b4:	4604      	mov	r4, r0
 80101b6:	bb90      	cbnz	r0, 801021e <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80101b8:	4b3a      	ldr	r3, [pc, #232]	; (80102a4 <tcp_alloc+0xfc>)
  inactivity = 0;
 80101ba:	4621      	mov	r1, r4
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80101bc:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d158      	bne.n	8010276 <tcp_alloc+0xce>
  if (inactive != NULL) {
 80101c4:	b114      	cbz	r4, 80101cc <tcp_alloc+0x24>
    tcp_abort(inactive);
 80101c6:	4620      	mov	r0, r4
 80101c8:	f7ff ffac 	bl	8010124 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101cc:	2001      	movs	r0, #1
 80101ce:	f7fe fe77 	bl	800eec0 <memp_malloc>
    if (pcb == NULL) {
 80101d2:	4604      	mov	r4, r0
 80101d4:	bb18      	cbnz	r0, 801021e <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 80101d6:	2009      	movs	r0, #9
 80101d8:	f7ff ffb6 	bl	8010148 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101dc:	2001      	movs	r0, #1
 80101de:	f7fe fe6f 	bl	800eec0 <memp_malloc>
      if (pcb == NULL) {
 80101e2:	4604      	mov	r4, r0
 80101e4:	b9d8      	cbnz	r0, 801021e <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 80101e6:	2008      	movs	r0, #8
 80101e8:	f7ff ffae 	bl	8010148 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101ec:	2001      	movs	r0, #1
 80101ee:	f7fe fe67 	bl	800eec0 <memp_malloc>
        if (pcb == NULL) {
 80101f2:	4604      	mov	r4, r0
 80101f4:	b998      	cbnz	r0, 801021e <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80101f6:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101fa:	4b2b      	ldr	r3, [pc, #172]	; (80102a8 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80101fc:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010200:	bf0c      	ite	eq
 8010202:	4631      	moveq	r1, r6
 8010204:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d13c      	bne.n	8010286 <tcp_alloc+0xde>
  if (inactive != NULL) {
 801020c:	b114      	cbz	r4, 8010214 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 801020e:	4620      	mov	r0, r4
 8010210:	f7ff ff88 	bl	8010124 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010214:	2001      	movs	r0, #1
 8010216:	f7fe fe53 	bl	800eec0 <memp_malloc>
  if (pcb != NULL) {
 801021a:	4604      	mov	r4, r0
 801021c:	b348      	cbz	r0, 8010272 <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801021e:	2298      	movs	r2, #152	; 0x98
 8010220:	2100      	movs	r1, #0
 8010222:	4620      	mov	r0, r4
 8010224:	f002 f962 	bl	80124ec <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010228:	f44f 6206 	mov.w	r2, #2144	; 0x860
    pcb->snd_buf = TCP_SND_BUF;
 801022c:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8010230:	7566      	strb	r6, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010232:	8562      	strh	r2, [r4, #42]	; 0x2a
 8010234:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010236:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 8010238:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ttl = TCP_TTL;
 801023c:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 801023e:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 8010242:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 8010246:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010248:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 801024a:	4b18      	ldr	r3, [pc, #96]	; (80102ac <tcp_alloc+0x104>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801024c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010250:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8010252:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 8010256:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->rtime = -1;
 801025a:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 801025c:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801025e:	4b14      	ldr	r3, [pc, #80]	; (80102b0 <tcp_alloc+0x108>)
    pcb->cwnd = 1;
 8010260:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010264:	682a      	ldr	r2, [r5, #0]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010266:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->tmr = tcp_ticks;
 801026a:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 801026c:	4a11      	ldr	r2, [pc, #68]	; (80102b4 <tcp_alloc+0x10c>)
 801026e:	7812      	ldrb	r2, [r2, #0]
 8010270:	7762      	strb	r2, [r4, #29]
}
 8010272:	4620      	mov	r0, r4
 8010274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010276:	6a1a      	ldr	r2, [r3, #32]
 8010278:	1a82      	subs	r2, r0, r2
 801027a:	428a      	cmp	r2, r1
 801027c:	bf24      	itt	cs
 801027e:	461c      	movcs	r4, r3
 8010280:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	e79c      	b.n	80101c0 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8010286:	7d5f      	ldrb	r7, [r3, #21]
 8010288:	428f      	cmp	r7, r1
 801028a:	d807      	bhi.n	801029c <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801028c:	6a1a      	ldr	r2, [r3, #32]
 801028e:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8010292:	4282      	cmp	r2, r0
 8010294:	bf22      	ittt	cs
 8010296:	4639      	movcs	r1, r7
 8010298:	4610      	movcs	r0, r2
 801029a:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	e7b3      	b.n	8010208 <tcp_alloc+0x60>
 80102a0:	24004cb8 	.word	0x24004cb8
 80102a4:	24004cc4 	.word	0x24004cc4
 80102a8:	24004cb4 	.word	0x24004cb4
 80102ac:	0800ff09 	.word	0x0800ff09
 80102b0:	006ddd00 	.word	0x006ddd00
 80102b4:	2400020a 	.word	0x2400020a

080102b8 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 80102b8:	4b03      	ldr	r3, [pc, #12]	; (80102c8 <tcp_next_iss+0x10>)
 80102ba:	4a04      	ldr	r2, [pc, #16]	; (80102cc <tcp_next_iss+0x14>)
 80102bc:	6818      	ldr	r0, [r3, #0]
 80102be:	6812      	ldr	r2, [r2, #0]
 80102c0:	4410      	add	r0, r2
 80102c2:	6018      	str	r0, [r3, #0]
}
 80102c4:	4770      	bx	lr
 80102c6:	bf00      	nop
 80102c8:	24000028 	.word	0x24000028
 80102cc:	24004cb8 	.word	0x24004cb8

080102d0 <tcp_eff_send_mss_impl>:
{
 80102d0:	b510      	push	{r4, lr}
 80102d2:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 80102d4:	4608      	mov	r0, r1
 80102d6:	f7fd fea5 	bl	800e024 <ip4_route>
    if (outif == NULL) {
 80102da:	b130      	cbz	r0, 80102ea <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 80102dc:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 80102de:	b123      	cbz	r3, 80102ea <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80102e0:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	429c      	cmp	r4, r3
 80102e6:	bf28      	it	cs
 80102e8:	461c      	movcs	r4, r3
}
 80102ea:	4620      	mov	r0, r4
 80102ec:	bd10      	pop	{r4, pc}
	...

080102f0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80102f0:	b538      	push	{r3, r4, r5, lr}
 80102f2:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80102f4:	4604      	mov	r4, r0
 80102f6:	b180      	cbz	r0, 801031a <tcp_netif_ip_addr_changed+0x2a>
 80102f8:	6803      	ldr	r3, [r0, #0]
 80102fa:	b173      	cbz	r3, 801031a <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80102fc:	4b0c      	ldr	r3, [pc, #48]	; (8010330 <tcp_netif_ip_addr_changed+0x40>)
 80102fe:	6819      	ldr	r1, [r3, #0]
 8010300:	f7ff ff13 	bl	801012a <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010304:	4b0b      	ldr	r3, [pc, #44]	; (8010334 <tcp_netif_ip_addr_changed+0x44>)
 8010306:	4620      	mov	r0, r4
 8010308:	6819      	ldr	r1, [r3, #0]
 801030a:	f7ff ff0e 	bl	801012a <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801030e:	b125      	cbz	r5, 801031a <tcp_netif_ip_addr_changed+0x2a>
 8010310:	682b      	ldr	r3, [r5, #0]
 8010312:	b113      	cbz	r3, 801031a <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8010314:	4b08      	ldr	r3, [pc, #32]	; (8010338 <tcp_netif_ip_addr_changed+0x48>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	b903      	cbnz	r3, 801031c <tcp_netif_ip_addr_changed+0x2c>
 801031a:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801031c:	6818      	ldr	r0, [r3, #0]
 801031e:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8010320:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010322:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010324:	bf04      	itt	eq
 8010326:	6829      	ldreq	r1, [r5, #0]
 8010328:	6019      	streq	r1, [r3, #0]
{
 801032a:	4613      	mov	r3, r2
 801032c:	e7f4      	b.n	8010318 <tcp_netif_ip_addr_changed+0x28>
 801032e:	bf00      	nop
 8010330:	24004cb4 	.word	0x24004cb4
 8010334:	24004cc0 	.word	0x24004cc0
 8010338:	24004cbc 	.word	0x24004cbc

0801033c <tcp_oos_insert_segment>:
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801033c:	68c3      	ldr	r3, [r0, #12]
{
 801033e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010342:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010344:	8998      	ldrh	r0, [r3, #12]
{
 8010346:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010348:	f7fd f953 	bl	800d5f2 <lwip_htons>
 801034c:	07c2      	lsls	r2, r0, #31
 801034e:	d415      	bmi.n	801037c <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010350:	4e18      	ldr	r6, [pc, #96]	; (80103b4 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8010352:	b1bc      	cbz	r4, 8010384 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010354:	68e7      	ldr	r7, [r4, #12]
 8010356:	6830      	ldr	r0, [r6, #0]
 8010358:	892b      	ldrh	r3, [r5, #8]
 801035a:	6879      	ldr	r1, [r7, #4]
 801035c:	8922      	ldrh	r2, [r4, #8]
 801035e:	4403      	add	r3, r0
 8010360:	440a      	add	r2, r1
 8010362:	1a9a      	subs	r2, r3, r2
    while (next &&
 8010364:	2a00      	cmp	r2, #0
 8010366:	da10      	bge.n	801038a <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010368:	1a5b      	subs	r3, r3, r1
    if (next &&
 801036a:	2b00      	cmp	r3, #0
 801036c:	dd0a      	ble.n	8010384 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801036e:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 8010370:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010372:	b289      	uxth	r1, r1
 8010374:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010376:	f7ff f867 	bl	800f448 <pbuf_realloc>
 801037a:	e003      	b.n	8010384 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 801037c:	4620      	mov	r0, r4
    next = NULL;
 801037e:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8010380:	f7ff faa2 	bl	800f8c8 <tcp_segs_free>
    }
  }
  cseg->next = next;
 8010384:	602c      	str	r4, [r5, #0]
}
 8010386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801038a:	89b8      	ldrh	r0, [r7, #12]
 801038c:	f7fd f931 	bl	800d5f2 <lwip_htons>
 8010390:	07c3      	lsls	r3, r0, #31
 8010392:	d509      	bpl.n	80103a8 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010394:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8010398:	2001      	movs	r0, #1
 801039a:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 801039e:	f7fd f928 	bl	800d5f2 <lwip_htons>
 80103a2:	4338      	orrs	r0, r7
 80103a4:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 80103a8:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80103aa:	4620      	mov	r0, r4
 80103ac:	f7ff fa7e 	bl	800f8ac <tcp_seg_free>
      next = next->next;
 80103b0:	463c      	mov	r4, r7
 80103b2:	e7ce      	b.n	8010352 <tcp_oos_insert_segment+0x16>
 80103b4:	24000230 	.word	0x24000230

080103b8 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80103b8:	7d03      	ldrb	r3, [r0, #20]
 80103ba:	2b03      	cmp	r3, #3
{
 80103bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c0:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80103c2:	d806      	bhi.n	80103d2 <tcp_receive+0x1a>
 80103c4:	4b89      	ldr	r3, [pc, #548]	; (80105ec <tcp_receive+0x234>)
 80103c6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80103ca:	4989      	ldr	r1, [pc, #548]	; (80105f0 <tcp_receive+0x238>)
 80103cc:	4889      	ldr	r0, [pc, #548]	; (80105f4 <tcp_receive+0x23c>)
 80103ce:	f002 f941 	bl	8012654 <iprintf>

  if (flags & TCP_ACK) {
 80103d2:	4b89      	ldr	r3, [pc, #548]	; (80105f8 <tcp_receive+0x240>)
 80103d4:	4e89      	ldr	r6, [pc, #548]	; (80105fc <tcp_receive+0x244>)
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	f013 0f10 	tst.w	r3, #16
 80103dc:	f000 8180 	beq.w	80106e0 <tcp_receive+0x328>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80103e2:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80103e4:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103e8:	1a1d      	subs	r5, r3, r0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80103ea:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103ec:	2d00      	cmp	r5, #0
 80103ee:	4d84      	ldr	r5, [pc, #528]	; (8010600 <tcp_receive+0x248>)
 80103f0:	db0d      	blt.n	801040e <tcp_receive+0x56>
 80103f2:	4283      	cmp	r3, r0
 80103f4:	d103      	bne.n	80103fe <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103f6:	682b      	ldr	r3, [r5, #0]
 80103f8:	1acb      	subs	r3, r1, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	db07      	blt.n	801040e <tcp_receive+0x56>
 80103fe:	682b      	ldr	r3, [r5, #0]
 8010400:	4299      	cmp	r1, r3
 8010402:	d11c      	bne.n	801043e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010404:	4b7f      	ldr	r3, [pc, #508]	; (8010604 <tcp_receive+0x24c>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	89db      	ldrh	r3, [r3, #14]
 801040a:	4293      	cmp	r3, r2
 801040c:	d917      	bls.n	801043e <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801040e:	4b7d      	ldr	r3, [pc, #500]	; (8010604 <tcp_receive+0x24c>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010410:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8010418:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801041a:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 801041c:	6828      	ldr	r0, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801041e:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 8010422:	6560      	str	r0, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010424:	bf38      	it	cc
 8010426:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 801042a:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 801042e:	2f00      	cmp	r7, #0
 8010430:	d13c      	bne.n	80104ac <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8010432:	b920      	cbnz	r0, 801043e <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
          pcb->persist_backoff = 1;
 8010434:	2301      	movs	r3, #1
          pcb->persist_cnt = 0;
 8010436:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801043a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801043e:	682b      	ldr	r3, [r5, #0]
 8010440:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8010444:	4f70      	ldr	r7, [pc, #448]	; (8010608 <tcp_receive+0x250>)
 8010446:	eba3 000e 	sub.w	r0, r3, lr
 801044a:	2800      	cmp	r0, #0
 801044c:	dc37      	bgt.n	80104be <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 801044e:	486f      	ldr	r0, [pc, #444]	; (801060c <tcp_receive+0x254>)
 8010450:	8800      	ldrh	r0, [r0, #0]
 8010452:	2800      	cmp	r0, #0
 8010454:	f040 8476 	bne.w	8010d44 <tcp_receive+0x98c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010458:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801045a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801045c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8010460:	4401      	add	r1, r0
 8010462:	428a      	cmp	r2, r1
 8010464:	f040 846e 	bne.w	8010d44 <tcp_receive+0x98c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010468:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801046c:	2a00      	cmp	r2, #0
 801046e:	f2c0 8469 	blt.w	8010d44 <tcp_receive+0x98c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010472:	4573      	cmp	r3, lr
 8010474:	f040 8466 	bne.w	8010d44 <tcp_receive+0x98c>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801047c:	1c53      	adds	r3, r2, #1
 801047e:	b2db      	uxtb	r3, r3
 8010480:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8010482:	bf38      	it	cc
 8010484:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010488:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801048c:	2b03      	cmp	r3, #3
 801048e:	d911      	bls.n	80104b4 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010490:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8010494:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010496:	4413      	add	r3, r2
 8010498:	b29b      	uxth	r3, r3
 801049a:	429a      	cmp	r2, r3
 801049c:	d201      	bcs.n	80104a2 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 801049e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80104a2:	f8df a148 	ldr.w	sl, [pc, #328]	; 80105ec <tcp_receive+0x234>
 80104a6:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80105f4 <tcp_receive+0x23c>
 80104aa:	e10c      	b.n	80106c6 <tcp_receive+0x30e>
      } else if (pcb->persist_backoff > 0) {
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d0c6      	beq.n	801043e <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	e7c2      	b.n	801043a <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 80104b4:	d1f5      	bne.n	80104a2 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 80104b6:	4620      	mov	r0, r4
 80104b8:	f001 fd7d 	bl	8011fb6 <tcp_rexmit_fast>
 80104bc:	e7f1      	b.n	80104a2 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80104be:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80104c0:	1a9a      	subs	r2, r3, r2
 80104c2:	2a00      	cmp	r2, #0
 80104c4:	f300 808d 	bgt.w	80105e2 <tcp_receive+0x22a>
      if (pcb->flags & TF_INFR) {
 80104c8:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80104ca:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 80104ce:	0751      	lsls	r1, r2, #29
      pcb->lastack = ackno;
 80104d0:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 80104d2:	7d23      	ldrb	r3, [r4, #20]
      pcb->nrtx = 0;
 80104d4:	f04f 0100 	mov.w	r1, #0
        pcb->flags &= ~TF_INFR;
 80104d8:	bf48      	it	mi
 80104da:	f022 0204 	bicmi.w	r2, r2, #4
      pcb->nrtx = 0;
 80104de:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        pcb->flags &= ~TF_INFR;
 80104e2:	bf44      	itt	mi
 80104e4:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80104e6:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
      pcb->dupacks = 0;
 80104ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
        pcb->cwnd = pcb->ssthresh;
 80104ee:	bf48      	it	mi
 80104f0:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 80104f4:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80104f6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80104f8:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 80104fc:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 8010500:	d90f      	bls.n	8010522 <tcp_receive+0x16a>
        if (pcb->cwnd < pcb->ssthresh) {
 8010502:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8010506:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801050a:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801050c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801050e:	bf9c      	itt	ls
 8010510:	435b      	mulls	r3, r3
 8010512:	fb93 f3f2 	sdivls	r3, r3, r2
 8010516:	4413      	add	r3, r2
 8010518:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 801051a:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 801051c:	bf38      	it	cc
 801051e:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010522:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80105ec <tcp_receive+0x234>
 8010526:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80105f4 <tcp_receive+0x23c>
      while (pcb->unacked != NULL &&
 801052a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801052c:	b943      	cbnz	r3, 8010540 <tcp_receive+0x188>
      if (pcb->unacked == NULL) {
 801052e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8010530:	2300      	movs	r3, #0
 8010532:	2a00      	cmp	r2, #0
 8010534:	d153      	bne.n	80105de <tcp_receive+0x226>
        pcb->rtime = -1;
 8010536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801053a:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801053c:	76e3      	strb	r3, [r4, #27]
 801053e:	e7b0      	b.n	80104a2 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8010540:	68db      	ldr	r3, [r3, #12]
 8010542:	6858      	ldr	r0, [r3, #4]
 8010544:	f7fd f858 	bl	800d5f8 <lwip_htonl>
 8010548:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801054a:	4683      	mov	fp, r0
 801054c:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	8998      	ldrh	r0, [r3, #12]
 8010554:	f7fd f84d 	bl	800d5f2 <lwip_htons>
 8010558:	682b      	ldr	r3, [r5, #0]
 801055a:	f010 0003 	ands.w	r0, r0, #3
 801055e:	eba8 0803 	sub.w	r8, r8, r3
 8010562:	bf18      	it	ne
 8010564:	2001      	movne	r0, #1
 8010566:	44d8      	add	r8, fp
 8010568:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 801056a:	f1b8 0f00 	cmp.w	r8, #0
 801056e:	dcde      	bgt.n	801052e <tcp_receive+0x176>
        next = pcb->unacked;
 8010570:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010574:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8010578:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801057c:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 8010580:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010582:	f7fe ffd1 	bl	800f528 <pbuf_clen>
 8010586:	4583      	cmp	fp, r0
 8010588:	d206      	bcs.n	8010598 <tcp_receive+0x1e0>
 801058a:	464b      	mov	r3, r9
 801058c:	f240 429e 	movw	r2, #1182	; 0x49e
 8010590:	491f      	ldr	r1, [pc, #124]	; (8010610 <tcp_receive+0x258>)
 8010592:	4650      	mov	r0, sl
 8010594:	f002 f85e 	bl	8012654 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010598:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801059c:	f7fe ffc4 	bl	800f528 <pbuf_clen>
 80105a0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 80105a4:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80105a6:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 80105a8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80105ac:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80105ae:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 80105b2:	4640      	mov	r0, r8
        recv_acked += next->len;
 80105b4:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 80105b6:	f7ff f979 	bl	800f8ac <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 80105ba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d0b3      	beq.n	801052a <tcp_receive+0x172>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80105c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d1b0      	bne.n	801052a <tcp_receive+0x172>
 80105c8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d1ad      	bne.n	801052a <tcp_receive+0x172>
 80105ce:	464b      	mov	r3, r9
 80105d0:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80105d4:	490f      	ldr	r1, [pc, #60]	; (8010614 <tcp_receive+0x25c>)
 80105d6:	4650      	mov	r0, sl
 80105d8:	f002 f83c 	bl	8012654 <iprintf>
 80105dc:	e7a5      	b.n	801052a <tcp_receive+0x172>
        pcb->rtime = 0;
 80105de:	8623      	strh	r3, [r4, #48]	; 0x30
 80105e0:	e7ac      	b.n	801053c <tcp_receive+0x184>
      tcp_send_empty_ack(pcb);
 80105e2:	4620      	mov	r0, r4
 80105e4:	f001 fa94 	bl	8011b10 <tcp_send_empty_ack>
 80105e8:	e75b      	b.n	80104a2 <tcp_receive+0xea>
 80105ea:	bf00      	nop
 80105ec:	08014b8c 	.word	0x08014b8c
 80105f0:	08014bc4 	.word	0x08014bc4
 80105f4:	0801342a 	.word	0x0801342a
 80105f8:	24000210 	.word	0x24000210
 80105fc:	24000230 	.word	0x24000230
 8010600:	2400020c 	.word	0x2400020c
 8010604:	24000238 	.word	0x24000238
 8010608:	24000224 	.word	0x24000224
 801060c:	24000246 	.word	0x24000246
 8010610:	08014bdd 	.word	0x08014bdd
 8010614:	08014c05 	.word	0x08014c05
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010618:	682a      	ldr	r2, [r5, #0]
 801061a:	68db      	ldr	r3, [r3, #12]
 801061c:	9201      	str	r2, [sp, #4]
 801061e:	6858      	ldr	r0, [r3, #4]
 8010620:	f7fc ffea 	bl	800d5f8 <lwip_htonl>
 8010624:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8010626:	4683      	mov	fp, r0
 8010628:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	8998      	ldrh	r0, [r3, #12]
 8010630:	f7fc ffdf 	bl	800d5f2 <lwip_htons>
 8010634:	9a01      	ldr	r2, [sp, #4]
 8010636:	f010 0003 	ands.w	r0, r0, #3
 801063a:	eba2 0808 	sub.w	r8, r2, r8
 801063e:	bf18      	it	ne
 8010640:	2001      	movne	r0, #1
 8010642:	eba8 080b 	sub.w	r8, r8, fp
 8010646:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 801064a:	f1b8 0f00 	cmp.w	r8, #0
 801064e:	db3d      	blt.n	80106cc <tcp_receive+0x314>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010650:	682b      	ldr	r3, [r5, #0]
 8010652:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8010654:	1a9b      	subs	r3, r3, r2
 8010656:	2b00      	cmp	r3, #0
 8010658:	dc38      	bgt.n	80106cc <tcp_receive+0x314>
      next = pcb->unsent;
 801065a:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 801065e:	f8d8 3000 	ldr.w	r3, [r8]
 8010662:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8010664:	b90b      	cbnz	r3, 801066a <tcp_receive+0x2b2>
        pcb->unsent_oversize = 0;
 8010666:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801066a:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 801066e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010672:	f7fe ff59 	bl	800f528 <pbuf_clen>
 8010676:	4583      	cmp	fp, r0
 8010678:	d206      	bcs.n	8010688 <tcp_receive+0x2d0>
 801067a:	4653      	mov	r3, sl
 801067c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010680:	49ba      	ldr	r1, [pc, #744]	; (801096c <tcp_receive+0x5b4>)
 8010682:	4648      	mov	r0, r9
 8010684:	f001 ffe6 	bl	8012654 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010688:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801068c:	f7fe ff4c 	bl	800f528 <pbuf_clen>
 8010690:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8010694:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010696:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8010698:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801069c:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 801069e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 80106a2:	4640      	mov	r0, r8
      recv_acked += next->len;
 80106a4:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 80106a6:	f7ff f901 	bl	800f8ac <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80106aa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80106ae:	b153      	cbz	r3, 80106c6 <tcp_receive+0x30e>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80106b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80106b2:	b943      	cbnz	r3, 80106c6 <tcp_receive+0x30e>
 80106b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80106b6:	b933      	cbnz	r3, 80106c6 <tcp_receive+0x30e>
 80106b8:	4653      	mov	r3, sl
 80106ba:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80106be:	49ac      	ldr	r1, [pc, #688]	; (8010970 <tcp_receive+0x5b8>)
 80106c0:	4648      	mov	r0, r9
 80106c2:	f001 ffc7 	bl	8012654 <iprintf>
    while (pcb->unsent != NULL &&
 80106c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1a5      	bne.n	8010618 <tcp_receive+0x260>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80106cc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80106d0:	883a      	ldrh	r2, [r7, #0]
 80106d2:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80106d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 80106d6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80106da:	2a00      	cmp	r2, #0
 80106dc:	f040 8117 	bne.w	801090e <tcp_receive+0x556>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80106e0:	4fa4      	ldr	r7, [pc, #656]	; (8010974 <tcp_receive+0x5bc>)
 80106e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80106e4:	8838      	ldrh	r0, [r7, #0]
 80106e6:	2800      	cmp	r0, #0
 80106e8:	f000 831f 	beq.w	8010d2a <tcp_receive+0x972>
 80106ec:	7d23      	ldrb	r3, [r4, #20]
 80106ee:	2b06      	cmp	r3, #6
 80106f0:	f200 831b 	bhi.w	8010d2a <tcp_receive+0x972>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80106f4:	6833      	ldr	r3, [r6, #0]
 80106f6:	1ad5      	subs	r5, r2, r3
 80106f8:	2d01      	cmp	r5, #1
 80106fa:	f100 815c 	bmi.w	80109b6 <tcp_receive+0x5fe>
 80106fe:	f1c3 0101 	rsb	r1, r3, #1
 8010702:	1a09      	subs	r1, r1, r0
 8010704:	4411      	add	r1, r2
 8010706:	2900      	cmp	r1, #0
 8010708:	f300 8155 	bgt.w	80109b6 <tcp_receive+0x5fe>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801070c:	4b9a      	ldr	r3, [pc, #616]	; (8010978 <tcp_receive+0x5c0>)
      off = pcb->rcv_nxt - seqno;
 801070e:	46aa      	mov	sl, r5
      struct pbuf *p = inseg.p;
 8010710:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010714:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010716:	f1b9 0f00 	cmp.w	r9, #0
 801071a:	d106      	bne.n	801072a <tcp_receive+0x372>
 801071c:	4b97      	ldr	r3, [pc, #604]	; (801097c <tcp_receive+0x5c4>)
 801071e:	f240 523c 	movw	r2, #1340	; 0x53c
 8010722:	4997      	ldr	r1, [pc, #604]	; (8010980 <tcp_receive+0x5c8>)
 8010724:	4897      	ldr	r0, [pc, #604]	; (8010984 <tcp_receive+0x5cc>)
 8010726:	f001 ff95 	bl	8012654 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801072a:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 801072e:	429d      	cmp	r5, r3
 8010730:	dd06      	ble.n	8010740 <tcp_receive+0x388>
 8010732:	4b92      	ldr	r3, [pc, #584]	; (801097c <tcp_receive+0x5c4>)
 8010734:	f240 523d 	movw	r2, #1341	; 0x53d
 8010738:	4993      	ldr	r1, [pc, #588]	; (8010988 <tcp_receive+0x5d0>)
 801073a:	4892      	ldr	r0, [pc, #584]	; (8010984 <tcp_receive+0x5cc>)
 801073c:	f001 ff8a 	bl	8012654 <iprintf>
      if (inseg.p->len < off) {
 8010740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010744:	8943      	ldrh	r3, [r0, #10]
 8010746:	429d      	cmp	r5, r3
 8010748:	f340 812a 	ble.w	80109a0 <tcp_receive+0x5e8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801074c:	8903      	ldrh	r3, [r0, #8]
 801074e:	429d      	cmp	r5, r3
 8010750:	dd06      	ble.n	8010760 <tcp_receive+0x3a8>
 8010752:	4b8a      	ldr	r3, [pc, #552]	; (801097c <tcp_receive+0x5c4>)
 8010754:	f240 523f 	movw	r2, #1343	; 0x53f
 8010758:	498c      	ldr	r1, [pc, #560]	; (801098c <tcp_receive+0x5d4>)
 801075a:	488a      	ldr	r0, [pc, #552]	; (8010984 <tcp_receive+0x5cc>)
 801075c:	f001 ff7a 	bl	8012654 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010760:	f8d8 3004 	ldr.w	r3, [r8, #4]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8010764:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010766:	8919      	ldrh	r1, [r3, #8]
 8010768:	1b4d      	subs	r5, r1, r5
 801076a:	b2ad      	uxth	r5, r5
        while (p->len < off) {
 801076c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8010770:	459a      	cmp	sl, r3
 8010772:	f300 80f1 	bgt.w	8010958 <tcp_receive+0x5a0>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8010776:	f1ca 0100 	rsb	r1, sl, #0
 801077a:	4648      	mov	r0, r9
 801077c:	b209      	sxth	r1, r1
 801077e:	f7fe fd1b 	bl	800f1b8 <pbuf_header>
 8010782:	b130      	cbz	r0, 8010792 <tcp_receive+0x3da>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010784:	4b7d      	ldr	r3, [pc, #500]	; (801097c <tcp_receive+0x5c4>)
 8010786:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801078a:	4981      	ldr	r1, [pc, #516]	; (8010990 <tcp_receive+0x5d8>)
 801078c:	487d      	ldr	r0, [pc, #500]	; (8010984 <tcp_receive+0x5cc>)
 801078e:	f001 ff61 	bl	8012654 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8010792:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8010796:	6833      	ldr	r3, [r6, #0]
 8010798:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801079a:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801079c:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 801079e:	1a9b      	subs	r3, r3, r2
 80107a0:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80107a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107a8:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80107aa:	6831      	ldr	r1, [r6, #0]
 80107ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80107ae:	1a8b      	subs	r3, r1, r2
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f2c0 82b4 	blt.w	8010d1e <tcp_receive+0x966>
 80107b6:	1c4b      	adds	r3, r1, #1
 80107b8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80107ba:	1a9b      	subs	r3, r3, r2
 80107bc:	1a1b      	subs	r3, r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f300 82ad 	bgt.w	8010d1e <tcp_receive+0x966>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80107c4:	4291      	cmp	r1, r2
 80107c6:	f040 81ca 	bne.w	8010b5e <tcp_receive+0x7a6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80107ca:	4d6b      	ldr	r5, [pc, #428]	; (8010978 <tcp_receive+0x5c0>)
 80107cc:	68eb      	ldr	r3, [r5, #12]
 80107ce:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80107d2:	8998      	ldrh	r0, [r3, #12]
 80107d4:	f7fc ff0d 	bl	800d5f2 <lwip_htons>
 80107d8:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 80107dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 80107de:	bf18      	it	ne
 80107e0:	2001      	movne	r0, #1
 80107e2:	4440      	add	r0, r8
 80107e4:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 80107e6:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 80107e8:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 80107ea:	d241      	bcs.n	8010870 <tcp_receive+0x4b8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80107ec:	68eb      	ldr	r3, [r5, #12]
 80107ee:	8998      	ldrh	r0, [r3, #12]
 80107f0:	f7fc feff 	bl	800d5f2 <lwip_htons>
 80107f4:	07c2      	lsls	r2, r0, #31
 80107f6:	d510      	bpl.n	801081a <tcp_receive+0x462>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80107f8:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80107fc:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8010800:	4640      	mov	r0, r8
 8010802:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8010806:	f7fc fef4 	bl	800d5f2 <lwip_htons>
 801080a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801080e:	f7fc fef0 	bl	800d5f2 <lwip_htons>
 8010812:	ea40 0808 	orr.w	r8, r0, r8
 8010816:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801081a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801081c:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801081e:	68eb      	ldr	r3, [r5, #12]
 8010820:	8998      	ldrh	r0, [r3, #12]
 8010822:	f7fc fee6 	bl	800d5f2 <lwip_htons>
 8010826:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010828:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 801082a:	bf42      	ittt	mi
 801082c:	892b      	ldrhmi	r3, [r5, #8]
 801082e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010832:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8010834:	8929      	ldrh	r1, [r5, #8]
 8010836:	f7fe fe07 	bl	800f448 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801083a:	68eb      	ldr	r3, [r5, #12]
 801083c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8010840:	8998      	ldrh	r0, [r3, #12]
 8010842:	f7fc fed6 	bl	800d5f2 <lwip_htons>
 8010846:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801084a:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801084c:	bf18      	it	ne
 801084e:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010850:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8010852:	4440      	add	r0, r8
 8010854:	b280      	uxth	r0, r0
 8010856:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010858:	4418      	add	r0, r3
 801085a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801085c:	4413      	add	r3, r2
 801085e:	4298      	cmp	r0, r3
 8010860:	d006      	beq.n	8010870 <tcp_receive+0x4b8>
 8010862:	4b46      	ldr	r3, [pc, #280]	; (801097c <tcp_receive+0x5c4>)
 8010864:	f240 527f 	movw	r2, #1407	; 0x57f
 8010868:	494a      	ldr	r1, [pc, #296]	; (8010994 <tcp_receive+0x5dc>)
 801086a:	4846      	ldr	r0, [pc, #280]	; (8010984 <tcp_receive+0x5cc>)
 801086c:	f001 fef2 	bl	8012654 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010870:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010872:	2b00      	cmp	r3, #0
 8010874:	f000 80ae 	beq.w	80109d4 <tcp_receive+0x61c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010878:	68eb      	ldr	r3, [r5, #12]
 801087a:	8998      	ldrh	r0, [r3, #12]
 801087c:	f7fc feb9 	bl	800d5f2 <lwip_htons>
 8010880:	07c0      	lsls	r0, r0, #31
 8010882:	f100 80a4 	bmi.w	80109ce <tcp_receive+0x616>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8010886:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801088a:	f1b8 0f00 	cmp.w	r8, #0
 801088e:	d03b      	beq.n	8010908 <tcp_receive+0x550>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010890:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8010894:	6830      	ldr	r0, [r6, #0]
 8010896:	883b      	ldrh	r3, [r7, #0]
 8010898:	f8de 2004 	ldr.w	r2, [lr, #4]
 801089c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80108a0:	4403      	add	r3, r0
 80108a2:	4411      	add	r1, r2
 80108a4:	1a59      	subs	r1, r3, r1
            while (next &&
 80108a6:	2900      	cmp	r1, #0
 80108a8:	f280 80d1 	bge.w	8010a4e <tcp_receive+0x696>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 80108ac:	1a9b      	subs	r3, r3, r2
            if (next &&
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	dd2a      	ble.n	8010908 <tcp_receive+0x550>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80108b2:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80108b4:	1a12      	subs	r2, r2, r0
 80108b6:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80108b8:	8998      	ldrh	r0, [r3, #12]
 80108ba:	f7fc fe9a 	bl	800d5f2 <lwip_htons>
 80108be:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 80108c0:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 80108c2:	bf42      	ittt	mi
 80108c4:	892b      	ldrhmi	r3, [r5, #8]
 80108c6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80108ca:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80108cc:	8929      	ldrh	r1, [r5, #8]
 80108ce:	f7fe fdbb 	bl	800f448 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80108d2:	68eb      	ldr	r3, [r5, #12]
 80108d4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80108d8:	8998      	ldrh	r0, [r3, #12]
 80108da:	f7fc fe8a 	bl	800d5f2 <lwip_htons>
 80108de:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80108e2:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 80108e4:	bf18      	it	ne
 80108e6:	2001      	movne	r0, #1
 80108e8:	4448      	add	r0, r9
 80108ea:	b280      	uxth	r0, r0
 80108ec:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80108ee:	4418      	add	r0, r3
 80108f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	4298      	cmp	r0, r3
 80108f8:	d006      	beq.n	8010908 <tcp_receive+0x550>
 80108fa:	4b20      	ldr	r3, [pc, #128]	; (801097c <tcp_receive+0x5c4>)
 80108fc:	f240 52af 	movw	r2, #1455	; 0x5af
 8010900:	4925      	ldr	r1, [pc, #148]	; (8010998 <tcp_receive+0x5e0>)
 8010902:	4820      	ldr	r0, [pc, #128]	; (8010984 <tcp_receive+0x5cc>)
 8010904:	f001 fea6 	bl	8012654 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010908:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 801090c:	e062      	b.n	80109d4 <tcp_receive+0x61c>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801090e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010910:	6829      	ldr	r1, [r5, #0]
 8010912:	1a5b      	subs	r3, r3, r1
 8010914:	2b00      	cmp	r3, #0
 8010916:	f6bf aee3 	bge.w	80106e0 <tcp_receive+0x328>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801091a:	4b20      	ldr	r3, [pc, #128]	; (801099c <tcp_receive+0x5e4>)
      m = m - (pcb->sa >> 3);
 801091c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010920:	6819      	ldr	r1, [r3, #0]
 8010922:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sv >> 2);
 8010924:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = m - (pcb->sa >> 3);
 8010928:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv += m;
 801092c:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = m - (pcb->sa >> 3);
 8010930:	b289      	uxth	r1, r1
 8010932:	b20b      	sxth	r3, r1
      pcb->sa += m;
 8010934:	4408      	add	r0, r1
      if (m < 0) {
 8010936:	2b00      	cmp	r3, #0
      pcb->sa += m;
 8010938:	b200      	sxth	r0, r0
        m = -m;
 801093a:	bfb8      	it	lt
 801093c:	4249      	neglt	r1, r1
      pcb->sa += m;
 801093e:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = -m;
 8010940:	bfb8      	it	lt
 8010942:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8010944:	4413      	add	r3, r2
 8010946:	b29b      	uxth	r3, r3
 8010948:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801094a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 801094e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8010952:	2300      	movs	r3, #0
 8010954:	6363      	str	r3, [r4, #52]	; 0x34
 8010956:	e6c3      	b.n	80106e0 <tcp_receive+0x328>
          p->tot_len = new_tot_len;
 8010958:	f8a9 5008 	strh.w	r5, [r9, #8]
          off -= p->len;
 801095c:	ebaa 0a03 	sub.w	sl, sl, r3
          p->len = 0;
 8010960:	f8a9 200a 	strh.w	r2, [r9, #10]
          p = p->next;
 8010964:	f8d9 9000 	ldr.w	r9, [r9]
 8010968:	e700      	b.n	801076c <tcp_receive+0x3b4>
 801096a:	bf00      	nop
 801096c:	08014bdd 	.word	0x08014bdd
 8010970:	08014c05 	.word	0x08014c05
 8010974:	24000246 	.word	0x24000246
 8010978:	24000214 	.word	0x24000214
 801097c:	08014b8c 	.word	0x08014b8c
 8010980:	08014c25 	.word	0x08014c25
 8010984:	0801342a 	.word	0x0801342a
 8010988:	08014c35 	.word	0x08014c35
 801098c:	08014c44 	.word	0x08014c44
 8010990:	08014c54 	.word	0x08014c54
 8010994:	08014c67 	.word	0x08014c67
 8010998:	08014c9e 	.word	0x08014c9e
 801099c:	24004cb8 	.word	0x24004cb8
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80109a0:	4269      	negs	r1, r5
 80109a2:	b209      	sxth	r1, r1
 80109a4:	f7fe fc08 	bl	800f1b8 <pbuf_header>
 80109a8:	2800      	cmp	r0, #0
 80109aa:	f43f aef2 	beq.w	8010792 <tcp_receive+0x3da>
          LWIP_ASSERT("pbuf_header failed", 0);
 80109ae:	4b9d      	ldr	r3, [pc, #628]	; (8010c24 <tcp_receive+0x86c>)
 80109b0:	f240 5251 	movw	r2, #1361	; 0x551
 80109b4:	e6e9      	b.n	801078a <tcp_receive+0x3d2>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80109b6:	1a9b      	subs	r3, r3, r2
 80109b8:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 80109ba:	bfbe      	ittt	lt
 80109bc:	7ea3      	ldrblt	r3, [r4, #26]
 80109be:	f043 0302 	orrlt.w	r3, r3, #2
 80109c2:	76a3      	strblt	r3, [r4, #26]
 80109c4:	e6f1      	b.n	80107aa <tcp_receive+0x3f2>
              pcb->ooseq = pcb->ooseq->next;
 80109c6:	6803      	ldr	r3, [r0, #0]
 80109c8:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80109ca:	f7fe ff6f 	bl	800f8ac <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80109ce:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80109d0:	2800      	cmp	r0, #0
 80109d2:	d1f8      	bne.n	80109c6 <tcp_receive+0x60e>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80109d4:	883a      	ldrh	r2, [r7, #0]
 80109d6:	6833      	ldr	r3, [r6, #0]
 80109d8:	4413      	add	r3, r2
 80109da:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80109dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80109de:	4293      	cmp	r3, r2
 80109e0:	d206      	bcs.n	80109f0 <tcp_receive+0x638>
 80109e2:	4b90      	ldr	r3, [pc, #576]	; (8010c24 <tcp_receive+0x86c>)
 80109e4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80109e8:	498f      	ldr	r1, [pc, #572]	; (8010c28 <tcp_receive+0x870>)
 80109ea:	4890      	ldr	r0, [pc, #576]	; (8010c2c <tcp_receive+0x874>)
 80109ec:	f001 fe32 	bl	8012654 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80109f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80109f2:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 80109f4:	883a      	ldrh	r2, [r7, #0]
 80109f6:	1a9b      	subs	r3, r3, r2
 80109f8:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 80109fa:	f7fe feed 	bl	800f7d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80109fe:	686b      	ldr	r3, [r5, #4]
 8010a00:	891a      	ldrh	r2, [r3, #8]
 8010a02:	b11a      	cbz	r2, 8010a0c <tcp_receive+0x654>
          recv_data = inseg.p;
 8010a04:	4a8a      	ldr	r2, [pc, #552]	; (8010c30 <tcp_receive+0x878>)
 8010a06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a0c:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010a0e:	4f85      	ldr	r7, [pc, #532]	; (8010c24 <tcp_receive+0x86c>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a10:	8998      	ldrh	r0, [r3, #12]
 8010a12:	f7fc fdee 	bl	800d5f2 <lwip_htons>
 8010a16:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010a18:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8010c3c <tcp_receive+0x884>
          recv_flags |= TF_GOT_FIN;
 8010a1c:	bf48      	it	mi
 8010a1e:	4a85      	ldrmi	r2, [pc, #532]	; (8010c34 <tcp_receive+0x87c>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010a20:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8010c2c <tcp_receive+0x874>
          recv_flags |= TF_GOT_FIN;
 8010a24:	bf42      	ittt	mi
 8010a26:	7813      	ldrbmi	r3, [r2, #0]
 8010a28:	f043 0320 	orrmi.w	r3, r3, #32
 8010a2c:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8010a2e:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8010a30:	b125      	cbz	r5, 8010a3c <tcp_receive+0x684>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010a32:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8010a34:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010a36:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8010a38:	428b      	cmp	r3, r1
 8010a3a:	d033      	beq.n	8010aa4 <tcp_receive+0x6ec>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010a3c:	7ea3      	ldrb	r3, [r4, #26]
 8010a3e:	07d9      	lsls	r1, r3, #31
 8010a40:	f140 8087 	bpl.w	8010b52 <tcp_receive+0x79a>
 8010a44:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8010a48:	f043 0302 	orr.w	r3, r3, #2
 8010a4c:	e083      	b.n	8010b56 <tcp_receive+0x79e>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010a4e:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8010a52:	f7fc fdce 	bl	800d5f2 <lwip_htons>
 8010a56:	07c1      	lsls	r1, r0, #31
 8010a58:	d51d      	bpl.n	8010a96 <tcp_receive+0x6de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010a5a:	68eb      	ldr	r3, [r5, #12]
 8010a5c:	8998      	ldrh	r0, [r3, #12]
 8010a5e:	f7fc fdc8 	bl	800d5f2 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010a62:	0782      	lsls	r2, r0, #30
 8010a64:	d417      	bmi.n	8010a96 <tcp_receive+0x6de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010a66:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8010a6a:	2001      	movs	r0, #1
 8010a6c:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8010a70:	f7fc fdbf 	bl	800d5f2 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8010a74:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010a76:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 8010a7a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010a7e:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010a82:	8998      	ldrh	r0, [r3, #12]
 8010a84:	f7fc fdb5 	bl	800d5f2 <lwip_htons>
 8010a88:	f010 0003 	ands.w	r0, r0, #3
 8010a8c:	bf18      	it	ne
 8010a8e:	2001      	movne	r0, #1
 8010a90:	4481      	add	r9, r0
 8010a92:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8010a96:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8010a9a:	4640      	mov	r0, r8
 8010a9c:	f7fe ff06 	bl	800f8ac <tcp_seg_free>
              next = next->next;
 8010aa0:	46c8      	mov	r8, r9
 8010aa2:	e6f2      	b.n	801088a <tcp_receive+0x4d2>
          seqno = pcb->ooseq->tcphdr->seqno;
 8010aa4:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010aa6:	8990      	ldrh	r0, [r2, #12]
 8010aa8:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8010aac:	f7fc fda1 	bl	800d5f2 <lwip_htons>
 8010ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ab2:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010ab6:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010aba:	bf18      	it	ne
 8010abc:	2001      	movne	r0, #1
 8010abe:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010ac0:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010ac2:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010ac4:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010ac8:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010aca:	8998      	ldrh	r0, [r3, #12]
 8010acc:	f7fc fd91 	bl	800d5f2 <lwip_htons>
 8010ad0:	f010 0003 	ands.w	r0, r0, #3
 8010ad4:	bf18      	it	ne
 8010ad6:	2001      	movne	r0, #1
 8010ad8:	4458      	add	r0, fp
 8010ada:	4582      	cmp	sl, r0
 8010adc:	d206      	bcs.n	8010aec <tcp_receive+0x734>
 8010ade:	463b      	mov	r3, r7
 8010ae0:	f240 52de 	movw	r2, #1502	; 0x5de
 8010ae4:	4641      	mov	r1, r8
 8010ae6:	4648      	mov	r0, r9
 8010ae8:	f001 fdb4 	bl	8012654 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010aec:	68eb      	ldr	r3, [r5, #12]
 8010aee:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8010af2:	8998      	ldrh	r0, [r3, #12]
 8010af4:	f7fc fd7d 	bl	800d5f2 <lwip_htons>
 8010af8:	f010 0003 	ands.w	r0, r0, #3
 8010afc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8010afe:	bf18      	it	ne
 8010b00:	2001      	movne	r0, #1
 8010b02:	4450      	add	r0, sl
 8010b04:	1a18      	subs	r0, r3, r0
 8010b06:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f7fe fe65 	bl	800f7d8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8010b0e:	6869      	ldr	r1, [r5, #4]
 8010b10:	890b      	ldrh	r3, [r1, #8]
 8010b12:	b133      	cbz	r3, 8010b22 <tcp_receive+0x76a>
            if (recv_data) {
 8010b14:	4b46      	ldr	r3, [pc, #280]	; (8010c30 <tcp_receive+0x878>)
 8010b16:	6818      	ldr	r0, [r3, #0]
 8010b18:	b1c8      	cbz	r0, 8010b4e <tcp_receive+0x796>
              pbuf_cat(recv_data, cseg->p);
 8010b1a:	f7fe fd21 	bl	800f560 <pbuf_cat>
            cseg->p = NULL;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010b22:	68eb      	ldr	r3, [r5, #12]
 8010b24:	8998      	ldrh	r0, [r3, #12]
 8010b26:	f7fc fd64 	bl	800d5f2 <lwip_htons>
 8010b2a:	07c0      	lsls	r0, r0, #31
 8010b2c:	d509      	bpl.n	8010b42 <tcp_receive+0x78a>
            recv_flags |= TF_GOT_FIN;
 8010b2e:	4a41      	ldr	r2, [pc, #260]	; (8010c34 <tcp_receive+0x87c>)
 8010b30:	7813      	ldrb	r3, [r2, #0]
 8010b32:	f043 0320 	orr.w	r3, r3, #32
 8010b36:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010b38:	7d23      	ldrb	r3, [r4, #20]
 8010b3a:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8010b3c:	bf04      	itt	eq
 8010b3e:	2307      	moveq	r3, #7
 8010b40:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8010b42:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8010b44:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8010b46:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8010b48:	f7fe feb0 	bl	800f8ac <tcp_seg_free>
 8010b4c:	e76f      	b.n	8010a2e <tcp_receive+0x676>
              recv_data = cseg->p;
 8010b4e:	6019      	str	r1, [r3, #0]
 8010b50:	e7e5      	b.n	8010b1e <tcp_receive+0x766>
        tcp_ack(pcb);
 8010b52:	f043 0301 	orr.w	r3, r3, #1
 8010b56:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8010b58:	b003      	add	sp, #12
 8010b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f000 ffd6 	bl	8011b10 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8010b64:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8010b66:	b925      	cbnz	r5, 8010b72 <tcp_receive+0x7ba>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010b68:	4833      	ldr	r0, [pc, #204]	; (8010c38 <tcp_receive+0x880>)
 8010b6a:	f7fe feb5 	bl	800f8d8 <tcp_seg_copy>
 8010b6e:	6720      	str	r0, [r4, #112]	; 0x70
 8010b70:	e7f2      	b.n	8010b58 <tcp_receive+0x7a0>
            if (seqno == next->tcphdr->seqno) {
 8010b72:	6833      	ldr	r3, [r6, #0]
 8010b74:	f04f 0800 	mov.w	r8, #0
 8010b78:	f103 3eff 	add.w	lr, r3, #4294967295
 8010b7c:	f103 0c01 	add.w	ip, r3, #1
 8010b80:	68e8      	ldr	r0, [r5, #12]
 8010b82:	6842      	ldr	r2, [r0, #4]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d117      	bne.n	8010bb8 <tcp_receive+0x800>
              if (inseg.len > next->len) {
 8010b88:	482b      	ldr	r0, [pc, #172]	; (8010c38 <tcp_receive+0x880>)
 8010b8a:	892b      	ldrh	r3, [r5, #8]
 8010b8c:	8902      	ldrh	r2, [r0, #8]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d9e2      	bls.n	8010b58 <tcp_receive+0x7a0>
                cseg = tcp_seg_copy(&inseg);
 8010b92:	f7fe fea1 	bl	800f8d8 <tcp_seg_copy>
                if (cseg != NULL) {
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d0de      	beq.n	8010b58 <tcp_receive+0x7a0>
                  if (prev != NULL) {
 8010b9a:	f1b8 0f00 	cmp.w	r8, #0
 8010b9e:	d009      	beq.n	8010bb4 <tcp_receive+0x7fc>
                    prev->next = cseg;
 8010ba0:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8010ba4:	4629      	mov	r1, r5
}
 8010ba6:	b003      	add	sp, #12
 8010ba8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8010bac:	f7ff bbc6 	b.w	801033c <tcp_oos_insert_segment>
 8010bb0:	460d      	mov	r5, r1
 8010bb2:	e7e5      	b.n	8010b80 <tcp_receive+0x7c8>
                    pcb->ooseq = cseg;
 8010bb4:	6720      	str	r0, [r4, #112]	; 0x70
 8010bb6:	e7f5      	b.n	8010ba4 <tcp_receive+0x7ec>
              if (prev == NULL) {
 8010bb8:	f1b8 0f00 	cmp.w	r8, #0
 8010bbc:	d109      	bne.n	8010bd2 <tcp_receive+0x81a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010bbe:	1a99      	subs	r1, r3, r2
 8010bc0:	2900      	cmp	r1, #0
 8010bc2:	da3d      	bge.n	8010c40 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8010bc4:	481c      	ldr	r0, [pc, #112]	; (8010c38 <tcp_receive+0x880>)
 8010bc6:	f7fe fe87 	bl	800f8d8 <tcp_seg_copy>
                  if (cseg != NULL) {
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d0c4      	beq.n	8010b58 <tcp_receive+0x7a0>
                    pcb->ooseq = cseg;
 8010bce:	6720      	str	r0, [r4, #112]	; 0x70
 8010bd0:	e7e8      	b.n	8010ba4 <tcp_receive+0x7ec>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8010bd2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8010bd6:	6849      	ldr	r1, [r1, #4]
 8010bd8:	ebae 0101 	sub.w	r1, lr, r1
 8010bdc:	2900      	cmp	r1, #0
 8010bde:	db2f      	blt.n	8010c40 <tcp_receive+0x888>
 8010be0:	ebac 0102 	sub.w	r1, ip, r2
 8010be4:	2900      	cmp	r1, #0
 8010be6:	dc2b      	bgt.n	8010c40 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8010be8:	4813      	ldr	r0, [pc, #76]	; (8010c38 <tcp_receive+0x880>)
 8010bea:	f7fe fe75 	bl	800f8d8 <tcp_seg_copy>
                  if (cseg != NULL) {
 8010bee:	4604      	mov	r4, r0
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	d0b1      	beq.n	8010b58 <tcp_receive+0x7a0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010bf4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bf8:	6831      	ldr	r1, [r6, #0]
 8010bfa:	685a      	ldr	r2, [r3, #4]
 8010bfc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8010c00:	4413      	add	r3, r2
 8010c02:	1a5b      	subs	r3, r3, r1
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	dd07      	ble.n	8010c18 <tcp_receive+0x860>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010c08:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 8010c0a:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010c0e:	b289      	uxth	r1, r1
 8010c10:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010c14:	f7fe fc18 	bl	800f448 <pbuf_realloc>
                    prev->next = cseg;
 8010c18:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	4620      	mov	r0, r4
 8010c20:	e7c1      	b.n	8010ba6 <tcp_receive+0x7ee>
 8010c22:	bf00      	nop
 8010c24:	08014b8c 	.word	0x08014b8c
 8010c28:	08014cd9 	.word	0x08014cd9
 8010c2c:	0801342a 	.word	0x0801342a
 8010c30:	24000228 	.word	0x24000228
 8010c34:	2400022c 	.word	0x2400022c
 8010c38:	24000214 	.word	0x24000214
 8010c3c:	08014cf8 	.word	0x08014cf8
              if (next->next == NULL &&
 8010c40:	6829      	ldr	r1, [r5, #0]
 8010c42:	46a8      	mov	r8, r5
 8010c44:	2900      	cmp	r1, #0
 8010c46:	d1b3      	bne.n	8010bb0 <tcp_receive+0x7f8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010c48:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	dd84      	ble.n	8010b58 <tcp_receive+0x7a0>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010c4e:	8980      	ldrh	r0, [r0, #12]
 8010c50:	f7fc fccf 	bl	800d5f2 <lwip_htons>
 8010c54:	07c2      	lsls	r2, r0, #31
 8010c56:	f53f af7f 	bmi.w	8010b58 <tcp_receive+0x7a0>
                next->next = tcp_seg_copy(&inseg);
 8010c5a:	483d      	ldr	r0, [pc, #244]	; (8010d50 <tcp_receive+0x998>)
 8010c5c:	f7fe fe3c 	bl	800f8d8 <tcp_seg_copy>
 8010c60:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8010c62:	2800      	cmp	r0, #0
 8010c64:	f43f af78 	beq.w	8010b58 <tcp_receive+0x7a0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010c68:	68eb      	ldr	r3, [r5, #12]
 8010c6a:	6831      	ldr	r1, [r6, #0]
 8010c6c:	685a      	ldr	r2, [r3, #4]
 8010c6e:	892b      	ldrh	r3, [r5, #8]
 8010c70:	4413      	add	r3, r2
 8010c72:	1a5b      	subs	r3, r3, r1
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	dd05      	ble.n	8010c84 <tcp_receive+0x8cc>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010c78:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 8010c7a:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010c7c:	b289      	uxth	r1, r1
 8010c7e:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8010c80:	f7fe fbe2 	bl	800f448 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010c84:	6832      	ldr	r2, [r6, #0]
 8010c86:	883b      	ldrh	r3, [r7, #0]
 8010c88:	4413      	add	r3, r2
 8010c8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010c8c:	1a9b      	subs	r3, r3, r2
 8010c8e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8010c90:	1a9b      	subs	r3, r3, r2
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	f77f af60 	ble.w	8010b58 <tcp_receive+0x7a0>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010c98:	682b      	ldr	r3, [r5, #0]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	8998      	ldrh	r0, [r3, #12]
 8010c9e:	f7fc fca8 	bl	800d5f2 <lwip_htons>
 8010ca2:	07c3      	lsls	r3, r0, #31
 8010ca4:	d511      	bpl.n	8010cca <tcp_receive+0x912>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010ca6:	682b      	ldr	r3, [r5, #0]
 8010ca8:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8010cac:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8010cb0:	4640      	mov	r0, r8
 8010cb2:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8010cb6:	f7fc fc9c 	bl	800d5f2 <lwip_htons>
 8010cba:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8010cbe:	f7fc fc98 	bl	800d5f2 <lwip_htons>
 8010cc2:	ea40 0808 	orr.w	r8, r0, r8
 8010cc6:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010cca:	6832      	ldr	r2, [r6, #0]
 8010ccc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8010cce:	682b      	ldr	r3, [r5, #0]
 8010cd0:	1a89      	subs	r1, r1, r2
 8010cd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8010cd4:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010cd6:	4411      	add	r1, r2
 8010cd8:	b289      	uxth	r1, r1
 8010cda:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010cdc:	f7fe fbb4 	bl	800f448 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010ce0:	682b      	ldr	r3, [r5, #0]
 8010ce2:	891d      	ldrh	r5, [r3, #8]
 8010ce4:	68db      	ldr	r3, [r3, #12]
 8010ce6:	8998      	ldrh	r0, [r3, #12]
 8010ce8:	f7fc fc83 	bl	800d5f2 <lwip_htons>
 8010cec:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010cf0:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8010cf2:	bf18      	it	ne
 8010cf4:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010cf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8010cf8:	4428      	add	r0, r5
 8010cfa:	b280      	uxth	r0, r0
 8010cfc:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010cfe:	4418      	add	r0, r3
 8010d00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8010d02:	4413      	add	r3, r2
 8010d04:	4298      	cmp	r0, r3
 8010d06:	f43f af27 	beq.w	8010b58 <tcp_receive+0x7a0>
 8010d0a:	4b12      	ldr	r3, [pc, #72]	; (8010d54 <tcp_receive+0x99c>)
 8010d0c:	f240 627b 	movw	r2, #1659	; 0x67b
 8010d10:	4911      	ldr	r1, [pc, #68]	; (8010d58 <tcp_receive+0x9a0>)
 8010d12:	4812      	ldr	r0, [pc, #72]	; (8010d5c <tcp_receive+0x9a4>)
}
 8010d14:	b003      	add	sp, #12
 8010d16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010d1a:	f001 bc9b 	b.w	8012654 <iprintf>
      tcp_send_empty_ack(pcb);
 8010d1e:	4620      	mov	r0, r4
}
 8010d20:	b003      	add	sp, #12
 8010d22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8010d26:	f000 bef3 	b.w	8011b10 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010d2a:	6833      	ldr	r3, [r6, #0]
 8010d2c:	1a99      	subs	r1, r3, r2
 8010d2e:	2900      	cmp	r1, #0
 8010d30:	db06      	blt.n	8010d40 <tcp_receive+0x988>
 8010d32:	3301      	adds	r3, #1
 8010d34:	1a9b      	subs	r3, r3, r2
 8010d36:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8010d38:	1a9b      	subs	r3, r3, r2
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f77f af0c 	ble.w	8010b58 <tcp_receive+0x7a0>
      tcp_ack_now(pcb);
 8010d40:	7ea3      	ldrb	r3, [r4, #26]
 8010d42:	e681      	b.n	8010a48 <tcp_receive+0x690>
        pcb->dupacks = 0;
 8010d44:	2300      	movs	r3, #0
 8010d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d4a:	f7ff bbaa 	b.w	80104a2 <tcp_receive+0xea>
 8010d4e:	bf00      	nop
 8010d50:	24000214 	.word	0x24000214
 8010d54:	08014b8c 	.word	0x08014b8c
 8010d58:	08014c67 	.word	0x08014c67
 8010d5c:	0801342a 	.word	0x0801342a

08010d60 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8010d60:	4b0b      	ldr	r3, [pc, #44]	; (8010d90 <tcp_getoptbyte+0x30>)
 8010d62:	4a0c      	ldr	r2, [pc, #48]	; (8010d94 <tcp_getoptbyte+0x34>)
 8010d64:	6819      	ldr	r1, [r3, #0]
{
 8010d66:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8010d68:	b121      	cbz	r1, 8010d74 <tcp_getoptbyte+0x14>
 8010d6a:	480b      	ldr	r0, [pc, #44]	; (8010d98 <tcp_getoptbyte+0x38>)
 8010d6c:	8813      	ldrh	r3, [r2, #0]
 8010d6e:	8800      	ldrh	r0, [r0, #0]
 8010d70:	4283      	cmp	r3, r0
 8010d72:	d207      	bcs.n	8010d84 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8010d74:	4b09      	ldr	r3, [pc, #36]	; (8010d9c <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8010d76:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8010d78:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8010d7a:	1c48      	adds	r0, r1, #1
 8010d7c:	440b      	add	r3, r1
 8010d7e:	8010      	strh	r0, [r2, #0]
 8010d80:	7d18      	ldrb	r0, [r3, #20]
 8010d82:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8010d84:	1c5c      	adds	r4, r3, #1
 8010d86:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8010d88:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8010d8a:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8010d8c:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8010d8e:	bd10      	pop	{r4, pc}
 8010d90:	24000240 	.word	0x24000240
 8010d94:	24000234 	.word	0x24000234
 8010d98:	2400023c 	.word	0x2400023c
 8010d9c:	24000238 	.word	0x24000238

08010da0 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8010da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010da2:	4d19      	ldr	r5, [pc, #100]	; (8010e08 <tcp_parseopt.isra.1.part.2+0x68>)
 8010da4:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8010da6:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010da8:	4e18      	ldr	r6, [pc, #96]	; (8010e0c <tcp_parseopt.isra.1.part.2+0x6c>)
 8010daa:	802b      	strh	r3, [r5, #0]
 8010dac:	8834      	ldrh	r4, [r6, #0]
 8010dae:	882b      	ldrh	r3, [r5, #0]
 8010db0:	42a3      	cmp	r3, r4
 8010db2:	d300      	bcc.n	8010db6 <tcp_parseopt.isra.1.part.2+0x16>
 8010db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8010db6:	f7ff ffd3 	bl	8010d60 <tcp_getoptbyte>
      switch (opt) {
 8010dba:	2801      	cmp	r0, #1
 8010dbc:	d0f6      	beq.n	8010dac <tcp_parseopt.isra.1.part.2+0xc>
 8010dbe:	d3f9      	bcc.n	8010db4 <tcp_parseopt.isra.1.part.2+0x14>
 8010dc0:	2802      	cmp	r0, #2
 8010dc2:	d117      	bne.n	8010df4 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010dc4:	f7ff ffcc 	bl	8010d60 <tcp_getoptbyte>
 8010dc8:	2804      	cmp	r0, #4
 8010dca:	d1f3      	bne.n	8010db4 <tcp_parseopt.isra.1.part.2+0x14>
 8010dcc:	882b      	ldrh	r3, [r5, #0]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	42a3      	cmp	r3, r4
 8010dd2:	daef      	bge.n	8010db4 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8010dd4:	f7ff ffc4 	bl	8010d60 <tcp_getoptbyte>
 8010dd8:	0200      	lsls	r0, r0, #8
 8010dda:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8010ddc:	f7ff ffc0 	bl	8010d60 <tcp_getoptbyte>
 8010de0:	4320      	orrs	r0, r4
 8010de2:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010de4:	1e43      	subs	r3, r0, #1
 8010de6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010dea:	bf28      	it	cs
 8010dec:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8010df0:	8038      	strh	r0, [r7, #0]
 8010df2:	e7db      	b.n	8010dac <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8010df4:	f7ff ffb4 	bl	8010d60 <tcp_getoptbyte>
        if (data < 2) {
 8010df8:	2801      	cmp	r0, #1
 8010dfa:	d9db      	bls.n	8010db4 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010dfc:	882b      	ldrh	r3, [r5, #0]
 8010dfe:	3b02      	subs	r3, #2
 8010e00:	4418      	add	r0, r3
 8010e02:	8028      	strh	r0, [r5, #0]
 8010e04:	e7d2      	b.n	8010dac <tcp_parseopt.isra.1.part.2+0xc>
 8010e06:	bf00      	nop
 8010e08:	24000234 	.word	0x24000234
 8010e0c:	24000244 	.word	0x24000244

08010e10 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8010e10:	4b0d      	ldr	r3, [pc, #52]	; (8010e48 <tcp_input_delayed_close+0x38>)
{
 8010e12:	b510      	push	{r4, lr}
 8010e14:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8010e16:	7818      	ldrb	r0, [r3, #0]
 8010e18:	f010 0010 	ands.w	r0, r0, #16
 8010e1c:	d012      	beq.n	8010e44 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010e1e:	7ea3      	ldrb	r3, [r4, #26]
 8010e20:	06db      	lsls	r3, r3, #27
 8010e22:	d406      	bmi.n	8010e32 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010e24:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8010e28:	b11b      	cbz	r3, 8010e32 <tcp_input_delayed_close+0x22>
 8010e2a:	f06f 010e 	mvn.w	r1, #14
 8010e2e:	6920      	ldr	r0, [r4, #16]
 8010e30:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010e32:	4621      	mov	r1, r4
 8010e34:	4805      	ldr	r0, [pc, #20]	; (8010e4c <tcp_input_delayed_close+0x3c>)
 8010e36:	f7fe ff67 	bl	800fd08 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8010e3a:	2001      	movs	r0, #1
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	f7fe f85b 	bl	800eef8 <memp_free>
 8010e42:	2001      	movs	r0, #1
}
 8010e44:	bd10      	pop	{r4, pc}
 8010e46:	bf00      	nop
 8010e48:	2400022c 	.word	0x2400022c
 8010e4c:	24004cb4 	.word	0x24004cb4

08010e50 <tcp_input>:
{
 8010e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8010e54:	6843      	ldr	r3, [r0, #4]
{
 8010e56:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 8010e58:	4e9e      	ldr	r6, [pc, #632]	; (80110d4 <tcp_input+0x284>)
{
 8010e5a:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8010e5c:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8010e5e:	8943      	ldrh	r3, [r0, #10]
 8010e60:	2b13      	cmp	r3, #19
 8010e62:	f240 81b2 	bls.w	80111ca <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010e66:	4f9c      	ldr	r7, [pc, #624]	; (80110d8 <tcp_input+0x288>)
 8010e68:	6839      	ldr	r1, [r7, #0]
 8010e6a:	46b8      	mov	r8, r7
 8010e6c:	6978      	ldr	r0, [r7, #20]
 8010e6e:	f7fd fa50 	bl	800e312 <ip4_addr_isbroadcast_u32>
 8010e72:	4604      	mov	r4, r0
 8010e74:	2800      	cmp	r0, #0
 8010e76:	f040 81a8 	bne.w	80111ca <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010e80:	2be0      	cmp	r3, #224	; 0xe0
 8010e82:	f000 81a2 	beq.w	80111ca <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8010e86:	6833      	ldr	r3, [r6, #0]
 8010e88:	8998      	ldrh	r0, [r3, #12]
 8010e8a:	f7fc fbb2 	bl	800d5f2 <lwip_htons>
 8010e8e:	0a81      	lsrs	r1, r0, #10
 8010e90:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010e94:	2913      	cmp	r1, #19
 8010e96:	f240 8198 	bls.w	80111ca <tcp_input+0x37a>
 8010e9a:	b289      	uxth	r1, r1
 8010e9c:	892b      	ldrh	r3, [r5, #8]
 8010e9e:	428b      	cmp	r3, r1
 8010ea0:	f0c0 8193 	bcc.w	80111ca <tcp_input+0x37a>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8010ea4:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8010ea8:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8010eaa:	4a8c      	ldr	r2, [pc, #560]	; (80110dc <tcp_input+0x28c>)
 8010eac:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8010eae:	4f8c      	ldr	r7, [pc, #560]	; (80110e0 <tcp_input+0x290>)
  if (p->len >= hdrlen_bytes) {
 8010eb0:	4288      	cmp	r0, r1
 8010eb2:	9206      	str	r2, [sp, #24]
  tcphdr_opt2 = NULL;
 8010eb4:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8010eb6:	8013      	strh	r3, [r2, #0]
 8010eb8:	4c8a      	ldr	r4, [pc, #552]	; (80110e4 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8010eba:	d344      	bcc.n	8010f46 <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8010ebc:	4249      	negs	r1, r1
 8010ebe:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8010ec0:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8010ec2:	f7fe f979 	bl	800f1b8 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010ec6:	6834      	ldr	r4, [r6, #0]
  prev = NULL;
 8010ec8:	f04f 0a00 	mov.w	sl, #0
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010ecc:	f8df b268 	ldr.w	fp, [pc, #616]	; 8011138 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010ed0:	8820      	ldrh	r0, [r4, #0]
 8010ed2:	f7fc fb8e 	bl	800d5f2 <lwip_htons>
 8010ed6:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010ed8:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010eda:	4f83      	ldr	r7, [pc, #524]	; (80110e8 <tcp_input+0x298>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010edc:	8860      	ldrh	r0, [r4, #2]
 8010ede:	f7fc fb88 	bl	800d5f2 <lwip_htons>
 8010ee2:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010ee4:	6834      	ldr	r4, [r6, #0]
 8010ee6:	6860      	ldr	r0, [r4, #4]
 8010ee8:	f7fc fb86 	bl	800d5f8 <lwip_htonl>
 8010eec:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010eee:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010ef0:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010ef4:	68a0      	ldr	r0, [r4, #8]
 8010ef6:	f7fc fb7f 	bl	800d5f8 <lwip_htonl>
 8010efa:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010efc:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010efe:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010f00:	89e0      	ldrh	r0, [r4, #14]
 8010f02:	f7fc fb76 	bl	800d5f2 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8010f06:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010f08:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8010f0a:	8998      	ldrh	r0, [r3, #12]
 8010f0c:	f7fc fb71 	bl	800d5f2 <lwip_htons>
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8010f10:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8010f12:	b2c0      	uxtb	r0, r0
 8010f14:	4a75      	ldr	r2, [pc, #468]	; (80110ec <tcp_input+0x29c>)
 8010f16:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8010f1a:	f010 0003 	ands.w	r0, r0, #3
 8010f1e:	9203      	str	r2, [sp, #12]
 8010f20:	bf18      	it	ne
 8010f22:	2001      	movne	r0, #1
  flags = TCPH_FLAGS(tcphdr);
 8010f24:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8010f26:	4b72      	ldr	r3, [pc, #456]	; (80110f0 <tcp_input+0x2a0>)
 8010f28:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f2a:	4972      	ldr	r1, [pc, #456]	; (80110f4 <tcp_input+0x2a4>)
 8010f2c:	9304      	str	r3, [sp, #16]
 8010f2e:	680c      	ldr	r4, [r1, #0]
 8010f30:	4689      	mov	r9, r1
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8010f32:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f34:	2c00      	cmp	r4, #0
 8010f36:	d140      	bne.n	8010fba <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f38:	4b6f      	ldr	r3, [pc, #444]	; (80110f8 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010f3a:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 80110fc <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f3e:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010f40:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 801113c <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f44:	e148      	b.n	80111d8 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010f46:	682b      	ldr	r3, [r5, #0]
 8010f48:	b92b      	cbnz	r3, 8010f56 <tcp_input+0x106>
 8010f4a:	4b6c      	ldr	r3, [pc, #432]	; (80110fc <tcp_input+0x2ac>)
 8010f4c:	22b2      	movs	r2, #178	; 0xb2
 8010f4e:	496c      	ldr	r1, [pc, #432]	; (8011100 <tcp_input+0x2b0>)
 8010f50:	486c      	ldr	r0, [pc, #432]	; (8011104 <tcp_input+0x2b4>)
 8010f52:	f001 fb7f 	bl	8012654 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8010f56:	f06f 0113 	mvn.w	r1, #19
 8010f5a:	4628      	mov	r0, r5
 8010f5c:	f7fe f92c 	bl	800f1b8 <pbuf_header>
    tcphdr_opt1len = p->len;
 8010f60:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8010f62:	9b06      	ldr	r3, [sp, #24]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8010f64:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8010f66:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8010f68:	881c      	ldrh	r4, [r3, #0]
 8010f6a:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8010f6c:	4249      	negs	r1, r1
 8010f6e:	b209      	sxth	r1, r1
 8010f70:	f7fe f922 	bl	800f1b8 <pbuf_header>
    if (opt2len > p->next->len) {
 8010f74:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8010f76:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8010f78:	8943      	ldrh	r3, [r0, #10]
 8010f7a:	42a3      	cmp	r3, r4
 8010f7c:	f0c0 8125 	bcc.w	80111ca <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8010f80:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8010f82:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 8010f84:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8010f86:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8010f88:	f7fe f916 	bl	800f1b8 <pbuf_header>
    p->tot_len -= opt2len;
 8010f8c:	892b      	ldrh	r3, [r5, #8]
 8010f8e:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010f90:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8010f92:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010f94:	b12b      	cbz	r3, 8010fa2 <tcp_input+0x152>
 8010f96:	4b59      	ldr	r3, [pc, #356]	; (80110fc <tcp_input+0x2ac>)
 8010f98:	22cf      	movs	r2, #207	; 0xcf
 8010f9a:	495b      	ldr	r1, [pc, #364]	; (8011108 <tcp_input+0x2b8>)
 8010f9c:	4859      	ldr	r0, [pc, #356]	; (8011104 <tcp_input+0x2b4>)
 8010f9e:	f001 fb59 	bl	8012654 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010fa2:	682b      	ldr	r3, [r5, #0]
 8010fa4:	892a      	ldrh	r2, [r5, #8]
 8010fa6:	891b      	ldrh	r3, [r3, #8]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d08c      	beq.n	8010ec6 <tcp_input+0x76>
 8010fac:	4b53      	ldr	r3, [pc, #332]	; (80110fc <tcp_input+0x2ac>)
 8010fae:	22d0      	movs	r2, #208	; 0xd0
 8010fb0:	4956      	ldr	r1, [pc, #344]	; (801110c <tcp_input+0x2bc>)
 8010fb2:	4854      	ldr	r0, [pc, #336]	; (8011104 <tcp_input+0x2b4>)
 8010fb4:	f001 fb4e 	bl	8012654 <iprintf>
 8010fb8:	e785      	b.n	8010ec6 <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010fba:	7d23      	ldrb	r3, [r4, #20]
 8010fbc:	b92b      	cbnz	r3, 8010fca <tcp_input+0x17a>
 8010fbe:	4b4f      	ldr	r3, [pc, #316]	; (80110fc <tcp_input+0x2ac>)
 8010fc0:	22e2      	movs	r2, #226	; 0xe2
 8010fc2:	4953      	ldr	r1, [pc, #332]	; (8011110 <tcp_input+0x2c0>)
 8010fc4:	484f      	ldr	r0, [pc, #316]	; (8011104 <tcp_input+0x2b4>)
 8010fc6:	f001 fb45 	bl	8012654 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010fca:	7d23      	ldrb	r3, [r4, #20]
 8010fcc:	2b0a      	cmp	r3, #10
 8010fce:	d105      	bne.n	8010fdc <tcp_input+0x18c>
 8010fd0:	4b4a      	ldr	r3, [pc, #296]	; (80110fc <tcp_input+0x2ac>)
 8010fd2:	22e3      	movs	r2, #227	; 0xe3
 8010fd4:	494f      	ldr	r1, [pc, #316]	; (8011114 <tcp_input+0x2c4>)
 8010fd6:	484b      	ldr	r0, [pc, #300]	; (8011104 <tcp_input+0x2b4>)
 8010fd8:	f001 fb3c 	bl	8012654 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010fdc:	7d23      	ldrb	r3, [r4, #20]
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d105      	bne.n	8010fee <tcp_input+0x19e>
 8010fe2:	4b46      	ldr	r3, [pc, #280]	; (80110fc <tcp_input+0x2ac>)
 8010fe4:	22e4      	movs	r2, #228	; 0xe4
 8010fe6:	494c      	ldr	r1, [pc, #304]	; (8011118 <tcp_input+0x2c8>)
 8010fe8:	4846      	ldr	r0, [pc, #280]	; (8011104 <tcp_input+0x2b4>)
 8010fea:	f001 fb33 	bl	8012654 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8010fee:	6832      	ldr	r2, [r6, #0]
 8010ff0:	8b21      	ldrh	r1, [r4, #24]
 8010ff2:	8813      	ldrh	r3, [r2, #0]
 8010ff4:	4299      	cmp	r1, r3
 8010ff6:	68e3      	ldr	r3, [r4, #12]
 8010ff8:	d169      	bne.n	80110ce <tcp_input+0x27e>
 8010ffa:	8ae1      	ldrh	r1, [r4, #22]
 8010ffc:	8852      	ldrh	r2, [r2, #2]
 8010ffe:	4291      	cmp	r1, r2
 8011000:	d165      	bne.n	80110ce <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8011002:	6861      	ldr	r1, [r4, #4]
 8011004:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011008:	4291      	cmp	r1, r2
 801100a:	d160      	bne.n	80110ce <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801100c:	6821      	ldr	r1, [r4, #0]
 801100e:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8011012:	4291      	cmp	r1, r2
 8011014:	d15b      	bne.n	80110ce <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011016:	429c      	cmp	r4, r3
 8011018:	f040 8406 	bne.w	8011828 <tcp_input+0x9d8>
 801101c:	4b37      	ldr	r3, [pc, #220]	; (80110fc <tcp_input+0x2ac>)
 801101e:	22ec      	movs	r2, #236	; 0xec
 8011020:	493e      	ldr	r1, [pc, #248]	; (801111c <tcp_input+0x2cc>)
 8011022:	4838      	ldr	r0, [pc, #224]	; (8011104 <tcp_input+0x2b4>)
 8011024:	f001 fb16 	bl	8012654 <iprintf>
      if (prev != NULL) {
 8011028:	f1ba 0f00 	cmp.w	sl, #0
 801102c:	d007      	beq.n	801103e <tcp_input+0x1ee>
        prev->next = pcb->next;
 801102e:	68e3      	ldr	r3, [r4, #12]
 8011030:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8011034:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 8011038:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 801103c:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801103e:	68e3      	ldr	r3, [r4, #12]
 8011040:	429c      	cmp	r4, r3
 8011042:	d105      	bne.n	8011050 <tcp_input+0x200>
 8011044:	4b2d      	ldr	r3, [pc, #180]	; (80110fc <tcp_input+0x2ac>)
 8011046:	22f4      	movs	r2, #244	; 0xf4
 8011048:	4935      	ldr	r1, [pc, #212]	; (8011120 <tcp_input+0x2d0>)
 801104a:	482e      	ldr	r0, [pc, #184]	; (8011104 <tcp_input+0x2b4>)
 801104c:	f001 fb02 	bl	8012654 <iprintf>
    inseg.next = NULL;
 8011050:	4b34      	ldr	r3, [pc, #208]	; (8011124 <tcp_input+0x2d4>)
 8011052:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 8011054:	8929      	ldrh	r1, [r5, #8]
    inseg.next = NULL;
 8011056:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011058:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 801105a:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 801105c:	4832      	ldr	r0, [pc, #200]	; (8011128 <tcp_input+0x2d8>)
    inseg.tcphdr = tcphdr;
 801105e:	60d9      	str	r1, [r3, #12]
    inseg.p = p;
 8011060:	605d      	str	r5, [r3, #4]
 8011062:	4680      	mov	r8, r0
    recv_data = NULL;
 8011064:	4b31      	ldr	r3, [pc, #196]	; (801112c <tcp_input+0x2dc>)
    recv_acked = 0;
 8011066:	4932      	ldr	r1, [pc, #200]	; (8011130 <tcp_input+0x2e0>)
    recv_data = NULL;
 8011068:	601a      	str	r2, [r3, #0]
 801106a:	469a      	mov	sl, r3
    recv_flags = 0;
 801106c:	7002      	strb	r2, [r0, #0]
    recv_acked = 0;
 801106e:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8011070:	9a03      	ldr	r2, [sp, #12]
 8011072:	9105      	str	r1, [sp, #20]
 8011074:	7812      	ldrb	r2, [r2, #0]
 8011076:	f012 0f08 	tst.w	r2, #8
 801107a:	d003      	beq.n	8011084 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 801107c:	7b6b      	ldrb	r3, [r5, #13]
 801107e:	f043 0301 	orr.w	r3, r3, #1
 8011082:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8011084:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8011086:	4d2b      	ldr	r5, [pc, #172]	; (8011134 <tcp_input+0x2e4>)
 8011088:	2b00      	cmp	r3, #0
 801108a:	f000 8137 	beq.w	80112fc <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801108e:	4620      	mov	r0, r4
 8011090:	f7fe ff4c 	bl	800ff2c <tcp_process_refused_data>
 8011094:	300d      	adds	r0, #13
 8011096:	d008      	beq.n	80110aa <tcp_input+0x25a>
 8011098:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801109a:	2b00      	cmp	r3, #0
 801109c:	f000 812e 	beq.w	80112fc <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80110a0:	9b04      	ldr	r3, [sp, #16]
 80110a2:	881b      	ldrh	r3, [r3, #0]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 8129 	beq.w	80112fc <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 80110aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80110ac:	b913      	cbnz	r3, 80110b4 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 80110ae:	4620      	mov	r0, r4
 80110b0:	f000 fd2e 	bl	8011b10 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 80110b4:	2400      	movs	r4, #0
 80110b6:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 80110b8:	4d1a      	ldr	r5, [pc, #104]	; (8011124 <tcp_input+0x2d4>)
    recv_data = NULL;
 80110ba:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 80110be:	6868      	ldr	r0, [r5, #4]
 80110c0:	b110      	cbz	r0, 80110c8 <tcp_input+0x278>
      pbuf_free(inseg.p);
 80110c2:	f7fe f87f 	bl	800f1c4 <pbuf_free>
      inseg.p = NULL;
 80110c6:	606c      	str	r4, [r5, #4]
}
 80110c8:	b009      	add	sp, #36	; 0x24
 80110ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80110ce:	46a2      	mov	sl, r4
 80110d0:	461c      	mov	r4, r3
 80110d2:	e72f      	b.n	8010f34 <tcp_input+0xe4>
 80110d4:	24000238 	.word	0x24000238
 80110d8:	2400178c 	.word	0x2400178c
 80110dc:	24000244 	.word	0x24000244
 80110e0:	24000240 	.word	0x24000240
 80110e4:	2400023c 	.word	0x2400023c
 80110e8:	2400020c 	.word	0x2400020c
 80110ec:	24000210 	.word	0x24000210
 80110f0:	24000246 	.word	0x24000246
 80110f4:	24004cb4 	.word	0x24004cb4
 80110f8:	24004cc4 	.word	0x24004cc4
 80110fc:	08014b8c 	.word	0x08014b8c
 8011100:	080149d6 	.word	0x080149d6
 8011104:	0801342a 	.word	0x0801342a
 8011108:	080149e6 	.word	0x080149e6
 801110c:	080149f2 	.word	0x080149f2
 8011110:	08014a11 	.word	0x08014a11
 8011114:	08014a38 	.word	0x08014a38
 8011118:	08014a62 	.word	0x08014a62
 801111c:	08014a89 	.word	0x08014a89
 8011120:	08014ab4 	.word	0x08014ab4
 8011124:	24000214 	.word	0x24000214
 8011128:	2400022c 	.word	0x2400022c
 801112c:	24000228 	.word	0x24000228
 8011130:	24000224 	.word	0x24000224
 8011134:	24004cc8 	.word	0x24004cc8
 8011138:	24000230 	.word	0x24000230
 801113c:	08014ade 	.word	0x08014ade
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011140:	7d23      	ldrb	r3, [r4, #20]
 8011142:	2b0a      	cmp	r3, #10
 8011144:	d005      	beq.n	8011152 <tcp_input+0x302>
 8011146:	4653      	mov	r3, sl
 8011148:	22fe      	movs	r2, #254	; 0xfe
 801114a:	4649      	mov	r1, r9
 801114c:	489d      	ldr	r0, [pc, #628]	; (80113c4 <tcp_input+0x574>)
 801114e:	f001 fa81 	bl	8012654 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8011152:	6833      	ldr	r3, [r6, #0]
 8011154:	8b22      	ldrh	r2, [r4, #24]
 8011156:	8818      	ldrh	r0, [r3, #0]
 8011158:	4290      	cmp	r0, r2
 801115a:	d13c      	bne.n	80111d6 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 801115c:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 801115e:	885a      	ldrh	r2, [r3, #2]
 8011160:	428a      	cmp	r2, r1
 8011162:	d138      	bne.n	80111d6 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8011164:	6861      	ldr	r1, [r4, #4]
 8011166:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801116a:	4299      	cmp	r1, r3
 801116c:	d133      	bne.n	80111d6 <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801116e:	6821      	ldr	r1, [r4, #0]
 8011170:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011174:	4299      	cmp	r1, r3
 8011176:	d12e      	bne.n	80111d6 <tcp_input+0x386>
  if (flags & TCP_RST) {
 8011178:	9b03      	ldr	r3, [sp, #12]
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	0759      	lsls	r1, r3, #29
 801117e:	d424      	bmi.n	80111ca <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8011180:	079e      	lsls	r6, r3, #30
 8011182:	d513      	bpl.n	80111ac <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011184:	f8db 1000 	ldr.w	r1, [fp]
 8011188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801118a:	1acb      	subs	r3, r1, r3
 801118c:	d413      	bmi.n	80111b6 <tcp_input+0x366>
 801118e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8011190:	1b9b      	subs	r3, r3, r6
 8011192:	2b00      	cmp	r3, #0
 8011194:	dc0f      	bgt.n	80111b6 <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011196:	9b04      	ldr	r3, [sp, #16]
 8011198:	881c      	ldrh	r4, [r3, #0]
 801119a:	9001      	str	r0, [sp, #4]
 801119c:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801119e:	4b8a      	ldr	r3, [pc, #552]	; (80113c8 <tcp_input+0x578>)
 80111a0:	4421      	add	r1, r4
 80111a2:	1d1a      	adds	r2, r3, #4
 80111a4:	6838      	ldr	r0, [r7, #0]
 80111a6:	f000 fe67 	bl	8011e78 <tcp_rst>
 80111aa:	e00e      	b.n	80111ca <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 80111ac:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 80111ae:	bf42      	ittt	mi
 80111b0:	4b86      	ldrmi	r3, [pc, #536]	; (80113cc <tcp_input+0x57c>)
 80111b2:	681b      	ldrmi	r3, [r3, #0]
 80111b4:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 80111b6:	9b04      	ldr	r3, [sp, #16]
 80111b8:	881b      	ldrh	r3, [r3, #0]
 80111ba:	b133      	cbz	r3, 80111ca <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 80111bc:	7ea3      	ldrb	r3, [r4, #26]
 80111be:	f043 0302 	orr.w	r3, r3, #2
 80111c2:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80111c4:	4620      	mov	r0, r4
 80111c6:	f000 fcd9 	bl	8011b7c <tcp_output>
  pbuf_free(p);
 80111ca:	4628      	mov	r0, r5
}
 80111cc:	b009      	add	sp, #36	; 0x24
 80111ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80111d2:	f7fd bff7 	b.w	800f1c4 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80111d6:	68e4      	ldr	r4, [r4, #12]
 80111d8:	2c00      	cmp	r4, #0
 80111da:	d1b1      	bne.n	8011140 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80111dc:	4b7c      	ldr	r3, [pc, #496]	; (80113d0 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 80111de:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80111e0:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80111e2:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80111e6:	4689      	mov	r9, r1
 80111e8:	f1b9 0f00 	cmp.w	r9, #0
 80111ec:	d111      	bne.n	8011212 <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80111ee:	8990      	ldrh	r0, [r2, #12]
 80111f0:	f7fc f9ff 	bl	800d5f2 <lwip_htons>
 80111f4:	0743      	lsls	r3, r0, #29
 80111f6:	d4e8      	bmi.n	80111ca <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111f8:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80111fa:	9a04      	ldr	r2, [sp, #16]
 80111fc:	f8db 1000 	ldr.w	r1, [fp]
 8011200:	8810      	ldrh	r0, [r2, #0]
 8011202:	881a      	ldrh	r2, [r3, #0]
 8011204:	4401      	add	r1, r0
 8011206:	9201      	str	r2, [sp, #4]
 8011208:	885b      	ldrh	r3, [r3, #2]
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	4b6e      	ldr	r3, [pc, #440]	; (80113c8 <tcp_input+0x578>)
 801120e:	1d1a      	adds	r2, r3, #4
 8011210:	e7c8      	b.n	80111a4 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 8011212:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8011216:	8853      	ldrh	r3, [r2, #2]
 8011218:	4283      	cmp	r3, r0
 801121a:	d107      	bne.n	801122c <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801121c:	f8d9 3000 	ldr.w	r3, [r9]
 8011220:	4573      	cmp	r3, lr
 8011222:	f000 82dd 	beq.w	80117e0 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011226:	2b00      	cmp	r3, #0
 8011228:	f000 82da 	beq.w	80117e0 <tcp_input+0x990>
 801122c:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801122e:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8011232:	e7d9      	b.n	80111e8 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 8011234:	0798      	lsls	r0, r3, #30
 8011236:	d5c8      	bpl.n	80111ca <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 8011238:	f899 0015 	ldrb.w	r0, [r9, #21]
 801123c:	f7fe ffb4 	bl	80101a8 <tcp_alloc>
    if (npcb == NULL) {
 8011240:	4604      	mov	r4, r0
 8011242:	b950      	cbnz	r0, 801125a <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011244:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d0be      	beq.n	80111ca <tcp_input+0x37a>
 801124c:	4601      	mov	r1, r0
 801124e:	f04f 32ff 	mov.w	r2, #4294967295
 8011252:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011256:	4798      	blx	r3
 8011258:	e7b7      	b.n	80111ca <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801125a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 801125e:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011260:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011262:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011266:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8011268:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 801126c:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 801126e:	7813      	ldrb	r3, [r2, #0]
 8011270:	7852      	ldrb	r2, [r2, #1]
 8011272:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011276:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8011278:	2303      	movs	r3, #3
 801127a:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 801127c:	f8db 3000 	ldr.w	r3, [fp]
 8011280:	3301      	adds	r3, #1
 8011282:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011284:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011286:	f7ff f817 	bl	80102b8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801128a:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 801128e:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011290:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 8011292:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8011294:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011296:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8011298:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 801129c:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 801129e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 80112a0:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80112a4:	f899 3008 	ldrb.w	r3, [r9, #8]
 80112a8:	f003 030c 	and.w	r3, r3, #12
 80112ac:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 80112ae:	4b49      	ldr	r3, [pc, #292]	; (80113d4 <tcp_input+0x584>)
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	601c      	str	r4, [r3, #0]
 80112b4:	60e2      	str	r2, [r4, #12]
 80112b6:	f000 ff81 	bl	80121bc <tcp_timer_needed>
 80112ba:	4b47      	ldr	r3, [pc, #284]	; (80113d8 <tcp_input+0x588>)
 80112bc:	2201      	movs	r2, #1
 80112be:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 80112c0:	9b06      	ldr	r3, [sp, #24]
 80112c2:	881b      	ldrh	r3, [r3, #0]
 80112c4:	b11b      	cbz	r3, 80112ce <tcp_input+0x47e>
 80112c6:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80112ca:	f7ff fd69 	bl	8010da0 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 80112ce:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80112d0:	1d21      	adds	r1, r4, #4
 80112d2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 80112d4:	89db      	ldrh	r3, [r3, #14]
 80112d6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80112da:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80112de:	f7fe fff7 	bl	80102d0 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80112e2:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80112e4:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80112e6:	4620      	mov	r0, r4
 80112e8:	f000 fb5a 	bl	80119a0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 80112ec:	2800      	cmp	r0, #0
 80112ee:	f43f af69 	beq.w	80111c4 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 80112f2:	2100      	movs	r1, #0
 80112f4:	4620      	mov	r0, r4
 80112f6:	f7fe fe9f 	bl	8010038 <tcp_abandon>
 80112fa:	e766      	b.n	80111ca <tcp_input+0x37a>
  if (flags & TCP_RST) {
 80112fc:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 80112fe:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	0759      	lsls	r1, r3, #29
 8011304:	d535      	bpl.n	8011372 <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 8011306:	7d21      	ldrb	r1, [r4, #20]
 8011308:	2902      	cmp	r1, #2
 801130a:	d122      	bne.n	8011352 <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 801130c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	429a      	cmp	r2, r3
 8011312:	d109      	bne.n	8011328 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 8011314:	f898 3000 	ldrb.w	r3, [r8]
 8011318:	f043 0308 	orr.w	r3, r3, #8
 801131c:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8011320:	7ea3      	ldrb	r3, [r4, #26]
 8011322:	f023 0301 	bic.w	r3, r3, #1
 8011326:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8011328:	f898 3000 	ldrb.w	r3, [r8]
 801132c:	0719      	lsls	r1, r3, #28
 801132e:	f140 81ed 	bpl.w	801170c <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011332:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8011336:	b11b      	cbz	r3, 8011340 <tcp_input+0x4f0>
 8011338:	f06f 010d 	mvn.w	r1, #13
 801133c:	6920      	ldr	r0, [r4, #16]
 801133e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011340:	4621      	mov	r1, r4
 8011342:	4824      	ldr	r0, [pc, #144]	; (80113d4 <tcp_input+0x584>)
 8011344:	f7fe fce0 	bl	800fd08 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8011348:	4621      	mov	r1, r4
 801134a:	2001      	movs	r0, #1
 801134c:	f7fd fdd4 	bl	800eef8 <memp_free>
 8011350:	e6b0      	b.n	80110b4 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 8011352:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011354:	f8db 3000 	ldr.w	r3, [fp]
 8011358:	429a      	cmp	r2, r3
 801135a:	f000 825a 	beq.w	8011812 <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801135e:	1a9b      	subs	r3, r3, r2
 8011360:	d4e2      	bmi.n	8011328 <tcp_input+0x4d8>
 8011362:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8011364:	1a9b      	subs	r3, r3, r2
 8011366:	2b00      	cmp	r3, #0
 8011368:	dcde      	bgt.n	8011328 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 801136a:	7ea3      	ldrb	r3, [r4, #26]
 801136c:	f043 0302 	orr.w	r3, r3, #2
 8011370:	e7d9      	b.n	8011326 <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011372:	f013 0102 	ands.w	r1, r3, #2
 8011376:	d003      	beq.n	8011380 <tcp_input+0x530>
 8011378:	7d22      	ldrb	r2, [r4, #20]
 801137a:	3a02      	subs	r2, #2
 801137c:	2a01      	cmp	r2, #1
 801137e:	d8f4      	bhi.n	801136a <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011380:	7ea2      	ldrb	r2, [r4, #26]
 8011382:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8011384:	bf5e      	ittt	pl
 8011386:	4a11      	ldrpl	r2, [pc, #68]	; (80113cc <tcp_input+0x57c>)
 8011388:	6812      	ldrpl	r2, [r2, #0]
 801138a:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 801138c:	2200      	movs	r2, #0
 801138e:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8011392:	9a06      	ldr	r2, [sp, #24]
 8011394:	8812      	ldrh	r2, [r2, #0]
 8011396:	b13a      	cbz	r2, 80113a8 <tcp_input+0x558>
 8011398:	f104 0032 	add.w	r0, r4, #50	; 0x32
 801139c:	9107      	str	r1, [sp, #28]
 801139e:	9306      	str	r3, [sp, #24]
 80113a0:	f7ff fcfe 	bl	8010da0 <tcp_parseopt.isra.1.part.2>
 80113a4:	9907      	ldr	r1, [sp, #28]
 80113a6:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 80113a8:	7d22      	ldrb	r2, [r4, #20]
 80113aa:	3a02      	subs	r2, #2
 80113ac:	2a07      	cmp	r2, #7
 80113ae:	d8bb      	bhi.n	8011328 <tcp_input+0x4d8>
 80113b0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80113b4:	00940014 	.word	0x00940014
 80113b8:	010000fc 	.word	0x010000fc
 80113bc:	00fc014a 	.word	0x00fc014a
 80113c0:	01830164 	.word	0x01830164
 80113c4:	0801342a 	.word	0x0801342a
 80113c8:	2400179c 	.word	0x2400179c
 80113cc:	24004cb8 	.word	0x24004cb8
 80113d0:	24004cbc 	.word	0x24004cbc
 80113d4:	24004cb4 	.word	0x24004cb4
 80113d8:	24004cb0 	.word	0x24004cb0
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80113dc:	f003 0212 	and.w	r2, r3, #18
 80113e0:	2a12      	cmp	r2, #18
 80113e2:	d15e      	bne.n	80114a2 <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 80113e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80113e6:	6839      	ldr	r1, [r7, #0]
 80113e8:	3201      	adds	r2, #1
 80113ea:	428a      	cmp	r2, r1
 80113ec:	d159      	bne.n	80114a2 <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 80113ee:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 80113f2:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 80113f4:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 80113f6:	6832      	ldr	r2, [r6, #0]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80113f8:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80113fa:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 80113fc:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80113fe:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 8011400:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011402:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8011404:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8011406:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801140a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801140e:	18e1      	adds	r1, r4, r3
      pcb->state = ESTABLISHED;
 8011410:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011412:	f7fe ff5d 	bl	80102d0 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011416:	f241 121c 	movw	r2, #4380	; 0x111c
 801141a:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801141c:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801141e:	0080      	lsls	r0, r0, #2
 8011420:	4293      	cmp	r3, r2
 8011422:	bf38      	it	cc
 8011424:	4613      	movcc	r3, r2
 8011426:	4283      	cmp	r3, r0
 8011428:	bf28      	it	cs
 801142a:	4603      	movcs	r3, r0
 801142c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011430:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8011434:	b933      	cbnz	r3, 8011444 <tcp_input+0x5f4>
 8011436:	4bad      	ldr	r3, [pc, #692]	; (80116ec <tcp_input+0x89c>)
 8011438:	f240 321a 	movw	r2, #794	; 0x31a
 801143c:	49ac      	ldr	r1, [pc, #688]	; (80116f0 <tcp_input+0x8a0>)
 801143e:	48ad      	ldr	r0, [pc, #692]	; (80116f4 <tcp_input+0x8a4>)
 8011440:	f001 f908 	bl	8012654 <iprintf>
      --pcb->snd_queuelen;
 8011444:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8011448:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 801144a:	3b01      	subs	r3, #1
 801144c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8011450:	b9fe      	cbnz	r6, 8011492 <tcp_input+0x642>
        rseg = pcb->unsent;
 8011452:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8011454:	b936      	cbnz	r6, 8011464 <tcp_input+0x614>
 8011456:	4ba5      	ldr	r3, [pc, #660]	; (80116ec <tcp_input+0x89c>)
 8011458:	f240 3222 	movw	r2, #802	; 0x322
 801145c:	49a6      	ldr	r1, [pc, #664]	; (80116f8 <tcp_input+0x8a8>)
 801145e:	48a5      	ldr	r0, [pc, #660]	; (80116f4 <tcp_input+0x8a4>)
 8011460:	f001 f8f8 	bl	8012654 <iprintf>
        pcb->unsent = rseg->next;
 8011464:	6833      	ldr	r3, [r6, #0]
 8011466:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8011468:	4630      	mov	r0, r6
 801146a:	f7fe fa1f 	bl	800f8ac <tcp_seg_free>
      if (pcb->unacked == NULL) {
 801146e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011470:	b993      	cbnz	r3, 8011498 <tcp_input+0x648>
        pcb->rtime = -1;
 8011472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011476:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011478:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801147c:	2b00      	cmp	r3, #0
 801147e:	f43f af74 	beq.w	801136a <tcp_input+0x51a>
 8011482:	2200      	movs	r2, #0
 8011484:	4621      	mov	r1, r4
 8011486:	6920      	ldr	r0, [r4, #16]
 8011488:	4798      	blx	r3
      if (err == ERR_ABRT) {
 801148a:	300d      	adds	r0, #13
 801148c:	f47f af6d 	bne.w	801136a <tcp_input+0x51a>
 8011490:	e610      	b.n	80110b4 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8011492:	6833      	ldr	r3, [r6, #0]
 8011494:	66e3      	str	r3, [r4, #108]	; 0x6c
 8011496:	e7e7      	b.n	8011468 <tcp_input+0x618>
        pcb->rtime = 0;
 8011498:	2300      	movs	r3, #0
 801149a:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 801149c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114a0:	e7ea      	b.n	8011478 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 80114a2:	06db      	lsls	r3, r3, #27
 80114a4:	f57f af40 	bpl.w	8011328 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114a8:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80114aa:	9a04      	ldr	r2, [sp, #16]
 80114ac:	f8db 1000 	ldr.w	r1, [fp]
 80114b0:	8810      	ldrh	r0, [r2, #0]
 80114b2:	881a      	ldrh	r2, [r3, #0]
 80114b4:	4401      	add	r1, r0
 80114b6:	9201      	str	r2, [sp, #4]
 80114b8:	885b      	ldrh	r3, [r3, #2]
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	4b8f      	ldr	r3, [pc, #572]	; (80116fc <tcp_input+0x8ac>)
 80114be:	6838      	ldr	r0, [r7, #0]
 80114c0:	1d1a      	adds	r2, r3, #4
 80114c2:	f000 fcd9 	bl	8011e78 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80114c6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80114ca:	2b05      	cmp	r3, #5
 80114cc:	f63f af2c 	bhi.w	8011328 <tcp_input+0x4d8>
        pcb->rtime = 0;
 80114d0:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 80114d2:	4620      	mov	r0, r4
        pcb->rtime = 0;
 80114d4:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80114d6:	f000 fd29 	bl	8011f2c <tcp_rexmit_rto>
 80114da:	e725      	b.n	8011328 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 80114dc:	06d8      	lsls	r0, r3, #27
 80114de:	d557      	bpl.n	8011590 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80114e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80114e2:	6838      	ldr	r0, [r7, #0]
 80114e4:	43db      	mvns	r3, r3
 80114e6:	42c3      	cmn	r3, r0
 80114e8:	d443      	bmi.n	8011572 <tcp_input+0x722>
 80114ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80114ec:	1ac3      	subs	r3, r0, r3
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	dc3f      	bgt.n	8011572 <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 80114f2:	2304      	movs	r3, #4
 80114f4:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80114f6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80114f8:	b143      	cbz	r3, 801150c <tcp_input+0x6bc>
 80114fa:	699b      	ldr	r3, [r3, #24]
 80114fc:	b933      	cbnz	r3, 801150c <tcp_input+0x6bc>
 80114fe:	4b7b      	ldr	r3, [pc, #492]	; (80116ec <tcp_input+0x89c>)
 8011500:	f240 3251 	movw	r2, #849	; 0x351
 8011504:	497e      	ldr	r1, [pc, #504]	; (8011700 <tcp_input+0x8b0>)
 8011506:	487b      	ldr	r0, [pc, #492]	; (80116f4 <tcp_input+0x8a4>)
 8011508:	f001 f8a4 	bl	8012654 <iprintf>
        if (pcb->listener == NULL) {
 801150c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801150e:	b91b      	cbnz	r3, 8011518 <tcp_input+0x6c8>
            tcp_abort(pcb);
 8011510:	4620      	mov	r0, r4
 8011512:	f7fe fe07 	bl	8010124 <tcp_abort>
            goto aborted;
 8011516:	e5cd      	b.n	80110b4 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011518:	699b      	ldr	r3, [r3, #24]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d0f8      	beq.n	8011510 <tcp_input+0x6c0>
 801151e:	2200      	movs	r2, #0
 8011520:	4621      	mov	r1, r4
 8011522:	6920      	ldr	r0, [r4, #16]
 8011524:	4798      	blx	r3
        if (err != ERR_OK) {
 8011526:	b110      	cbz	r0, 801152e <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8011528:	300d      	adds	r0, #13
 801152a:	d1f1      	bne.n	8011510 <tcp_input+0x6c0>
 801152c:	e5c2      	b.n	80110b4 <tcp_input+0x264>
        tcp_receive(pcb);
 801152e:	4620      	mov	r0, r4
 8011530:	f7fe ff42 	bl	80103b8 <tcp_receive>
        if (recv_acked != 0) {
 8011534:	9b05      	ldr	r3, [sp, #20]
 8011536:	881b      	ldrh	r3, [r3, #0]
 8011538:	b113      	cbz	r3, 8011540 <tcp_input+0x6f0>
          recv_acked--;
 801153a:	3b01      	subs	r3, #1
 801153c:	9a05      	ldr	r2, [sp, #20]
 801153e:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011540:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8011542:	f241 111c 	movw	r1, #4380	; 0x111c
 8011546:	0053      	lsls	r3, r2, #1
 8011548:	0092      	lsls	r2, r2, #2
 801154a:	428b      	cmp	r3, r1
 801154c:	bf38      	it	cc
 801154e:	460b      	movcc	r3, r1
 8011550:	4293      	cmp	r3, r2
 8011552:	bf28      	it	cs
 8011554:	4613      	movcs	r3, r2
 8011556:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801155a:	f898 3000 	ldrb.w	r3, [r8]
 801155e:	069a      	lsls	r2, r3, #26
 8011560:	f57f aee2 	bpl.w	8011328 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8011564:	7ea3      	ldrb	r3, [r4, #26]
 8011566:	f043 0302 	orr.w	r3, r3, #2
 801156a:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 801156c:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 801156e:	7523      	strb	r3, [r4, #20]
 8011570:	e6da      	b.n	8011328 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011572:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011574:	9a04      	ldr	r2, [sp, #16]
 8011576:	f8db 1000 	ldr.w	r1, [fp]
 801157a:	8816      	ldrh	r6, [r2, #0]
 801157c:	881a      	ldrh	r2, [r3, #0]
 801157e:	4431      	add	r1, r6
 8011580:	9201      	str	r2, [sp, #4]
 8011582:	885b      	ldrh	r3, [r3, #2]
 8011584:	9300      	str	r3, [sp, #0]
 8011586:	4b5d      	ldr	r3, [pc, #372]	; (80116fc <tcp_input+0x8ac>)
 8011588:	1d1a      	adds	r2, r3, #4
 801158a:	f000 fc75 	bl	8011e78 <tcp_rst>
 801158e:	e6cb      	b.n	8011328 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011590:	2900      	cmp	r1, #0
 8011592:	f43f aec9 	beq.w	8011328 <tcp_input+0x4d8>
 8011596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011598:	f8db 2000 	ldr.w	r2, [fp]
 801159c:	3b01      	subs	r3, #1
 801159e:	4293      	cmp	r3, r2
 80115a0:	f47f aec2 	bne.w	8011328 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 80115a4:	4620      	mov	r0, r4
 80115a6:	f000 fcdd 	bl	8011f64 <tcp_rexmit>
 80115aa:	e6bd      	b.n	8011328 <tcp_input+0x4d8>
    tcp_receive(pcb);
 80115ac:	4620      	mov	r0, r4
 80115ae:	f7fe ff03 	bl	80103b8 <tcp_receive>
 80115b2:	e7d2      	b.n	801155a <tcp_input+0x70a>
    tcp_receive(pcb);
 80115b4:	4620      	mov	r0, r4
 80115b6:	f7fe feff 	bl	80103b8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80115ba:	f898 3000 	ldrb.w	r3, [r8]
 80115be:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80115c2:	9b03      	ldr	r3, [sp, #12]
 80115c4:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 80115c6:	d031      	beq.n	801162c <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80115c8:	f013 0f10 	tst.w	r3, #16
 80115cc:	7ea3      	ldrb	r3, [r4, #26]
 80115ce:	d028      	beq.n	8011622 <tcp_input+0x7d2>
 80115d0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80115d2:	683a      	ldr	r2, [r7, #0]
 80115d4:	4291      	cmp	r1, r2
 80115d6:	d124      	bne.n	8011622 <tcp_input+0x7d2>
 80115d8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80115da:	bb12      	cbnz	r2, 8011622 <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 80115dc:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 80115e0:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 80115e2:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80115e4:	f7fe f98e 	bl	800f904 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80115e8:	f8d9 3000 	ldr.w	r3, [r9]
 80115ec:	429c      	cmp	r4, r3
 80115ee:	d10a      	bne.n	8011606 <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 80115f0:	68e3      	ldr	r3, [r4, #12]
 80115f2:	f8c9 3000 	str.w	r3, [r9]
 80115f6:	e008      	b.n	801160a <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 80115f8:	68da      	ldr	r2, [r3, #12]
 80115fa:	4294      	cmp	r4, r2
 80115fc:	d102      	bne.n	8011604 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 80115fe:	68e2      	ldr	r2, [r4, #12]
 8011600:	60da      	str	r2, [r3, #12]
 8011602:	e002      	b.n	801160a <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8011604:	4613      	mov	r3, r2
 8011606:	2b00      	cmp	r3, #0
 8011608:	d1f6      	bne.n	80115f8 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 801160a:	2201      	movs	r2, #1
 801160c:	4b3d      	ldr	r3, [pc, #244]	; (8011704 <tcp_input+0x8b4>)
 801160e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8011610:	230a      	movs	r3, #10
 8011612:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8011614:	4b3c      	ldr	r3, [pc, #240]	; (8011708 <tcp_input+0x8b8>)
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	601c      	str	r4, [r3, #0]
 801161a:	60e2      	str	r2, [r4, #12]
 801161c:	f000 fdce 	bl	80121bc <tcp_timer_needed>
 8011620:	e682      	b.n	8011328 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 8011622:	f043 0302 	orr.w	r3, r3, #2
 8011626:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8011628:	2308      	movs	r3, #8
 801162a:	e7a0      	b.n	801156e <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801162c:	06db      	lsls	r3, r3, #27
 801162e:	f57f ae7b 	bpl.w	8011328 <tcp_input+0x4d8>
 8011632:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	429a      	cmp	r2, r3
 8011638:	f47f ae76 	bne.w	8011328 <tcp_input+0x4d8>
 801163c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801163e:	2b00      	cmp	r3, #0
 8011640:	f47f ae72 	bne.w	8011328 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 8011644:	2306      	movs	r3, #6
 8011646:	e792      	b.n	801156e <tcp_input+0x71e>
    tcp_receive(pcb);
 8011648:	4620      	mov	r0, r4
 801164a:	f7fe feb5 	bl	80103b8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801164e:	f898 3000 	ldrb.w	r3, [r8]
 8011652:	069f      	lsls	r7, r3, #26
 8011654:	f57f ae68 	bpl.w	8011328 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8011658:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 801165a:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 801165c:	f043 0302 	orr.w	r3, r3, #2
 8011660:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8011662:	f7fe f94f 	bl	800f904 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011666:	f8d9 3000 	ldr.w	r3, [r9]
 801166a:	429c      	cmp	r4, r3
 801166c:	d0c0      	beq.n	80115f0 <tcp_input+0x7a0>
 801166e:	2b00      	cmp	r3, #0
 8011670:	d0cb      	beq.n	801160a <tcp_input+0x7ba>
 8011672:	68da      	ldr	r2, [r3, #12]
 8011674:	4294      	cmp	r4, r2
 8011676:	d0c2      	beq.n	80115fe <tcp_input+0x7ae>
 8011678:	4613      	mov	r3, r2
 801167a:	e7f8      	b.n	801166e <tcp_input+0x81e>
    tcp_receive(pcb);
 801167c:	4620      	mov	r0, r4
 801167e:	f7fe fe9b 	bl	80103b8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011682:	9b03      	ldr	r3, [sp, #12]
 8011684:	781b      	ldrb	r3, [r3, #0]
 8011686:	06de      	lsls	r6, r3, #27
 8011688:	f57f ae4e 	bpl.w	8011328 <tcp_input+0x4d8>
 801168c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	429a      	cmp	r2, r3
 8011692:	f47f ae49 	bne.w	8011328 <tcp_input+0x4d8>
 8011696:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011698:	2b00      	cmp	r3, #0
 801169a:	f47f ae45 	bne.w	8011328 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 801169e:	4620      	mov	r0, r4
 80116a0:	f7fe f930 	bl	800f904 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80116a4:	f8d9 3000 	ldr.w	r3, [r9]
 80116a8:	429c      	cmp	r4, r3
 80116aa:	d0a1      	beq.n	80115f0 <tcp_input+0x7a0>
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d0ac      	beq.n	801160a <tcp_input+0x7ba>
 80116b0:	68da      	ldr	r2, [r3, #12]
 80116b2:	4294      	cmp	r4, r2
 80116b4:	d0a3      	beq.n	80115fe <tcp_input+0x7ae>
 80116b6:	4613      	mov	r3, r2
 80116b8:	e7f8      	b.n	80116ac <tcp_input+0x85c>
    tcp_receive(pcb);
 80116ba:	4620      	mov	r0, r4
 80116bc:	f7fe fe7c 	bl	80103b8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80116c0:	9b03      	ldr	r3, [sp, #12]
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	06d8      	lsls	r0, r3, #27
 80116c6:	f57f ae2f 	bpl.w	8011328 <tcp_input+0x4d8>
 80116ca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	f47f ae2a 	bne.w	8011328 <tcp_input+0x4d8>
 80116d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f47f ae26 	bne.w	8011328 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 80116dc:	f898 3000 	ldrb.w	r3, [r8]
 80116e0:	f043 0310 	orr.w	r3, r3, #16
 80116e4:	f888 3000 	strb.w	r3, [r8]
 80116e8:	e61e      	b.n	8011328 <tcp_input+0x4d8>
 80116ea:	bf00      	nop
 80116ec:	08014b8c 	.word	0x08014b8c
 80116f0:	08014b2b 	.word	0x08014b2b
 80116f4:	0801342a 	.word	0x0801342a
 80116f8:	08014b41 	.word	0x08014b41
 80116fc:	2400179c 	.word	0x2400179c
 8011700:	08014b54 	.word	0x08014b54
 8011704:	24004cb0 	.word	0x24004cb0
 8011708:	24004cc4 	.word	0x24004cc4
        if (recv_acked > 0) {
 801170c:	9b05      	ldr	r3, [sp, #20]
 801170e:	881a      	ldrh	r2, [r3, #0]
 8011710:	b122      	cbz	r2, 801171c <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011712:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8011714:	b9eb      	cbnz	r3, 8011752 <tcp_input+0x902>
          recv_acked = 0;
 8011716:	2300      	movs	r3, #0
 8011718:	9a05      	ldr	r2, [sp, #20]
 801171a:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 801171c:	4620      	mov	r0, r4
 801171e:	f7ff fb77 	bl	8010e10 <tcp_input_delayed_close>
 8011722:	2800      	cmp	r0, #0
 8011724:	f47f acc6 	bne.w	80110b4 <tcp_input+0x264>
        if (recv_data != NULL) {
 8011728:	f8da 3000 	ldr.w	r3, [sl]
 801172c:	b33b      	cbz	r3, 801177e <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801172e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8011730:	b133      	cbz	r3, 8011740 <tcp_input+0x8f0>
 8011732:	4b40      	ldr	r3, [pc, #256]	; (8011834 <tcp_input+0x9e4>)
 8011734:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8011738:	493f      	ldr	r1, [pc, #252]	; (8011838 <tcp_input+0x9e8>)
 801173a:	4840      	ldr	r0, [pc, #256]	; (801183c <tcp_input+0x9ec>)
 801173c:	f000 ff8a 	bl	8012654 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011740:	7ea3      	ldrb	r3, [r4, #26]
 8011742:	f013 0310 	ands.w	r3, r3, #16
 8011746:	d00a      	beq.n	801175e <tcp_input+0x90e>
            pbuf_free(recv_data);
 8011748:	f8da 0000 	ldr.w	r0, [sl]
 801174c:	f7fd fd3a 	bl	800f1c4 <pbuf_free>
 8011750:	e6de      	b.n	8011510 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011752:	4621      	mov	r1, r4
 8011754:	6920      	ldr	r0, [r4, #16]
 8011756:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8011758:	300d      	adds	r0, #13
 801175a:	d1dc      	bne.n	8011716 <tcp_input+0x8c6>
 801175c:	e4aa      	b.n	80110b4 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801175e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8011762:	b31e      	cbz	r6, 80117ac <tcp_input+0x95c>
 8011764:	f8da 2000 	ldr.w	r2, [sl]
 8011768:	4621      	mov	r1, r4
 801176a:	6920      	ldr	r0, [r4, #16]
 801176c:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801176e:	f110 0f0d 	cmn.w	r0, #13
 8011772:	f43f ac9f 	beq.w	80110b4 <tcp_input+0x264>
          if (err != ERR_OK) {
 8011776:	b110      	cbz	r0, 801177e <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8011778:	f8da 3000 	ldr.w	r3, [sl]
 801177c:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 801177e:	f898 3000 	ldrb.w	r3, [r8]
 8011782:	069a      	lsls	r2, r3, #26
 8011784:	d505      	bpl.n	8011792 <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 8011786:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8011788:	b1c3      	cbz	r3, 80117bc <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801178a:	7b5a      	ldrb	r2, [r3, #13]
 801178c:	f042 0220 	orr.w	r2, r2, #32
 8011790:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8011792:	2200      	movs	r2, #0
 8011794:	4b2a      	ldr	r3, [pc, #168]	; (8011840 <tcp_input+0x9f0>)
        if (tcp_input_delayed_close(pcb)) {
 8011796:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8011798:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801179a:	f7ff fb39 	bl	8010e10 <tcp_input_delayed_close>
 801179e:	2800      	cmp	r0, #0
 80117a0:	f47f ac88 	bne.w	80110b4 <tcp_input+0x264>
        tcp_output(pcb);
 80117a4:	4620      	mov	r0, r4
 80117a6:	f000 f9e9 	bl	8011b7c <tcp_output>
 80117aa:	e483      	b.n	80110b4 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80117ac:	4633      	mov	r3, r6
 80117ae:	f8da 2000 	ldr.w	r2, [sl]
 80117b2:	4621      	mov	r1, r4
 80117b4:	4630      	mov	r0, r6
 80117b6:	f7fe fba7 	bl	800ff08 <tcp_recv_null>
 80117ba:	e7d8      	b.n	801176e <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80117bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80117be:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80117c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 80117c6:	bf1c      	itt	ne
 80117c8:	3301      	addne	r3, #1
 80117ca:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80117cc:	2e00      	cmp	r6, #0
 80117ce:	d0e0      	beq.n	8011792 <tcp_input+0x942>
 80117d0:	2300      	movs	r3, #0
 80117d2:	4621      	mov	r1, r4
 80117d4:	6920      	ldr	r0, [r4, #16]
 80117d6:	461a      	mov	r2, r3
 80117d8:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 80117da:	300d      	adds	r0, #13
 80117dc:	d1d9      	bne.n	8011792 <tcp_input+0x942>
 80117de:	e469      	b.n	80110b4 <tcp_input+0x264>
      if (prev != NULL) {
 80117e0:	b13c      	cbz	r4, 80117f2 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80117e2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80117e6:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80117e8:	4b16      	ldr	r3, [pc, #88]	; (8011844 <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80117ea:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80117ee:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 80117f2:	9b03      	ldr	r3, [sp, #12]
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	0759      	lsls	r1, r3, #29
 80117f8:	f53f ace7 	bmi.w	80111ca <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 80117fc:	06dc      	lsls	r4, r3, #27
 80117fe:	f57f ad19 	bpl.w	8011234 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011802:	9b04      	ldr	r3, [sp, #16]
 8011804:	f8db 1000 	ldr.w	r1, [fp]
 8011808:	881c      	ldrh	r4, [r3, #0]
 801180a:	8813      	ldrh	r3, [r2, #0]
 801180c:	e88d 0009 	stmia.w	sp, {r0, r3}
 8011810:	e4c5      	b.n	801119e <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011812:	2900      	cmp	r1, #0
 8011814:	f47f ad7e 	bne.w	8011314 <tcp_input+0x4c4>
 8011818:	4b06      	ldr	r3, [pc, #24]	; (8011834 <tcp_input+0x9e4>)
 801181a:	f240 22e7 	movw	r2, #743	; 0x2e7
 801181e:	490a      	ldr	r1, [pc, #40]	; (8011848 <tcp_input+0x9f8>)
 8011820:	4806      	ldr	r0, [pc, #24]	; (801183c <tcp_input+0x9ec>)
 8011822:	f000 ff17 	bl	8012654 <iprintf>
 8011826:	e575      	b.n	8011314 <tcp_input+0x4c4>
      if (prev != NULL) {
 8011828:	f1ba 0f00 	cmp.w	sl, #0
 801182c:	f47f abff 	bne.w	801102e <tcp_input+0x1de>
 8011830:	e40e      	b.n	8011050 <tcp_input+0x200>
 8011832:	bf00      	nop
 8011834:	08014b8c 	.word	0x08014b8c
 8011838:	08014b72 	.word	0x08014b72
 801183c:	0801342a 	.word	0x0801342a
 8011840:	24004cc8 	.word	0x24004cc8
 8011844:	24004cbc 	.word	0x24004cbc
 8011848:	08014b0b 	.word	0x08014b0b

0801184c <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801184c:	4a02      	ldr	r2, [pc, #8]	; (8011858 <tcp_trigger_input_pcb_close+0xc>)
 801184e:	7813      	ldrb	r3, [r2, #0]
 8011850:	f043 0310 	orr.w	r3, r3, #16
 8011854:	7013      	strb	r3, [r2, #0]
 8011856:	4770      	bx	lr
 8011858:	2400022c 	.word	0x2400022c

0801185c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 801185c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011860:	f89d a020 	ldrb.w	sl, [sp, #32]
 8011864:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011866:	2003      	movs	r0, #3
{
 8011868:	460f      	mov	r7, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801186a:	f01a 0f01 	tst.w	sl, #1
{
 801186e:	4616      	mov	r6, r2
 8011870:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011872:	bf14      	ite	ne
 8011874:	2504      	movne	r5, #4
 8011876:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011878:	f7fd fb22 	bl	800eec0 <memp_malloc>
 801187c:	4604      	mov	r4, r0
 801187e:	b928      	cbnz	r0, 801188c <tcp_create_segment+0x30>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011880:	4638      	mov	r0, r7
 8011882:	f7fd fc9f 	bl	800f1c4 <pbuf_free>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  return seg;
}
 8011886:	4620      	mov	r0, r4
 8011888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 801188c:	2300      	movs	r3, #0
  seg->flags = optflags;
 801188e:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011892:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 8011896:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801189a:	893b      	ldrh	r3, [r7, #8]
 801189c:	4553      	cmp	r3, sl
 801189e:	d205      	bcs.n	80118ac <tcp_create_segment+0x50>
 80118a0:	4b1e      	ldr	r3, [pc, #120]	; (801191c <tcp_create_segment+0xc0>)
 80118a2:	22ba      	movs	r2, #186	; 0xba
 80118a4:	491e      	ldr	r1, [pc, #120]	; (8011920 <tcp_create_segment+0xc4>)
 80118a6:	481f      	ldr	r0, [pc, #124]	; (8011924 <tcp_create_segment+0xc8>)
 80118a8:	f000 fed4 	bl	8012654 <iprintf>
  seg->len = p->tot_len - optlen;
 80118ac:	893b      	ldrh	r3, [r7, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80118ae:	4638      	mov	r0, r7
 80118b0:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 80118b2:	eba3 030a 	sub.w	r3, r3, sl
 80118b6:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80118b8:	f7fd fc7e 	bl	800f1b8 <pbuf_header>
 80118bc:	4607      	mov	r7, r0
 80118be:	b120      	cbz	r0, 80118ca <tcp_create_segment+0x6e>
    tcp_seg_free(seg);
 80118c0:	4620      	mov	r0, r4
    return NULL;
 80118c2:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 80118c4:	f7fd fff2 	bl	800f8ac <tcp_seg_free>
    return NULL;
 80118c8:	e7dd      	b.n	8011886 <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80118ca:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80118cc:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80118ce:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80118d2:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80118d6:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80118d8:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80118dc:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80118e0:	f7fb fe87 	bl	800d5f2 <lwip_htons>
 80118e4:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80118e8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80118ec:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 80118f0:	f7fb fe7f 	bl	800d5f2 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80118f4:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80118f8:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80118fc:	4648      	mov	r0, r9
 80118fe:	f7fb fe7b 	bl	800d5f8 <lwip_htonl>
 8011902:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8011906:	b2a8      	uxth	r0, r5
 8011908:	f8d4 800c 	ldr.w	r8, [r4, #12]
 801190c:	f7fb fe71 	bl	800d5f2 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8011910:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8011912:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8011916:	749f      	strb	r7, [r3, #18]
 8011918:	74df      	strb	r7, [r3, #19]
  return seg;
 801191a:	e7b4      	b.n	8011886 <tcp_create_segment+0x2a>
 801191c:	08014e95 	.word	0x08014e95
 8011920:	08014d1d 	.word	0x08014d1d
 8011924:	0801342a 	.word	0x0801342a

08011928 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011928:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801192a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801192c:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801192e:	4605      	mov	r5, r0
 8011930:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011932:	2001      	movs	r0, #1
 8011934:	2200      	movs	r2, #0
 8011936:	f7fd fca7 	bl	800f288 <pbuf_alloc>
  if (p != NULL) {
 801193a:	4606      	mov	r6, r0
 801193c:	b340      	cbz	r0, 8011990 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801193e:	8943      	ldrh	r3, [r0, #10]
 8011940:	2b13      	cmp	r3, #19
 8011942:	dc05      	bgt.n	8011950 <tcp_output_alloc_header.constprop.0+0x28>
 8011944:	4b13      	ldr	r3, [pc, #76]	; (8011994 <tcp_output_alloc_header.constprop.0+0x6c>)
 8011946:	2273      	movs	r2, #115	; 0x73
 8011948:	4913      	ldr	r1, [pc, #76]	; (8011998 <tcp_output_alloc_header.constprop.0+0x70>)
 801194a:	4814      	ldr	r0, [pc, #80]	; (801199c <tcp_output_alloc_header.constprop.0+0x74>)
 801194c:	f000 fe82 	bl	8012654 <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 8011950:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8011952:	8ae8      	ldrh	r0, [r5, #22]
 8011954:	f7fb fe4d 	bl	800d5f2 <lwip_htons>
 8011958:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801195a:	8b28      	ldrh	r0, [r5, #24]
 801195c:	f7fb fe49 	bl	800d5f2 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8011960:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8011962:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011964:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011966:	f7fb fe47 	bl	800d5f8 <lwip_htonl>
 801196a:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801196c:	f245 0010 	movw	r0, #20496	; 0x5010
 8011970:	f7fb fe3f 	bl	800d5f2 <lwip_htons>
 8011974:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011976:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8011978:	f7fb fe3b 	bl	800d5f2 <lwip_htons>
    tcphdr->chksum = 0;
 801197c:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801197e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 8011980:	7423      	strb	r3, [r4, #16]
 8011982:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8011984:	74a3      	strb	r3, [r4, #18]
 8011986:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011988:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801198a:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801198c:	4413      	add	r3, r2
 801198e:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8011990:	4630      	mov	r0, r6
 8011992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011994:	08014e95 	.word	0x08014e95
 8011998:	08014e67 	.word	0x08014e67
 801199c:	0801342a 	.word	0x0801342a

080119a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80119a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80119a4:	f011 0803 	ands.w	r8, r1, #3
{
 80119a8:	4604      	mov	r4, r0
 80119aa:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80119ac:	d106      	bne.n	80119bc <tcp_enqueue_flags+0x1c>
 80119ae:	4b40      	ldr	r3, [pc, #256]	; (8011ab0 <tcp_enqueue_flags+0x110>)
 80119b0:	f240 321b 	movw	r2, #795	; 0x31b
 80119b4:	493f      	ldr	r1, [pc, #252]	; (8011ab4 <tcp_enqueue_flags+0x114>)
 80119b6:	4840      	ldr	r0, [pc, #256]	; (8011ab8 <tcp_enqueue_flags+0x118>)
 80119b8:	f000 fe4c 	bl	8012654 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80119bc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80119c0:	2b08      	cmp	r3, #8
 80119c2:	d90a      	bls.n	80119da <tcp_enqueue_flags+0x3a>
 80119c4:	07f1      	lsls	r1, r6, #31
 80119c6:	d408      	bmi.n	80119da <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 80119c8:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80119ca:	f04f 30ff 	mov.w	r0, #4294967295
    pcb->flags |= TF_NAGLEMEMERR;
 80119ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119d2:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 80119d4:	b003      	add	sp, #12
 80119d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119da:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80119de:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 80119e0:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80119e2:	4610      	mov	r0, r2
 80119e4:	bf15      	itete	ne
 80119e6:	2704      	movne	r7, #4
 80119e8:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 80119ea:	f04f 0901 	movne.w	r9, #1
 80119ee:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80119f2:	4639      	mov	r1, r7
 80119f4:	f7fd fc48 	bl	800f288 <pbuf_alloc>
 80119f8:	4605      	mov	r5, r0
 80119fa:	2800      	cmp	r0, #0
 80119fc:	d0e4      	beq.n	80119c8 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80119fe:	8943      	ldrh	r3, [r0, #10]
 8011a00:	42bb      	cmp	r3, r7
 8011a02:	d206      	bcs.n	8011a12 <tcp_enqueue_flags+0x72>
 8011a04:	4b2a      	ldr	r3, [pc, #168]	; (8011ab0 <tcp_enqueue_flags+0x110>)
 8011a06:	f240 3241 	movw	r2, #833	; 0x341
 8011a0a:	492c      	ldr	r1, [pc, #176]	; (8011abc <tcp_enqueue_flags+0x11c>)
 8011a0c:	482a      	ldr	r0, [pc, #168]	; (8011ab8 <tcp_enqueue_flags+0x118>)
 8011a0e:	f000 fe21 	bl	8012654 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011a12:	f8cd 9000 	str.w	r9, [sp]
 8011a16:	4629      	mov	r1, r5
 8011a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a1a:	4632      	mov	r2, r6
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	f7ff ff1d 	bl	801185c <tcp_create_segment>
 8011a22:	4605      	mov	r5, r0
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d0cf      	beq.n	80119c8 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011a28:	68c3      	ldr	r3, [r0, #12]
 8011a2a:	079a      	lsls	r2, r3, #30
 8011a2c:	d006      	beq.n	8011a3c <tcp_enqueue_flags+0x9c>
 8011a2e:	4b20      	ldr	r3, [pc, #128]	; (8011ab0 <tcp_enqueue_flags+0x110>)
 8011a30:	f240 3249 	movw	r2, #841	; 0x349
 8011a34:	4922      	ldr	r1, [pc, #136]	; (8011ac0 <tcp_enqueue_flags+0x120>)
 8011a36:	4820      	ldr	r0, [pc, #128]	; (8011ab8 <tcp_enqueue_flags+0x118>)
 8011a38:	f000 fe0c 	bl	8012654 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011a3c:	892b      	ldrh	r3, [r5, #8]
 8011a3e:	b133      	cbz	r3, 8011a4e <tcp_enqueue_flags+0xae>
 8011a40:	4b1b      	ldr	r3, [pc, #108]	; (8011ab0 <tcp_enqueue_flags+0x110>)
 8011a42:	f240 324a 	movw	r2, #842	; 0x34a
 8011a46:	491f      	ldr	r1, [pc, #124]	; (8011ac4 <tcp_enqueue_flags+0x124>)
 8011a48:	481b      	ldr	r0, [pc, #108]	; (8011ab8 <tcp_enqueue_flags+0x118>)
 8011a4a:	f000 fe03 	bl	8012654 <iprintf>
  if (pcb->unsent == NULL) {
 8011a4e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011a50:	bb4b      	cbnz	r3, 8011aa6 <tcp_enqueue_flags+0x106>
    pcb->unsent = seg;
 8011a52:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8011a54:	2300      	movs	r3, #0
 8011a56:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011a5a:	f1b8 0f00 	cmp.w	r8, #0
 8011a5e:	d002      	beq.n	8011a66 <tcp_enqueue_flags+0xc6>
    pcb->snd_lbb++;
 8011a60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a62:	3301      	adds	r3, #1
 8011a64:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8011a66:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8011a68:	bf42      	ittt	mi
 8011a6a:	7ea3      	ldrbmi	r3, [r4, #26]
 8011a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8011a70:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011a72:	6868      	ldr	r0, [r5, #4]
 8011a74:	f7fd fd58 	bl	800f528 <pbuf_clen>
 8011a78:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8011a7c:	4418      	add	r0, r3
 8011a7e:	b280      	uxth	r0, r0
 8011a80:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d0a5      	beq.n	80119d4 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011a88:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011a8a:	b948      	cbnz	r0, 8011aa0 <tcp_enqueue_flags+0x100>
 8011a8c:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8011a8e:	2c00      	cmp	r4, #0
 8011a90:	d1a0      	bne.n	80119d4 <tcp_enqueue_flags+0x34>
 8011a92:	4b07      	ldr	r3, [pc, #28]	; (8011ab0 <tcp_enqueue_flags+0x110>)
 8011a94:	f240 326d 	movw	r2, #877	; 0x36d
 8011a98:	490b      	ldr	r1, [pc, #44]	; (8011ac8 <tcp_enqueue_flags+0x128>)
 8011a9a:	4807      	ldr	r0, [pc, #28]	; (8011ab8 <tcp_enqueue_flags+0x118>)
 8011a9c:	f000 fdda 	bl	8012654 <iprintf>
  return ERR_OK;
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	e797      	b.n	80119d4 <tcp_enqueue_flags+0x34>
 8011aa4:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	2a00      	cmp	r2, #0
 8011aaa:	d1fb      	bne.n	8011aa4 <tcp_enqueue_flags+0x104>
    useg->next = seg;
 8011aac:	601d      	str	r5, [r3, #0]
 8011aae:	e7d1      	b.n	8011a54 <tcp_enqueue_flags+0xb4>
 8011ab0:	08014e95 	.word	0x08014e95
 8011ab4:	08014d32 	.word	0x08014d32
 8011ab8:	0801342a 	.word	0x0801342a
 8011abc:	08014d87 	.word	0x08014d87
 8011ac0:	08014dc0 	.word	0x08014dc0
 8011ac4:	08014dd8 	.word	0x08014dd8
 8011ac8:	08014e02 	.word	0x08014e02

08011acc <tcp_send_fin>:
{
 8011acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8011ace:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8011ad0:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8011ad2:	b934      	cbnz	r4, 8011ae2 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	2101      	movs	r1, #1
}
 8011ad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011adc:	f7ff bf60 	b.w	80119a0 <tcp_enqueue_flags>
 8011ae0:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ae2:	6823      	ldr	r3, [r4, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d1fb      	bne.n	8011ae0 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011ae8:	68e3      	ldr	r3, [r4, #12]
 8011aea:	8998      	ldrh	r0, [r3, #12]
 8011aec:	f7fb fd81 	bl	800d5f2 <lwip_htons>
 8011af0:	f010 0707 	ands.w	r7, r0, #7
 8011af4:	d1ee      	bne.n	8011ad4 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011af6:	68e6      	ldr	r6, [r4, #12]
 8011af8:	2001      	movs	r0, #1
 8011afa:	89b4      	ldrh	r4, [r6, #12]
 8011afc:	f7fb fd79 	bl	800d5f2 <lwip_htons>
 8011b00:	4320      	orrs	r0, r4
 8011b02:	81b0      	strh	r0, [r6, #12]
}
 8011b04:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 8011b06:	7eab      	ldrb	r3, [r5, #26]
 8011b08:	f043 0320 	orr.w	r3, r3, #32
 8011b0c:	76ab      	strb	r3, [r5, #26]
}
 8011b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011b10 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011b10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b12:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011b14:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8011b16:	f7fb fd6f 	bl	800d5f8 <lwip_htonl>
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f7ff ff02 	bl	8011928 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8011b24:	4606      	mov	r6, r0
 8011b26:	b940      	cbnz	r0, 8011b3a <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011b28:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011b2a:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011b2e:	f043 0303 	orr.w	r3, r3, #3
 8011b32:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8011b34:	4628      	mov	r0, r5
 8011b36:	b004      	add	sp, #16
 8011b38:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011b3a:	1d25      	adds	r5, r4, #4
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	f7fc fa71 	bl	800e024 <ip4_route>
  if (netif == NULL) {
 8011b42:	b1a0      	cbz	r0, 8011b6e <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8011b44:	2206      	movs	r2, #6
 8011b46:	9002      	str	r0, [sp, #8]
 8011b48:	7aa3      	ldrb	r3, [r4, #10]
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	9201      	str	r2, [sp, #4]
 8011b4e:	4630      	mov	r0, r6
 8011b50:	7a62      	ldrb	r2, [r4, #9]
 8011b52:	9200      	str	r2, [sp, #0]
 8011b54:	462a      	mov	r2, r5
 8011b56:	f7fc fbcb 	bl	800e2f0 <ip4_output_if>
 8011b5a:	4605      	mov	r5, r0
  pbuf_free(p);
 8011b5c:	4630      	mov	r0, r6
 8011b5e:	f7fd fb31 	bl	800f1c4 <pbuf_free>
 8011b62:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8011b64:	b135      	cbz	r5, 8011b74 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011b66:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011b6a:	76a3      	strb	r3, [r4, #26]
 8011b6c:	e7e2      	b.n	8011b34 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8011b6e:	f06f 0503 	mvn.w	r5, #3
 8011b72:	e7f3      	b.n	8011b5c <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011b74:	f023 0303 	bic.w	r3, r3, #3
 8011b78:	e7f7      	b.n	8011b6a <tcp_send_empty_ack+0x5a>
	...

08011b7c <tcp_output>:
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011b7c:	7d03      	ldrb	r3, [r0, #20]
 8011b7e:	2b01      	cmp	r3, #1
{
 8011b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b84:	4604      	mov	r4, r0
 8011b86:	b087      	sub	sp, #28
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011b88:	d106      	bne.n	8011b98 <tcp_output+0x1c>
 8011b8a:	4ba5      	ldr	r3, [pc, #660]	; (8011e20 <tcp_output+0x2a4>)
 8011b8c:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8011b90:	49a4      	ldr	r1, [pc, #656]	; (8011e24 <tcp_output+0x2a8>)
 8011b92:	48a5      	ldr	r0, [pc, #660]	; (8011e28 <tcp_output+0x2ac>)
 8011b94:	f000 fd5e 	bl	8012654 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011b98:	4ba4      	ldr	r3, [pc, #656]	; (8011e2c <tcp_output+0x2b0>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	429c      	cmp	r4, r3
 8011b9e:	d052      	beq.n	8011c46 <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011ba0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8011ba4:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8011ba8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011baa:	429f      	cmp	r7, r3
 8011bac:	bf28      	it	cs
 8011bae:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8011bb0:	7ea3      	ldrb	r3, [r4, #26]
 8011bb2:	0799      	lsls	r1, r3, #30
 8011bb4:	d510      	bpl.n	8011bd8 <tcp_output+0x5c>
 8011bb6:	b92d      	cbnz	r5, 8011bc4 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8011bb8:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8011bba:	b007      	add	sp, #28
 8011bbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8011bc0:	f7ff bfa6 	b.w	8011b10 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8011bc4:	68eb      	ldr	r3, [r5, #12]
 8011bc6:	6858      	ldr	r0, [r3, #4]
 8011bc8:	f7fb fd16 	bl	800d5f8 <lwip_htonl>
 8011bcc:	892b      	ldrh	r3, [r5, #8]
 8011bce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011bd0:	1a9b      	subs	r3, r3, r2
 8011bd2:	4418      	add	r0, r3
     (seg == NULL ||
 8011bd4:	4287      	cmp	r7, r0
 8011bd6:	d3ef      	bcc.n	8011bb8 <tcp_output+0x3c>
  useg = pcb->unacked;
 8011bd8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8011bda:	2e00      	cmp	r6, #0
 8011bdc:	d136      	bne.n	8011c4c <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011bde:	f104 0804 	add.w	r8, r4, #4
 8011be2:	4640      	mov	r0, r8
 8011be4:	f7fc fa1e 	bl	800e024 <ip4_route>
  if (netif == NULL) {
 8011be8:	4681      	mov	r9, r0
 8011bea:	2800      	cmp	r0, #0
 8011bec:	f000 813c 	beq.w	8011e68 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8011bf0:	b10c      	cbz	r4, 8011bf6 <tcp_output+0x7a>
 8011bf2:	6823      	ldr	r3, [r4, #0]
 8011bf4:	b913      	cbnz	r3, 8011bfc <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011bf6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011bfa:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8011bfc:	b1d5      	cbz	r5, 8011c34 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011bfe:	68eb      	ldr	r3, [r5, #12]
 8011c00:	6858      	ldr	r0, [r3, #4]
 8011c02:	f7fb fcf9 	bl	800d5f8 <lwip_htonl>
 8011c06:	892b      	ldrh	r3, [r5, #8]
 8011c08:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011c0a:	1a9b      	subs	r3, r3, r2
 8011c0c:	4418      	add	r0, r3
  if (seg != NULL &&
 8011c0e:	4287      	cmp	r7, r0
 8011c10:	d26f      	bcs.n	8011cf2 <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011c12:	2f00      	cmp	r7, #0
 8011c14:	d06d      	beq.n	8011cf2 <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8011c16:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8011c1a:	429f      	cmp	r7, r3
 8011c1c:	d169      	bne.n	8011cf2 <tcp_output+0x176>
 8011c1e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d166      	bne.n	8011cf2 <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 8011c24:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8011c28:	b923      	cbnz	r3, 8011c34 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 8011c2a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 8011c34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011c36:	b913      	cbnz	r3, 8011c3e <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8011c3e:	7ea3      	ldrb	r3, [r4, #26]
 8011c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c44:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8011c46:	2000      	movs	r0, #0
 8011c48:	e0e6      	b.n	8011e18 <tcp_output+0x29c>
 8011c4a:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8011c4c:	6833      	ldr	r3, [r6, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d1fb      	bne.n	8011c4a <tcp_output+0xce>
 8011c52:	e7c4      	b.n	8011bde <tcp_output+0x62>
    pcb->unsent = seg->next;
 8011c54:	682b      	ldr	r3, [r5, #0]
 8011c56:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011c58:	7d23      	ldrb	r3, [r4, #20]
 8011c5a:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011c5c:	bf1e      	ittt	ne
 8011c5e:	7ea3      	ldrbne	r3, [r4, #26]
 8011c60:	f023 0303 	bicne.w	r3, r3, #3
 8011c64:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011c66:	68eb      	ldr	r3, [r5, #12]
 8011c68:	6858      	ldr	r0, [r3, #4]
 8011c6a:	f7fb fcc5 	bl	800d5f8 <lwip_htonl>
 8011c6e:	68e9      	ldr	r1, [r5, #12]
 8011c70:	4683      	mov	fp, r0
 8011c72:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8011c76:	8988      	ldrh	r0, [r1, #12]
 8011c78:	f7fb fcbb 	bl	800d5f2 <lwip_htons>
 8011c7c:	f010 0003 	ands.w	r0, r0, #3
 8011c80:	eb0b 030a 	add.w	r3, fp, sl
    if (TCP_TCPLEN(seg) > 0) {
 8011c84:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011c86:	bf18      	it	ne
 8011c88:	2001      	movne	r0, #1
    if (TCP_TCPLEN(seg) > 0) {
 8011c8a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011c8e:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011c90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011c92:	1a1b      	subs	r3, r3, r0
 8011c94:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8011c96:	bfb8      	it	lt
 8011c98:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8011c9a:	8990      	ldrh	r0, [r2, #12]
 8011c9c:	f7fb fca9 	bl	800d5f2 <lwip_htons>
 8011ca0:	f010 0003 	ands.w	r0, r0, #3
 8011ca4:	bf18      	it	ne
 8011ca6:	2001      	movne	r0, #1
 8011ca8:	eb10 0f0a 	cmn.w	r0, sl
 8011cac:	f000 80d8 	beq.w	8011e60 <tcp_output+0x2e4>
      seg->next = NULL;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8011cb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011cb6:	b913      	cbnz	r3, 8011cbe <tcp_output+0x142>
        pcb->unacked = seg;
 8011cb8:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8011cba:	462e      	mov	r6, r5
 8011cbc:	e016      	b.n	8011cec <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011cbe:	68eb      	ldr	r3, [r5, #12]
 8011cc0:	6858      	ldr	r0, [r3, #4]
 8011cc2:	f7fb fc99 	bl	800d5f8 <lwip_htonl>
 8011cc6:	68f2      	ldr	r2, [r6, #12]
 8011cc8:	4682      	mov	sl, r0
 8011cca:	6850      	ldr	r0, [r2, #4]
 8011ccc:	f7fb fc94 	bl	800d5f8 <lwip_htonl>
 8011cd0:	ebaa 0000 	sub.w	r0, sl, r0
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	f280 80c1 	bge.w	8011e5c <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011cda:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8011cde:	681a      	ldr	r2, [r3, #0]
 8011ce0:	2a00      	cmp	r2, #0
 8011ce2:	f040 80a9 	bne.w	8011e38 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8011cea:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8011cec:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8011cee:	2d00      	cmp	r5, #0
 8011cf0:	d0a2      	beq.n	8011c38 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011cf2:	68eb      	ldr	r3, [r5, #12]
 8011cf4:	6858      	ldr	r0, [r3, #4]
 8011cf6:	f7fb fc7f 	bl	800d5f8 <lwip_htonl>
 8011cfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011cfc:	1ac0      	subs	r0, r0, r3
 8011cfe:	892b      	ldrh	r3, [r5, #8]
 8011d00:	4418      	add	r0, r3
  while (seg != NULL &&
 8011d02:	4287      	cmp	r7, r0
 8011d04:	d396      	bcc.n	8011c34 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 8011d06:	68eb      	ldr	r3, [r5, #12]
 8011d08:	8998      	ldrh	r0, [r3, #12]
 8011d0a:	f7fb fc72 	bl	800d5f2 <lwip_htons>
 8011d0e:	0742      	lsls	r2, r0, #29
 8011d10:	d506      	bpl.n	8011d20 <tcp_output+0x1a4>
 8011d12:	4b43      	ldr	r3, [pc, #268]	; (8011e20 <tcp_output+0x2a4>)
 8011d14:	f240 4246 	movw	r2, #1094	; 0x446
 8011d18:	4945      	ldr	r1, [pc, #276]	; (8011e30 <tcp_output+0x2b4>)
 8011d1a:	4843      	ldr	r0, [pc, #268]	; (8011e28 <tcp_output+0x2ac>)
 8011d1c:	f000 fc9a 	bl	8012654 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011d20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011d22:	b19b      	cbz	r3, 8011d4c <tcp_output+0x1d0>
 8011d24:	7ea2      	ldrb	r2, [r4, #26]
 8011d26:	f012 0f44 	tst.w	r2, #68	; 0x44
 8011d2a:	d10f      	bne.n	8011d4c <tcp_output+0x1d0>
 8011d2c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011d2e:	b12b      	cbz	r3, 8011d3c <tcp_output+0x1c0>
 8011d30:	6819      	ldr	r1, [r3, #0]
 8011d32:	b959      	cbnz	r1, 8011d4c <tcp_output+0x1d0>
 8011d34:	8919      	ldrh	r1, [r3, #8]
 8011d36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8011d38:	4299      	cmp	r1, r3
 8011d3a:	d207      	bcs.n	8011d4c <tcp_output+0x1d0>
 8011d3c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8011d40:	b123      	cbz	r3, 8011d4c <tcp_output+0x1d0>
 8011d42:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8011d46:	2b08      	cmp	r3, #8
 8011d48:	f240 8091 	bls.w	8011e6e <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 8011d4c:	7d23      	ldrb	r3, [r4, #20]
 8011d4e:	2b02      	cmp	r3, #2
 8011d50:	d00a      	beq.n	8011d68 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011d52:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8011d56:	2010      	movs	r0, #16
 8011d58:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 8011d5c:	f7fb fc49 	bl	800d5f2 <lwip_htons>
 8011d60:	ea4b 0000 	orr.w	r0, fp, r0
 8011d64:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8011d68:	686b      	ldr	r3, [r5, #4]
 8011d6a:	89db      	ldrh	r3, [r3, #14]
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	f47f af71 	bne.w	8011c54 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011d72:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8011d76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011d78:	f7fb fc3e 	bl	800d5f8 <lwip_htonl>
 8011d7c:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011d80:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8011d82:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8011d86:	f7fb fc34 	bl	800d5f2 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011d8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8011d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011d8e:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011d92:	4413      	add	r3, r2
 8011d94:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011d96:	7aab      	ldrb	r3, [r5, #10]
 8011d98:	07db      	lsls	r3, r3, #31
 8011d9a:	d50c      	bpl.n	8011db6 <tcp_output+0x23a>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011d9c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8011da0:	4641      	mov	r1, r8
 8011da2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011da6:	f7fe fa93 	bl	80102d0 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011daa:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8011dae:	f7fb fc23 	bl	800d5f8 <lwip_htonl>
 8011db2:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011db6:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8011dba:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8011dbc:	bfbc      	itt	lt
 8011dbe:	2300      	movlt	r3, #0
 8011dc0:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011dc4:	b93b      	cbnz	r3, 8011dd6 <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 8011dc6:	4b1b      	ldr	r3, [pc, #108]	; (8011e34 <tcp_output+0x2b8>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011dcc:	68eb      	ldr	r3, [r5, #12]
 8011dce:	6858      	ldr	r0, [r3, #4]
 8011dd0:	f7fb fc12 	bl	800d5f8 <lwip_htonl>
 8011dd4:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011dd6:	6868      	ldr	r0, [r5, #4]
 8011dd8:	68ea      	ldr	r2, [r5, #12]
 8011dda:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011ddc:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011dde:	1ad3      	subs	r3, r2, r3
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8011de0:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011de2:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8011de4:	1ac9      	subs	r1, r1, r3
 8011de6:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8011de8:	8901      	ldrh	r1, [r0, #8]
 8011dea:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011dec:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 8011dee:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 8011df0:	2300      	movs	r3, #0
 8011df2:	7413      	strb	r3, [r2, #16]
 8011df4:	7453      	strb	r3, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011df6:	2206      	movs	r2, #6
 8011df8:	7aa3      	ldrb	r3, [r4, #10]
 8011dfa:	9201      	str	r2, [sp, #4]
 8011dfc:	7a62      	ldrb	r2, [r4, #9]
 8011dfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8011e02:	9200      	str	r2, [sp, #0]
 8011e04:	4642      	mov	r2, r8
 8011e06:	f7fc fa73 	bl	800e2f0 <ip4_output_if>
    if (err != ERR_OK) {
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	f43f af22 	beq.w	8011c54 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 8011e10:	7ea3      	ldrb	r3, [r4, #26]
 8011e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e16:	76a3      	strb	r3, [r4, #26]
}
 8011e18:	b007      	add	sp, #28
 8011e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e1e:	bf00      	nop
 8011e20:	08014e95 	.word	0x08014e95
 8011e24:	08014e2a 	.word	0x08014e2a
 8011e28:	0801342a 	.word	0x0801342a
 8011e2c:	24004cc8 	.word	0x24004cc8
 8011e30:	08014e50 	.word	0x08014e50
 8011e34:	24004cb8 	.word	0x24004cb8
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011e38:	68d2      	ldr	r2, [r2, #12]
 8011e3a:	9305      	str	r3, [sp, #20]
 8011e3c:	6850      	ldr	r0, [r2, #4]
 8011e3e:	f7fb fbdb 	bl	800d5f8 <lwip_htonl>
 8011e42:	68e9      	ldr	r1, [r5, #12]
 8011e44:	4682      	mov	sl, r0
 8011e46:	6848      	ldr	r0, [r1, #4]
 8011e48:	f7fb fbd6 	bl	800d5f8 <lwip_htonl>
 8011e4c:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8011e50:	9b05      	ldr	r3, [sp, #20]
 8011e52:	2800      	cmp	r0, #0
 8011e54:	f6bf af47 	bge.w	8011ce6 <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	e740      	b.n	8011cde <tcp_output+0x162>
          useg->next = seg;
 8011e5c:	6035      	str	r5, [r6, #0]
 8011e5e:	e72c      	b.n	8011cba <tcp_output+0x13e>
      tcp_seg_free(seg);
 8011e60:	4628      	mov	r0, r5
 8011e62:	f7fd fd23 	bl	800f8ac <tcp_seg_free>
 8011e66:	e741      	b.n	8011cec <tcp_output+0x170>
    return ERR_RTE;
 8011e68:	f06f 0003 	mvn.w	r0, #3
 8011e6c:	e7d4      	b.n	8011e18 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e6e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8011e72:	f47f af6b 	bne.w	8011d4c <tcp_output+0x1d0>
 8011e76:	e6dd      	b.n	8011c34 <tcp_output+0xb8>

08011e78 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8011e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7c:	b085      	sub	sp, #20
 8011e7e:	4681      	mov	r9, r0
 8011e80:	460e      	mov	r6, r1
 8011e82:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8011e84:	2114      	movs	r1, #20
 8011e86:	2200      	movs	r2, #0
 8011e88:	2001      	movs	r0, #1
{
 8011e8a:	461f      	mov	r7, r3
 8011e8c:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8011e90:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8011e94:	f7fd f9f8 	bl	800f288 <pbuf_alloc>
  if (p == NULL) {
 8011e98:	4605      	mov	r5, r0
 8011e9a:	2800      	cmp	r0, #0
 8011e9c:	d03c      	beq.n	8011f18 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011e9e:	8943      	ldrh	r3, [r0, #10]
 8011ea0:	2b13      	cmp	r3, #19
 8011ea2:	d806      	bhi.n	8011eb2 <tcp_rst+0x3a>
 8011ea4:	4b1e      	ldr	r3, [pc, #120]	; (8011f20 <tcp_rst+0xa8>)
 8011ea6:	f240 524d 	movw	r2, #1357	; 0x54d
 8011eaa:	491e      	ldr	r1, [pc, #120]	; (8011f24 <tcp_rst+0xac>)
 8011eac:	481e      	ldr	r0, [pc, #120]	; (8011f28 <tcp_rst+0xb0>)
 8011eae:	f000 fbd1 	bl	8012654 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8011eb2:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8011eb4:	4658      	mov	r0, fp
 8011eb6:	f7fb fb9c 	bl	800d5f2 <lwip_htons>
 8011eba:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8011ebc:	4650      	mov	r0, sl
 8011ebe:	f7fb fb98 	bl	800d5f2 <lwip_htons>
 8011ec2:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8011ec4:	4648      	mov	r0, r9
 8011ec6:	f7fb fb97 	bl	800d5f8 <lwip_htonl>
 8011eca:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8011ecc:	4630      	mov	r0, r6
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011ece:	2600      	movs	r6, #0
  tcphdr->ackno = lwip_htonl(ackno);
 8011ed0:	f7fb fb92 	bl	800d5f8 <lwip_htonl>
 8011ed4:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011ed6:	f245 0014 	movw	r0, #20500	; 0x5014
 8011eda:	f7fb fb8a 	bl	800d5f2 <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011ede:	2308      	movs	r3, #8
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011ee0:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8011ee2:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011ee4:	73a3      	strb	r3, [r4, #14]
 8011ee6:	2360      	movs	r3, #96	; 0x60
  tcphdr->chksum = 0;
 8011ee8:	7426      	strb	r6, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011eea:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 8011eec:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8011eee:	74a6      	strb	r6, [r4, #18]
 8011ef0:	74e6      	strb	r6, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 8011ef2:	f7fc f897 	bl	800e024 <ip4_route>
  if (netif != NULL) {
 8011ef6:	b148      	cbz	r0, 8011f0c <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8011ef8:	2306      	movs	r3, #6
 8011efa:	9002      	str	r0, [sp, #8]
 8011efc:	9600      	str	r6, [sp, #0]
 8011efe:	463a      	mov	r2, r7
 8011f00:	9301      	str	r3, [sp, #4]
 8011f02:	4641      	mov	r1, r8
 8011f04:	23ff      	movs	r3, #255	; 0xff
 8011f06:	4628      	mov	r0, r5
 8011f08:	f7fc f9f2 	bl	800e2f0 <ip4_output_if>
  }
  pbuf_free(p);
 8011f0c:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011f0e:	b005      	add	sp, #20
 8011f10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8011f14:	f7fd b956 	b.w	800f1c4 <pbuf_free>
}
 8011f18:	b005      	add	sp, #20
 8011f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f1e:	bf00      	nop
 8011f20:	08014e95 	.word	0x08014e95
 8011f24:	08014e67 	.word	0x08014e67
 8011f28:	0801342a 	.word	0x0801342a

08011f2c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011f2c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8011f2e:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8011f30:	b1aa      	cbz	r2, 8011f5e <tcp_rexmit_rto+0x32>
 8011f32:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8011f34:	680b      	ldr	r3, [r1, #0]
 8011f36:	b983      	cbnz	r3, 8011f5a <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011f38:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8011f3a:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011f3c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011f3e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 8011f42:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8011f44:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8011f46:	bf1c      	itt	ne
 8011f48:	3301      	addne	r3, #1
 8011f4a:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011f4e:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8011f50:	f85d 4b04 	ldr.w	r4, [sp], #4
  pcb->rttest = 0;
 8011f54:	6343      	str	r3, [r0, #52]	; 0x34
  tcp_output(pcb);
 8011f56:	f7ff be11 	b.w	8011b7c <tcp_output>
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	e7ea      	b.n	8011f34 <tcp_rexmit_rto+0x8>
}
 8011f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f62:	4770      	bx	lr

08011f64 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8011f66:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8011f68:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8011f6a:	b1ad      	cbz	r5, 8011f98 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8011f6c:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 8011f6e:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 8011f72:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 8011f74:	6833      	ldr	r3, [r6, #0]
 8011f76:	b983      	cbnz	r3, 8011f9a <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8011f78:	6833      	ldr	r3, [r6, #0]
 8011f7a:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8011f7c:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011f7e:	682b      	ldr	r3, [r5, #0]
 8011f80:	b90b      	cbnz	r3, 8011f86 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011f82:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011f86:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8011f8a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8011f8c:	bf1c      	itt	ne
 8011f8e:	3301      	addne	r3, #1
 8011f90:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011f94:	2300      	movs	r3, #0
 8011f96:	6363      	str	r3, [r4, #52]	; 0x34
 8011f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	6858      	ldr	r0, [r3, #4]
 8011f9e:	f7fb fb2b 	bl	800d5f8 <lwip_htonl>
 8011fa2:	68eb      	ldr	r3, [r5, #12]
 8011fa4:	4607      	mov	r7, r0
 8011fa6:	6858      	ldr	r0, [r3, #4]
 8011fa8:	f7fb fb26 	bl	800d5f8 <lwip_htonl>
 8011fac:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8011fae:	2800      	cmp	r0, #0
 8011fb0:	dae2      	bge.n	8011f78 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8011fb2:	6836      	ldr	r6, [r6, #0]
 8011fb4:	e7de      	b.n	8011f74 <tcp_rexmit+0x10>

08011fb6 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011fb6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8011fb8:	b510      	push	{r4, lr}
 8011fba:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011fbc:	b30b      	cbz	r3, 8012002 <tcp_rexmit_fast+0x4c>
 8011fbe:	7e83      	ldrb	r3, [r0, #26]
 8011fc0:	075b      	lsls	r3, r3, #29
 8011fc2:	d41e      	bmi.n	8012002 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011fc4:	f7ff ffce 	bl	8011f64 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011fc8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8011fcc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8011fd0:	4293      	cmp	r3, r2
 8011fd2:	bf38      	it	cc
 8011fd4:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8011fd6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011fd8:	bf28      	it	cs
 8011fda:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8011fdc:	0059      	lsls	r1, r3, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011fde:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8011fe2:	428a      	cmp	r2, r1
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011fe4:	440b      	add	r3, r1
      pcb->ssthresh = 2*pcb->mss;
 8011fe6:	bf38      	it	cc
 8011fe8:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011fec:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8011ff0:	4413      	add	r3, r2
 8011ff2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8011ff6:	7ea3      	ldrb	r3, [r4, #26]
 8011ff8:	f043 0304 	orr.w	r3, r3, #4
 8011ffc:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011ffe:	2300      	movs	r3, #0
 8012000:	8623      	strh	r3, [r4, #48]	; 0x30
 8012002:	bd10      	pop	{r4, pc}

08012004 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012004:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012006:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012008:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801200a:	3801      	subs	r0, #1
 801200c:	f7fb faf4 	bl	800d5f8 <lwip_htonl>
 8012010:	2100      	movs	r1, #0
 8012012:	4602      	mov	r2, r0
 8012014:	4620      	mov	r0, r4
 8012016:	f7ff fc87 	bl	8011928 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801201a:	4605      	mov	r5, r0
 801201c:	b1c8      	cbz	r0, 8012052 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801201e:	1d26      	adds	r6, r4, #4
 8012020:	4630      	mov	r0, r6
 8012022:	f7fb ffff 	bl	800e024 <ip4_route>
  if (netif == NULL) {
 8012026:	b188      	cbz	r0, 801204c <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012028:	2100      	movs	r1, #0
 801202a:	2206      	movs	r2, #6
 801202c:	7aa3      	ldrb	r3, [r4, #10]
 801202e:	9002      	str	r0, [sp, #8]
 8012030:	4628      	mov	r0, r5
 8012032:	e88d 0006 	stmia.w	sp, {r1, r2}
 8012036:	4621      	mov	r1, r4
 8012038:	4632      	mov	r2, r6
 801203a:	f7fc f959 	bl	800e2f0 <ip4_output_if>
 801203e:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012040:	4628      	mov	r0, r5
 8012042:	f7fd f8bf 	bl	800f1c4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8012046:	4620      	mov	r0, r4
 8012048:	b004      	add	sp, #16
 801204a:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 801204c:	f06f 0403 	mvn.w	r4, #3
 8012050:	e7f6      	b.n	8012040 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8012052:	f04f 34ff 	mov.w	r4, #4294967295
 8012056:	e7f6      	b.n	8012046 <tcp_keepalive+0x42>

08012058 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012058:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801205c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 801205e:	4606      	mov	r6, r0

  if (seg == NULL) {
 8012060:	b914      	cbnz	r4, 8012068 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8012062:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8012064:	2c00      	cmp	r4, #0
 8012066:	d041      	beq.n	80120ec <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012068:	68e3      	ldr	r3, [r4, #12]
 801206a:	8998      	ldrh	r0, [r3, #12]
 801206c:	f7fb fac1 	bl	800d5f2 <lwip_htons>
 8012070:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012074:	68e3      	ldr	r3, [r4, #12]
 8012076:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012078:	bf18      	it	ne
 801207a:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801207c:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801207e:	bf1c      	itt	ne
 8012080:	fab5 f585 	clzne	r5, r5
 8012084:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012086:	f085 0101 	eor.w	r1, r5, #1
 801208a:	f7ff fc4d 	bl	8011928 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801208e:	4607      	mov	r7, r0
 8012090:	2800      	cmp	r0, #0
 8012092:	d03d      	beq.n	8012110 <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012094:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8012098:	b365      	cbz	r5, 80120f4 <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801209a:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 801209e:	2011      	movs	r0, #17
 80120a0:	f7fb faa7 	bl	800d5f2 <lwip_htons>
 80120a4:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 80120a8:	b2ad      	uxth	r5, r5
 80120aa:	4328      	orrs	r0, r5
 80120ac:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80120b0:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80120b2:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80120b4:	6858      	ldr	r0, [r3, #4]
 80120b6:	f7fb fa9f 	bl	800d5f8 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80120ba:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80120bc:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80120be:	1a1b      	subs	r3, r3, r0
 80120c0:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 80120c2:	bfb8      	it	lt
 80120c4:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80120c6:	4620      	mov	r0, r4
 80120c8:	f7fb ffac 	bl	800e024 <ip4_route>
  if (netif == NULL) {
 80120cc:	b1e8      	cbz	r0, 801210a <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80120ce:	2100      	movs	r1, #0
 80120d0:	2206      	movs	r2, #6
 80120d2:	9002      	str	r0, [sp, #8]
 80120d4:	4638      	mov	r0, r7
 80120d6:	7ab3      	ldrb	r3, [r6, #10]
 80120d8:	e88d 0006 	stmia.w	sp, {r1, r2}
 80120dc:	4622      	mov	r2, r4
 80120de:	4631      	mov	r1, r6
 80120e0:	f7fc f906 	bl	800e2f0 <ip4_output_if>
 80120e4:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80120e6:	4638      	mov	r0, r7
 80120e8:	f7fd f86c 	bl	800f1c4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80120ec:	4620      	mov	r0, r4
 80120ee:	b004      	add	sp, #16
 80120f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80120f4:	6860      	ldr	r0, [r4, #4]
 80120f6:	f108 0114 	add.w	r1, r8, #20
 80120fa:	8922      	ldrh	r2, [r4, #8]
 80120fc:	8903      	ldrh	r3, [r0, #8]
 80120fe:	1a9b      	subs	r3, r3, r2
 8012100:	2201      	movs	r2, #1
 8012102:	b29b      	uxth	r3, r3
 8012104:	f7fd faf0 	bl	800f6e8 <pbuf_copy_partial>
 8012108:	e7d2      	b.n	80120b0 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 801210a:	f06f 0403 	mvn.w	r4, #3
 801210e:	e7ea      	b.n	80120e6 <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 8012110:	f04f 34ff 	mov.w	r4, #4294967295
 8012114:	e7ea      	b.n	80120ec <tcp_zero_window_probe+0x94>
	...

08012118 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801211c:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801211e:	2006      	movs	r0, #6
{
 8012120:	460f      	mov	r7, r1
 8012122:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012124:	f7fc fecc 	bl	800eec0 <memp_malloc>
  if (timeout == NULL) {
 8012128:	4604      	mov	r4, r0
 801212a:	b938      	cbnz	r0, 801213c <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801212c:	4b1e      	ldr	r3, [pc, #120]	; (80121a8 <sys_timeout+0x90>)
 801212e:	22d4      	movs	r2, #212	; 0xd4
 8012130:	491e      	ldr	r1, [pc, #120]	; (80121ac <sys_timeout+0x94>)
 8012132:	481f      	ldr	r0, [pc, #124]	; (80121b0 <sys_timeout+0x98>)
        t->next = timeout;
        break;
      }
    }
  }
}
 8012134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012138:	f000 ba8c 	b.w	8012654 <iprintf>
  now = sys_now();
 801213c:	f7ef f94a 	bl	80013d4 <sys_now>
  if (next_timeout == NULL) {
 8012140:	4a1c      	ldr	r2, [pc, #112]	; (80121b4 <sys_timeout+0x9c>)
 8012142:	491d      	ldr	r1, [pc, #116]	; (80121b8 <sys_timeout+0xa0>)
 8012144:	6813      	ldr	r3, [r2, #0]
 8012146:	b95b      	cbnz	r3, 8012160 <sys_timeout+0x48>
    timeouts_last_time = now;
 8012148:	6008      	str	r0, [r1, #0]
    diff = 0;
 801214a:	4618      	mov	r0, r3
  timeout->next = NULL;
 801214c:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 801214e:	4428      	add	r0, r5
  timeout->h = handler;
 8012150:	60a7      	str	r7, [r4, #8]
  timeout->next = NULL;
 8012152:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 8012154:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 8012156:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8012158:	b92b      	cbnz	r3, 8012166 <sys_timeout+0x4e>
    next_timeout = timeout;
 801215a:	6014      	str	r4, [r2, #0]
 801215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8012160:	6809      	ldr	r1, [r1, #0]
 8012162:	1a40      	subs	r0, r0, r1
 8012164:	e7f2      	b.n	801214c <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 8012166:	6859      	ldr	r1, [r3, #4]
 8012168:	428d      	cmp	r5, r1
 801216a:	d217      	bcs.n	801219c <sys_timeout+0x84>
    next_timeout->time -= msecs;
 801216c:	1b4d      	subs	r5, r1, r5
 801216e:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8012170:	6023      	str	r3, [r4, #0]
 8012172:	e7f2      	b.n	801215a <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 8012174:	684e      	ldr	r6, [r1, #4]
 8012176:	42b2      	cmp	r2, r6
 8012178:	d312      	bcc.n	80121a0 <sys_timeout+0x88>
 801217a:	4608      	mov	r0, r1
      timeout->time -= t->time;
 801217c:	6841      	ldr	r1, [r0, #4]
 801217e:	6862      	ldr	r2, [r4, #4]
 8012180:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8012182:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8012184:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8012186:	2900      	cmp	r1, #0
 8012188:	d1f4      	bne.n	8012174 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 801218a:	4295      	cmp	r5, r2
 801218c:	d202      	bcs.n	8012194 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	441d      	add	r5, r3
 8012192:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 8012194:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8012196:	6004      	str	r4, [r0, #0]
        break;
 8012198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801219c:	4618      	mov	r0, r3
 801219e:	e7ed      	b.n	801217c <sys_timeout+0x64>
          t->next->time -= timeout->time;
 80121a0:	1ab2      	subs	r2, r6, r2
 80121a2:	604a      	str	r2, [r1, #4]
 80121a4:	e7f6      	b.n	8012194 <sys_timeout+0x7c>
 80121a6:	bf00      	nop
 80121a8:	08014efc 	.word	0x08014efc
 80121ac:	08014f36 	.word	0x08014f36
 80121b0:	0801342a 	.word	0x0801342a
 80121b4:	24000248 	.word	0x24000248
 80121b8:	24000250 	.word	0x24000250

080121bc <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80121bc:	4b08      	ldr	r3, [pc, #32]	; (80121e0 <tcp_timer_needed+0x24>)
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	b962      	cbnz	r2, 80121dc <tcp_timer_needed+0x20>
 80121c2:	4a08      	ldr	r2, [pc, #32]	; (80121e4 <tcp_timer_needed+0x28>)
 80121c4:	6812      	ldr	r2, [r2, #0]
 80121c6:	b912      	cbnz	r2, 80121ce <tcp_timer_needed+0x12>
 80121c8:	4a07      	ldr	r2, [pc, #28]	; (80121e8 <tcp_timer_needed+0x2c>)
 80121ca:	6812      	ldr	r2, [r2, #0]
 80121cc:	b132      	cbz	r2, 80121dc <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 80121ce:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121d0:	4906      	ldr	r1, [pc, #24]	; (80121ec <tcp_timer_needed+0x30>)
 80121d2:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 80121d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121d6:	2200      	movs	r2, #0
 80121d8:	f7ff bf9e 	b.w	8012118 <sys_timeout>
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop
 80121e0:	2400024c 	.word	0x2400024c
 80121e4:	24004cb4 	.word	0x24004cb4
 80121e8:	24004cc4 	.word	0x24004cc4
 80121ec:	080121f1 	.word	0x080121f1

080121f0 <tcpip_tcp_timer>:
{
 80121f0:	b508      	push	{r3, lr}
  tcp_tmr();
 80121f2:	f7fd ff0f 	bl	8010014 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80121f6:	4b08      	ldr	r3, [pc, #32]	; (8012218 <tcpip_tcp_timer+0x28>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	b913      	cbnz	r3, 8012202 <tcpip_tcp_timer+0x12>
 80121fc:	4b07      	ldr	r3, [pc, #28]	; (801221c <tcpip_tcp_timer+0x2c>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	b133      	cbz	r3, 8012210 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012202:	2200      	movs	r2, #0
 8012204:	4906      	ldr	r1, [pc, #24]	; (8012220 <tcpip_tcp_timer+0x30>)
 8012206:	20fa      	movs	r0, #250	; 0xfa
}
 8012208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801220c:	f7ff bf84 	b.w	8012118 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8012210:	4a04      	ldr	r2, [pc, #16]	; (8012224 <tcpip_tcp_timer+0x34>)
 8012212:	6013      	str	r3, [r2, #0]
 8012214:	bd08      	pop	{r3, pc}
 8012216:	bf00      	nop
 8012218:	24004cb4 	.word	0x24004cb4
 801221c:	24004cc4 	.word	0x24004cc4
 8012220:	080121f1 	.word	0x080121f1
 8012224:	2400024c 	.word	0x2400024c

08012228 <sys_timeouts_init>:
{
 8012228:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801222a:	4d0a      	ldr	r5, [pc, #40]	; (8012254 <sys_timeouts_init+0x2c>)
 801222c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012230:	4c09      	ldr	r4, [pc, #36]	; (8012258 <sys_timeouts_init+0x30>)
 8012232:	f105 0208 	add.w	r2, r5, #8
 8012236:	4621      	mov	r1, r4
 8012238:	f7ff ff6e 	bl	8012118 <sys_timeout>
 801223c:	f105 0210 	add.w	r2, r5, #16
 8012240:	4621      	mov	r1, r4
 8012242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012246:	f7ff ff67 	bl	8012118 <sys_timeout>
  timeouts_last_time = sys_now();
 801224a:	f7ef f8c3 	bl	80013d4 <sys_now>
 801224e:	4b03      	ldr	r3, [pc, #12]	; (801225c <sys_timeouts_init+0x34>)
 8012250:	6018      	str	r0, [r3, #0]
 8012252:	bd38      	pop	{r3, r4, r5, pc}
 8012254:	08014ee4 	.word	0x08014ee4
 8012258:	08012261 	.word	0x08012261
 801225c:	24000250 	.word	0x24000250

08012260 <cyclic_timer>:
{
 8012260:	b510      	push	{r4, lr}
 8012262:	4604      	mov	r4, r0
  cyclic->handler();
 8012264:	6843      	ldr	r3, [r0, #4]
 8012266:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8012268:	4903      	ldr	r1, [pc, #12]	; (8012278 <cyclic_timer+0x18>)
 801226a:	4622      	mov	r2, r4
 801226c:	6820      	ldr	r0, [r4, #0]
}
 801226e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8012272:	f7ff bf51 	b.w	8012118 <sys_timeout>
 8012276:	bf00      	nop
 8012278:	08012261 	.word	0x08012261

0801227c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801227c:	4770      	bx	lr
	...

08012280 <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012280:	8943      	ldrh	r3, [r0, #10]
 8012282:	2b07      	cmp	r3, #7
{
 8012284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012288:	4605      	mov	r5, r0
 801228a:	b085      	sub	sp, #20
 801228c:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 801228e:	d805      	bhi.n	801229c <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012290:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012292:	b005      	add	sp, #20
 8012294:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8012298:	f7fc bf94 	b.w	800f1c4 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801229c:	4e3e      	ldr	r6, [pc, #248]	; (8012398 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 801229e:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80122a0:	6831      	ldr	r1, [r6, #0]
 80122a2:	6970      	ldr	r0, [r6, #20]
 80122a4:	f7fc f835 	bl	800e312 <ip4_addr_isbroadcast_u32>
 80122a8:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 80122aa:	8820      	ldrh	r0, [r4, #0]
 80122ac:	f7fb f9a1 	bl	800d5f2 <lwip_htons>
 80122b0:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 80122b2:	8860      	ldrh	r0, [r4, #2]
  uncon_pcb = NULL;
 80122b4:	2400      	movs	r4, #0
  dest = lwip_ntohs(udphdr->dest);
 80122b6:	f7fb f99c 	bl	800d5f2 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122ba:	4a38      	ldr	r2, [pc, #224]	; (801239c <udp_input+0x11c>)
  dest = lwip_ntohs(udphdr->dest);
 80122bc:	4682      	mov	sl, r0
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80122be:	6971      	ldr	r1, [r6, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122c0:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 80122c2:	46a4      	mov	ip, r4
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80122c4:	f8d6 e010 	ldr.w	lr, [r6, #16]
 80122c8:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122ca:	4603      	mov	r3, r0
 80122cc:	9603      	str	r6, [sp, #12]
 80122ce:	b92b      	cbnz	r3, 80122dc <udp_input+0x5c>
  if (pcb != NULL) {
 80122d0:	bb0c      	cbnz	r4, 8012316 <udp_input+0x96>
  if (for_us) {
 80122d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80122d6:	428b      	cmp	r3, r1
 80122d8:	d1da      	bne.n	8012290 <udp_input+0x10>
 80122da:	e01c      	b.n	8012316 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 80122dc:	8a5a      	ldrh	r2, [r3, #18]
 80122de:	4552      	cmp	r2, sl
 80122e0:	d12b      	bne.n	801233a <udp_input+0xba>
 80122e2:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 80122e4:	b32f      	cbz	r7, 8012332 <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122e6:	b13a      	cbz	r2, 80122f8 <udp_input+0x78>
 80122e8:	1c4e      	adds	r6, r1, #1
 80122ea:	d005      	beq.n	80122f8 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80122ec:	404a      	eors	r2, r1
 80122ee:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80122f0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80122f4:	4216      	tst	r6, r2
 80122f6:	d120      	bne.n	801233a <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80122f8:	7c1a      	ldrb	r2, [r3, #16]
 80122fa:	0752      	lsls	r2, r2, #29
 80122fc:	d402      	bmi.n	8012304 <udp_input+0x84>
 80122fe:	2c00      	cmp	r4, #0
 8012300:	bf08      	it	eq
 8012302:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8012304:	8a9a      	ldrh	r2, [r3, #20]
 8012306:	4542      	cmp	r2, r8
 8012308:	d117      	bne.n	801233a <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801230a:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 801230c:	b9c2      	cbnz	r2, 8012340 <udp_input+0xc0>
        if (prev != NULL) {
 801230e:	f1bc 0f00 	cmp.w	ip, #0
 8012312:	d118      	bne.n	8012346 <udp_input+0xc6>
 8012314:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8012316:	f06f 0107 	mvn.w	r1, #7
 801231a:	4628      	mov	r0, r5
 801231c:	f7fc ff4c 	bl	800f1b8 <pbuf_header>
 8012320:	b1c0      	cbz	r0, 8012354 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8012322:	4b1f      	ldr	r3, [pc, #124]	; (80123a0 <udp_input+0x120>)
 8012324:	f240 1255 	movw	r2, #341	; 0x155
 8012328:	491e      	ldr	r1, [pc, #120]	; (80123a4 <udp_input+0x124>)
 801232a:	481f      	ldr	r0, [pc, #124]	; (80123a8 <udp_input+0x128>)
 801232c:	f000 f992 	bl	8012654 <iprintf>
 8012330:	e7ae      	b.n	8012290 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012332:	2a00      	cmp	r2, #0
 8012334:	d0e0      	beq.n	80122f8 <udp_input+0x78>
 8012336:	428a      	cmp	r2, r1
 8012338:	d0de      	beq.n	80122f8 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801233a:	469c      	mov	ip, r3
 801233c:	68db      	ldr	r3, [r3, #12]
 801233e:	e7c6      	b.n	80122ce <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012340:	4572      	cmp	r2, lr
 8012342:	d1fa      	bne.n	801233a <udp_input+0xba>
 8012344:	e7e3      	b.n	801230e <udp_input+0x8e>
          prev->next = pcb->next;
 8012346:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 8012348:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 801234c:	f8cc 200c 	str.w	r2, [ip, #12]
          pcb->next = udp_pcbs;
 8012350:	60d8      	str	r0, [r3, #12]
 8012352:	e7df      	b.n	8012314 <udp_input+0x94>
    if (pcb != NULL) {
 8012354:	b164      	cbz	r4, 8012370 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 8012356:	69a6      	ldr	r6, [r4, #24]
 8012358:	2e00      	cmp	r6, #0
 801235a:	d099      	beq.n	8012290 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801235c:	f8cd 8000 	str.w	r8, [sp]
 8012360:	462a      	mov	r2, r5
 8012362:	4b12      	ldr	r3, [pc, #72]	; (80123ac <udp_input+0x12c>)
 8012364:	4621      	mov	r1, r4
 8012366:	69e0      	ldr	r0, [r4, #28]
 8012368:	47b0      	blx	r6
}
 801236a:	b005      	add	sp, #20
 801236c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012370:	2f00      	cmp	r7, #0
 8012372:	d18d      	bne.n	8012290 <udp_input+0x10>
 8012374:	9b03      	ldr	r3, [sp, #12]
 8012376:	695b      	ldr	r3, [r3, #20]
 8012378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801237c:	2be0      	cmp	r3, #224	; 0xe0
 801237e:	d087      	beq.n	8012290 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012380:	9b03      	ldr	r3, [sp, #12]
 8012382:	4628      	mov	r0, r5
 8012384:	8999      	ldrh	r1, [r3, #12]
 8012386:	3108      	adds	r1, #8
 8012388:	b209      	sxth	r1, r1
 801238a:	f7fc ff18 	bl	800f1be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801238e:	2103      	movs	r1, #3
 8012390:	4628      	mov	r0, r5
 8012392:	f7fb fe2d 	bl	800dff0 <icmp_dest_unreach>
 8012396:	e77b      	b.n	8012290 <udp_input+0x10>
 8012398:	2400178c 	.word	0x2400178c
 801239c:	24004ccc 	.word	0x24004ccc
 80123a0:	08014f73 	.word	0x08014f73
 80123a4:	08014fa8 	.word	0x08014fa8
 80123a8:	0801342a 	.word	0x0801342a
 80123ac:	2400179c 	.word	0x2400179c

080123b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80123b0:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80123b2:	b138      	cbz	r0, 80123c4 <udp_netif_ip_addr_changed+0x14>
 80123b4:	6803      	ldr	r3, [r0, #0]
 80123b6:	b12b      	cbz	r3, 80123c4 <udp_netif_ip_addr_changed+0x14>
 80123b8:	b121      	cbz	r1, 80123c4 <udp_netif_ip_addr_changed+0x14>
 80123ba:	680b      	ldr	r3, [r1, #0]
 80123bc:	b113      	cbz	r3, 80123c4 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80123be:	4b06      	ldr	r3, [pc, #24]	; (80123d8 <udp_netif_ip_addr_changed+0x28>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	b903      	cbnz	r3, 80123c6 <udp_netif_ip_addr_changed+0x16>
 80123c4:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80123c6:	681c      	ldr	r4, [r3, #0]
 80123c8:	6802      	ldr	r2, [r0, #0]
 80123ca:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80123cc:	bf04      	itt	eq
 80123ce:	680a      	ldreq	r2, [r1, #0]
 80123d0:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	e7f5      	b.n	80123c2 <udp_netif_ip_addr_changed+0x12>
 80123d6:	bf00      	nop
 80123d8:	24004ccc 	.word	0x24004ccc

080123dc <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 80123dc:	f8d0 2588 	ldr.w	r2, [r0, #1416]	; 0x588
 80123e0:	3201      	adds	r2, #1
 80123e2:	f8c0 2588 	str.w	r2, [r0, #1416]	; 0x588
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80123e6:	7802      	ldrb	r2, [r0, #0]
 80123e8:	2a0a      	cmp	r2, #10
 80123ea:	d104      	bne.n	80123f6 <USBH_LL_IncTimer+0x1a>
 80123ec:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 80123f0:	b10b      	cbz	r3, 80123f6 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 80123f2:	699b      	ldr	r3, [r3, #24]
 80123f4:	4718      	bx	r3
 80123f6:	4770      	bx	lr

080123f8 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80123f8:	7802      	ldrb	r2, [r0, #0]
{
 80123fa:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80123fc:	b94a      	cbnz	r2, 8012412 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
 80123fe:	2201      	movs	r2, #1
    
    if(phost->pUser != NULL)
 8012400:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
    phost->device.is_connected = 1;
 8012404:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8012408:	b10b      	cbz	r3, 801240e <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 801240a:	2104      	movs	r1, #4
 801240c:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 801240e:	2000      	movs	r0, #0
 8012410:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8012412:	7802      	ldrb	r2, [r0, #0]
 8012414:	2a01      	cmp	r2, #1
 8012416:	d1fa      	bne.n	801240e <USBH_LL_Connect+0x16>
    phost->gState = HOST_DEV_ATTACHED ;
 8012418:	2202      	movs	r2, #2
 801241a:	7002      	strb	r2, [r0, #0]
 801241c:	e7f7      	b.n	801240e <USBH_LL_Connect+0x16>

0801241e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 801241e:	b510      	push	{r4, lr}
 8012420:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8012422:	f7f0 fc9b 	bl	8002d5c <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8012426:	7921      	ldrb	r1, [r4, #4]
 8012428:	4620      	mov	r0, r4
 801242a:	f000 f814 	bl	8012456 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 801242e:	7961      	ldrb	r1, [r4, #5]
 8012430:	4620      	mov	r0, r4
 8012432:	f000 f810 	bl	8012456 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8012436:	2300      	movs	r3, #0
 8012438:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 801243c:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 8012440:	b113      	cbz	r3, 8012448 <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8012442:	2105      	movs	r1, #5
 8012444:	4620      	mov	r0, r4
 8012446:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8012448:	4620      	mov	r0, r4
 801244a:	f7f0 fc79 	bl	8002d40 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 801244e:	2303      	movs	r3, #3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8012450:	2000      	movs	r0, #0
  phost->gState = HOST_DEV_DISCONNECTED;
 8012452:	7023      	strb	r3, [r4, #0]
}
 8012454:	bd10      	pop	{r4, pc}

08012456 <USBH_FreePipe>:
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
   if(idx < 11)
 8012456:	290a      	cmp	r1, #10
 8012458:	bf9f      	itttt	ls
 801245a:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
   {
	 phost->Pipes[idx] &= 0x7FFF;
 801245e:	f8d0 354c 	ldrls.w	r3, [r0, #1356]	; 0x54c
 8012462:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8012466:	f8c0 354c 	strls.w	r3, [r0, #1356]	; 0x54c
   }
   return USBH_OK;
}
 801246a:	2000      	movs	r0, #0
 801246c:	4770      	bx	lr
	...

08012470 <__libc_init_array>:
 8012470:	b570      	push	{r4, r5, r6, lr}
 8012472:	4e0d      	ldr	r6, [pc, #52]	; (80124a8 <__libc_init_array+0x38>)
 8012474:	4c0d      	ldr	r4, [pc, #52]	; (80124ac <__libc_init_array+0x3c>)
 8012476:	1ba4      	subs	r4, r4, r6
 8012478:	10a4      	asrs	r4, r4, #2
 801247a:	2500      	movs	r5, #0
 801247c:	42a5      	cmp	r5, r4
 801247e:	d109      	bne.n	8012494 <__libc_init_array+0x24>
 8012480:	4e0b      	ldr	r6, [pc, #44]	; (80124b0 <__libc_init_array+0x40>)
 8012482:	4c0c      	ldr	r4, [pc, #48]	; (80124b4 <__libc_init_array+0x44>)
 8012484:	f000 ff32 	bl	80132ec <_init>
 8012488:	1ba4      	subs	r4, r4, r6
 801248a:	10a4      	asrs	r4, r4, #2
 801248c:	2500      	movs	r5, #0
 801248e:	42a5      	cmp	r5, r4
 8012490:	d105      	bne.n	801249e <__libc_init_array+0x2e>
 8012492:	bd70      	pop	{r4, r5, r6, pc}
 8012494:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012498:	4798      	blx	r3
 801249a:	3501      	adds	r5, #1
 801249c:	e7ee      	b.n	801247c <__libc_init_array+0xc>
 801249e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80124a2:	4798      	blx	r3
 80124a4:	3501      	adds	r5, #1
 80124a6:	e7f2      	b.n	801248e <__libc_init_array+0x1e>
 80124a8:	0801505c 	.word	0x0801505c
 80124ac:	0801505c 	.word	0x0801505c
 80124b0:	0801505c 	.word	0x0801505c
 80124b4:	08015060 	.word	0x08015060

080124b8 <memcmp>:
 80124b8:	b510      	push	{r4, lr}
 80124ba:	3901      	subs	r1, #1
 80124bc:	4402      	add	r2, r0
 80124be:	4290      	cmp	r0, r2
 80124c0:	d101      	bne.n	80124c6 <memcmp+0xe>
 80124c2:	2000      	movs	r0, #0
 80124c4:	bd10      	pop	{r4, pc}
 80124c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80124ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80124ce:	42a3      	cmp	r3, r4
 80124d0:	d0f5      	beq.n	80124be <memcmp+0x6>
 80124d2:	1b18      	subs	r0, r3, r4
 80124d4:	bd10      	pop	{r4, pc}

080124d6 <memcpy>:
 80124d6:	b510      	push	{r4, lr}
 80124d8:	1e43      	subs	r3, r0, #1
 80124da:	440a      	add	r2, r1
 80124dc:	4291      	cmp	r1, r2
 80124de:	d100      	bne.n	80124e2 <memcpy+0xc>
 80124e0:	bd10      	pop	{r4, pc}
 80124e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80124ea:	e7f7      	b.n	80124dc <memcpy+0x6>

080124ec <memset>:
 80124ec:	4402      	add	r2, r0
 80124ee:	4603      	mov	r3, r0
 80124f0:	4293      	cmp	r3, r2
 80124f2:	d100      	bne.n	80124f6 <memset+0xa>
 80124f4:	4770      	bx	lr
 80124f6:	f803 1b01 	strb.w	r1, [r3], #1
 80124fa:	e7f9      	b.n	80124f0 <memset+0x4>

080124fc <_free_r>:
 80124fc:	b538      	push	{r3, r4, r5, lr}
 80124fe:	4605      	mov	r5, r0
 8012500:	2900      	cmp	r1, #0
 8012502:	d045      	beq.n	8012590 <_free_r+0x94>
 8012504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012508:	1f0c      	subs	r4, r1, #4
 801250a:	2b00      	cmp	r3, #0
 801250c:	bfb8      	it	lt
 801250e:	18e4      	addlt	r4, r4, r3
 8012510:	f000 fb68 	bl	8012be4 <__malloc_lock>
 8012514:	4a1f      	ldr	r2, [pc, #124]	; (8012594 <_free_r+0x98>)
 8012516:	6813      	ldr	r3, [r2, #0]
 8012518:	4610      	mov	r0, r2
 801251a:	b933      	cbnz	r3, 801252a <_free_r+0x2e>
 801251c:	6063      	str	r3, [r4, #4]
 801251e:	6014      	str	r4, [r2, #0]
 8012520:	4628      	mov	r0, r5
 8012522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012526:	f000 bb5e 	b.w	8012be6 <__malloc_unlock>
 801252a:	42a3      	cmp	r3, r4
 801252c:	d90c      	bls.n	8012548 <_free_r+0x4c>
 801252e:	6821      	ldr	r1, [r4, #0]
 8012530:	1862      	adds	r2, r4, r1
 8012532:	4293      	cmp	r3, r2
 8012534:	bf04      	itt	eq
 8012536:	681a      	ldreq	r2, [r3, #0]
 8012538:	685b      	ldreq	r3, [r3, #4]
 801253a:	6063      	str	r3, [r4, #4]
 801253c:	bf04      	itt	eq
 801253e:	1852      	addeq	r2, r2, r1
 8012540:	6022      	streq	r2, [r4, #0]
 8012542:	6004      	str	r4, [r0, #0]
 8012544:	e7ec      	b.n	8012520 <_free_r+0x24>
 8012546:	4613      	mov	r3, r2
 8012548:	685a      	ldr	r2, [r3, #4]
 801254a:	b10a      	cbz	r2, 8012550 <_free_r+0x54>
 801254c:	42a2      	cmp	r2, r4
 801254e:	d9fa      	bls.n	8012546 <_free_r+0x4a>
 8012550:	6819      	ldr	r1, [r3, #0]
 8012552:	1858      	adds	r0, r3, r1
 8012554:	42a0      	cmp	r0, r4
 8012556:	d10b      	bne.n	8012570 <_free_r+0x74>
 8012558:	6820      	ldr	r0, [r4, #0]
 801255a:	4401      	add	r1, r0
 801255c:	1858      	adds	r0, r3, r1
 801255e:	4282      	cmp	r2, r0
 8012560:	6019      	str	r1, [r3, #0]
 8012562:	d1dd      	bne.n	8012520 <_free_r+0x24>
 8012564:	6810      	ldr	r0, [r2, #0]
 8012566:	6852      	ldr	r2, [r2, #4]
 8012568:	605a      	str	r2, [r3, #4]
 801256a:	4401      	add	r1, r0
 801256c:	6019      	str	r1, [r3, #0]
 801256e:	e7d7      	b.n	8012520 <_free_r+0x24>
 8012570:	d902      	bls.n	8012578 <_free_r+0x7c>
 8012572:	230c      	movs	r3, #12
 8012574:	602b      	str	r3, [r5, #0]
 8012576:	e7d3      	b.n	8012520 <_free_r+0x24>
 8012578:	6820      	ldr	r0, [r4, #0]
 801257a:	1821      	adds	r1, r4, r0
 801257c:	428a      	cmp	r2, r1
 801257e:	bf04      	itt	eq
 8012580:	6811      	ldreq	r1, [r2, #0]
 8012582:	6852      	ldreq	r2, [r2, #4]
 8012584:	6062      	str	r2, [r4, #4]
 8012586:	bf04      	itt	eq
 8012588:	1809      	addeq	r1, r1, r0
 801258a:	6021      	streq	r1, [r4, #0]
 801258c:	605c      	str	r4, [r3, #4]
 801258e:	e7c7      	b.n	8012520 <_free_r+0x24>
 8012590:	bd38      	pop	{r3, r4, r5, pc}
 8012592:	bf00      	nop
 8012594:	24000254 	.word	0x24000254

08012598 <_malloc_r>:
 8012598:	b570      	push	{r4, r5, r6, lr}
 801259a:	1ccd      	adds	r5, r1, #3
 801259c:	f025 0503 	bic.w	r5, r5, #3
 80125a0:	3508      	adds	r5, #8
 80125a2:	2d0c      	cmp	r5, #12
 80125a4:	bf38      	it	cc
 80125a6:	250c      	movcc	r5, #12
 80125a8:	2d00      	cmp	r5, #0
 80125aa:	4606      	mov	r6, r0
 80125ac:	db01      	blt.n	80125b2 <_malloc_r+0x1a>
 80125ae:	42a9      	cmp	r1, r5
 80125b0:	d903      	bls.n	80125ba <_malloc_r+0x22>
 80125b2:	230c      	movs	r3, #12
 80125b4:	6033      	str	r3, [r6, #0]
 80125b6:	2000      	movs	r0, #0
 80125b8:	bd70      	pop	{r4, r5, r6, pc}
 80125ba:	f000 fb13 	bl	8012be4 <__malloc_lock>
 80125be:	4a23      	ldr	r2, [pc, #140]	; (801264c <_malloc_r+0xb4>)
 80125c0:	6814      	ldr	r4, [r2, #0]
 80125c2:	4621      	mov	r1, r4
 80125c4:	b991      	cbnz	r1, 80125ec <_malloc_r+0x54>
 80125c6:	4c22      	ldr	r4, [pc, #136]	; (8012650 <_malloc_r+0xb8>)
 80125c8:	6823      	ldr	r3, [r4, #0]
 80125ca:	b91b      	cbnz	r3, 80125d4 <_malloc_r+0x3c>
 80125cc:	4630      	mov	r0, r6
 80125ce:	f000 f859 	bl	8012684 <_sbrk_r>
 80125d2:	6020      	str	r0, [r4, #0]
 80125d4:	4629      	mov	r1, r5
 80125d6:	4630      	mov	r0, r6
 80125d8:	f000 f854 	bl	8012684 <_sbrk_r>
 80125dc:	1c43      	adds	r3, r0, #1
 80125de:	d126      	bne.n	801262e <_malloc_r+0x96>
 80125e0:	230c      	movs	r3, #12
 80125e2:	6033      	str	r3, [r6, #0]
 80125e4:	4630      	mov	r0, r6
 80125e6:	f000 fafe 	bl	8012be6 <__malloc_unlock>
 80125ea:	e7e4      	b.n	80125b6 <_malloc_r+0x1e>
 80125ec:	680b      	ldr	r3, [r1, #0]
 80125ee:	1b5b      	subs	r3, r3, r5
 80125f0:	d41a      	bmi.n	8012628 <_malloc_r+0x90>
 80125f2:	2b0b      	cmp	r3, #11
 80125f4:	d90f      	bls.n	8012616 <_malloc_r+0x7e>
 80125f6:	600b      	str	r3, [r1, #0]
 80125f8:	50cd      	str	r5, [r1, r3]
 80125fa:	18cc      	adds	r4, r1, r3
 80125fc:	4630      	mov	r0, r6
 80125fe:	f000 faf2 	bl	8012be6 <__malloc_unlock>
 8012602:	f104 000b 	add.w	r0, r4, #11
 8012606:	1d23      	adds	r3, r4, #4
 8012608:	f020 0007 	bic.w	r0, r0, #7
 801260c:	1ac3      	subs	r3, r0, r3
 801260e:	d01b      	beq.n	8012648 <_malloc_r+0xb0>
 8012610:	425a      	negs	r2, r3
 8012612:	50e2      	str	r2, [r4, r3]
 8012614:	bd70      	pop	{r4, r5, r6, pc}
 8012616:	428c      	cmp	r4, r1
 8012618:	bf0d      	iteet	eq
 801261a:	6863      	ldreq	r3, [r4, #4]
 801261c:	684b      	ldrne	r3, [r1, #4]
 801261e:	6063      	strne	r3, [r4, #4]
 8012620:	6013      	streq	r3, [r2, #0]
 8012622:	bf18      	it	ne
 8012624:	460c      	movne	r4, r1
 8012626:	e7e9      	b.n	80125fc <_malloc_r+0x64>
 8012628:	460c      	mov	r4, r1
 801262a:	6849      	ldr	r1, [r1, #4]
 801262c:	e7ca      	b.n	80125c4 <_malloc_r+0x2c>
 801262e:	1cc4      	adds	r4, r0, #3
 8012630:	f024 0403 	bic.w	r4, r4, #3
 8012634:	42a0      	cmp	r0, r4
 8012636:	d005      	beq.n	8012644 <_malloc_r+0xac>
 8012638:	1a21      	subs	r1, r4, r0
 801263a:	4630      	mov	r0, r6
 801263c:	f000 f822 	bl	8012684 <_sbrk_r>
 8012640:	3001      	adds	r0, #1
 8012642:	d0cd      	beq.n	80125e0 <_malloc_r+0x48>
 8012644:	6025      	str	r5, [r4, #0]
 8012646:	e7d9      	b.n	80125fc <_malloc_r+0x64>
 8012648:	bd70      	pop	{r4, r5, r6, pc}
 801264a:	bf00      	nop
 801264c:	24000254 	.word	0x24000254
 8012650:	24000258 	.word	0x24000258

08012654 <iprintf>:
 8012654:	b40f      	push	{r0, r1, r2, r3}
 8012656:	4b0a      	ldr	r3, [pc, #40]	; (8012680 <iprintf+0x2c>)
 8012658:	b513      	push	{r0, r1, r4, lr}
 801265a:	681c      	ldr	r4, [r3, #0]
 801265c:	b124      	cbz	r4, 8012668 <iprintf+0x14>
 801265e:	69a3      	ldr	r3, [r4, #24]
 8012660:	b913      	cbnz	r3, 8012668 <iprintf+0x14>
 8012662:	4620      	mov	r0, r4
 8012664:	f000 f9d0 	bl	8012a08 <__sinit>
 8012668:	ab05      	add	r3, sp, #20
 801266a:	9a04      	ldr	r2, [sp, #16]
 801266c:	68a1      	ldr	r1, [r4, #8]
 801266e:	9301      	str	r3, [sp, #4]
 8012670:	4620      	mov	r0, r4
 8012672:	f000 fae3 	bl	8012c3c <_vfiprintf_r>
 8012676:	b002      	add	sp, #8
 8012678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801267c:	b004      	add	sp, #16
 801267e:	4770      	bx	lr
 8012680:	2400002c 	.word	0x2400002c

08012684 <_sbrk_r>:
 8012684:	b538      	push	{r3, r4, r5, lr}
 8012686:	4c06      	ldr	r4, [pc, #24]	; (80126a0 <_sbrk_r+0x1c>)
 8012688:	2300      	movs	r3, #0
 801268a:	4605      	mov	r5, r0
 801268c:	4608      	mov	r0, r1
 801268e:	6023      	str	r3, [r4, #0]
 8012690:	f7ee f84c 	bl	800072c <_sbrk>
 8012694:	1c43      	adds	r3, r0, #1
 8012696:	d102      	bne.n	801269e <_sbrk_r+0x1a>
 8012698:	6823      	ldr	r3, [r4, #0]
 801269a:	b103      	cbz	r3, 801269e <_sbrk_r+0x1a>
 801269c:	602b      	str	r3, [r5, #0]
 801269e:	bd38      	pop	{r3, r4, r5, pc}
 80126a0:	24004cd0 	.word	0x24004cd0

080126a4 <__swbuf_r>:
 80126a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126a6:	460e      	mov	r6, r1
 80126a8:	4614      	mov	r4, r2
 80126aa:	4605      	mov	r5, r0
 80126ac:	b118      	cbz	r0, 80126b6 <__swbuf_r+0x12>
 80126ae:	6983      	ldr	r3, [r0, #24]
 80126b0:	b90b      	cbnz	r3, 80126b6 <__swbuf_r+0x12>
 80126b2:	f000 f9a9 	bl	8012a08 <__sinit>
 80126b6:	4b21      	ldr	r3, [pc, #132]	; (801273c <__swbuf_r+0x98>)
 80126b8:	429c      	cmp	r4, r3
 80126ba:	d12a      	bne.n	8012712 <__swbuf_r+0x6e>
 80126bc:	686c      	ldr	r4, [r5, #4]
 80126be:	69a3      	ldr	r3, [r4, #24]
 80126c0:	60a3      	str	r3, [r4, #8]
 80126c2:	89a3      	ldrh	r3, [r4, #12]
 80126c4:	071a      	lsls	r2, r3, #28
 80126c6:	d52e      	bpl.n	8012726 <__swbuf_r+0x82>
 80126c8:	6923      	ldr	r3, [r4, #16]
 80126ca:	b363      	cbz	r3, 8012726 <__swbuf_r+0x82>
 80126cc:	6923      	ldr	r3, [r4, #16]
 80126ce:	6820      	ldr	r0, [r4, #0]
 80126d0:	1ac0      	subs	r0, r0, r3
 80126d2:	6963      	ldr	r3, [r4, #20]
 80126d4:	b2f6      	uxtb	r6, r6
 80126d6:	4298      	cmp	r0, r3
 80126d8:	4637      	mov	r7, r6
 80126da:	db04      	blt.n	80126e6 <__swbuf_r+0x42>
 80126dc:	4621      	mov	r1, r4
 80126de:	4628      	mov	r0, r5
 80126e0:	f000 f928 	bl	8012934 <_fflush_r>
 80126e4:	bb28      	cbnz	r0, 8012732 <__swbuf_r+0x8e>
 80126e6:	68a3      	ldr	r3, [r4, #8]
 80126e8:	3b01      	subs	r3, #1
 80126ea:	60a3      	str	r3, [r4, #8]
 80126ec:	6823      	ldr	r3, [r4, #0]
 80126ee:	1c5a      	adds	r2, r3, #1
 80126f0:	6022      	str	r2, [r4, #0]
 80126f2:	701e      	strb	r6, [r3, #0]
 80126f4:	6963      	ldr	r3, [r4, #20]
 80126f6:	3001      	adds	r0, #1
 80126f8:	4298      	cmp	r0, r3
 80126fa:	d004      	beq.n	8012706 <__swbuf_r+0x62>
 80126fc:	89a3      	ldrh	r3, [r4, #12]
 80126fe:	07db      	lsls	r3, r3, #31
 8012700:	d519      	bpl.n	8012736 <__swbuf_r+0x92>
 8012702:	2e0a      	cmp	r6, #10
 8012704:	d117      	bne.n	8012736 <__swbuf_r+0x92>
 8012706:	4621      	mov	r1, r4
 8012708:	4628      	mov	r0, r5
 801270a:	f000 f913 	bl	8012934 <_fflush_r>
 801270e:	b190      	cbz	r0, 8012736 <__swbuf_r+0x92>
 8012710:	e00f      	b.n	8012732 <__swbuf_r+0x8e>
 8012712:	4b0b      	ldr	r3, [pc, #44]	; (8012740 <__swbuf_r+0x9c>)
 8012714:	429c      	cmp	r4, r3
 8012716:	d101      	bne.n	801271c <__swbuf_r+0x78>
 8012718:	68ac      	ldr	r4, [r5, #8]
 801271a:	e7d0      	b.n	80126be <__swbuf_r+0x1a>
 801271c:	4b09      	ldr	r3, [pc, #36]	; (8012744 <__swbuf_r+0xa0>)
 801271e:	429c      	cmp	r4, r3
 8012720:	bf08      	it	eq
 8012722:	68ec      	ldreq	r4, [r5, #12]
 8012724:	e7cb      	b.n	80126be <__swbuf_r+0x1a>
 8012726:	4621      	mov	r1, r4
 8012728:	4628      	mov	r0, r5
 801272a:	f000 f80d 	bl	8012748 <__swsetup_r>
 801272e:	2800      	cmp	r0, #0
 8012730:	d0cc      	beq.n	80126cc <__swbuf_r+0x28>
 8012732:	f04f 37ff 	mov.w	r7, #4294967295
 8012736:	4638      	mov	r0, r7
 8012738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801273a:	bf00      	nop
 801273c:	08014fe0 	.word	0x08014fe0
 8012740:	08015000 	.word	0x08015000
 8012744:	08014fc0 	.word	0x08014fc0

08012748 <__swsetup_r>:
 8012748:	4b32      	ldr	r3, [pc, #200]	; (8012814 <__swsetup_r+0xcc>)
 801274a:	b570      	push	{r4, r5, r6, lr}
 801274c:	681d      	ldr	r5, [r3, #0]
 801274e:	4606      	mov	r6, r0
 8012750:	460c      	mov	r4, r1
 8012752:	b125      	cbz	r5, 801275e <__swsetup_r+0x16>
 8012754:	69ab      	ldr	r3, [r5, #24]
 8012756:	b913      	cbnz	r3, 801275e <__swsetup_r+0x16>
 8012758:	4628      	mov	r0, r5
 801275a:	f000 f955 	bl	8012a08 <__sinit>
 801275e:	4b2e      	ldr	r3, [pc, #184]	; (8012818 <__swsetup_r+0xd0>)
 8012760:	429c      	cmp	r4, r3
 8012762:	d10f      	bne.n	8012784 <__swsetup_r+0x3c>
 8012764:	686c      	ldr	r4, [r5, #4]
 8012766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801276a:	b29a      	uxth	r2, r3
 801276c:	0715      	lsls	r5, r2, #28
 801276e:	d42c      	bmi.n	80127ca <__swsetup_r+0x82>
 8012770:	06d0      	lsls	r0, r2, #27
 8012772:	d411      	bmi.n	8012798 <__swsetup_r+0x50>
 8012774:	2209      	movs	r2, #9
 8012776:	6032      	str	r2, [r6, #0]
 8012778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801277c:	81a3      	strh	r3, [r4, #12]
 801277e:	f04f 30ff 	mov.w	r0, #4294967295
 8012782:	bd70      	pop	{r4, r5, r6, pc}
 8012784:	4b25      	ldr	r3, [pc, #148]	; (801281c <__swsetup_r+0xd4>)
 8012786:	429c      	cmp	r4, r3
 8012788:	d101      	bne.n	801278e <__swsetup_r+0x46>
 801278a:	68ac      	ldr	r4, [r5, #8]
 801278c:	e7eb      	b.n	8012766 <__swsetup_r+0x1e>
 801278e:	4b24      	ldr	r3, [pc, #144]	; (8012820 <__swsetup_r+0xd8>)
 8012790:	429c      	cmp	r4, r3
 8012792:	bf08      	it	eq
 8012794:	68ec      	ldreq	r4, [r5, #12]
 8012796:	e7e6      	b.n	8012766 <__swsetup_r+0x1e>
 8012798:	0751      	lsls	r1, r2, #29
 801279a:	d512      	bpl.n	80127c2 <__swsetup_r+0x7a>
 801279c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801279e:	b141      	cbz	r1, 80127b2 <__swsetup_r+0x6a>
 80127a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127a4:	4299      	cmp	r1, r3
 80127a6:	d002      	beq.n	80127ae <__swsetup_r+0x66>
 80127a8:	4630      	mov	r0, r6
 80127aa:	f7ff fea7 	bl	80124fc <_free_r>
 80127ae:	2300      	movs	r3, #0
 80127b0:	6363      	str	r3, [r4, #52]	; 0x34
 80127b2:	89a3      	ldrh	r3, [r4, #12]
 80127b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80127b8:	81a3      	strh	r3, [r4, #12]
 80127ba:	2300      	movs	r3, #0
 80127bc:	6063      	str	r3, [r4, #4]
 80127be:	6923      	ldr	r3, [r4, #16]
 80127c0:	6023      	str	r3, [r4, #0]
 80127c2:	89a3      	ldrh	r3, [r4, #12]
 80127c4:	f043 0308 	orr.w	r3, r3, #8
 80127c8:	81a3      	strh	r3, [r4, #12]
 80127ca:	6923      	ldr	r3, [r4, #16]
 80127cc:	b94b      	cbnz	r3, 80127e2 <__swsetup_r+0x9a>
 80127ce:	89a3      	ldrh	r3, [r4, #12]
 80127d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80127d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127d8:	d003      	beq.n	80127e2 <__swsetup_r+0x9a>
 80127da:	4621      	mov	r1, r4
 80127dc:	4630      	mov	r0, r6
 80127de:	f000 f9c1 	bl	8012b64 <__smakebuf_r>
 80127e2:	89a2      	ldrh	r2, [r4, #12]
 80127e4:	f012 0301 	ands.w	r3, r2, #1
 80127e8:	d00c      	beq.n	8012804 <__swsetup_r+0xbc>
 80127ea:	2300      	movs	r3, #0
 80127ec:	60a3      	str	r3, [r4, #8]
 80127ee:	6963      	ldr	r3, [r4, #20]
 80127f0:	425b      	negs	r3, r3
 80127f2:	61a3      	str	r3, [r4, #24]
 80127f4:	6923      	ldr	r3, [r4, #16]
 80127f6:	b953      	cbnz	r3, 801280e <__swsetup_r+0xc6>
 80127f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012800:	d1ba      	bne.n	8012778 <__swsetup_r+0x30>
 8012802:	bd70      	pop	{r4, r5, r6, pc}
 8012804:	0792      	lsls	r2, r2, #30
 8012806:	bf58      	it	pl
 8012808:	6963      	ldrpl	r3, [r4, #20]
 801280a:	60a3      	str	r3, [r4, #8]
 801280c:	e7f2      	b.n	80127f4 <__swsetup_r+0xac>
 801280e:	2000      	movs	r0, #0
 8012810:	e7f7      	b.n	8012802 <__swsetup_r+0xba>
 8012812:	bf00      	nop
 8012814:	2400002c 	.word	0x2400002c
 8012818:	08014fe0 	.word	0x08014fe0
 801281c:	08015000 	.word	0x08015000
 8012820:	08014fc0 	.word	0x08014fc0

08012824 <__sflush_r>:
 8012824:	898a      	ldrh	r2, [r1, #12]
 8012826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801282a:	4605      	mov	r5, r0
 801282c:	0710      	lsls	r0, r2, #28
 801282e:	460c      	mov	r4, r1
 8012830:	d45a      	bmi.n	80128e8 <__sflush_r+0xc4>
 8012832:	684b      	ldr	r3, [r1, #4]
 8012834:	2b00      	cmp	r3, #0
 8012836:	dc05      	bgt.n	8012844 <__sflush_r+0x20>
 8012838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801283a:	2b00      	cmp	r3, #0
 801283c:	dc02      	bgt.n	8012844 <__sflush_r+0x20>
 801283e:	2000      	movs	r0, #0
 8012840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012846:	2e00      	cmp	r6, #0
 8012848:	d0f9      	beq.n	801283e <__sflush_r+0x1a>
 801284a:	2300      	movs	r3, #0
 801284c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012850:	682f      	ldr	r7, [r5, #0]
 8012852:	602b      	str	r3, [r5, #0]
 8012854:	d033      	beq.n	80128be <__sflush_r+0x9a>
 8012856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012858:	89a3      	ldrh	r3, [r4, #12]
 801285a:	075a      	lsls	r2, r3, #29
 801285c:	d505      	bpl.n	801286a <__sflush_r+0x46>
 801285e:	6863      	ldr	r3, [r4, #4]
 8012860:	1ac0      	subs	r0, r0, r3
 8012862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012864:	b10b      	cbz	r3, 801286a <__sflush_r+0x46>
 8012866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012868:	1ac0      	subs	r0, r0, r3
 801286a:	2300      	movs	r3, #0
 801286c:	4602      	mov	r2, r0
 801286e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012870:	6a21      	ldr	r1, [r4, #32]
 8012872:	4628      	mov	r0, r5
 8012874:	47b0      	blx	r6
 8012876:	1c43      	adds	r3, r0, #1
 8012878:	89a3      	ldrh	r3, [r4, #12]
 801287a:	d106      	bne.n	801288a <__sflush_r+0x66>
 801287c:	6829      	ldr	r1, [r5, #0]
 801287e:	291d      	cmp	r1, #29
 8012880:	d84b      	bhi.n	801291a <__sflush_r+0xf6>
 8012882:	4a2b      	ldr	r2, [pc, #172]	; (8012930 <__sflush_r+0x10c>)
 8012884:	40ca      	lsrs	r2, r1
 8012886:	07d6      	lsls	r6, r2, #31
 8012888:	d547      	bpl.n	801291a <__sflush_r+0xf6>
 801288a:	2200      	movs	r2, #0
 801288c:	6062      	str	r2, [r4, #4]
 801288e:	04d9      	lsls	r1, r3, #19
 8012890:	6922      	ldr	r2, [r4, #16]
 8012892:	6022      	str	r2, [r4, #0]
 8012894:	d504      	bpl.n	80128a0 <__sflush_r+0x7c>
 8012896:	1c42      	adds	r2, r0, #1
 8012898:	d101      	bne.n	801289e <__sflush_r+0x7a>
 801289a:	682b      	ldr	r3, [r5, #0]
 801289c:	b903      	cbnz	r3, 80128a0 <__sflush_r+0x7c>
 801289e:	6560      	str	r0, [r4, #84]	; 0x54
 80128a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128a2:	602f      	str	r7, [r5, #0]
 80128a4:	2900      	cmp	r1, #0
 80128a6:	d0ca      	beq.n	801283e <__sflush_r+0x1a>
 80128a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128ac:	4299      	cmp	r1, r3
 80128ae:	d002      	beq.n	80128b6 <__sflush_r+0x92>
 80128b0:	4628      	mov	r0, r5
 80128b2:	f7ff fe23 	bl	80124fc <_free_r>
 80128b6:	2000      	movs	r0, #0
 80128b8:	6360      	str	r0, [r4, #52]	; 0x34
 80128ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128be:	6a21      	ldr	r1, [r4, #32]
 80128c0:	2301      	movs	r3, #1
 80128c2:	4628      	mov	r0, r5
 80128c4:	47b0      	blx	r6
 80128c6:	1c41      	adds	r1, r0, #1
 80128c8:	d1c6      	bne.n	8012858 <__sflush_r+0x34>
 80128ca:	682b      	ldr	r3, [r5, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d0c3      	beq.n	8012858 <__sflush_r+0x34>
 80128d0:	2b1d      	cmp	r3, #29
 80128d2:	d001      	beq.n	80128d8 <__sflush_r+0xb4>
 80128d4:	2b16      	cmp	r3, #22
 80128d6:	d101      	bne.n	80128dc <__sflush_r+0xb8>
 80128d8:	602f      	str	r7, [r5, #0]
 80128da:	e7b0      	b.n	801283e <__sflush_r+0x1a>
 80128dc:	89a3      	ldrh	r3, [r4, #12]
 80128de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128e2:	81a3      	strh	r3, [r4, #12]
 80128e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e8:	690f      	ldr	r7, [r1, #16]
 80128ea:	2f00      	cmp	r7, #0
 80128ec:	d0a7      	beq.n	801283e <__sflush_r+0x1a>
 80128ee:	0793      	lsls	r3, r2, #30
 80128f0:	680e      	ldr	r6, [r1, #0]
 80128f2:	bf08      	it	eq
 80128f4:	694b      	ldreq	r3, [r1, #20]
 80128f6:	600f      	str	r7, [r1, #0]
 80128f8:	bf18      	it	ne
 80128fa:	2300      	movne	r3, #0
 80128fc:	eba6 0807 	sub.w	r8, r6, r7
 8012900:	608b      	str	r3, [r1, #8]
 8012902:	f1b8 0f00 	cmp.w	r8, #0
 8012906:	dd9a      	ble.n	801283e <__sflush_r+0x1a>
 8012908:	4643      	mov	r3, r8
 801290a:	463a      	mov	r2, r7
 801290c:	6a21      	ldr	r1, [r4, #32]
 801290e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012910:	4628      	mov	r0, r5
 8012912:	47b0      	blx	r6
 8012914:	2800      	cmp	r0, #0
 8012916:	dc07      	bgt.n	8012928 <__sflush_r+0x104>
 8012918:	89a3      	ldrh	r3, [r4, #12]
 801291a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801291e:	81a3      	strh	r3, [r4, #12]
 8012920:	f04f 30ff 	mov.w	r0, #4294967295
 8012924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012928:	4407      	add	r7, r0
 801292a:	eba8 0800 	sub.w	r8, r8, r0
 801292e:	e7e8      	b.n	8012902 <__sflush_r+0xde>
 8012930:	20400001 	.word	0x20400001

08012934 <_fflush_r>:
 8012934:	b538      	push	{r3, r4, r5, lr}
 8012936:	690b      	ldr	r3, [r1, #16]
 8012938:	4605      	mov	r5, r0
 801293a:	460c      	mov	r4, r1
 801293c:	b1db      	cbz	r3, 8012976 <_fflush_r+0x42>
 801293e:	b118      	cbz	r0, 8012948 <_fflush_r+0x14>
 8012940:	6983      	ldr	r3, [r0, #24]
 8012942:	b90b      	cbnz	r3, 8012948 <_fflush_r+0x14>
 8012944:	f000 f860 	bl	8012a08 <__sinit>
 8012948:	4b0c      	ldr	r3, [pc, #48]	; (801297c <_fflush_r+0x48>)
 801294a:	429c      	cmp	r4, r3
 801294c:	d109      	bne.n	8012962 <_fflush_r+0x2e>
 801294e:	686c      	ldr	r4, [r5, #4]
 8012950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012954:	b17b      	cbz	r3, 8012976 <_fflush_r+0x42>
 8012956:	4621      	mov	r1, r4
 8012958:	4628      	mov	r0, r5
 801295a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801295e:	f7ff bf61 	b.w	8012824 <__sflush_r>
 8012962:	4b07      	ldr	r3, [pc, #28]	; (8012980 <_fflush_r+0x4c>)
 8012964:	429c      	cmp	r4, r3
 8012966:	d101      	bne.n	801296c <_fflush_r+0x38>
 8012968:	68ac      	ldr	r4, [r5, #8]
 801296a:	e7f1      	b.n	8012950 <_fflush_r+0x1c>
 801296c:	4b05      	ldr	r3, [pc, #20]	; (8012984 <_fflush_r+0x50>)
 801296e:	429c      	cmp	r4, r3
 8012970:	bf08      	it	eq
 8012972:	68ec      	ldreq	r4, [r5, #12]
 8012974:	e7ec      	b.n	8012950 <_fflush_r+0x1c>
 8012976:	2000      	movs	r0, #0
 8012978:	bd38      	pop	{r3, r4, r5, pc}
 801297a:	bf00      	nop
 801297c:	08014fe0 	.word	0x08014fe0
 8012980:	08015000 	.word	0x08015000
 8012984:	08014fc0 	.word	0x08014fc0

08012988 <_cleanup_r>:
 8012988:	4901      	ldr	r1, [pc, #4]	; (8012990 <_cleanup_r+0x8>)
 801298a:	f000 b8a9 	b.w	8012ae0 <_fwalk_reent>
 801298e:	bf00      	nop
 8012990:	08012935 	.word	0x08012935

08012994 <std.isra.0>:
 8012994:	2300      	movs	r3, #0
 8012996:	b510      	push	{r4, lr}
 8012998:	4604      	mov	r4, r0
 801299a:	6003      	str	r3, [r0, #0]
 801299c:	6043      	str	r3, [r0, #4]
 801299e:	6083      	str	r3, [r0, #8]
 80129a0:	8181      	strh	r1, [r0, #12]
 80129a2:	6643      	str	r3, [r0, #100]	; 0x64
 80129a4:	81c2      	strh	r2, [r0, #14]
 80129a6:	6103      	str	r3, [r0, #16]
 80129a8:	6143      	str	r3, [r0, #20]
 80129aa:	6183      	str	r3, [r0, #24]
 80129ac:	4619      	mov	r1, r3
 80129ae:	2208      	movs	r2, #8
 80129b0:	305c      	adds	r0, #92	; 0x5c
 80129b2:	f7ff fd9b 	bl	80124ec <memset>
 80129b6:	4b05      	ldr	r3, [pc, #20]	; (80129cc <std.isra.0+0x38>)
 80129b8:	6263      	str	r3, [r4, #36]	; 0x24
 80129ba:	4b05      	ldr	r3, [pc, #20]	; (80129d0 <std.isra.0+0x3c>)
 80129bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80129be:	4b05      	ldr	r3, [pc, #20]	; (80129d4 <std.isra.0+0x40>)
 80129c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80129c2:	4b05      	ldr	r3, [pc, #20]	; (80129d8 <std.isra.0+0x44>)
 80129c4:	6224      	str	r4, [r4, #32]
 80129c6:	6323      	str	r3, [r4, #48]	; 0x30
 80129c8:	bd10      	pop	{r4, pc}
 80129ca:	bf00      	nop
 80129cc:	08013195 	.word	0x08013195
 80129d0:	080131b7 	.word	0x080131b7
 80129d4:	080131ef 	.word	0x080131ef
 80129d8:	08013213 	.word	0x08013213

080129dc <__sfmoreglue>:
 80129dc:	b570      	push	{r4, r5, r6, lr}
 80129de:	1e4a      	subs	r2, r1, #1
 80129e0:	2568      	movs	r5, #104	; 0x68
 80129e2:	4355      	muls	r5, r2
 80129e4:	460e      	mov	r6, r1
 80129e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80129ea:	f7ff fdd5 	bl	8012598 <_malloc_r>
 80129ee:	4604      	mov	r4, r0
 80129f0:	b140      	cbz	r0, 8012a04 <__sfmoreglue+0x28>
 80129f2:	2100      	movs	r1, #0
 80129f4:	e880 0042 	stmia.w	r0, {r1, r6}
 80129f8:	300c      	adds	r0, #12
 80129fa:	60a0      	str	r0, [r4, #8]
 80129fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a00:	f7ff fd74 	bl	80124ec <memset>
 8012a04:	4620      	mov	r0, r4
 8012a06:	bd70      	pop	{r4, r5, r6, pc}

08012a08 <__sinit>:
 8012a08:	6983      	ldr	r3, [r0, #24]
 8012a0a:	b510      	push	{r4, lr}
 8012a0c:	4604      	mov	r4, r0
 8012a0e:	bb33      	cbnz	r3, 8012a5e <__sinit+0x56>
 8012a10:	6483      	str	r3, [r0, #72]	; 0x48
 8012a12:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012a14:	6503      	str	r3, [r0, #80]	; 0x50
 8012a16:	4b12      	ldr	r3, [pc, #72]	; (8012a60 <__sinit+0x58>)
 8012a18:	4a12      	ldr	r2, [pc, #72]	; (8012a64 <__sinit+0x5c>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	6282      	str	r2, [r0, #40]	; 0x28
 8012a1e:	4298      	cmp	r0, r3
 8012a20:	bf04      	itt	eq
 8012a22:	2301      	moveq	r3, #1
 8012a24:	6183      	streq	r3, [r0, #24]
 8012a26:	f000 f81f 	bl	8012a68 <__sfp>
 8012a2a:	6060      	str	r0, [r4, #4]
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	f000 f81b 	bl	8012a68 <__sfp>
 8012a32:	60a0      	str	r0, [r4, #8]
 8012a34:	4620      	mov	r0, r4
 8012a36:	f000 f817 	bl	8012a68 <__sfp>
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	60e0      	str	r0, [r4, #12]
 8012a3e:	2104      	movs	r1, #4
 8012a40:	6860      	ldr	r0, [r4, #4]
 8012a42:	f7ff ffa7 	bl	8012994 <std.isra.0>
 8012a46:	2201      	movs	r2, #1
 8012a48:	2109      	movs	r1, #9
 8012a4a:	68a0      	ldr	r0, [r4, #8]
 8012a4c:	f7ff ffa2 	bl	8012994 <std.isra.0>
 8012a50:	2202      	movs	r2, #2
 8012a52:	2112      	movs	r1, #18
 8012a54:	68e0      	ldr	r0, [r4, #12]
 8012a56:	f7ff ff9d 	bl	8012994 <std.isra.0>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	61a3      	str	r3, [r4, #24]
 8012a5e:	bd10      	pop	{r4, pc}
 8012a60:	08014fbc 	.word	0x08014fbc
 8012a64:	08012989 	.word	0x08012989

08012a68 <__sfp>:
 8012a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a6a:	4b1c      	ldr	r3, [pc, #112]	; (8012adc <__sfp+0x74>)
 8012a6c:	681e      	ldr	r6, [r3, #0]
 8012a6e:	69b3      	ldr	r3, [r6, #24]
 8012a70:	4607      	mov	r7, r0
 8012a72:	b913      	cbnz	r3, 8012a7a <__sfp+0x12>
 8012a74:	4630      	mov	r0, r6
 8012a76:	f7ff ffc7 	bl	8012a08 <__sinit>
 8012a7a:	3648      	adds	r6, #72	; 0x48
 8012a7c:	68b4      	ldr	r4, [r6, #8]
 8012a7e:	6873      	ldr	r3, [r6, #4]
 8012a80:	3b01      	subs	r3, #1
 8012a82:	d503      	bpl.n	8012a8c <__sfp+0x24>
 8012a84:	6833      	ldr	r3, [r6, #0]
 8012a86:	b133      	cbz	r3, 8012a96 <__sfp+0x2e>
 8012a88:	6836      	ldr	r6, [r6, #0]
 8012a8a:	e7f7      	b.n	8012a7c <__sfp+0x14>
 8012a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012a90:	b16d      	cbz	r5, 8012aae <__sfp+0x46>
 8012a92:	3468      	adds	r4, #104	; 0x68
 8012a94:	e7f4      	b.n	8012a80 <__sfp+0x18>
 8012a96:	2104      	movs	r1, #4
 8012a98:	4638      	mov	r0, r7
 8012a9a:	f7ff ff9f 	bl	80129dc <__sfmoreglue>
 8012a9e:	6030      	str	r0, [r6, #0]
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	d1f1      	bne.n	8012a88 <__sfp+0x20>
 8012aa4:	230c      	movs	r3, #12
 8012aa6:	603b      	str	r3, [r7, #0]
 8012aa8:	4604      	mov	r4, r0
 8012aaa:	4620      	mov	r0, r4
 8012aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ab2:	81e3      	strh	r3, [r4, #14]
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	81a3      	strh	r3, [r4, #12]
 8012ab8:	6665      	str	r5, [r4, #100]	; 0x64
 8012aba:	6025      	str	r5, [r4, #0]
 8012abc:	60a5      	str	r5, [r4, #8]
 8012abe:	6065      	str	r5, [r4, #4]
 8012ac0:	6125      	str	r5, [r4, #16]
 8012ac2:	6165      	str	r5, [r4, #20]
 8012ac4:	61a5      	str	r5, [r4, #24]
 8012ac6:	2208      	movs	r2, #8
 8012ac8:	4629      	mov	r1, r5
 8012aca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ace:	f7ff fd0d 	bl	80124ec <memset>
 8012ad2:	6365      	str	r5, [r4, #52]	; 0x34
 8012ad4:	63a5      	str	r5, [r4, #56]	; 0x38
 8012ad6:	64a5      	str	r5, [r4, #72]	; 0x48
 8012ad8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012ada:	e7e6      	b.n	8012aaa <__sfp+0x42>
 8012adc:	08014fbc 	.word	0x08014fbc

08012ae0 <_fwalk_reent>:
 8012ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ae4:	4680      	mov	r8, r0
 8012ae6:	4689      	mov	r9, r1
 8012ae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012aec:	2600      	movs	r6, #0
 8012aee:	b914      	cbnz	r4, 8012af6 <_fwalk_reent+0x16>
 8012af0:	4630      	mov	r0, r6
 8012af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012af6:	68a5      	ldr	r5, [r4, #8]
 8012af8:	6867      	ldr	r7, [r4, #4]
 8012afa:	3f01      	subs	r7, #1
 8012afc:	d501      	bpl.n	8012b02 <_fwalk_reent+0x22>
 8012afe:	6824      	ldr	r4, [r4, #0]
 8012b00:	e7f5      	b.n	8012aee <_fwalk_reent+0xe>
 8012b02:	89ab      	ldrh	r3, [r5, #12]
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d907      	bls.n	8012b18 <_fwalk_reent+0x38>
 8012b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	d003      	beq.n	8012b18 <_fwalk_reent+0x38>
 8012b10:	4629      	mov	r1, r5
 8012b12:	4640      	mov	r0, r8
 8012b14:	47c8      	blx	r9
 8012b16:	4306      	orrs	r6, r0
 8012b18:	3568      	adds	r5, #104	; 0x68
 8012b1a:	e7ee      	b.n	8012afa <_fwalk_reent+0x1a>

08012b1c <__swhatbuf_r>:
 8012b1c:	b570      	push	{r4, r5, r6, lr}
 8012b1e:	460e      	mov	r6, r1
 8012b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b24:	2900      	cmp	r1, #0
 8012b26:	b090      	sub	sp, #64	; 0x40
 8012b28:	4614      	mov	r4, r2
 8012b2a:	461d      	mov	r5, r3
 8012b2c:	da07      	bge.n	8012b3e <__swhatbuf_r+0x22>
 8012b2e:	2300      	movs	r3, #0
 8012b30:	602b      	str	r3, [r5, #0]
 8012b32:	89b3      	ldrh	r3, [r6, #12]
 8012b34:	061a      	lsls	r2, r3, #24
 8012b36:	d410      	bmi.n	8012b5a <__swhatbuf_r+0x3e>
 8012b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b3c:	e00e      	b.n	8012b5c <__swhatbuf_r+0x40>
 8012b3e:	aa01      	add	r2, sp, #4
 8012b40:	f000 fb8e 	bl	8013260 <_fstat_r>
 8012b44:	2800      	cmp	r0, #0
 8012b46:	dbf2      	blt.n	8012b2e <__swhatbuf_r+0x12>
 8012b48:	9a02      	ldr	r2, [sp, #8]
 8012b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012b52:	425a      	negs	r2, r3
 8012b54:	415a      	adcs	r2, r3
 8012b56:	602a      	str	r2, [r5, #0]
 8012b58:	e7ee      	b.n	8012b38 <__swhatbuf_r+0x1c>
 8012b5a:	2340      	movs	r3, #64	; 0x40
 8012b5c:	2000      	movs	r0, #0
 8012b5e:	6023      	str	r3, [r4, #0]
 8012b60:	b010      	add	sp, #64	; 0x40
 8012b62:	bd70      	pop	{r4, r5, r6, pc}

08012b64 <__smakebuf_r>:
 8012b64:	898b      	ldrh	r3, [r1, #12]
 8012b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b68:	079d      	lsls	r5, r3, #30
 8012b6a:	4606      	mov	r6, r0
 8012b6c:	460c      	mov	r4, r1
 8012b6e:	d507      	bpl.n	8012b80 <__smakebuf_r+0x1c>
 8012b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	6123      	str	r3, [r4, #16]
 8012b78:	2301      	movs	r3, #1
 8012b7a:	6163      	str	r3, [r4, #20]
 8012b7c:	b002      	add	sp, #8
 8012b7e:	bd70      	pop	{r4, r5, r6, pc}
 8012b80:	ab01      	add	r3, sp, #4
 8012b82:	466a      	mov	r2, sp
 8012b84:	f7ff ffca 	bl	8012b1c <__swhatbuf_r>
 8012b88:	9900      	ldr	r1, [sp, #0]
 8012b8a:	4605      	mov	r5, r0
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f7ff fd03 	bl	8012598 <_malloc_r>
 8012b92:	b948      	cbnz	r0, 8012ba8 <__smakebuf_r+0x44>
 8012b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b98:	059a      	lsls	r2, r3, #22
 8012b9a:	d4ef      	bmi.n	8012b7c <__smakebuf_r+0x18>
 8012b9c:	f023 0303 	bic.w	r3, r3, #3
 8012ba0:	f043 0302 	orr.w	r3, r3, #2
 8012ba4:	81a3      	strh	r3, [r4, #12]
 8012ba6:	e7e3      	b.n	8012b70 <__smakebuf_r+0xc>
 8012ba8:	4b0d      	ldr	r3, [pc, #52]	; (8012be0 <__smakebuf_r+0x7c>)
 8012baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8012bac:	89a3      	ldrh	r3, [r4, #12]
 8012bae:	6020      	str	r0, [r4, #0]
 8012bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bb4:	81a3      	strh	r3, [r4, #12]
 8012bb6:	9b00      	ldr	r3, [sp, #0]
 8012bb8:	6163      	str	r3, [r4, #20]
 8012bba:	9b01      	ldr	r3, [sp, #4]
 8012bbc:	6120      	str	r0, [r4, #16]
 8012bbe:	b15b      	cbz	r3, 8012bd8 <__smakebuf_r+0x74>
 8012bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	f000 fb5d 	bl	8013284 <_isatty_r>
 8012bca:	b128      	cbz	r0, 8012bd8 <__smakebuf_r+0x74>
 8012bcc:	89a3      	ldrh	r3, [r4, #12]
 8012bce:	f023 0303 	bic.w	r3, r3, #3
 8012bd2:	f043 0301 	orr.w	r3, r3, #1
 8012bd6:	81a3      	strh	r3, [r4, #12]
 8012bd8:	89a3      	ldrh	r3, [r4, #12]
 8012bda:	431d      	orrs	r5, r3
 8012bdc:	81a5      	strh	r5, [r4, #12]
 8012bde:	e7cd      	b.n	8012b7c <__smakebuf_r+0x18>
 8012be0:	08012989 	.word	0x08012989

08012be4 <__malloc_lock>:
 8012be4:	4770      	bx	lr

08012be6 <__malloc_unlock>:
 8012be6:	4770      	bx	lr

08012be8 <__sfputc_r>:
 8012be8:	6893      	ldr	r3, [r2, #8]
 8012bea:	3b01      	subs	r3, #1
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	b410      	push	{r4}
 8012bf0:	6093      	str	r3, [r2, #8]
 8012bf2:	da09      	bge.n	8012c08 <__sfputc_r+0x20>
 8012bf4:	6994      	ldr	r4, [r2, #24]
 8012bf6:	42a3      	cmp	r3, r4
 8012bf8:	db02      	blt.n	8012c00 <__sfputc_r+0x18>
 8012bfa:	b2cb      	uxtb	r3, r1
 8012bfc:	2b0a      	cmp	r3, #10
 8012bfe:	d103      	bne.n	8012c08 <__sfputc_r+0x20>
 8012c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c04:	f7ff bd4e 	b.w	80126a4 <__swbuf_r>
 8012c08:	6813      	ldr	r3, [r2, #0]
 8012c0a:	1c58      	adds	r0, r3, #1
 8012c0c:	6010      	str	r0, [r2, #0]
 8012c0e:	7019      	strb	r1, [r3, #0]
 8012c10:	b2c8      	uxtb	r0, r1
 8012c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c16:	4770      	bx	lr

08012c18 <__sfputs_r>:
 8012c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c1a:	4606      	mov	r6, r0
 8012c1c:	460f      	mov	r7, r1
 8012c1e:	4614      	mov	r4, r2
 8012c20:	18d5      	adds	r5, r2, r3
 8012c22:	42ac      	cmp	r4, r5
 8012c24:	d101      	bne.n	8012c2a <__sfputs_r+0x12>
 8012c26:	2000      	movs	r0, #0
 8012c28:	e007      	b.n	8012c3a <__sfputs_r+0x22>
 8012c2a:	463a      	mov	r2, r7
 8012c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c30:	4630      	mov	r0, r6
 8012c32:	f7ff ffd9 	bl	8012be8 <__sfputc_r>
 8012c36:	1c43      	adds	r3, r0, #1
 8012c38:	d1f3      	bne.n	8012c22 <__sfputs_r+0xa>
 8012c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c3c <_vfiprintf_r>:
 8012c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c40:	b09d      	sub	sp, #116	; 0x74
 8012c42:	460c      	mov	r4, r1
 8012c44:	4617      	mov	r7, r2
 8012c46:	9303      	str	r3, [sp, #12]
 8012c48:	4606      	mov	r6, r0
 8012c4a:	b118      	cbz	r0, 8012c54 <_vfiprintf_r+0x18>
 8012c4c:	6983      	ldr	r3, [r0, #24]
 8012c4e:	b90b      	cbnz	r3, 8012c54 <_vfiprintf_r+0x18>
 8012c50:	f7ff feda 	bl	8012a08 <__sinit>
 8012c54:	4b7c      	ldr	r3, [pc, #496]	; (8012e48 <_vfiprintf_r+0x20c>)
 8012c56:	429c      	cmp	r4, r3
 8012c58:	d157      	bne.n	8012d0a <_vfiprintf_r+0xce>
 8012c5a:	6874      	ldr	r4, [r6, #4]
 8012c5c:	89a3      	ldrh	r3, [r4, #12]
 8012c5e:	0718      	lsls	r0, r3, #28
 8012c60:	d55d      	bpl.n	8012d1e <_vfiprintf_r+0xe2>
 8012c62:	6923      	ldr	r3, [r4, #16]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d05a      	beq.n	8012d1e <_vfiprintf_r+0xe2>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8012c6c:	2320      	movs	r3, #32
 8012c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c72:	2330      	movs	r3, #48	; 0x30
 8012c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c78:	f04f 0b01 	mov.w	fp, #1
 8012c7c:	46b8      	mov	r8, r7
 8012c7e:	4645      	mov	r5, r8
 8012c80:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d155      	bne.n	8012d34 <_vfiprintf_r+0xf8>
 8012c88:	ebb8 0a07 	subs.w	sl, r8, r7
 8012c8c:	d00b      	beq.n	8012ca6 <_vfiprintf_r+0x6a>
 8012c8e:	4653      	mov	r3, sl
 8012c90:	463a      	mov	r2, r7
 8012c92:	4621      	mov	r1, r4
 8012c94:	4630      	mov	r0, r6
 8012c96:	f7ff ffbf 	bl	8012c18 <__sfputs_r>
 8012c9a:	3001      	adds	r0, #1
 8012c9c:	f000 80c4 	beq.w	8012e28 <_vfiprintf_r+0x1ec>
 8012ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ca2:	4453      	add	r3, sl
 8012ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ca6:	f898 3000 	ldrb.w	r3, [r8]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	f000 80bc 	beq.w	8012e28 <_vfiprintf_r+0x1ec>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012cb6:	9304      	str	r3, [sp, #16]
 8012cb8:	9307      	str	r3, [sp, #28]
 8012cba:	9205      	str	r2, [sp, #20]
 8012cbc:	9306      	str	r3, [sp, #24]
 8012cbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8012cc4:	2205      	movs	r2, #5
 8012cc6:	7829      	ldrb	r1, [r5, #0]
 8012cc8:	4860      	ldr	r0, [pc, #384]	; (8012e4c <_vfiprintf_r+0x210>)
 8012cca:	f7ed fb11 	bl	80002f0 <memchr>
 8012cce:	f105 0801 	add.w	r8, r5, #1
 8012cd2:	9b04      	ldr	r3, [sp, #16]
 8012cd4:	2800      	cmp	r0, #0
 8012cd6:	d131      	bne.n	8012d3c <_vfiprintf_r+0x100>
 8012cd8:	06d9      	lsls	r1, r3, #27
 8012cda:	bf44      	itt	mi
 8012cdc:	2220      	movmi	r2, #32
 8012cde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012ce2:	071a      	lsls	r2, r3, #28
 8012ce4:	bf44      	itt	mi
 8012ce6:	222b      	movmi	r2, #43	; 0x2b
 8012ce8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cec:	782a      	ldrb	r2, [r5, #0]
 8012cee:	2a2a      	cmp	r2, #42	; 0x2a
 8012cf0:	d02c      	beq.n	8012d4c <_vfiprintf_r+0x110>
 8012cf2:	9a07      	ldr	r2, [sp, #28]
 8012cf4:	2100      	movs	r1, #0
 8012cf6:	200a      	movs	r0, #10
 8012cf8:	46a8      	mov	r8, r5
 8012cfa:	3501      	adds	r5, #1
 8012cfc:	f898 3000 	ldrb.w	r3, [r8]
 8012d00:	3b30      	subs	r3, #48	; 0x30
 8012d02:	2b09      	cmp	r3, #9
 8012d04:	d96d      	bls.n	8012de2 <_vfiprintf_r+0x1a6>
 8012d06:	b371      	cbz	r1, 8012d66 <_vfiprintf_r+0x12a>
 8012d08:	e026      	b.n	8012d58 <_vfiprintf_r+0x11c>
 8012d0a:	4b51      	ldr	r3, [pc, #324]	; (8012e50 <_vfiprintf_r+0x214>)
 8012d0c:	429c      	cmp	r4, r3
 8012d0e:	d101      	bne.n	8012d14 <_vfiprintf_r+0xd8>
 8012d10:	68b4      	ldr	r4, [r6, #8]
 8012d12:	e7a3      	b.n	8012c5c <_vfiprintf_r+0x20>
 8012d14:	4b4f      	ldr	r3, [pc, #316]	; (8012e54 <_vfiprintf_r+0x218>)
 8012d16:	429c      	cmp	r4, r3
 8012d18:	bf08      	it	eq
 8012d1a:	68f4      	ldreq	r4, [r6, #12]
 8012d1c:	e79e      	b.n	8012c5c <_vfiprintf_r+0x20>
 8012d1e:	4621      	mov	r1, r4
 8012d20:	4630      	mov	r0, r6
 8012d22:	f7ff fd11 	bl	8012748 <__swsetup_r>
 8012d26:	2800      	cmp	r0, #0
 8012d28:	d09e      	beq.n	8012c68 <_vfiprintf_r+0x2c>
 8012d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d2e:	b01d      	add	sp, #116	; 0x74
 8012d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d34:	2b25      	cmp	r3, #37	; 0x25
 8012d36:	d0a7      	beq.n	8012c88 <_vfiprintf_r+0x4c>
 8012d38:	46a8      	mov	r8, r5
 8012d3a:	e7a0      	b.n	8012c7e <_vfiprintf_r+0x42>
 8012d3c:	4a43      	ldr	r2, [pc, #268]	; (8012e4c <_vfiprintf_r+0x210>)
 8012d3e:	1a80      	subs	r0, r0, r2
 8012d40:	fa0b f000 	lsl.w	r0, fp, r0
 8012d44:	4318      	orrs	r0, r3
 8012d46:	9004      	str	r0, [sp, #16]
 8012d48:	4645      	mov	r5, r8
 8012d4a:	e7bb      	b.n	8012cc4 <_vfiprintf_r+0x88>
 8012d4c:	9a03      	ldr	r2, [sp, #12]
 8012d4e:	1d11      	adds	r1, r2, #4
 8012d50:	6812      	ldr	r2, [r2, #0]
 8012d52:	9103      	str	r1, [sp, #12]
 8012d54:	2a00      	cmp	r2, #0
 8012d56:	db01      	blt.n	8012d5c <_vfiprintf_r+0x120>
 8012d58:	9207      	str	r2, [sp, #28]
 8012d5a:	e004      	b.n	8012d66 <_vfiprintf_r+0x12a>
 8012d5c:	4252      	negs	r2, r2
 8012d5e:	f043 0302 	orr.w	r3, r3, #2
 8012d62:	9207      	str	r2, [sp, #28]
 8012d64:	9304      	str	r3, [sp, #16]
 8012d66:	f898 3000 	ldrb.w	r3, [r8]
 8012d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8012d6c:	d110      	bne.n	8012d90 <_vfiprintf_r+0x154>
 8012d6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012d72:	2b2a      	cmp	r3, #42	; 0x2a
 8012d74:	f108 0101 	add.w	r1, r8, #1
 8012d78:	d137      	bne.n	8012dea <_vfiprintf_r+0x1ae>
 8012d7a:	9b03      	ldr	r3, [sp, #12]
 8012d7c:	1d1a      	adds	r2, r3, #4
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	9203      	str	r2, [sp, #12]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	bfb8      	it	lt
 8012d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d8a:	f108 0802 	add.w	r8, r8, #2
 8012d8e:	9305      	str	r3, [sp, #20]
 8012d90:	4d31      	ldr	r5, [pc, #196]	; (8012e58 <_vfiprintf_r+0x21c>)
 8012d92:	f898 1000 	ldrb.w	r1, [r8]
 8012d96:	2203      	movs	r2, #3
 8012d98:	4628      	mov	r0, r5
 8012d9a:	f7ed faa9 	bl	80002f0 <memchr>
 8012d9e:	b140      	cbz	r0, 8012db2 <_vfiprintf_r+0x176>
 8012da0:	2340      	movs	r3, #64	; 0x40
 8012da2:	1b40      	subs	r0, r0, r5
 8012da4:	fa03 f000 	lsl.w	r0, r3, r0
 8012da8:	9b04      	ldr	r3, [sp, #16]
 8012daa:	4303      	orrs	r3, r0
 8012dac:	9304      	str	r3, [sp, #16]
 8012dae:	f108 0801 	add.w	r8, r8, #1
 8012db2:	f898 1000 	ldrb.w	r1, [r8]
 8012db6:	4829      	ldr	r0, [pc, #164]	; (8012e5c <_vfiprintf_r+0x220>)
 8012db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dbc:	2206      	movs	r2, #6
 8012dbe:	f108 0701 	add.w	r7, r8, #1
 8012dc2:	f7ed fa95 	bl	80002f0 <memchr>
 8012dc6:	2800      	cmp	r0, #0
 8012dc8:	d034      	beq.n	8012e34 <_vfiprintf_r+0x1f8>
 8012dca:	4b25      	ldr	r3, [pc, #148]	; (8012e60 <_vfiprintf_r+0x224>)
 8012dcc:	bb03      	cbnz	r3, 8012e10 <_vfiprintf_r+0x1d4>
 8012dce:	9b03      	ldr	r3, [sp, #12]
 8012dd0:	3307      	adds	r3, #7
 8012dd2:	f023 0307 	bic.w	r3, r3, #7
 8012dd6:	3308      	adds	r3, #8
 8012dd8:	9303      	str	r3, [sp, #12]
 8012dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ddc:	444b      	add	r3, r9
 8012dde:	9309      	str	r3, [sp, #36]	; 0x24
 8012de0:	e74c      	b.n	8012c7c <_vfiprintf_r+0x40>
 8012de2:	fb00 3202 	mla	r2, r0, r2, r3
 8012de6:	2101      	movs	r1, #1
 8012de8:	e786      	b.n	8012cf8 <_vfiprintf_r+0xbc>
 8012dea:	2300      	movs	r3, #0
 8012dec:	9305      	str	r3, [sp, #20]
 8012dee:	4618      	mov	r0, r3
 8012df0:	250a      	movs	r5, #10
 8012df2:	4688      	mov	r8, r1
 8012df4:	3101      	adds	r1, #1
 8012df6:	f898 2000 	ldrb.w	r2, [r8]
 8012dfa:	3a30      	subs	r2, #48	; 0x30
 8012dfc:	2a09      	cmp	r2, #9
 8012dfe:	d903      	bls.n	8012e08 <_vfiprintf_r+0x1cc>
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d0c5      	beq.n	8012d90 <_vfiprintf_r+0x154>
 8012e04:	9005      	str	r0, [sp, #20]
 8012e06:	e7c3      	b.n	8012d90 <_vfiprintf_r+0x154>
 8012e08:	fb05 2000 	mla	r0, r5, r0, r2
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e7f0      	b.n	8012df2 <_vfiprintf_r+0x1b6>
 8012e10:	ab03      	add	r3, sp, #12
 8012e12:	9300      	str	r3, [sp, #0]
 8012e14:	4622      	mov	r2, r4
 8012e16:	4b13      	ldr	r3, [pc, #76]	; (8012e64 <_vfiprintf_r+0x228>)
 8012e18:	a904      	add	r1, sp, #16
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f3af 8000 	nop.w
 8012e20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012e24:	4681      	mov	r9, r0
 8012e26:	d1d8      	bne.n	8012dda <_vfiprintf_r+0x19e>
 8012e28:	89a3      	ldrh	r3, [r4, #12]
 8012e2a:	065b      	lsls	r3, r3, #25
 8012e2c:	f53f af7d 	bmi.w	8012d2a <_vfiprintf_r+0xee>
 8012e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e32:	e77c      	b.n	8012d2e <_vfiprintf_r+0xf2>
 8012e34:	ab03      	add	r3, sp, #12
 8012e36:	9300      	str	r3, [sp, #0]
 8012e38:	4622      	mov	r2, r4
 8012e3a:	4b0a      	ldr	r3, [pc, #40]	; (8012e64 <_vfiprintf_r+0x228>)
 8012e3c:	a904      	add	r1, sp, #16
 8012e3e:	4630      	mov	r0, r6
 8012e40:	f000 f888 	bl	8012f54 <_printf_i>
 8012e44:	e7ec      	b.n	8012e20 <_vfiprintf_r+0x1e4>
 8012e46:	bf00      	nop
 8012e48:	08014fe0 	.word	0x08014fe0
 8012e4c:	08015020 	.word	0x08015020
 8012e50:	08015000 	.word	0x08015000
 8012e54:	08014fc0 	.word	0x08014fc0
 8012e58:	08015026 	.word	0x08015026
 8012e5c:	0801502a 	.word	0x0801502a
 8012e60:	00000000 	.word	0x00000000
 8012e64:	08012c19 	.word	0x08012c19

08012e68 <_printf_common>:
 8012e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e6c:	4691      	mov	r9, r2
 8012e6e:	461f      	mov	r7, r3
 8012e70:	688a      	ldr	r2, [r1, #8]
 8012e72:	690b      	ldr	r3, [r1, #16]
 8012e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	bfb8      	it	lt
 8012e7c:	4613      	movlt	r3, r2
 8012e7e:	f8c9 3000 	str.w	r3, [r9]
 8012e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e86:	4606      	mov	r6, r0
 8012e88:	460c      	mov	r4, r1
 8012e8a:	b112      	cbz	r2, 8012e92 <_printf_common+0x2a>
 8012e8c:	3301      	adds	r3, #1
 8012e8e:	f8c9 3000 	str.w	r3, [r9]
 8012e92:	6823      	ldr	r3, [r4, #0]
 8012e94:	0699      	lsls	r1, r3, #26
 8012e96:	bf42      	ittt	mi
 8012e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012e9c:	3302      	addmi	r3, #2
 8012e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8012ea2:	6825      	ldr	r5, [r4, #0]
 8012ea4:	f015 0506 	ands.w	r5, r5, #6
 8012ea8:	d107      	bne.n	8012eba <_printf_common+0x52>
 8012eaa:	f104 0a19 	add.w	sl, r4, #25
 8012eae:	68e3      	ldr	r3, [r4, #12]
 8012eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8012eb4:	1a9b      	subs	r3, r3, r2
 8012eb6:	429d      	cmp	r5, r3
 8012eb8:	db29      	blt.n	8012f0e <_printf_common+0xa6>
 8012eba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012ebe:	6822      	ldr	r2, [r4, #0]
 8012ec0:	3300      	adds	r3, #0
 8012ec2:	bf18      	it	ne
 8012ec4:	2301      	movne	r3, #1
 8012ec6:	0692      	lsls	r2, r2, #26
 8012ec8:	d42e      	bmi.n	8012f28 <_printf_common+0xc0>
 8012eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ece:	4639      	mov	r1, r7
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	47c0      	blx	r8
 8012ed4:	3001      	adds	r0, #1
 8012ed6:	d021      	beq.n	8012f1c <_printf_common+0xb4>
 8012ed8:	6823      	ldr	r3, [r4, #0]
 8012eda:	68e5      	ldr	r5, [r4, #12]
 8012edc:	f8d9 2000 	ldr.w	r2, [r9]
 8012ee0:	f003 0306 	and.w	r3, r3, #6
 8012ee4:	2b04      	cmp	r3, #4
 8012ee6:	bf08      	it	eq
 8012ee8:	1aad      	subeq	r5, r5, r2
 8012eea:	68a3      	ldr	r3, [r4, #8]
 8012eec:	6922      	ldr	r2, [r4, #16]
 8012eee:	bf0c      	ite	eq
 8012ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ef4:	2500      	movne	r5, #0
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	bfc4      	itt	gt
 8012efa:	1a9b      	subgt	r3, r3, r2
 8012efc:	18ed      	addgt	r5, r5, r3
 8012efe:	f04f 0900 	mov.w	r9, #0
 8012f02:	341a      	adds	r4, #26
 8012f04:	454d      	cmp	r5, r9
 8012f06:	d11b      	bne.n	8012f40 <_printf_common+0xd8>
 8012f08:	2000      	movs	r0, #0
 8012f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f0e:	2301      	movs	r3, #1
 8012f10:	4652      	mov	r2, sl
 8012f12:	4639      	mov	r1, r7
 8012f14:	4630      	mov	r0, r6
 8012f16:	47c0      	blx	r8
 8012f18:	3001      	adds	r0, #1
 8012f1a:	d103      	bne.n	8012f24 <_printf_common+0xbc>
 8012f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f24:	3501      	adds	r5, #1
 8012f26:	e7c2      	b.n	8012eae <_printf_common+0x46>
 8012f28:	18e1      	adds	r1, r4, r3
 8012f2a:	1c5a      	adds	r2, r3, #1
 8012f2c:	2030      	movs	r0, #48	; 0x30
 8012f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012f32:	4422      	add	r2, r4
 8012f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012f3c:	3302      	adds	r3, #2
 8012f3e:	e7c4      	b.n	8012eca <_printf_common+0x62>
 8012f40:	2301      	movs	r3, #1
 8012f42:	4622      	mov	r2, r4
 8012f44:	4639      	mov	r1, r7
 8012f46:	4630      	mov	r0, r6
 8012f48:	47c0      	blx	r8
 8012f4a:	3001      	adds	r0, #1
 8012f4c:	d0e6      	beq.n	8012f1c <_printf_common+0xb4>
 8012f4e:	f109 0901 	add.w	r9, r9, #1
 8012f52:	e7d7      	b.n	8012f04 <_printf_common+0x9c>

08012f54 <_printf_i>:
 8012f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f58:	4617      	mov	r7, r2
 8012f5a:	7e0a      	ldrb	r2, [r1, #24]
 8012f5c:	b085      	sub	sp, #20
 8012f5e:	2a6e      	cmp	r2, #110	; 0x6e
 8012f60:	4698      	mov	r8, r3
 8012f62:	4606      	mov	r6, r0
 8012f64:	460c      	mov	r4, r1
 8012f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f68:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8012f6c:	f000 80bc 	beq.w	80130e8 <_printf_i+0x194>
 8012f70:	d81a      	bhi.n	8012fa8 <_printf_i+0x54>
 8012f72:	2a63      	cmp	r2, #99	; 0x63
 8012f74:	d02e      	beq.n	8012fd4 <_printf_i+0x80>
 8012f76:	d80a      	bhi.n	8012f8e <_printf_i+0x3a>
 8012f78:	2a00      	cmp	r2, #0
 8012f7a:	f000 80c8 	beq.w	801310e <_printf_i+0x1ba>
 8012f7e:	2a58      	cmp	r2, #88	; 0x58
 8012f80:	f000 808a 	beq.w	8013098 <_printf_i+0x144>
 8012f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f88:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8012f8c:	e02a      	b.n	8012fe4 <_printf_i+0x90>
 8012f8e:	2a64      	cmp	r2, #100	; 0x64
 8012f90:	d001      	beq.n	8012f96 <_printf_i+0x42>
 8012f92:	2a69      	cmp	r2, #105	; 0x69
 8012f94:	d1f6      	bne.n	8012f84 <_printf_i+0x30>
 8012f96:	6821      	ldr	r1, [r4, #0]
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012f9e:	d023      	beq.n	8012fe8 <_printf_i+0x94>
 8012fa0:	1d11      	adds	r1, r2, #4
 8012fa2:	6019      	str	r1, [r3, #0]
 8012fa4:	6813      	ldr	r3, [r2, #0]
 8012fa6:	e027      	b.n	8012ff8 <_printf_i+0xa4>
 8012fa8:	2a73      	cmp	r2, #115	; 0x73
 8012faa:	f000 80b4 	beq.w	8013116 <_printf_i+0x1c2>
 8012fae:	d808      	bhi.n	8012fc2 <_printf_i+0x6e>
 8012fb0:	2a6f      	cmp	r2, #111	; 0x6f
 8012fb2:	d02a      	beq.n	801300a <_printf_i+0xb6>
 8012fb4:	2a70      	cmp	r2, #112	; 0x70
 8012fb6:	d1e5      	bne.n	8012f84 <_printf_i+0x30>
 8012fb8:	680a      	ldr	r2, [r1, #0]
 8012fba:	f042 0220 	orr.w	r2, r2, #32
 8012fbe:	600a      	str	r2, [r1, #0]
 8012fc0:	e003      	b.n	8012fca <_printf_i+0x76>
 8012fc2:	2a75      	cmp	r2, #117	; 0x75
 8012fc4:	d021      	beq.n	801300a <_printf_i+0xb6>
 8012fc6:	2a78      	cmp	r2, #120	; 0x78
 8012fc8:	d1dc      	bne.n	8012f84 <_printf_i+0x30>
 8012fca:	2278      	movs	r2, #120	; 0x78
 8012fcc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012fd0:	496e      	ldr	r1, [pc, #440]	; (801318c <_printf_i+0x238>)
 8012fd2:	e064      	b.n	801309e <_printf_i+0x14a>
 8012fd4:	681a      	ldr	r2, [r3, #0]
 8012fd6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8012fda:	1d11      	adds	r1, r2, #4
 8012fdc:	6019      	str	r1, [r3, #0]
 8012fde:	6813      	ldr	r3, [r2, #0]
 8012fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	e0a3      	b.n	8013130 <_printf_i+0x1dc>
 8012fe8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8012fec:	f102 0104 	add.w	r1, r2, #4
 8012ff0:	6019      	str	r1, [r3, #0]
 8012ff2:	d0d7      	beq.n	8012fa4 <_printf_i+0x50>
 8012ff4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	da03      	bge.n	8013004 <_printf_i+0xb0>
 8012ffc:	222d      	movs	r2, #45	; 0x2d
 8012ffe:	425b      	negs	r3, r3
 8013000:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013004:	4962      	ldr	r1, [pc, #392]	; (8013190 <_printf_i+0x23c>)
 8013006:	220a      	movs	r2, #10
 8013008:	e017      	b.n	801303a <_printf_i+0xe6>
 801300a:	6820      	ldr	r0, [r4, #0]
 801300c:	6819      	ldr	r1, [r3, #0]
 801300e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013012:	d003      	beq.n	801301c <_printf_i+0xc8>
 8013014:	1d08      	adds	r0, r1, #4
 8013016:	6018      	str	r0, [r3, #0]
 8013018:	680b      	ldr	r3, [r1, #0]
 801301a:	e006      	b.n	801302a <_printf_i+0xd6>
 801301c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013020:	f101 0004 	add.w	r0, r1, #4
 8013024:	6018      	str	r0, [r3, #0]
 8013026:	d0f7      	beq.n	8013018 <_printf_i+0xc4>
 8013028:	880b      	ldrh	r3, [r1, #0]
 801302a:	4959      	ldr	r1, [pc, #356]	; (8013190 <_printf_i+0x23c>)
 801302c:	2a6f      	cmp	r2, #111	; 0x6f
 801302e:	bf14      	ite	ne
 8013030:	220a      	movne	r2, #10
 8013032:	2208      	moveq	r2, #8
 8013034:	2000      	movs	r0, #0
 8013036:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801303a:	6865      	ldr	r5, [r4, #4]
 801303c:	60a5      	str	r5, [r4, #8]
 801303e:	2d00      	cmp	r5, #0
 8013040:	f2c0 809c 	blt.w	801317c <_printf_i+0x228>
 8013044:	6820      	ldr	r0, [r4, #0]
 8013046:	f020 0004 	bic.w	r0, r0, #4
 801304a:	6020      	str	r0, [r4, #0]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d13f      	bne.n	80130d0 <_printf_i+0x17c>
 8013050:	2d00      	cmp	r5, #0
 8013052:	f040 8095 	bne.w	8013180 <_printf_i+0x22c>
 8013056:	4675      	mov	r5, lr
 8013058:	2a08      	cmp	r2, #8
 801305a:	d10b      	bne.n	8013074 <_printf_i+0x120>
 801305c:	6823      	ldr	r3, [r4, #0]
 801305e:	07da      	lsls	r2, r3, #31
 8013060:	d508      	bpl.n	8013074 <_printf_i+0x120>
 8013062:	6923      	ldr	r3, [r4, #16]
 8013064:	6862      	ldr	r2, [r4, #4]
 8013066:	429a      	cmp	r2, r3
 8013068:	bfde      	ittt	le
 801306a:	2330      	movle	r3, #48	; 0x30
 801306c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013070:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013074:	ebae 0305 	sub.w	r3, lr, r5
 8013078:	6123      	str	r3, [r4, #16]
 801307a:	f8cd 8000 	str.w	r8, [sp]
 801307e:	463b      	mov	r3, r7
 8013080:	aa03      	add	r2, sp, #12
 8013082:	4621      	mov	r1, r4
 8013084:	4630      	mov	r0, r6
 8013086:	f7ff feef 	bl	8012e68 <_printf_common>
 801308a:	3001      	adds	r0, #1
 801308c:	d155      	bne.n	801313a <_printf_i+0x1e6>
 801308e:	f04f 30ff 	mov.w	r0, #4294967295
 8013092:	b005      	add	sp, #20
 8013094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013098:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 801309c:	493c      	ldr	r1, [pc, #240]	; (8013190 <_printf_i+0x23c>)
 801309e:	6822      	ldr	r2, [r4, #0]
 80130a0:	6818      	ldr	r0, [r3, #0]
 80130a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80130a6:	f100 0504 	add.w	r5, r0, #4
 80130aa:	601d      	str	r5, [r3, #0]
 80130ac:	d001      	beq.n	80130b2 <_printf_i+0x15e>
 80130ae:	6803      	ldr	r3, [r0, #0]
 80130b0:	e002      	b.n	80130b8 <_printf_i+0x164>
 80130b2:	0655      	lsls	r5, r2, #25
 80130b4:	d5fb      	bpl.n	80130ae <_printf_i+0x15a>
 80130b6:	8803      	ldrh	r3, [r0, #0]
 80130b8:	07d0      	lsls	r0, r2, #31
 80130ba:	bf44      	itt	mi
 80130bc:	f042 0220 	orrmi.w	r2, r2, #32
 80130c0:	6022      	strmi	r2, [r4, #0]
 80130c2:	b91b      	cbnz	r3, 80130cc <_printf_i+0x178>
 80130c4:	6822      	ldr	r2, [r4, #0]
 80130c6:	f022 0220 	bic.w	r2, r2, #32
 80130ca:	6022      	str	r2, [r4, #0]
 80130cc:	2210      	movs	r2, #16
 80130ce:	e7b1      	b.n	8013034 <_printf_i+0xe0>
 80130d0:	4675      	mov	r5, lr
 80130d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80130d6:	fb02 3310 	mls	r3, r2, r0, r3
 80130da:	5ccb      	ldrb	r3, [r1, r3]
 80130dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80130e0:	4603      	mov	r3, r0
 80130e2:	2800      	cmp	r0, #0
 80130e4:	d1f5      	bne.n	80130d2 <_printf_i+0x17e>
 80130e6:	e7b7      	b.n	8013058 <_printf_i+0x104>
 80130e8:	6808      	ldr	r0, [r1, #0]
 80130ea:	681a      	ldr	r2, [r3, #0]
 80130ec:	6949      	ldr	r1, [r1, #20]
 80130ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80130f2:	d004      	beq.n	80130fe <_printf_i+0x1aa>
 80130f4:	1d10      	adds	r0, r2, #4
 80130f6:	6018      	str	r0, [r3, #0]
 80130f8:	6813      	ldr	r3, [r2, #0]
 80130fa:	6019      	str	r1, [r3, #0]
 80130fc:	e007      	b.n	801310e <_printf_i+0x1ba>
 80130fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013102:	f102 0004 	add.w	r0, r2, #4
 8013106:	6018      	str	r0, [r3, #0]
 8013108:	6813      	ldr	r3, [r2, #0]
 801310a:	d0f6      	beq.n	80130fa <_printf_i+0x1a6>
 801310c:	8019      	strh	r1, [r3, #0]
 801310e:	2300      	movs	r3, #0
 8013110:	6123      	str	r3, [r4, #16]
 8013112:	4675      	mov	r5, lr
 8013114:	e7b1      	b.n	801307a <_printf_i+0x126>
 8013116:	681a      	ldr	r2, [r3, #0]
 8013118:	1d11      	adds	r1, r2, #4
 801311a:	6019      	str	r1, [r3, #0]
 801311c:	6815      	ldr	r5, [r2, #0]
 801311e:	6862      	ldr	r2, [r4, #4]
 8013120:	2100      	movs	r1, #0
 8013122:	4628      	mov	r0, r5
 8013124:	f7ed f8e4 	bl	80002f0 <memchr>
 8013128:	b108      	cbz	r0, 801312e <_printf_i+0x1da>
 801312a:	1b40      	subs	r0, r0, r5
 801312c:	6060      	str	r0, [r4, #4]
 801312e:	6863      	ldr	r3, [r4, #4]
 8013130:	6123      	str	r3, [r4, #16]
 8013132:	2300      	movs	r3, #0
 8013134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013138:	e79f      	b.n	801307a <_printf_i+0x126>
 801313a:	6923      	ldr	r3, [r4, #16]
 801313c:	462a      	mov	r2, r5
 801313e:	4639      	mov	r1, r7
 8013140:	4630      	mov	r0, r6
 8013142:	47c0      	blx	r8
 8013144:	3001      	adds	r0, #1
 8013146:	d0a2      	beq.n	801308e <_printf_i+0x13a>
 8013148:	6823      	ldr	r3, [r4, #0]
 801314a:	079b      	lsls	r3, r3, #30
 801314c:	d507      	bpl.n	801315e <_printf_i+0x20a>
 801314e:	2500      	movs	r5, #0
 8013150:	f104 0919 	add.w	r9, r4, #25
 8013154:	68e3      	ldr	r3, [r4, #12]
 8013156:	9a03      	ldr	r2, [sp, #12]
 8013158:	1a9b      	subs	r3, r3, r2
 801315a:	429d      	cmp	r5, r3
 801315c:	db05      	blt.n	801316a <_printf_i+0x216>
 801315e:	68e0      	ldr	r0, [r4, #12]
 8013160:	9b03      	ldr	r3, [sp, #12]
 8013162:	4298      	cmp	r0, r3
 8013164:	bfb8      	it	lt
 8013166:	4618      	movlt	r0, r3
 8013168:	e793      	b.n	8013092 <_printf_i+0x13e>
 801316a:	2301      	movs	r3, #1
 801316c:	464a      	mov	r2, r9
 801316e:	4639      	mov	r1, r7
 8013170:	4630      	mov	r0, r6
 8013172:	47c0      	blx	r8
 8013174:	3001      	adds	r0, #1
 8013176:	d08a      	beq.n	801308e <_printf_i+0x13a>
 8013178:	3501      	adds	r5, #1
 801317a:	e7eb      	b.n	8013154 <_printf_i+0x200>
 801317c:	2b00      	cmp	r3, #0
 801317e:	d1a7      	bne.n	80130d0 <_printf_i+0x17c>
 8013180:	780b      	ldrb	r3, [r1, #0]
 8013182:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013186:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801318a:	e765      	b.n	8013058 <_printf_i+0x104>
 801318c:	08015042 	.word	0x08015042
 8013190:	08015031 	.word	0x08015031

08013194 <__sread>:
 8013194:	b510      	push	{r4, lr}
 8013196:	460c      	mov	r4, r1
 8013198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801319c:	f000 f894 	bl	80132c8 <_read_r>
 80131a0:	2800      	cmp	r0, #0
 80131a2:	bfab      	itete	ge
 80131a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80131a6:	89a3      	ldrhlt	r3, [r4, #12]
 80131a8:	181b      	addge	r3, r3, r0
 80131aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80131ae:	bfac      	ite	ge
 80131b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80131b2:	81a3      	strhlt	r3, [r4, #12]
 80131b4:	bd10      	pop	{r4, pc}

080131b6 <__swrite>:
 80131b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131ba:	461f      	mov	r7, r3
 80131bc:	898b      	ldrh	r3, [r1, #12]
 80131be:	05db      	lsls	r3, r3, #23
 80131c0:	4605      	mov	r5, r0
 80131c2:	460c      	mov	r4, r1
 80131c4:	4616      	mov	r6, r2
 80131c6:	d505      	bpl.n	80131d4 <__swrite+0x1e>
 80131c8:	2302      	movs	r3, #2
 80131ca:	2200      	movs	r2, #0
 80131cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131d0:	f000 f868 	bl	80132a4 <_lseek_r>
 80131d4:	89a3      	ldrh	r3, [r4, #12]
 80131d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80131de:	81a3      	strh	r3, [r4, #12]
 80131e0:	4632      	mov	r2, r6
 80131e2:	463b      	mov	r3, r7
 80131e4:	4628      	mov	r0, r5
 80131e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131ea:	f000 b817 	b.w	801321c <_write_r>

080131ee <__sseek>:
 80131ee:	b510      	push	{r4, lr}
 80131f0:	460c      	mov	r4, r1
 80131f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131f6:	f000 f855 	bl	80132a4 <_lseek_r>
 80131fa:	1c43      	adds	r3, r0, #1
 80131fc:	89a3      	ldrh	r3, [r4, #12]
 80131fe:	bf15      	itete	ne
 8013200:	6560      	strne	r0, [r4, #84]	; 0x54
 8013202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801320a:	81a3      	strheq	r3, [r4, #12]
 801320c:	bf18      	it	ne
 801320e:	81a3      	strhne	r3, [r4, #12]
 8013210:	bd10      	pop	{r4, pc}

08013212 <__sclose>:
 8013212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013216:	f000 b813 	b.w	8013240 <_close_r>
	...

0801321c <_write_r>:
 801321c:	b538      	push	{r3, r4, r5, lr}
 801321e:	4c07      	ldr	r4, [pc, #28]	; (801323c <_write_r+0x20>)
 8013220:	4605      	mov	r5, r0
 8013222:	4608      	mov	r0, r1
 8013224:	4611      	mov	r1, r2
 8013226:	2200      	movs	r2, #0
 8013228:	6022      	str	r2, [r4, #0]
 801322a:	461a      	mov	r2, r3
 801322c:	f7ed fa6f 	bl	800070e <_write>
 8013230:	1c43      	adds	r3, r0, #1
 8013232:	d102      	bne.n	801323a <_write_r+0x1e>
 8013234:	6823      	ldr	r3, [r4, #0]
 8013236:	b103      	cbz	r3, 801323a <_write_r+0x1e>
 8013238:	602b      	str	r3, [r5, #0]
 801323a:	bd38      	pop	{r3, r4, r5, pc}
 801323c:	24004cd0 	.word	0x24004cd0

08013240 <_close_r>:
 8013240:	b538      	push	{r3, r4, r5, lr}
 8013242:	4c06      	ldr	r4, [pc, #24]	; (801325c <_close_r+0x1c>)
 8013244:	2300      	movs	r3, #0
 8013246:	4605      	mov	r5, r0
 8013248:	4608      	mov	r0, r1
 801324a:	6023      	str	r3, [r4, #0]
 801324c:	f7ed fa88 	bl	8000760 <_close>
 8013250:	1c43      	adds	r3, r0, #1
 8013252:	d102      	bne.n	801325a <_close_r+0x1a>
 8013254:	6823      	ldr	r3, [r4, #0]
 8013256:	b103      	cbz	r3, 801325a <_close_r+0x1a>
 8013258:	602b      	str	r3, [r5, #0]
 801325a:	bd38      	pop	{r3, r4, r5, pc}
 801325c:	24004cd0 	.word	0x24004cd0

08013260 <_fstat_r>:
 8013260:	b538      	push	{r3, r4, r5, lr}
 8013262:	4c07      	ldr	r4, [pc, #28]	; (8013280 <_fstat_r+0x20>)
 8013264:	2300      	movs	r3, #0
 8013266:	4605      	mov	r5, r0
 8013268:	4608      	mov	r0, r1
 801326a:	4611      	mov	r1, r2
 801326c:	6023      	str	r3, [r4, #0]
 801326e:	f7ed fa7a 	bl	8000766 <_fstat>
 8013272:	1c43      	adds	r3, r0, #1
 8013274:	d102      	bne.n	801327c <_fstat_r+0x1c>
 8013276:	6823      	ldr	r3, [r4, #0]
 8013278:	b103      	cbz	r3, 801327c <_fstat_r+0x1c>
 801327a:	602b      	str	r3, [r5, #0]
 801327c:	bd38      	pop	{r3, r4, r5, pc}
 801327e:	bf00      	nop
 8013280:	24004cd0 	.word	0x24004cd0

08013284 <_isatty_r>:
 8013284:	b538      	push	{r3, r4, r5, lr}
 8013286:	4c06      	ldr	r4, [pc, #24]	; (80132a0 <_isatty_r+0x1c>)
 8013288:	2300      	movs	r3, #0
 801328a:	4605      	mov	r5, r0
 801328c:	4608      	mov	r0, r1
 801328e:	6023      	str	r3, [r4, #0]
 8013290:	f7ed fa6e 	bl	8000770 <_isatty>
 8013294:	1c43      	adds	r3, r0, #1
 8013296:	d102      	bne.n	801329e <_isatty_r+0x1a>
 8013298:	6823      	ldr	r3, [r4, #0]
 801329a:	b103      	cbz	r3, 801329e <_isatty_r+0x1a>
 801329c:	602b      	str	r3, [r5, #0]
 801329e:	bd38      	pop	{r3, r4, r5, pc}
 80132a0:	24004cd0 	.word	0x24004cd0

080132a4 <_lseek_r>:
 80132a4:	b538      	push	{r3, r4, r5, lr}
 80132a6:	4c07      	ldr	r4, [pc, #28]	; (80132c4 <_lseek_r+0x20>)
 80132a8:	4605      	mov	r5, r0
 80132aa:	4608      	mov	r0, r1
 80132ac:	4611      	mov	r1, r2
 80132ae:	2200      	movs	r2, #0
 80132b0:	6022      	str	r2, [r4, #0]
 80132b2:	461a      	mov	r2, r3
 80132b4:	f7ed fa5e 	bl	8000774 <_lseek>
 80132b8:	1c43      	adds	r3, r0, #1
 80132ba:	d102      	bne.n	80132c2 <_lseek_r+0x1e>
 80132bc:	6823      	ldr	r3, [r4, #0]
 80132be:	b103      	cbz	r3, 80132c2 <_lseek_r+0x1e>
 80132c0:	602b      	str	r3, [r5, #0]
 80132c2:	bd38      	pop	{r3, r4, r5, pc}
 80132c4:	24004cd0 	.word	0x24004cd0

080132c8 <_read_r>:
 80132c8:	b538      	push	{r3, r4, r5, lr}
 80132ca:	4c07      	ldr	r4, [pc, #28]	; (80132e8 <_read_r+0x20>)
 80132cc:	4605      	mov	r5, r0
 80132ce:	4608      	mov	r0, r1
 80132d0:	4611      	mov	r1, r2
 80132d2:	2200      	movs	r2, #0
 80132d4:	6022      	str	r2, [r4, #0]
 80132d6:	461a      	mov	r2, r3
 80132d8:	f7ed fa0b 	bl	80006f2 <_read>
 80132dc:	1c43      	adds	r3, r0, #1
 80132de:	d102      	bne.n	80132e6 <_read_r+0x1e>
 80132e0:	6823      	ldr	r3, [r4, #0]
 80132e2:	b103      	cbz	r3, 80132e6 <_read_r+0x1e>
 80132e4:	602b      	str	r3, [r5, #0]
 80132e6:	bd38      	pop	{r3, r4, r5, pc}
 80132e8:	24004cd0 	.word	0x24004cd0

080132ec <_init>:
 80132ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ee:	bf00      	nop
 80132f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132f2:	bc08      	pop	{r3}
 80132f4:	469e      	mov	lr, r3
 80132f6:	4770      	bx	lr

080132f8 <_fini>:
 80132f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132fa:	bf00      	nop
 80132fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132fe:	bc08      	pop	{r3}
 8013300:	469e      	mov	lr, r3
 8013302:	4770      	bx	lr
